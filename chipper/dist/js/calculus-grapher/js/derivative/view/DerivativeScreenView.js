// Copyright 2020-2023, University of Colorado Boulder

/**
 * DerivativeScreenView is the top-level view for the 'Derivative' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import calculusGrapher from '../../calculusGrapher.js';
import CalculusGrapherScreenView from '../../common/view/CalculusGrapherScreenView.js';
import SlopeOfTangentAccordionBox from '../../common/view/SlopeOfTangentAccordionBox.js';
import TangentCheckbox from '../../common/view/TangentCheckbox.js';
import Multilink from '../../../../axon/js/Multilink.js';
export default class DerivativeScreenView extends CalculusGrapherScreenView {
  constructor(model, providedOptions) {
    const options = optionize()({
      // CalculusGrapherScreenViewOptions
      controlPanelOptions: {
        hasSmoothButton: false
      }
    }, providedOptions);
    super(model, options);

    // Add decorations to the graphs for the TangentScrubber.
    this.graphsNode.addTangentView(model.tangentScrubber, model.predictEnabledProperty);

    // The accordion box titled 'Slope Of Tangent'
    const slopeOfTangentAccordionBox = new SlopeOfTangentAccordionBox(model.tangentScrubber, model.predictEnabledProperty, {
      tandem: options.tandem.createTandem('slopeOfTangentAccordionBox')
    });
    this.screenViewRootNode.addChild(slopeOfTangentAccordionBox);

    // Center slopeOfTangentAccordionBox in the negative space to the left of graphNode, top-aligned with graphNode.y.
    Multilink.multilink([this.graphsNode.boundsProperty, slopeOfTangentAccordionBox.boundsProperty], () => {
      const eyeToggleButtonLeft = this.graphsNode.x + this.graphsNode.getEyeToggleButtonXOffset();
      slopeOfTangentAccordionBox.centerX = this.layoutBounds.left + (eyeToggleButtonLeft - this.layoutBounds.left) / 2;
      slopeOfTangentAccordionBox.top = this.graphsNode.y + this.graphsNode.originalGraphNode.y;
    });

    // Add 'Tangent' checkbox to the top of the checkbox group.
    const tangentCheckbox = new TangentCheckbox(model.tangentScrubber.visibleProperty, model.predictEnabledProperty, this.checkboxGroup.tandem.createTandem('tangentCheckbox'));
    this.checkboxGroup.insertChild(0, tangentCheckbox);
    this.resetDerivativeScreenView = () => {
      slopeOfTangentAccordionBox.reset();
    };
  }
  reset() {
    this.resetDerivativeScreenView();
    super.reset();
  }
}
calculusGrapher.register('DerivativeScreenView', DerivativeScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3IiwiU2xvcGVPZlRhbmdlbnRBY2NvcmRpb25Cb3giLCJUYW5nZW50Q2hlY2tib3giLCJNdWx0aWxpbmsiLCJEZXJpdmF0aXZlU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY29udHJvbFBhbmVsT3B0aW9ucyIsImhhc1Ntb290aEJ1dHRvbiIsImdyYXBoc05vZGUiLCJhZGRUYW5nZW50VmlldyIsInRhbmdlbnRTY3J1YmJlciIsInByZWRpY3RFbmFibGVkUHJvcGVydHkiLCJzbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInNjcmVlblZpZXdSb290Tm9kZSIsImFkZENoaWxkIiwibXVsdGlsaW5rIiwiYm91bmRzUHJvcGVydHkiLCJleWVUb2dnbGVCdXR0b25MZWZ0IiwieCIsImdldEV5ZVRvZ2dsZUJ1dHRvblhPZmZzZXQiLCJjZW50ZXJYIiwibGF5b3V0Qm91bmRzIiwibGVmdCIsInRvcCIsInkiLCJvcmlnaW5hbEdyYXBoTm9kZSIsInRhbmdlbnRDaGVja2JveCIsInZpc2libGVQcm9wZXJ0eSIsImNoZWNrYm94R3JvdXAiLCJpbnNlcnRDaGlsZCIsInJlc2V0RGVyaXZhdGl2ZVNjcmVlblZpZXciLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGVyaXZhdGl2ZVNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVyaXZhdGl2ZVNjcmVlblZpZXcgaXMgdGhlIHRvcC1sZXZlbCB2aWV3IGZvciB0aGUgJ0Rlcml2YXRpdmUnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uLy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3LCB7IENhbGN1bHVzR3JhcGhlclNjcmVlblZpZXdPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQ2FsY3VsdXNHcmFwaGVyU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBEZXJpdmF0aXZlTW9kZWwgZnJvbSAnLi4vbW9kZWwvRGVyaXZhdGl2ZU1vZGVsLmpzJztcclxuaW1wb3J0IFNsb3BlT2ZUYW5nZW50QWNjb3JkaW9uQm94IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1Nsb3BlT2ZUYW5nZW50QWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFRhbmdlbnRDaGVja2JveCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9UYW5nZW50Q2hlY2tib3guanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBEZXJpdmF0aXZlU2NyZWVuVmlld09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVyaXZhdGl2ZVNjcmVlblZpZXcgZXh0ZW5kcyBDYWxjdWx1c0dyYXBoZXJTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSByZXNldERlcml2YXRpdmVTY3JlZW5WaWV3OiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIG1vZGVsOiBEZXJpdmF0aXZlTW9kZWwsIHByb3ZpZGVkT3B0aW9uczogRGVyaXZhdGl2ZVNjcmVlblZpZXdPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RGVyaXZhdGl2ZVNjcmVlblZpZXdPcHRpb25zLCBTZWxmT3B0aW9ucywgQ2FsY3VsdXNHcmFwaGVyU2NyZWVuVmlld09wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIENhbGN1bHVzR3JhcGhlclNjcmVlblZpZXdPcHRpb25zXHJcbiAgICAgIGNvbnRyb2xQYW5lbE9wdGlvbnM6IHtcclxuICAgICAgICBoYXNTbW9vdGhCdXR0b246IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBtb2RlbCwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIEFkZCBkZWNvcmF0aW9ucyB0byB0aGUgZ3JhcGhzIGZvciB0aGUgVGFuZ2VudFNjcnViYmVyLlxyXG4gICAgdGhpcy5ncmFwaHNOb2RlLmFkZFRhbmdlbnRWaWV3KCBtb2RlbC50YW5nZW50U2NydWJiZXIsIG1vZGVsLnByZWRpY3RFbmFibGVkUHJvcGVydHkgKTtcclxuXHJcbiAgICAvLyBUaGUgYWNjb3JkaW9uIGJveCB0aXRsZWQgJ1Nsb3BlIE9mIFRhbmdlbnQnXHJcbiAgICBjb25zdCBzbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveCA9IG5ldyBTbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveCggbW9kZWwudGFuZ2VudFNjcnViYmVyLCBtb2RlbC5wcmVkaWN0RW5hYmxlZFByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2xvcGVPZlRhbmdlbnRBY2NvcmRpb25Cb3gnIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMuc2NyZWVuVmlld1Jvb3ROb2RlLmFkZENoaWxkKCBzbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveCApO1xyXG5cclxuICAgIC8vIENlbnRlciBzbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveCBpbiB0aGUgbmVnYXRpdmUgc3BhY2UgdG8gdGhlIGxlZnQgb2YgZ3JhcGhOb2RlLCB0b3AtYWxpZ25lZCB3aXRoIGdyYXBoTm9kZS55LlxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyB0aGlzLmdyYXBoc05vZGUuYm91bmRzUHJvcGVydHksIHNsb3BlT2ZUYW5nZW50QWNjb3JkaW9uQm94LmJvdW5kc1Byb3BlcnR5IF0sXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBjb25zdCBleWVUb2dnbGVCdXR0b25MZWZ0ID0gdGhpcy5ncmFwaHNOb2RlLnggKyB0aGlzLmdyYXBoc05vZGUuZ2V0RXllVG9nZ2xlQnV0dG9uWE9mZnNldCgpO1xyXG4gICAgICAgIHNsb3BlT2ZUYW5nZW50QWNjb3JkaW9uQm94LmNlbnRlclggPSB0aGlzLmxheW91dEJvdW5kcy5sZWZ0ICsgKCBleWVUb2dnbGVCdXR0b25MZWZ0IC0gdGhpcy5sYXlvdXRCb3VuZHMubGVmdCApIC8gMjtcclxuICAgICAgICBzbG9wZU9mVGFuZ2VudEFjY29yZGlvbkJveC50b3AgPSB0aGlzLmdyYXBoc05vZGUueSArIHRoaXMuZ3JhcGhzTm9kZS5vcmlnaW5hbEdyYXBoTm9kZS55O1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gQWRkICdUYW5nZW50JyBjaGVja2JveCB0byB0aGUgdG9wIG9mIHRoZSBjaGVja2JveCBncm91cC5cclxuICAgIGNvbnN0IHRhbmdlbnRDaGVja2JveCA9IG5ldyBUYW5nZW50Q2hlY2tib3goIG1vZGVsLnRhbmdlbnRTY3J1YmJlci52aXNpYmxlUHJvcGVydHksIG1vZGVsLnByZWRpY3RFbmFibGVkUHJvcGVydHksXHJcbiAgICAgIHRoaXMuY2hlY2tib3hHcm91cC50YW5kZW0uY3JlYXRlVGFuZGVtKCAndGFuZ2VudENoZWNrYm94JyApICk7XHJcbiAgICB0aGlzLmNoZWNrYm94R3JvdXAuaW5zZXJ0Q2hpbGQoIDAsIHRhbmdlbnRDaGVja2JveCApO1xyXG5cclxuICAgIHRoaXMucmVzZXREZXJpdmF0aXZlU2NyZWVuVmlldyA9ICgpID0+IHtcclxuICAgICAgc2xvcGVPZlRhbmdlbnRBY2NvcmRpb25Cb3gucmVzZXQoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlc2V0RGVyaXZhdGl2ZVNjcmVlblZpZXcoKTtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0Rlcml2YXRpdmVTY3JlZW5WaWV3JywgRGVyaXZhdGl2ZVNjcmVlblZpZXcgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxlQUFlLE1BQU0sMEJBQTBCO0FBQ3RELE9BQU9DLHlCQUF5QixNQUE0QyxnREFBZ0Q7QUFFNUgsT0FBT0MsMEJBQTBCLE1BQU0saURBQWlEO0FBRXhGLE9BQU9DLGVBQWUsTUFBTSxzQ0FBc0M7QUFDbEUsT0FBT0MsU0FBUyxNQUFNLGtDQUFrQztBQU14RCxlQUFlLE1BQU1DLG9CQUFvQixTQUFTSix5QkFBeUIsQ0FBQztFQUluRUssV0FBV0EsQ0FBRUMsS0FBc0IsRUFBRUMsZUFBNEMsRUFBRztJQUV6RixNQUFNQyxPQUFPLEdBQUdWLFNBQVMsQ0FBNkUsQ0FBQyxDQUFFO01BRXZHO01BQ0FXLG1CQUFtQixFQUFFO1FBQ25CQyxlQUFlLEVBQUU7TUFDbkI7SUFDRixDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRCxLQUFLLEVBQUVFLE9BQVEsQ0FBQzs7SUFFdkI7SUFDQSxJQUFJLENBQUNHLFVBQVUsQ0FBQ0MsY0FBYyxDQUFFTixLQUFLLENBQUNPLGVBQWUsRUFBRVAsS0FBSyxDQUFDUSxzQkFBdUIsQ0FBQzs7SUFFckY7SUFDQSxNQUFNQywwQkFBMEIsR0FBRyxJQUFJZCwwQkFBMEIsQ0FBRUssS0FBSyxDQUFDTyxlQUFlLEVBQUVQLEtBQUssQ0FBQ1Esc0JBQXNCLEVBQUU7TUFDdEhFLE1BQU0sRUFBRVIsT0FBTyxDQUFDUSxNQUFNLENBQUNDLFlBQVksQ0FBRSw0QkFBNkI7SUFDcEUsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0MsUUFBUSxDQUFFSiwwQkFBMkIsQ0FBQzs7SUFFOUQ7SUFDQVosU0FBUyxDQUFDaUIsU0FBUyxDQUFFLENBQUUsSUFBSSxDQUFDVCxVQUFVLENBQUNVLGNBQWMsRUFBRU4sMEJBQTBCLENBQUNNLGNBQWMsQ0FBRSxFQUNoRyxNQUFNO01BQ0osTUFBTUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDWCxVQUFVLENBQUNZLENBQUMsR0FBRyxJQUFJLENBQUNaLFVBQVUsQ0FBQ2EseUJBQXlCLENBQUMsQ0FBQztNQUMzRlQsMEJBQTBCLENBQUNVLE9BQU8sR0FBRyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsSUFBSSxHQUFHLENBQUVMLG1CQUFtQixHQUFHLElBQUksQ0FBQ0ksWUFBWSxDQUFDQyxJQUFJLElBQUssQ0FBQztNQUNsSFosMEJBQTBCLENBQUNhLEdBQUcsR0FBRyxJQUFJLENBQUNqQixVQUFVLENBQUNrQixDQUFDLEdBQUcsSUFBSSxDQUFDbEIsVUFBVSxDQUFDbUIsaUJBQWlCLENBQUNELENBQUM7SUFDMUYsQ0FBRSxDQUFDOztJQUVMO0lBQ0EsTUFBTUUsZUFBZSxHQUFHLElBQUk3QixlQUFlLENBQUVJLEtBQUssQ0FBQ08sZUFBZSxDQUFDbUIsZUFBZSxFQUFFMUIsS0FBSyxDQUFDUSxzQkFBc0IsRUFDOUcsSUFBSSxDQUFDbUIsYUFBYSxDQUFDakIsTUFBTSxDQUFDQyxZQUFZLENBQUUsaUJBQWtCLENBQUUsQ0FBQztJQUMvRCxJQUFJLENBQUNnQixhQUFhLENBQUNDLFdBQVcsQ0FBRSxDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEQsSUFBSSxDQUFDSSx5QkFBeUIsR0FBRyxNQUFNO01BQ3JDcEIsMEJBQTBCLENBQUNxQixLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0VBQ0g7RUFFZ0JBLEtBQUtBLENBQUEsRUFBUztJQUM1QixJQUFJLENBQUNELHlCQUF5QixDQUFDLENBQUM7SUFDaEMsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNmO0FBQ0Y7QUFDQXJDLGVBQWUsQ0FBQ3NDLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRWpDLG9CQUFxQixDQUFDIn0=