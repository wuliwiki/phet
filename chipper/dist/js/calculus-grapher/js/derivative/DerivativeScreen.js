// Copyright 2020-2023, University of Colorado Boulder

/**
 * The 'Derivative Lab' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Screen from '../../../joist/js/Screen.js';
import calculusGrapher from '../calculusGrapher.js';
import CalculusGrapherStrings from '../CalculusGrapherStrings.js';
import CalculusGrapherColors from '../common/CalculusGrapherColors.js';
import DerivativeModel from './model/DerivativeModel.js';
import DerivativeScreenView from './view/DerivativeScreenView.js';
import GraphType from '../common/model/GraphType.js';
import GraphSet from '../common/model/GraphSet.js';
import CalculusGrapherScreenIconFactory from '../common/view/CalculusGrapherScreenIconFactory.js';
export default class DerivativeScreen extends Screen {
  constructor(tandem) {
    const graphSets = [new GraphSet([GraphType.ORIGINAL, GraphType.DERIVATIVE])];
    const createModel = () => new DerivativeModel({
      graphSets: graphSets,
      tandem: tandem.createTandem('model')
    });
    const createView = model => new DerivativeScreenView(model, {
      tandem: tandem.createTandem('view')
    });
    super(createModel, createView, {
      name: CalculusGrapherStrings.screen.derivativeStringProperty,
      backgroundColorProperty: CalculusGrapherColors.screenBackgroundColorProperty,
      homeScreenIcon: CalculusGrapherScreenIconFactory.createDerivativeScreenIcon(),
      tandem: tandem
    });
  }
}
calculusGrapher.register('DerivativeScreen', DerivativeScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiRGVyaXZhdGl2ZU1vZGVsIiwiRGVyaXZhdGl2ZVNjcmVlblZpZXciLCJHcmFwaFR5cGUiLCJHcmFwaFNldCIsIkNhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5IiwiRGVyaXZhdGl2ZVNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiZ3JhcGhTZXRzIiwiT1JJR0lOQUwiLCJERVJJVkFUSVZFIiwiY3JlYXRlTW9kZWwiLCJjcmVhdGVUYW5kZW0iLCJjcmVhdGVWaWV3IiwibW9kZWwiLCJuYW1lIiwic2NyZWVuIiwiZGVyaXZhdGl2ZVN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlRGVyaXZhdGl2ZVNjcmVlbkljb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRlcml2YXRpdmVTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdEZXJpdmF0aXZlIExhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgY2FsY3VsdXNHcmFwaGVyIGZyb20gJy4uL2NhbGN1bHVzR3JhcGhlci5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIGZyb20gJy4uL0NhbGN1bHVzR3JhcGhlclN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIGZyb20gJy4uL2NvbW1vbi9DYWxjdWx1c0dyYXBoZXJDb2xvcnMuanMnO1xyXG5pbXBvcnQgRGVyaXZhdGl2ZU1vZGVsIGZyb20gJy4vbW9kZWwvRGVyaXZhdGl2ZU1vZGVsLmpzJztcclxuaW1wb3J0IERlcml2YXRpdmVTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9EZXJpdmF0aXZlU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBHcmFwaFR5cGUgZnJvbSAnLi4vY29tbW9uL21vZGVsL0dyYXBoVHlwZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHcmFwaFNldCBmcm9tICcuLi9jb21tb24vbW9kZWwvR3JhcGhTZXQuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3ZpZXcvQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVyaXZhdGl2ZVNjcmVlbiBleHRlbmRzIFNjcmVlbjxEZXJpdmF0aXZlTW9kZWwsIERlcml2YXRpdmVTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgZ3JhcGhTZXRzOiBHcmFwaFNldFtdID0gW1xyXG4gICAgICBuZXcgR3JhcGhTZXQoIFsgR3JhcGhUeXBlLk9SSUdJTkFMLCBHcmFwaFR5cGUuREVSSVZBVElWRSBdIClcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTW9kZWwgPSAoKSA9PiBuZXcgRGVyaXZhdGl2ZU1vZGVsKCB7XHJcbiAgICAgIGdyYXBoU2V0czogZ3JhcGhTZXRzLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZVZpZXcgPSAoIG1vZGVsOiBEZXJpdmF0aXZlTW9kZWwgKSA9PiBuZXcgRGVyaXZhdGl2ZVNjcmVlblZpZXcoIG1vZGVsLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIHtcclxuICAgICAgbmFtZTogQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5zY3JlZW4uZGVyaXZhdGl2ZVN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogQ2FsY3VsdXNHcmFwaGVyQ29sb3JzLnNjcmVlbkJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkuY3JlYXRlRGVyaXZhdGl2ZVNjcmVlbkljb24oKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmNhbGN1bHVzR3JhcGhlci5yZWdpc3RlciggJ0Rlcml2YXRpdmVTY3JlZW4nLCBEZXJpdmF0aXZlU2NyZWVuICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFzQixNQUFNLDhCQUE4QjtBQUNqRSxPQUFPQyxxQkFBcUIsTUFBTSxvQ0FBb0M7QUFDdEUsT0FBT0MsZUFBZSxNQUFNLDRCQUE0QjtBQUN4RCxPQUFPQyxvQkFBb0IsTUFBTSxnQ0FBZ0M7QUFDakUsT0FBT0MsU0FBUyxNQUFNLDhCQUE4QjtBQUVwRCxPQUFPQyxRQUFRLE1BQU0sNkJBQTZCO0FBQ2xELE9BQU9DLGdDQUFnQyxNQUFNLG9EQUFvRDtBQUVqRyxlQUFlLE1BQU1DLGdCQUFnQixTQUFTVCxNQUFNLENBQXdDO0VBRW5GVSxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsTUFBTUMsU0FBcUIsR0FBRyxDQUM1QixJQUFJTCxRQUFRLENBQUUsQ0FBRUQsU0FBUyxDQUFDTyxRQUFRLEVBQUVQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFHLENBQUMsQ0FDN0Q7SUFFRCxNQUFNQyxXQUFXLEdBQUdBLENBQUEsS0FBTSxJQUFJWCxlQUFlLENBQUU7TUFDN0NRLFNBQVMsRUFBRUEsU0FBUztNQUNwQkQsTUFBTSxFQUFFQSxNQUFNLENBQUNLLFlBQVksQ0FBRSxPQUFRO0lBQ3ZDLENBQUUsQ0FBQztJQUVILE1BQU1DLFVBQVUsR0FBS0MsS0FBc0IsSUFBTSxJQUFJYixvQkFBb0IsQ0FBRWEsS0FBSyxFQUFFO01BQ2hGUCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLE1BQU87SUFDdEMsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRCxXQUFXLEVBQUVFLFVBQVUsRUFBRTtNQUM5QkUsSUFBSSxFQUFFakIsc0JBQXNCLENBQUNrQixNQUFNLENBQUNDLHdCQUF3QjtNQUM1REMsdUJBQXVCLEVBQUVuQixxQkFBcUIsQ0FBQ29CLDZCQUE2QjtNQUM1RUMsY0FBYyxFQUFFaEIsZ0NBQWdDLENBQUNpQiwwQkFBMEIsQ0FBQyxDQUFDO01BQzdFZCxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBVixlQUFlLENBQUN5QixRQUFRLENBQUUsa0JBQWtCLEVBQUVqQixnQkFBaUIsQ0FBQyJ9