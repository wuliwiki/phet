// Copyright 2020-2023, University of Colorado Boulder

/**
 * The 'Advanced' screen.
 *
 * @author Brandon Li
 * @author Martin Veillette
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Screen from '../../../joist/js/Screen.js';
import calculusGrapher from '../calculusGrapher.js';
import CalculusGrapherStrings from '../CalculusGrapherStrings.js';
import CalculusGrapherColors from '../common/CalculusGrapherColors.js';
import AdvancedModel from './model/AdvancedModel.js';
import AdvancedScreenView from './view/AdvancedScreenView.js';
import GraphType from '../common/model/GraphType.js';
import GraphSetRadioButtonGroup from '../common/view/GraphSetRadioButtonGroup.js';
import { AlignGroup } from '../../../scenery/js/imports.js';
import GraphSet from '../common/model/GraphSet.js';
import CalculusGrapherScreenIconFactory from '../common/view/CalculusGrapherScreenIconFactory.js';
export default class AdvancedScreen extends Screen {
  constructor(tandem) {
    const modelTandem = tandem.createTandem('model');

    // In the order that they will appear in radio buttons
    const graphSets = [new GraphSet([GraphType.INTEGRAL, GraphType.ORIGINAL], {
      tandem: modelTandem.createTandem('graphSet0'),
      phetioDocumentation: 'Choosing this GraphSet shows the integral and original graphs.'
    }), new GraphSet([GraphType.ORIGINAL, GraphType.DERIVATIVE], {
      tandem: modelTandem.createTandem('graphSet1'),
      phetioDocumentation: 'Choosing this GraphSet shows the original and derivative graphs.'
    })];
    const labelAlignGroup = new AlignGroup(); // to give radio-button labels the same effective size
    const graphSetRadioButtonGroupItems = [GraphSetRadioButtonGroup.createItem(graphSets[0], GraphType.INTEGRAL, labelAlignGroup), GraphSetRadioButtonGroup.createItem(graphSets[1], GraphType.DERIVATIVE, labelAlignGroup)];
    const createModel = () => new AdvancedModel({
      graphSets: graphSets,
      graphSet: graphSets[1],
      // see https://github.com/phetsims/calculus-grapher/issues/250
      tandem: modelTandem
    });
    const createView = model => new AdvancedScreenView(model, {
      graphSetRadioButtonGroupItems: graphSetRadioButtonGroupItems,
      tandem: tandem.createTandem('view')
    });
    super(createModel, createView, {
      name: CalculusGrapherStrings.screen.advancedStringProperty,
      backgroundColorProperty: CalculusGrapherColors.screenBackgroundColorProperty,
      homeScreenIcon: CalculusGrapherScreenIconFactory.createAdvancedScreenIcon(),
      tandem: tandem
    });
  }
}
calculusGrapher.register('AdvancedScreen', AdvancedScreen);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJjYWxjdWx1c0dyYXBoZXIiLCJDYWxjdWx1c0dyYXBoZXJTdHJpbmdzIiwiQ2FsY3VsdXNHcmFwaGVyQ29sb3JzIiwiQWR2YW5jZWRNb2RlbCIsIkFkdmFuY2VkU2NyZWVuVmlldyIsIkdyYXBoVHlwZSIsIkdyYXBoU2V0UmFkaW9CdXR0b25Hcm91cCIsIkFsaWduR3JvdXAiLCJHcmFwaFNldCIsIkNhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5IiwiQWR2YW5jZWRTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm1vZGVsVGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwiZ3JhcGhTZXRzIiwiSU5URUdSQUwiLCJPUklHSU5BTCIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJERVJJVkFUSVZFIiwibGFiZWxBbGlnbkdyb3VwIiwiZ3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwSXRlbXMiLCJjcmVhdGVJdGVtIiwiY3JlYXRlTW9kZWwiLCJncmFwaFNldCIsImNyZWF0ZVZpZXciLCJtb2RlbCIsIm5hbWUiLCJzY3JlZW4iLCJhZHZhbmNlZFN0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiY3JlYXRlQWR2YW5jZWRTY3JlZW5JY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBZHZhbmNlZFNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0FkdmFuY2VkJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIE1hcnRpbiBWZWlsbGV0dGVcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBjYWxjdWx1c0dyYXBoZXIgZnJvbSAnLi4vY2FsY3VsdXNHcmFwaGVyLmpzJztcclxuaW1wb3J0IENhbGN1bHVzR3JhcGhlclN0cmluZ3MgZnJvbSAnLi4vQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDYWxjdWx1c0dyYXBoZXJDb2xvcnMgZnJvbSAnLi4vY29tbW9uL0NhbGN1bHVzR3JhcGhlckNvbG9ycy5qcyc7XHJcbmltcG9ydCBBZHZhbmNlZE1vZGVsIGZyb20gJy4vbW9kZWwvQWR2YW5jZWRNb2RlbC5qcyc7XHJcbmltcG9ydCBBZHZhbmNlZFNjcmVlblZpZXcgZnJvbSAnLi92aWV3L0FkdmFuY2VkU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBHcmFwaFR5cGUgZnJvbSAnLi4vY29tbW9uL21vZGVsL0dyYXBoVHlwZS5qcyc7XHJcbmltcG9ydCBHcmFwaFNldFJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi4vY29tbW9uL3ZpZXcvR3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBHcmFwaFNldCBmcm9tICcuLi9jb21tb24vbW9kZWwvR3JhcGhTZXQuanMnO1xyXG5pbXBvcnQgQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3ZpZXcvQ2FsY3VsdXNHcmFwaGVyU2NyZWVuSWNvbkZhY3RvcnkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWR2YW5jZWRTY3JlZW4gZXh0ZW5kcyBTY3JlZW48QWR2YW5jZWRNb2RlbCwgQWR2YW5jZWRTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgbW9kZWxUYW5kZW0gPSB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICk7XHJcblxyXG4gICAgLy8gSW4gdGhlIG9yZGVyIHRoYXQgdGhleSB3aWxsIGFwcGVhciBpbiByYWRpbyBidXR0b25zXHJcbiAgICBjb25zdCBncmFwaFNldHM6IEdyYXBoU2V0W10gPSBbXHJcbiAgICAgIG5ldyBHcmFwaFNldCggWyBHcmFwaFR5cGUuSU5URUdSQUwsIEdyYXBoVHlwZS5PUklHSU5BTCBdLCB7XHJcbiAgICAgICAgdGFuZGVtOiBtb2RlbFRhbmRlbS5jcmVhdGVUYW5kZW0oICdncmFwaFNldDAnICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0Nob29zaW5nIHRoaXMgR3JhcGhTZXQgc2hvd3MgdGhlIGludGVncmFsIGFuZCBvcmlnaW5hbCBncmFwaHMuJ1xyXG4gICAgICB9ICksXHJcbiAgICAgIG5ldyBHcmFwaFNldCggWyBHcmFwaFR5cGUuT1JJR0lOQUwsIEdyYXBoVHlwZS5ERVJJVkFUSVZFIF0sIHtcclxuICAgICAgICB0YW5kZW06IG1vZGVsVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dyYXBoU2V0MScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnQ2hvb3NpbmcgdGhpcyBHcmFwaFNldCBzaG93cyB0aGUgb3JpZ2luYWwgYW5kIGRlcml2YXRpdmUgZ3JhcGhzLidcclxuICAgICAgfSApXHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsQWxpZ25Hcm91cCA9IG5ldyBBbGlnbkdyb3VwKCk7IC8vIHRvIGdpdmUgcmFkaW8tYnV0dG9uIGxhYmVscyB0aGUgc2FtZSBlZmZlY3RpdmUgc2l6ZVxyXG4gICAgY29uc3QgZ3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwSXRlbXMgPSBbXHJcbiAgICAgIEdyYXBoU2V0UmFkaW9CdXR0b25Hcm91cC5jcmVhdGVJdGVtKCBncmFwaFNldHNbIDAgXSwgR3JhcGhUeXBlLklOVEVHUkFMLCBsYWJlbEFsaWduR3JvdXAgKSxcclxuICAgICAgR3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwLmNyZWF0ZUl0ZW0oIGdyYXBoU2V0c1sgMSBdLCBHcmFwaFR5cGUuREVSSVZBVElWRSwgbGFiZWxBbGlnbkdyb3VwIClcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgY3JlYXRlTW9kZWwgPSAoKSA9PiBuZXcgQWR2YW5jZWRNb2RlbCgge1xyXG4gICAgICBncmFwaFNldHM6IGdyYXBoU2V0cyxcclxuICAgICAgZ3JhcGhTZXQ6IGdyYXBoU2V0c1sgMSBdLCAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NhbGN1bHVzLWdyYXBoZXIvaXNzdWVzLzI1MFxyXG4gICAgICB0YW5kZW06IG1vZGVsVGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlVmlldyA9ICggbW9kZWw6IEFkdmFuY2VkTW9kZWwgKSA9PiBuZXcgQWR2YW5jZWRTY3JlZW5WaWV3KCBtb2RlbCwge1xyXG4gICAgICBncmFwaFNldFJhZGlvQnV0dG9uR3JvdXBJdGVtczogZ3JhcGhTZXRSYWRpb0J1dHRvbkdyb3VwSXRlbXMsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY3JlYXRlTW9kZWwsIGNyZWF0ZVZpZXcsIHtcclxuICAgICAgbmFtZTogQ2FsY3VsdXNHcmFwaGVyU3RyaW5ncy5zY3JlZW4uYWR2YW5jZWRTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IENhbGN1bHVzR3JhcGhlckNvbG9ycy5zY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IENhbGN1bHVzR3JhcGhlclNjcmVlbkljb25GYWN0b3J5LmNyZWF0ZUFkdmFuY2VkU2NyZWVuSWNvbigpLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuY2FsY3VsdXNHcmFwaGVyLnJlZ2lzdGVyKCAnQWR2YW5jZWRTY3JlZW4nLCBBZHZhbmNlZFNjcmVlbiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFDakUsT0FBT0MscUJBQXFCLE1BQU0sb0NBQW9DO0FBQ3RFLE9BQU9DLGFBQWEsTUFBTSwwQkFBMEI7QUFDcEQsT0FBT0Msa0JBQWtCLE1BQU0sOEJBQThCO0FBQzdELE9BQU9DLFNBQVMsTUFBTSw4QkFBOEI7QUFDcEQsT0FBT0Msd0JBQXdCLE1BQU0sNENBQTRDO0FBQ2pGLFNBQVNDLFVBQVUsUUFBUSxnQ0FBZ0M7QUFFM0QsT0FBT0MsUUFBUSxNQUFNLDZCQUE2QjtBQUNsRCxPQUFPQyxnQ0FBZ0MsTUFBTSxvREFBb0Q7QUFFakcsZUFBZSxNQUFNQyxjQUFjLFNBQVNYLE1BQU0sQ0FBb0M7RUFFN0VZLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQyxNQUFNQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLE9BQVEsQ0FBQzs7SUFFbEQ7SUFDQSxNQUFNQyxTQUFxQixHQUFHLENBQzVCLElBQUlQLFFBQVEsQ0FBRSxDQUFFSCxTQUFTLENBQUNXLFFBQVEsRUFBRVgsU0FBUyxDQUFDWSxRQUFRLENBQUUsRUFBRTtNQUN4REwsTUFBTSxFQUFFQyxXQUFXLENBQUNDLFlBQVksQ0FBRSxXQUFZLENBQUM7TUFDL0NJLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQyxFQUNILElBQUlWLFFBQVEsQ0FBRSxDQUFFSCxTQUFTLENBQUNZLFFBQVEsRUFBRVosU0FBUyxDQUFDYyxVQUFVLENBQUUsRUFBRTtNQUMxRFAsTUFBTSxFQUFFQyxXQUFXLENBQUNDLFlBQVksQ0FBRSxXQUFZLENBQUM7TUFDL0NJLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQyxDQUNKO0lBRUQsTUFBTUUsZUFBZSxHQUFHLElBQUliLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNYyw2QkFBNkIsR0FBRyxDQUNwQ2Ysd0JBQXdCLENBQUNnQixVQUFVLENBQUVQLFNBQVMsQ0FBRSxDQUFDLENBQUUsRUFBRVYsU0FBUyxDQUFDVyxRQUFRLEVBQUVJLGVBQWdCLENBQUMsRUFDMUZkLHdCQUF3QixDQUFDZ0IsVUFBVSxDQUFFUCxTQUFTLENBQUUsQ0FBQyxDQUFFLEVBQUVWLFNBQVMsQ0FBQ2MsVUFBVSxFQUFFQyxlQUFnQixDQUFDLENBQzdGO0lBRUQsTUFBTUcsV0FBVyxHQUFHQSxDQUFBLEtBQU0sSUFBSXBCLGFBQWEsQ0FBRTtNQUMzQ1ksU0FBUyxFQUFFQSxTQUFTO01BQ3BCUyxRQUFRLEVBQUVULFNBQVMsQ0FBRSxDQUFDLENBQUU7TUFBRTtNQUMxQkgsTUFBTSxFQUFFQztJQUNWLENBQUUsQ0FBQztJQUVILE1BQU1ZLFVBQVUsR0FBS0MsS0FBb0IsSUFBTSxJQUFJdEIsa0JBQWtCLENBQUVzQixLQUFLLEVBQUU7TUFDNUVMLDZCQUE2QixFQUFFQSw2QkFBNkI7TUFDNURULE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsTUFBTztJQUN0QyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVTLFdBQVcsRUFBRUUsVUFBVSxFQUFFO01BQzlCRSxJQUFJLEVBQUUxQixzQkFBc0IsQ0FBQzJCLE1BQU0sQ0FBQ0Msc0JBQXNCO01BQzFEQyx1QkFBdUIsRUFBRTVCLHFCQUFxQixDQUFDNkIsNkJBQTZCO01BQzVFQyxjQUFjLEVBQUV2QixnQ0FBZ0MsQ0FBQ3dCLHdCQUF3QixDQUFDLENBQUM7TUFDM0VyQixNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBWixlQUFlLENBQUNrQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUV4QixjQUFlLENBQUMifQ==