// Copyright 2013-2021, University of Colorado Boulder

/**
 * The region where fractions can be dragged to be compared, in the center top of the screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import { Rectangle } from '../../../../scenery/js/imports.js';
import fractionComparison from '../../fractionComparison.js';
import CompareSeparateButton from './CompareSeparateButton.js';
class ComparisonRegion extends Rectangle {
  /**
   * @param {function} compareButtonPressed
   * @param {function} separateButtonPressed
   * @param {Property.<boolean>} compareBothProperty
   * @param {Property.<boolean>} eitherCompareProperty
   * @param {Object} [options]
   */
  constructor(compareButtonPressed, separateButtonPressed, compareBothProperty, eitherCompareProperty, options) {
    const comparisonRegionLength = 220;
    super(0, 0, comparisonRegionLength, comparisonRegionLength, 10, 10, {
      lineStroke: 1,
      fill: 'white'
    });
    this.addChild(new CompareSeparateButton(compareButtonPressed, separateButtonPressed, compareBothProperty, {
      centerX: this.bounds.centerX,
      bottom: this.bottom - 5
    }));
    const target = new Rectangle(0, 0, 180, 100, {
      stroke: 'red',
      lineWidth: 1,
      lineDash: [6, 5],
      centerX: this.bounds.centerX,
      top: 59
    });
    this.addChild(target);

    //Only show the target region if both shapes are not in the compare region
    eitherCompareProperty.link(eitherCompare => {
      target.visible = !eitherCompare;
    });
    this.mutate(options);
  }
}
fractionComparison.register('ComparisonRegion', ComparisonRegion);
export default ComparisonRegion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5nbGUiLCJmcmFjdGlvbkNvbXBhcmlzb24iLCJDb21wYXJlU2VwYXJhdGVCdXR0b24iLCJDb21wYXJpc29uUmVnaW9uIiwiY29uc3RydWN0b3IiLCJjb21wYXJlQnV0dG9uUHJlc3NlZCIsInNlcGFyYXRlQnV0dG9uUHJlc3NlZCIsImNvbXBhcmVCb3RoUHJvcGVydHkiLCJlaXRoZXJDb21wYXJlUHJvcGVydHkiLCJvcHRpb25zIiwiY29tcGFyaXNvblJlZ2lvbkxlbmd0aCIsImxpbmVTdHJva2UiLCJmaWxsIiwiYWRkQ2hpbGQiLCJjZW50ZXJYIiwiYm91bmRzIiwiYm90dG9tIiwidGFyZ2V0Iiwic3Ryb2tlIiwibGluZVdpZHRoIiwibGluZURhc2giLCJ0b3AiLCJsaW5rIiwiZWl0aGVyQ29tcGFyZSIsInZpc2libGUiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbXBhcmlzb25SZWdpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIHJlZ2lvbiB3aGVyZSBmcmFjdGlvbnMgY2FuIGJlIGRyYWdnZWQgdG8gYmUgY29tcGFyZWQsIGluIHRoZSBjZW50ZXIgdG9wIG9mIHRoZSBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uQ29tcGFyaXNvbiBmcm9tICcuLi8uLi9mcmFjdGlvbkNvbXBhcmlzb24uanMnO1xyXG5pbXBvcnQgQ29tcGFyZVNlcGFyYXRlQnV0dG9uIGZyb20gJy4vQ29tcGFyZVNlcGFyYXRlQnV0dG9uLmpzJztcclxuXHJcbmNsYXNzIENvbXBhcmlzb25SZWdpb24gZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJlQnV0dG9uUHJlc3NlZFxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNlcGFyYXRlQnV0dG9uUHJlc3NlZFxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBjb21wYXJlQm90aFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Ym9vbGVhbj59IGVpdGhlckNvbXBhcmVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggY29tcGFyZUJ1dHRvblByZXNzZWQsIHNlcGFyYXRlQnV0dG9uUHJlc3NlZCwgY29tcGFyZUJvdGhQcm9wZXJ0eSwgZWl0aGVyQ29tcGFyZVByb3BlcnR5LCBvcHRpb25zICkge1xyXG4gICAgY29uc3QgY29tcGFyaXNvblJlZ2lvbkxlbmd0aCA9IDIyMDtcclxuICAgIHN1cGVyKCAwLCAwLCBjb21wYXJpc29uUmVnaW9uTGVuZ3RoLCBjb21wYXJpc29uUmVnaW9uTGVuZ3RoLCAxMCwgMTAsIHtcclxuICAgICAgbGluZVN0cm9rZTogMSxcclxuICAgICAgZmlsbDogJ3doaXRlJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBDb21wYXJlU2VwYXJhdGVCdXR0b24oIGNvbXBhcmVCdXR0b25QcmVzc2VkLCBzZXBhcmF0ZUJ1dHRvblByZXNzZWQsIGNvbXBhcmVCb3RoUHJvcGVydHksIHtcclxuICAgICAgY2VudGVyWDogdGhpcy5ib3VuZHMuY2VudGVyWCxcclxuICAgICAgYm90dG9tOiB0aGlzLmJvdHRvbSAtIDVcclxuICAgIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDE4MCwgMTAwLCB7XHJcbiAgICAgIHN0cm9rZTogJ3JlZCcsXHJcbiAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgbGluZURhc2g6IFsgNiwgNSBdLFxyXG4gICAgICBjZW50ZXJYOiB0aGlzLmJvdW5kcy5jZW50ZXJYLFxyXG4gICAgICB0b3A6IDU5XHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCB0YXJnZXQgKTtcclxuXHJcbiAgICAvL09ubHkgc2hvdyB0aGUgdGFyZ2V0IHJlZ2lvbiBpZiBib3RoIHNoYXBlcyBhcmUgbm90IGluIHRoZSBjb21wYXJlIHJlZ2lvblxyXG4gICAgZWl0aGVyQ29tcGFyZVByb3BlcnR5LmxpbmsoIGVpdGhlckNvbXBhcmUgPT4ge1xyXG4gICAgICB0YXJnZXQudmlzaWJsZSA9ICFlaXRoZXJDb21wYXJlO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5mcmFjdGlvbkNvbXBhcmlzb24ucmVnaXN0ZXIoICdDb21wYXJpc29uUmVnaW9uJywgQ29tcGFyaXNvblJlZ2lvbiApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29tcGFyaXNvblJlZ2lvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsU0FBUyxRQUFRLG1DQUFtQztBQUM3RCxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRTlELE1BQU1DLGdCQUFnQixTQUFTSCxTQUFTLENBQUM7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUksV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLHFCQUFxQixFQUFFQyxtQkFBbUIsRUFBRUMscUJBQXFCLEVBQUVDLE9BQU8sRUFBRztJQUM5RyxNQUFNQyxzQkFBc0IsR0FBRyxHQUFHO0lBQ2xDLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFQSxzQkFBc0IsRUFBRUEsc0JBQXNCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtNQUNuRUMsVUFBVSxFQUFFLENBQUM7TUFDYkMsSUFBSSxFQUFFO0lBQ1IsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSVgscUJBQXFCLENBQUVHLG9CQUFvQixFQUFFQyxxQkFBcUIsRUFBRUMsbUJBQW1CLEVBQUU7TUFDMUdPLE9BQU8sRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0QsT0FBTztNQUM1QkUsTUFBTSxFQUFFLElBQUksQ0FBQ0EsTUFBTSxHQUFHO0lBQ3hCLENBQUUsQ0FBRSxDQUFDO0lBRUwsTUFBTUMsTUFBTSxHQUFHLElBQUlqQixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO01BQzVDa0IsTUFBTSxFQUFFLEtBQUs7TUFDYkMsU0FBUyxFQUFFLENBQUM7TUFDWkMsUUFBUSxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRTtNQUNsQk4sT0FBTyxFQUFFLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxPQUFPO01BQzVCTyxHQUFHLEVBQUU7SUFDUCxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNSLFFBQVEsQ0FBRUksTUFBTyxDQUFDOztJQUV2QjtJQUNBVCxxQkFBcUIsQ0FBQ2MsSUFBSSxDQUFFQyxhQUFhLElBQUk7TUFDM0NOLE1BQU0sQ0FBQ08sT0FBTyxHQUFHLENBQUNELGFBQWE7SUFDakMsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDRSxNQUFNLENBQUVoQixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBUixrQkFBa0IsQ0FBQ3lCLFFBQVEsQ0FBRSxrQkFBa0IsRUFBRXZCLGdCQUFpQixDQUFDO0FBRW5FLGVBQWVBLGdCQUFnQiJ9