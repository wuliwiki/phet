// Copyright 2013-2021, University of Colorado Boulder

/**
 * Model for the 'Intro' screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringProperty from '../../../../axon/js/StringProperty.js';
import fractionComparison from '../../fractionComparison.js';
import FractionModel from './FractionModel.js';

// constants
const VALID_REPRESENTATION_VALUES = ['horizontal-bar', 'vertical-bar', 'circle', 'chocolate', 'different-sized-circles'];
class IntroModel {
  constructor() {
    // @public {Property.<boolean>}
    this.numberLineVisibleProperty = new BooleanProperty(false);

    // @public {Property.<string>}
    this.representationProperty = new StringProperty('horizontal-bar');

    // @public
    this.leftFractionModel = new FractionModel();

    // @public
    this.rightFractionModel = new FractionModel();

    // @public (read-only)  {Property.<boolean>}
    this.bothCompareProperty = new DerivedProperty([this.leftFractionModel.stateProperty, this.rightFractionModel.stateProperty], (leftState, rightState) => leftState === 'compare' && rightState === 'compare');

    //Boolean Property that indicates whether either of the left/right shapes is in the center, used to hide the center target region
    // @public (read-only) {Property.<boolean>}
    this.eitherCompareProperty = new DerivedProperty([this.leftFractionModel.stateProperty, this.rightFractionModel.stateProperty], (leftState, rightState) => leftState === 'compare' || rightState === 'compare');

    // check for validity of representation, present for the lifetime of the sim
    this.representationProperty.link(representation => {
      assert && assert(_.includes(VALID_REPRESENTATION_VALUES, representation), `invalid representation: ${representation}`);
    });
  }

  /**
   * Resets the model
   * @public
   */
  reset() {
    this.numberLineVisibleProperty.reset();
    this.representationProperty.reset();
    this.leftFractionModel.reset();
    this.rightFractionModel.reset();
  }
}
fractionComparison.register('IntroModel', IntroModel);
export default IntroModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJTdHJpbmdQcm9wZXJ0eSIsImZyYWN0aW9uQ29tcGFyaXNvbiIsIkZyYWN0aW9uTW9kZWwiLCJWQUxJRF9SRVBSRVNFTlRBVElPTl9WQUxVRVMiLCJJbnRyb01vZGVsIiwiY29uc3RydWN0b3IiLCJudW1iZXJMaW5lVmlzaWJsZVByb3BlcnR5IiwicmVwcmVzZW50YXRpb25Qcm9wZXJ0eSIsImxlZnRGcmFjdGlvbk1vZGVsIiwicmlnaHRGcmFjdGlvbk1vZGVsIiwiYm90aENvbXBhcmVQcm9wZXJ0eSIsInN0YXRlUHJvcGVydHkiLCJsZWZ0U3RhdGUiLCJyaWdodFN0YXRlIiwiZWl0aGVyQ29tcGFyZVByb3BlcnR5IiwibGluayIsInJlcHJlc2VudGF0aW9uIiwiYXNzZXJ0IiwiXyIsImluY2x1ZGVzIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkludHJvTW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIHRoZSAnSW50cm8nIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1N0cmluZ1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IGZyYWN0aW9uQ29tcGFyaXNvbiBmcm9tICcuLi8uLi9mcmFjdGlvbkNvbXBhcmlzb24uanMnO1xyXG5pbXBvcnQgRnJhY3Rpb25Nb2RlbCBmcm9tICcuL0ZyYWN0aW9uTW9kZWwuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFZBTElEX1JFUFJFU0VOVEFUSU9OX1ZBTFVFUyA9IFtcclxuICAnaG9yaXpvbnRhbC1iYXInLFxyXG4gICd2ZXJ0aWNhbC1iYXInLFxyXG4gICdjaXJjbGUnLFxyXG4gICdjaG9jb2xhdGUnLFxyXG4gICdkaWZmZXJlbnQtc2l6ZWQtY2lyY2xlcycgXTtcclxuXHJcbmNsYXNzIEludHJvTW9kZWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMubnVtYmVyTGluZVZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPHN0cmluZz59XHJcbiAgICB0aGlzLnJlcHJlc2VudGF0aW9uUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdob3Jpem9udGFsLWJhcicgKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLmxlZnRGcmFjdGlvbk1vZGVsID0gbmV3IEZyYWN0aW9uTW9kZWwoKTtcclxuXHJcbiAgICAvLyBAcHVibGljXHJcbiAgICB0aGlzLnJpZ2h0RnJhY3Rpb25Nb2RlbCA9IG5ldyBGcmFjdGlvbk1vZGVsKCk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyAocmVhZC1vbmx5KSAge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMuYm90aENvbXBhcmVQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5sZWZ0RnJhY3Rpb25Nb2RlbC5zdGF0ZVByb3BlcnR5LCB0aGlzLnJpZ2h0RnJhY3Rpb25Nb2RlbC5zdGF0ZVByb3BlcnR5IF0sXHJcbiAgICAgICggbGVmdFN0YXRlLCByaWdodFN0YXRlICkgPT4gbGVmdFN0YXRlID09PSAnY29tcGFyZScgJiYgcmlnaHRTdGF0ZSA9PT0gJ2NvbXBhcmUnICk7XHJcblxyXG4gICAgLy9Cb29sZWFuIFByb3BlcnR5IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgZWl0aGVyIG9mIHRoZSBsZWZ0L3JpZ2h0IHNoYXBlcyBpcyBpbiB0aGUgY2VudGVyLCB1c2VkIHRvIGhpZGUgdGhlIGNlbnRlciB0YXJnZXQgcmVnaW9uXHJcbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpIHtQcm9wZXJ0eS48Ym9vbGVhbj59XHJcbiAgICB0aGlzLmVpdGhlckNvbXBhcmVQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5sZWZ0RnJhY3Rpb25Nb2RlbC5zdGF0ZVByb3BlcnR5LCB0aGlzLnJpZ2h0RnJhY3Rpb25Nb2RlbC5zdGF0ZVByb3BlcnR5IF0sXHJcbiAgICAgICggbGVmdFN0YXRlLCByaWdodFN0YXRlICkgPT4gbGVmdFN0YXRlID09PSAnY29tcGFyZScgfHwgcmlnaHRTdGF0ZSA9PT0gJ2NvbXBhcmUnICk7XHJcblxyXG4gICAgLy8gY2hlY2sgZm9yIHZhbGlkaXR5IG9mIHJlcHJlc2VudGF0aW9uLCBwcmVzZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbVxyXG4gICAgdGhpcy5yZXByZXNlbnRhdGlvblByb3BlcnR5LmxpbmsoIHJlcHJlc2VudGF0aW9uID0+IHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggXy5pbmNsdWRlcyggVkFMSURfUkVQUkVTRU5UQVRJT05fVkFMVUVTLCByZXByZXNlbnRhdGlvbiApLCBgaW52YWxpZCByZXByZXNlbnRhdGlvbjogJHtyZXByZXNlbnRhdGlvbn1gICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdGhlIG1vZGVsXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5udW1iZXJMaW5lVmlzaWJsZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnJlcHJlc2VudGF0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMubGVmdEZyYWN0aW9uTW9kZWwucmVzZXQoKTtcclxuICAgIHRoaXMucmlnaHRGcmFjdGlvbk1vZGVsLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mcmFjdGlvbkNvbXBhcmlzb24ucmVnaXN0ZXIoICdJbnRyb01vZGVsJywgSW50cm9Nb2RlbCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW50cm9Nb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7O0FBRTlDO0FBQ0EsTUFBTUMsMkJBQTJCLEdBQUcsQ0FDbEMsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxFQUNYLHlCQUF5QixDQUFFO0FBRTdCLE1BQU1DLFVBQVUsQ0FBQztFQUNmQyxXQUFXQSxDQUFBLEVBQUc7SUFFWjtJQUNBLElBQUksQ0FBQ0MseUJBQXlCLEdBQUcsSUFBSVIsZUFBZSxDQUFFLEtBQU0sQ0FBQzs7SUFFN0Q7SUFDQSxJQUFJLENBQUNTLHNCQUFzQixHQUFHLElBQUlQLGNBQWMsQ0FBRSxnQkFBaUIsQ0FBQzs7SUFFcEU7SUFDQSxJQUFJLENBQUNRLGlCQUFpQixHQUFHLElBQUlOLGFBQWEsQ0FBQyxDQUFDOztJQUU1QztJQUNBLElBQUksQ0FBQ08sa0JBQWtCLEdBQUcsSUFBSVAsYUFBYSxDQUFDLENBQUM7O0lBRTdDO0lBQ0EsSUFBSSxDQUFDUSxtQkFBbUIsR0FBRyxJQUFJWCxlQUFlLENBQUUsQ0FBRSxJQUFJLENBQUNTLGlCQUFpQixDQUFDRyxhQUFhLEVBQUUsSUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0UsYUFBYSxDQUFFLEVBQzdILENBQUVDLFNBQVMsRUFBRUMsVUFBVSxLQUFNRCxTQUFTLEtBQUssU0FBUyxJQUFJQyxVQUFVLEtBQUssU0FBVSxDQUFDOztJQUVwRjtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJZixlQUFlLENBQUUsQ0FBRSxJQUFJLENBQUNTLGlCQUFpQixDQUFDRyxhQUFhLEVBQUUsSUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0UsYUFBYSxDQUFFLEVBQy9ILENBQUVDLFNBQVMsRUFBRUMsVUFBVSxLQUFNRCxTQUFTLEtBQUssU0FBUyxJQUFJQyxVQUFVLEtBQUssU0FBVSxDQUFDOztJQUVwRjtJQUNBLElBQUksQ0FBQ04sc0JBQXNCLENBQUNRLElBQUksQ0FBRUMsY0FBYyxJQUFJO01BQ2xEQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsQ0FBQyxDQUFDQyxRQUFRLENBQUVoQiwyQkFBMkIsRUFBRWEsY0FBZSxDQUFDLEVBQUcsMkJBQTBCQSxjQUFlLEVBQUUsQ0FBQztJQUM1SCxDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFSSxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNkLHlCQUF5QixDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNiLHNCQUFzQixDQUFDYSxLQUFLLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNaLGlCQUFpQixDQUFDWSxLQUFLLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNYLGtCQUFrQixDQUFDVyxLQUFLLENBQUMsQ0FBQztFQUNqQztBQUNGO0FBRUFuQixrQkFBa0IsQ0FBQ29CLFFBQVEsQ0FBRSxZQUFZLEVBQUVqQixVQUFXLENBQUM7QUFFdkQsZUFBZUEsVUFBVSJ9