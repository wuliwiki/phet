// Copyright 2013-2021, University of Colorado Boulder

/**
 * Model for the left or right fractions on the 'Intro' screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import StringProperty from '../../../../axon/js/StringProperty.js';
import fractionComparison from '../../fractionComparison.js';

// constants
const VALID_STATE_VALUES = ['start', 'dragging', 'compare'];
class FractionModel {
  /**
   */
  constructor() {
    // @public {Property.<boolean>}
    this.animatingProperty = new BooleanProperty(false);

    // @public {Property.<number>}
    this.divisionsProperty = new NumberProperty(1);

    // @public {Property.<number>}
    this.denominatorProperty = new NumberProperty(2);

    // @public {Property.<number>}
    this.numeratorProperty = new NumberProperty(1);

    // @public {Property.<string>} one of start/dragging/compare
    this.stateProperty = new StringProperty('start');

    // @public {Property.<number>}
    this.fractionProperty = new DerivedProperty([this.numeratorProperty, this.denominatorProperty], (numerator, denominator) => numerator / denominator);

    // check for the validity of the sate, present for the lifetime of the sim
    this.stateProperty.link(state => {
      assert && assert(_.includes(VALID_STATE_VALUES, state), `invalid state: ${state}`);
    });
  }

  /**
   * Resets
   * @public
   */
  reset() {
    this.numeratorProperty.reset();
    this.denominatorProperty.reset();
    this.stateProperty.reset();
    this.animatingProperty.reset();
    this.divisionsProperty.reset();
  }
}
fractionComparison.register('FractionModel', FractionModel);
export default FractionModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlN0cmluZ1Byb3BlcnR5IiwiZnJhY3Rpb25Db21wYXJpc29uIiwiVkFMSURfU1RBVEVfVkFMVUVTIiwiRnJhY3Rpb25Nb2RlbCIsImNvbnN0cnVjdG9yIiwiYW5pbWF0aW5nUHJvcGVydHkiLCJkaXZpc2lvbnNQcm9wZXJ0eSIsImRlbm9taW5hdG9yUHJvcGVydHkiLCJudW1lcmF0b3JQcm9wZXJ0eSIsInN0YXRlUHJvcGVydHkiLCJmcmFjdGlvblByb3BlcnR5IiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJsaW5rIiwic3RhdGUiLCJhc3NlcnQiLCJfIiwiaW5jbHVkZXMiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRnJhY3Rpb25Nb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBmb3IgdGhlIGxlZnQgb3IgcmlnaHQgZnJhY3Rpb25zIG9uIHRoZSAnSW50cm8nIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZnJhY3Rpb25Db21wYXJpc29uIGZyb20gJy4uLy4uL2ZyYWN0aW9uQ29tcGFyaXNvbi5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgVkFMSURfU1RBVEVfVkFMVUVTID0gWyAnc3RhcnQnLCAnZHJhZ2dpbmcnLCAnY29tcGFyZScgXTtcclxuXHJcbmNsYXNzIEZyYWN0aW9uTW9kZWwge1xyXG4gIC8qKlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5Ljxib29sZWFuPn1cclxuICAgIHRoaXMuYW5pbWF0aW5nUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxudW1iZXI+fVxyXG4gICAgdGhpcy5kaXZpc2lvbnNQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge1Byb3BlcnR5LjxudW1iZXI+fVxyXG4gICAgdGhpcy5kZW5vbWluYXRvclByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAyICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPG51bWJlcj59XHJcbiAgICB0aGlzLm51bWVyYXRvclByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAxICk7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7UHJvcGVydHkuPHN0cmluZz59IG9uZSBvZiBzdGFydC9kcmFnZ2luZy9jb21wYXJlXHJcbiAgICB0aGlzLnN0YXRlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdzdGFydCcgKTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtQcm9wZXJ0eS48bnVtYmVyPn1cclxuICAgIHRoaXMuZnJhY3Rpb25Qcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5udW1lcmF0b3JQcm9wZXJ0eSwgdGhpcy5kZW5vbWluYXRvclByb3BlcnR5IF0sXHJcbiAgICAgICggbnVtZXJhdG9yLCBkZW5vbWluYXRvciApID0+IG51bWVyYXRvciAvIGRlbm9taW5hdG9yICk7XHJcblxyXG4gICAgLy8gY2hlY2sgZm9yIHRoZSB2YWxpZGl0eSBvZiB0aGUgc2F0ZSwgcHJlc2VudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW1cclxuICAgIHRoaXMuc3RhdGVQcm9wZXJ0eS5saW5rKCBzdGF0ZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uaW5jbHVkZXMoIFZBTElEX1NUQVRFX1ZBTFVFUywgc3RhdGUgKSwgYGludmFsaWQgc3RhdGU6ICR7c3RhdGV9YCApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5udW1lcmF0b3JQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5kZW5vbWluYXRvclByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnN0YXRlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuYW5pbWF0aW5nUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZGl2aXNpb25zUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmZyYWN0aW9uQ29tcGFyaXNvbi5yZWdpc3RlciggJ0ZyYWN0aW9uTW9kZWwnLCBGcmFjdGlvbk1vZGVsICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGcmFjdGlvbk1vZGVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUNsRSxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2Qjs7QUFFNUQ7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxDQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFFO0FBRTdELE1BQU1DLGFBQWEsQ0FBQztFQUNsQjtBQUNGO0VBQ0VDLFdBQVdBLENBQUEsRUFBRztJQUVaO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJUixlQUFlLENBQUUsS0FBTSxDQUFDOztJQUVyRDtJQUNBLElBQUksQ0FBQ1MsaUJBQWlCLEdBQUcsSUFBSVAsY0FBYyxDQUFFLENBQUUsQ0FBQzs7SUFFaEQ7SUFDQSxJQUFJLENBQUNRLG1CQUFtQixHQUFHLElBQUlSLGNBQWMsQ0FBRSxDQUFFLENBQUM7O0lBRWxEO0lBQ0EsSUFBSSxDQUFDUyxpQkFBaUIsR0FBRyxJQUFJVCxjQUFjLENBQUUsQ0FBRSxDQUFDOztJQUVoRDtJQUNBLElBQUksQ0FBQ1UsYUFBYSxHQUFHLElBQUlULGNBQWMsQ0FBRSxPQUFRLENBQUM7O0lBRWxEO0lBQ0EsSUFBSSxDQUFDVSxnQkFBZ0IsR0FBRyxJQUFJWixlQUFlLENBQUUsQ0FBRSxJQUFJLENBQUNVLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsbUJBQW1CLENBQUUsRUFDL0YsQ0FBRUksU0FBUyxFQUFFQyxXQUFXLEtBQU1ELFNBQVMsR0FBR0MsV0FBWSxDQUFDOztJQUV6RDtJQUNBLElBQUksQ0FBQ0gsYUFBYSxDQUFDSSxJQUFJLENBQUVDLEtBQUssSUFBSTtNQUNoQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUVDLENBQUMsQ0FBQ0MsUUFBUSxDQUFFZixrQkFBa0IsRUFBRVksS0FBTSxDQUFDLEVBQUcsa0JBQWlCQSxLQUFNLEVBQUUsQ0FBQztJQUN4RixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFSSxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNWLGlCQUFpQixDQUFDVSxLQUFLLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNYLG1CQUFtQixDQUFDVyxLQUFLLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNULGFBQWEsQ0FBQ1MsS0FBSyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDYixpQkFBaUIsQ0FBQ2EsS0FBSyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDWixpQkFBaUIsQ0FBQ1ksS0FBSyxDQUFDLENBQUM7RUFDaEM7QUFDRjtBQUVBakIsa0JBQWtCLENBQUNrQixRQUFRLENBQUUsZUFBZSxFQUFFaEIsYUFBYyxDQUFDO0FBRTdELGVBQWVBLGFBQWEifQ==