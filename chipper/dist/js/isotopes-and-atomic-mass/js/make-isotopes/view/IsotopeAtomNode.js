// Copyright 2015-2021, University of Colorado Boulder

/**
 * View representation of the atom.  Mostly, this is responsible for displaying and updating the labels, since the atom
 * itself is represented by particles, which take care of themselves in the view.  This view element also maintains
 * the electron cloud.  This is essentially identical to AtomNode of 'Build an Atom' with some reduced functionality.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import { Node } from '../../../../scenery/js/imports.js';
import IsotopeElectronCloudView from '../../../../shred/js/view/IsotopeElectronCloudView.js';
import isotopesAndAtomicMass from '../../isotopesAndAtomicMass.js';
class IsotopeAtomNode extends Node {
  /**
   * Constructor for an IsotopeAtomNode.
   *
   * @param {ParticleAtom} particleAtom Model that represents the atom, including particle positions
   * @param {Vector2} bottomPoint desired bottom point of the atom which holds the atom in position as the size changes.
   * @param {ModelViewTransform2} modelViewTransform Model-View transform
   */
  constructor(particleAtom, bottomPoint, modelViewTransform) {
    super();
    this.atom = particleAtom;
    this.modelViewTransform = modelViewTransform;

    // Add the electron cloud.
    const isotopeElectronCloud = new IsotopeElectronCloudView(particleAtom, modelViewTransform);
    this.addChild(isotopeElectronCloud);

    // Add the handler that keeps the bottom of the atom in one place. This was added due to a request to make the atom
    // get larger and smaller but to stay on the scale.
    const updateAtomPosition = numProtons => {
      const newCenter = new Vector2(bottomPoint.x, bottomPoint.y - modelViewTransform.modelToViewDeltaX(isotopeElectronCloud.getElectronShellDiameter(numProtons) / 2) * 1.2); // empirically determined
      particleAtom.positionProperty.set(modelViewTransform.viewToModelPosition(newCenter));
      isotopeElectronCloud.center = newCenter;
    };

    // Doesn't need unlink as it stays through out the sim life
    particleAtom.protonCountProperty.link(numProtons => {
      updateAtomPosition(numProtons);
    });
  }
}
isotopesAndAtomicMass.register('IsotopeAtomNode', IsotopeAtomNode);
export default IsotopeAtomNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTm9kZSIsIklzb3RvcGVFbGVjdHJvbkNsb3VkVmlldyIsImlzb3RvcGVzQW5kQXRvbWljTWFzcyIsIklzb3RvcGVBdG9tTm9kZSIsImNvbnN0cnVjdG9yIiwicGFydGljbGVBdG9tIiwiYm90dG9tUG9pbnQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJhdG9tIiwiaXNvdG9wZUVsZWN0cm9uQ2xvdWQiLCJhZGRDaGlsZCIsInVwZGF0ZUF0b21Qb3NpdGlvbiIsIm51bVByb3RvbnMiLCJuZXdDZW50ZXIiLCJ4IiwieSIsIm1vZGVsVG9WaWV3RGVsdGFYIiwiZ2V0RWxlY3Ryb25TaGVsbERpYW1ldGVyIiwicG9zaXRpb25Qcm9wZXJ0eSIsInNldCIsInZpZXdUb01vZGVsUG9zaXRpb24iLCJjZW50ZXIiLCJwcm90b25Db3VudFByb3BlcnR5IiwibGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSXNvdG9wZUF0b21Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFZpZXcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGF0b20uICBNb3N0bHksIHRoaXMgaXMgcmVzcG9uc2libGUgZm9yIGRpc3BsYXlpbmcgYW5kIHVwZGF0aW5nIHRoZSBsYWJlbHMsIHNpbmNlIHRoZSBhdG9tXHJcbiAqIGl0c2VsZiBpcyByZXByZXNlbnRlZCBieSBwYXJ0aWNsZXMsIHdoaWNoIHRha2UgY2FyZSBvZiB0aGVtc2VsdmVzIGluIHRoZSB2aWV3LiAgVGhpcyB2aWV3IGVsZW1lbnQgYWxzbyBtYWludGFpbnNcclxuICogdGhlIGVsZWN0cm9uIGNsb3VkLiAgVGhpcyBpcyBlc3NlbnRpYWxseSBpZGVudGljYWwgdG8gQXRvbU5vZGUgb2YgJ0J1aWxkIGFuIEF0b20nIHdpdGggc29tZSByZWR1Y2VkIGZ1bmN0aW9uYWxpdHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgSXNvdG9wZUVsZWN0cm9uQ2xvdWRWaWV3IGZyb20gJy4uLy4uLy4uLy4uL3NocmVkL2pzL3ZpZXcvSXNvdG9wZUVsZWN0cm9uQ2xvdWRWaWV3LmpzJztcclxuaW1wb3J0IGlzb3RvcGVzQW5kQXRvbWljTWFzcyBmcm9tICcuLi8uLi9pc290b3Blc0FuZEF0b21pY01hc3MuanMnO1xyXG5cclxuY2xhc3MgSXNvdG9wZUF0b21Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciBhbiBJc290b3BlQXRvbU5vZGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1BhcnRpY2xlQXRvbX0gcGFydGljbGVBdG9tIE1vZGVsIHRoYXQgcmVwcmVzZW50cyB0aGUgYXRvbSwgaW5jbHVkaW5nIHBhcnRpY2xlIHBvc2l0aW9uc1xyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gYm90dG9tUG9pbnQgZGVzaXJlZCBib3R0b20gcG9pbnQgb2YgdGhlIGF0b20gd2hpY2ggaG9sZHMgdGhlIGF0b20gaW4gcG9zaXRpb24gYXMgdGhlIHNpemUgY2hhbmdlcy5cclxuICAgKiBAcGFyYW0ge01vZGVsVmlld1RyYW5zZm9ybTJ9IG1vZGVsVmlld1RyYW5zZm9ybSBNb2RlbC1WaWV3IHRyYW5zZm9ybVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBwYXJ0aWNsZUF0b20sIGJvdHRvbVBvaW50LCBtb2RlbFZpZXdUcmFuc2Zvcm0gKSB7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmF0b20gPSBwYXJ0aWNsZUF0b207XHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGVsZWN0cm9uIGNsb3VkLlxyXG4gICAgY29uc3QgaXNvdG9wZUVsZWN0cm9uQ2xvdWQgPSBuZXcgSXNvdG9wZUVsZWN0cm9uQ2xvdWRWaWV3KCBwYXJ0aWNsZUF0b20sIG1vZGVsVmlld1RyYW5zZm9ybSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaXNvdG9wZUVsZWN0cm9uQ2xvdWQgKTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGhhbmRsZXIgdGhhdCBrZWVwcyB0aGUgYm90dG9tIG9mIHRoZSBhdG9tIGluIG9uZSBwbGFjZS4gVGhpcyB3YXMgYWRkZWQgZHVlIHRvIGEgcmVxdWVzdCB0byBtYWtlIHRoZSBhdG9tXHJcbiAgICAvLyBnZXQgbGFyZ2VyIGFuZCBzbWFsbGVyIGJ1dCB0byBzdGF5IG9uIHRoZSBzY2FsZS5cclxuICAgIGNvbnN0IHVwZGF0ZUF0b21Qb3NpdGlvbiA9IG51bVByb3RvbnMgPT4ge1xyXG4gICAgICBjb25zdCBuZXdDZW50ZXIgPSBuZXcgVmVjdG9yMiggYm90dG9tUG9pbnQueCwgYm90dG9tUG9pbnQueSAtIG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld0RlbHRhWChcclxuICAgICAgICBpc290b3BlRWxlY3Ryb25DbG91ZC5nZXRFbGVjdHJvblNoZWxsRGlhbWV0ZXIoIG51bVByb3RvbnMgKSAvIDIgKSAqIDEuMiApOyAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICAgIHBhcnRpY2xlQXRvbS5wb3NpdGlvblByb3BlcnR5LnNldCggbW9kZWxWaWV3VHJhbnNmb3JtLnZpZXdUb01vZGVsUG9zaXRpb24oIG5ld0NlbnRlciApICk7XHJcbiAgICAgIGlzb3RvcGVFbGVjdHJvbkNsb3VkLmNlbnRlciA9IG5ld0NlbnRlcjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gRG9lc24ndCBuZWVkIHVubGluayBhcyBpdCBzdGF5cyB0aHJvdWdoIG91dCB0aGUgc2ltIGxpZmVcclxuICAgIHBhcnRpY2xlQXRvbS5wcm90b25Db3VudFByb3BlcnR5LmxpbmsoIG51bVByb3RvbnMgPT4ge1xyXG4gICAgICB1cGRhdGVBdG9tUG9zaXRpb24oIG51bVByb3RvbnMgKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmlzb3RvcGVzQW5kQXRvbWljTWFzcy5yZWdpc3RlciggJ0lzb3RvcGVBdG9tTm9kZScsIElzb3RvcGVBdG9tTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSXNvdG9wZUF0b21Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0Msd0JBQXdCLE1BQU0sdURBQXVEO0FBQzVGLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUVsRSxNQUFNQyxlQUFlLFNBQVNILElBQUksQ0FBQztFQUVqQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsa0JBQWtCLEVBQUc7SUFFM0QsS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNDLElBQUksR0FBR0gsWUFBWTtJQUN4QixJQUFJLENBQUNFLGtCQUFrQixHQUFHQSxrQkFBa0I7O0lBRTVDO0lBQ0EsTUFBTUUsb0JBQW9CLEdBQUcsSUFBSVIsd0JBQXdCLENBQUVJLFlBQVksRUFBRUUsa0JBQW1CLENBQUM7SUFDN0YsSUFBSSxDQUFDRyxRQUFRLENBQUVELG9CQUFxQixDQUFDOztJQUVyQztJQUNBO0lBQ0EsTUFBTUUsa0JBQWtCLEdBQUdDLFVBQVUsSUFBSTtNQUN2QyxNQUFNQyxTQUFTLEdBQUcsSUFBSWQsT0FBTyxDQUFFTyxXQUFXLENBQUNRLENBQUMsRUFBRVIsV0FBVyxDQUFDUyxDQUFDLEdBQUdSLGtCQUFrQixDQUFDUyxpQkFBaUIsQ0FDaEdQLG9CQUFvQixDQUFDUSx3QkFBd0IsQ0FBRUwsVUFBVyxDQUFDLEdBQUcsQ0FBRSxDQUFDLEdBQUcsR0FBSSxDQUFDLENBQUMsQ0FBQztNQUM3RVAsWUFBWSxDQUFDYSxnQkFBZ0IsQ0FBQ0MsR0FBRyxDQUFFWixrQkFBa0IsQ0FBQ2EsbUJBQW1CLENBQUVQLFNBQVUsQ0FBRSxDQUFDO01BQ3hGSixvQkFBb0IsQ0FBQ1ksTUFBTSxHQUFHUixTQUFTO0lBQ3pDLENBQUM7O0lBRUQ7SUFDQVIsWUFBWSxDQUFDaUIsbUJBQW1CLENBQUNDLElBQUksQ0FBRVgsVUFBVSxJQUFJO01BQ25ERCxrQkFBa0IsQ0FBRUMsVUFBVyxDQUFDO0lBQ2xDLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQVYscUJBQXFCLENBQUNzQixRQUFRLENBQUUsaUJBQWlCLEVBQUVyQixlQUFnQixDQUFDO0FBRXBFLGVBQWVBLGVBQWUifQ==