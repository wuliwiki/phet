// Copyright 2015-2020, University of Colorado Boulder

/**
 * A particle bucket that can only contain one configuration of isotope, though it may contain multiple instances
 * of that isotope.
 *
 * @author John Blanco
 * @author Jesse Greenberg
 * @author James Smith
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import SphereBucket from '../../../../phetcommon/js/model/SphereBucket.js';
import isotopesAndAtomicMass from '../../isotopesAndAtomicMass.js';
import MovableAtom from './MovableAtom.js';
class MonoIsotopeBucket extends SphereBucket {
  /**
   * @param {number} numProtonsInIsotope
   * @param {number} numNeutronsInIsotope
   * @param {Object} [options]
   */
  constructor(numProtonsInIsotope, numNeutronsInIsotope, options) {
    super(options);
    this.numProtonsInIsotope = numProtonsInIsotope; // @public
    this.numNeutronsInIsotope = numNeutronsInIsotope; // @public
  }

  /**
   * Add an isotope to the first open position in the bucket.
   *
   * @param {MovableAtom} isotope
   * @param {boolean} moveImmediately
   *
   * @public
   */
  addIsotopeInstanceFirstOpen(isotope, moveImmediately) {
    if (this.isIsotopeAllowed(isotope.atomConfiguration.protonCount, isotope.atomConfiguration.neutronCount)) {
      this.addParticleFirstOpen(isotope, moveImmediately);
    }
  }

  /**
   * Tests to see if an isotope matches the MonoIsotopeBucket.
   *
   * @param {number} numProtons
   * @param {number} numNeutrons
   * @returns {boolean}
   *
   * @public
   */
  isIsotopeAllowed(numProtons, numNeutrons) {
    return this.numProtonsInIsotope === numProtons && this.numNeutronsInIsotope === numNeutrons;
  }

  /**
   * Add an isotope to the nearest open position in the bucket.
   *
   * @param {MovableAtom} isotope
   * @param {boolean} animate
   *
   * @public
   */
  addIsotopeInstanceNearestOpen(isotope, animate) {
    if (this.isIsotopeAllowed(isotope.atomConfiguration.protonCount, isotope.atomConfiguration.neutronCount)) {
      this.addParticleNearestOpen(isotope, animate);
    }
  }

  /**
   * Get a list of all isotopes contained within this bucket.
   * @returns {ObservableArrayDef} containedIsotopes
   *
   * @public
   */
  getContainedIsotopes() {
    const containedIsotopes = createObservableArray();
    this.getParticleList().forEach(isotope => {
      assert && assert(isotope instanceof MovableAtom);
      containedIsotopes.push(isotope);
    });
    return containedIsotopes;
  }
}
isotopesAndAtomicMass.register('MonoIsotopeBucket', MonoIsotopeBucket);
export default MonoIsotopeBucket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJTcGhlcmVCdWNrZXQiLCJpc290b3Blc0FuZEF0b21pY01hc3MiLCJNb3ZhYmxlQXRvbSIsIk1vbm9Jc290b3BlQnVja2V0IiwiY29uc3RydWN0b3IiLCJudW1Qcm90b25zSW5Jc290b3BlIiwibnVtTmV1dHJvbnNJbklzb3RvcGUiLCJvcHRpb25zIiwiYWRkSXNvdG9wZUluc3RhbmNlRmlyc3RPcGVuIiwiaXNvdG9wZSIsIm1vdmVJbW1lZGlhdGVseSIsImlzSXNvdG9wZUFsbG93ZWQiLCJhdG9tQ29uZmlndXJhdGlvbiIsInByb3RvbkNvdW50IiwibmV1dHJvbkNvdW50IiwiYWRkUGFydGljbGVGaXJzdE9wZW4iLCJudW1Qcm90b25zIiwibnVtTmV1dHJvbnMiLCJhZGRJc290b3BlSW5zdGFuY2VOZWFyZXN0T3BlbiIsImFuaW1hdGUiLCJhZGRQYXJ0aWNsZU5lYXJlc3RPcGVuIiwiZ2V0Q29udGFpbmVkSXNvdG9wZXMiLCJjb250YWluZWRJc290b3BlcyIsImdldFBhcnRpY2xlTGlzdCIsImZvckVhY2giLCJhc3NlcnQiLCJwdXNoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNb25vSXNvdG9wZUJ1Y2tldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIwLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBhcnRpY2xlIGJ1Y2tldCB0aGF0IGNhbiBvbmx5IGNvbnRhaW4gb25lIGNvbmZpZ3VyYXRpb24gb2YgaXNvdG9wZSwgdGhvdWdoIGl0IG1heSBjb250YWluIG11bHRpcGxlIGluc3RhbmNlc1xyXG4gKiBvZiB0aGF0IGlzb3RvcGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICogQGF1dGhvciBKYW1lcyBTbWl0aFxyXG4gKi9cclxuXHJcbmltcG9ydCBjcmVhdGVPYnNlcnZhYmxlQXJyYXkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgU3BoZXJlQnVja2V0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvbW9kZWwvU3BoZXJlQnVja2V0LmpzJztcclxuaW1wb3J0IGlzb3RvcGVzQW5kQXRvbWljTWFzcyBmcm9tICcuLi8uLi9pc290b3Blc0FuZEF0b21pY01hc3MuanMnO1xyXG5pbXBvcnQgTW92YWJsZUF0b20gZnJvbSAnLi9Nb3ZhYmxlQXRvbS5qcyc7XHJcblxyXG5jbGFzcyBNb25vSXNvdG9wZUJ1Y2tldCBleHRlbmRzIFNwaGVyZUJ1Y2tldCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1Qcm90b25zSW5Jc290b3BlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bU5ldXRyb25zSW5Jc290b3BlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBudW1Qcm90b25zSW5Jc290b3BlLCBudW1OZXV0cm9uc0luSXNvdG9wZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5udW1Qcm90b25zSW5Jc290b3BlID0gbnVtUHJvdG9uc0luSXNvdG9wZTsgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5udW1OZXV0cm9uc0luSXNvdG9wZSA9IG51bU5ldXRyb25zSW5Jc290b3BlOyAvLyBAcHVibGljXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYW4gaXNvdG9wZSB0byB0aGUgZmlyc3Qgb3BlbiBwb3NpdGlvbiBpbiB0aGUgYnVja2V0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtNb3ZhYmxlQXRvbX0gaXNvdG9wZVxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbW92ZUltbWVkaWF0ZWx5XHJcbiAgICpcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkSXNvdG9wZUluc3RhbmNlRmlyc3RPcGVuKCBpc290b3BlLCBtb3ZlSW1tZWRpYXRlbHkgKSB7XHJcbiAgICBpZiAoIHRoaXMuaXNJc290b3BlQWxsb3dlZCggaXNvdG9wZS5hdG9tQ29uZmlndXJhdGlvbi5wcm90b25Db3VudCwgaXNvdG9wZS5hdG9tQ29uZmlndXJhdGlvbi5uZXV0cm9uQ291bnQgKSApIHtcclxuICAgICAgdGhpcy5hZGRQYXJ0aWNsZUZpcnN0T3BlbiggaXNvdG9wZSwgbW92ZUltbWVkaWF0ZWx5ICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZXN0cyB0byBzZWUgaWYgYW4gaXNvdG9wZSBtYXRjaGVzIHRoZSBNb25vSXNvdG9wZUJ1Y2tldC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1Qcm90b25zXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bU5ldXRyb25zXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICpcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgaXNJc290b3BlQWxsb3dlZCggbnVtUHJvdG9ucywgbnVtTmV1dHJvbnMgKSB7XHJcbiAgICByZXR1cm4gdGhpcy5udW1Qcm90b25zSW5Jc290b3BlID09PSBudW1Qcm90b25zICYmIHRoaXMubnVtTmV1dHJvbnNJbklzb3RvcGUgPT09IG51bU5ldXRyb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGFuIGlzb3RvcGUgdG8gdGhlIG5lYXJlc3Qgb3BlbiBwb3NpdGlvbiBpbiB0aGUgYnVja2V0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtNb3ZhYmxlQXRvbX0gaXNvdG9wZVxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYW5pbWF0ZVxyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGFkZElzb3RvcGVJbnN0YW5jZU5lYXJlc3RPcGVuKCBpc290b3BlLCBhbmltYXRlICkge1xyXG4gICAgaWYgKCB0aGlzLmlzSXNvdG9wZUFsbG93ZWQoIGlzb3RvcGUuYXRvbUNvbmZpZ3VyYXRpb24ucHJvdG9uQ291bnQsIGlzb3RvcGUuYXRvbUNvbmZpZ3VyYXRpb24ubmV1dHJvbkNvdW50ICkgKSB7XHJcbiAgICAgIHRoaXMuYWRkUGFydGljbGVOZWFyZXN0T3BlbiggaXNvdG9wZSwgYW5pbWF0ZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgaXNvdG9wZXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIGJ1Y2tldC5cclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZUFycmF5RGVmfSBjb250YWluZWRJc290b3Blc1xyXG4gICAqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGdldENvbnRhaW5lZElzb3RvcGVzKCkge1xyXG4gICAgY29uc3QgY29udGFpbmVkSXNvdG9wZXMgPSBjcmVhdGVPYnNlcnZhYmxlQXJyYXkoKTtcclxuICAgIHRoaXMuZ2V0UGFydGljbGVMaXN0KCkuZm9yRWFjaCggaXNvdG9wZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGlzb3RvcGUgaW5zdGFuY2VvZiBNb3ZhYmxlQXRvbSApO1xyXG4gICAgICBjb250YWluZWRJc290b3Blcy5wdXNoKCBpc290b3BlICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnRhaW5lZElzb3RvcGVzO1xyXG4gIH1cclxufVxyXG5cclxuaXNvdG9wZXNBbmRBdG9taWNNYXNzLnJlZ2lzdGVyKCAnTW9ub0lzb3RvcGVCdWNrZXQnLCBNb25vSXNvdG9wZUJ1Y2tldCApO1xyXG5leHBvcnQgZGVmYXVsdCBNb25vSXNvdG9wZUJ1Y2tldDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLHFCQUFxQixNQUFNLDhDQUE4QztBQUNoRixPQUFPQyxZQUFZLE1BQU0saURBQWlEO0FBQzFFLE9BQU9DLHFCQUFxQixNQUFNLGdDQUFnQztBQUNsRSxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE1BQU1DLGlCQUFpQixTQUFTSCxZQUFZLENBQUM7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFSSxXQUFXQSxDQUFFQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEVBQUVDLE9BQU8sRUFBRztJQUNoRSxLQUFLLENBQUVBLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNGLG1CQUFtQixHQUFHQSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQ0Msb0JBQW9CLEdBQUdBLG9CQUFvQixDQUFDLENBQUM7RUFDcEQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSwyQkFBMkJBLENBQUVDLE9BQU8sRUFBRUMsZUFBZSxFQUFHO0lBQ3RELElBQUssSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBRUYsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQ0MsV0FBVyxFQUFFSixPQUFPLENBQUNHLGlCQUFpQixDQUFDRSxZQUFhLENBQUMsRUFBRztNQUM1RyxJQUFJLENBQUNDLG9CQUFvQixDQUFFTixPQUFPLEVBQUVDLGVBQWdCLENBQUM7SUFDdkQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsZ0JBQWdCQSxDQUFFSyxVQUFVLEVBQUVDLFdBQVcsRUFBRztJQUMxQyxPQUFPLElBQUksQ0FBQ1osbUJBQW1CLEtBQUtXLFVBQVUsSUFBSSxJQUFJLENBQUNWLG9CQUFvQixLQUFLVyxXQUFXO0VBQzdGOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsNkJBQTZCQSxDQUFFVCxPQUFPLEVBQUVVLE9BQU8sRUFBRztJQUNoRCxJQUFLLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUVGLE9BQU8sQ0FBQ0csaUJBQWlCLENBQUNDLFdBQVcsRUFBRUosT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQ0UsWUFBYSxDQUFDLEVBQUc7TUFDNUcsSUFBSSxDQUFDTSxzQkFBc0IsQ0FBRVgsT0FBTyxFQUFFVSxPQUFRLENBQUM7SUFDakQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsb0JBQW9CQSxDQUFBLEVBQUc7SUFDckIsTUFBTUMsaUJBQWlCLEdBQUd2QixxQkFBcUIsQ0FBQyxDQUFDO0lBQ2pELElBQUksQ0FBQ3dCLGVBQWUsQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBRWYsT0FBTyxJQUFJO01BQ3pDZ0IsTUFBTSxJQUFJQSxNQUFNLENBQUVoQixPQUFPLFlBQVlQLFdBQVksQ0FBQztNQUNsRG9CLGlCQUFpQixDQUFDSSxJQUFJLENBQUVqQixPQUFRLENBQUM7SUFDbkMsQ0FBRSxDQUFDO0lBRUgsT0FBT2EsaUJBQWlCO0VBQzFCO0FBQ0Y7QUFFQXJCLHFCQUFxQixDQUFDMEIsUUFBUSxDQUFFLG1CQUFtQixFQUFFeEIsaUJBQWtCLENBQUM7QUFDeEUsZUFBZUEsaUJBQWlCIn0=