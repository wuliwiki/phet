// Copyright 2022, University of Colorado Boulder

/**
 * EnergyGraphRadioButtonGroup is the radio button group that appears in the 'Energy' screen, for choosing
 * which energy graph to view.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import EnergyGraph from './EnergyGraph.js';
import hookesLaw from '../../hookesLaw.js';
import AquaRadioButtonGroup from '../../../../sun/js/AquaRadioButtonGroup.js';
import HookesLawStrings from '../../HookesLawStrings.js';
import HookesLawConstants from '../../common/HookesLawConstants.js';
import { Text } from '../../../../scenery/js/imports.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class EnergyGraphRadioButtonGroup extends AquaRadioButtonGroup {
  constructor(graphProperty, providedOptions) {
    const options = optionize()({
      radioButtonOptions: HookesLawConstants.AQUA_RADIO_BUTTON_OPTIONS
    }, providedOptions);
    const items = [{
      value: EnergyGraph.BAR_GRAPH,
      createNode: tandem => new Text(HookesLawStrings.barGraphStringProperty, combineOptions({}, HookesLawConstants.CONTROL_TEXT_OPTIONS, {
        tandem: tandem.createTandem('text')
      })),
      tandemName: 'barGraphRadioButton'
    }, {
      value: EnergyGraph.ENERGY_PLOT,
      createNode: tandem => new Text(HookesLawStrings.energyPlotStringProperty, combineOptions({}, HookesLawConstants.CONTROL_TEXT_OPTIONS, {
        tandem: tandem.createTandem('text')
      })),
      tandemName: 'energyPlotRadioButton'
    }, {
      value: EnergyGraph.FORCE_PLOT,
      createNode: tandem => new Text(HookesLawStrings.forcePlotStringProperty, combineOptions({}, HookesLawConstants.CONTROL_TEXT_OPTIONS, {
        tandem: tandem.createTandem('text')
      })),
      tandemName: 'forcePlotRadioButton'
    }];
    super(graphProperty, items, options);
  }
}
hookesLaw.register('EnergyGraphRadioButtonGroup', EnergyGraphRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbmVyZ3lHcmFwaCIsImhvb2tlc0xhdyIsIkFxdWFSYWRpb0J1dHRvbkdyb3VwIiwiSG9va2VzTGF3U3RyaW5ncyIsIkhvb2tlc0xhd0NvbnN0YW50cyIsIlRleHQiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkVuZXJneUdyYXBoUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiZ3JhcGhQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJBUVVBX1JBRElPX0JVVFRPTl9PUFRJT05TIiwiaXRlbXMiLCJ2YWx1ZSIsIkJBUl9HUkFQSCIsImNyZWF0ZU5vZGUiLCJ0YW5kZW0iLCJiYXJHcmFwaFN0cmluZ1Byb3BlcnR5IiwiQ09OVFJPTF9URVhUX09QVElPTlMiLCJjcmVhdGVUYW5kZW0iLCJ0YW5kZW1OYW1lIiwiRU5FUkdZX1BMT1QiLCJlbmVyZ3lQbG90U3RyaW5nUHJvcGVydHkiLCJGT1JDRV9QTE9UIiwiZm9yY2VQbG90U3RyaW5nUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVuZXJneUdyYXBoUmFkaW9CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRW5lcmd5R3JhcGhSYWRpb0J1dHRvbkdyb3VwIGlzIHRoZSByYWRpbyBidXR0b24gZ3JvdXAgdGhhdCBhcHBlYXJzIGluIHRoZSAnRW5lcmd5JyBzY3JlZW4sIGZvciBjaG9vc2luZ1xyXG4gKiB3aGljaCBlbmVyZ3kgZ3JhcGggdG8gdmlldy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW5lcmd5R3JhcGggZnJvbSAnLi9FbmVyZ3lHcmFwaC5qcyc7XHJcbmltcG9ydCBob29rZXNMYXcgZnJvbSAnLi4vLi4vaG9va2VzTGF3LmpzJztcclxuaW1wb3J0IEFxdWFSYWRpb0J1dHRvbkdyb3VwLCB7IEFxdWFSYWRpb0J1dHRvbkdyb3VwSXRlbSwgQXF1YVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IEhvb2tlc0xhd1N0cmluZ3MgZnJvbSAnLi4vLi4vSG9va2VzTGF3U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBIb29rZXNMYXdDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0hvb2tlc0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IFRleHQsIFRleHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgRW5lcmd5R3JhcGhSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaWNrT3B0aW9uYWw8QXF1YVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zLCAnc3BhY2luZyc+ICZcclxuICBQaWNrUmVxdWlyZWQ8QXF1YVJhZGlvQnV0dG9uR3JvdXBPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVyZ3lHcmFwaFJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBBcXVhUmFkaW9CdXR0b25Hcm91cDxFbmVyZ3lHcmFwaD4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdyYXBoUHJvcGVydHk6IFByb3BlcnR5PEVuZXJneUdyYXBoPiwgcHJvdmlkZWRPcHRpb25zOiBFbmVyZ3lHcmFwaFJhZGlvQnV0dG9uR3JvdXBPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RW5lcmd5R3JhcGhSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucywgU2VsZk9wdGlvbnMsIEFxdWFSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucz4oKSgge1xyXG4gICAgICByYWRpb0J1dHRvbk9wdGlvbnM6IEhvb2tlc0xhd0NvbnN0YW50cy5BUVVBX1JBRElPX0JVVFRPTl9PUFRJT05TXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBpdGVtczogQXF1YVJhZGlvQnV0dG9uR3JvdXBJdGVtPEVuZXJneUdyYXBoPltdID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IEVuZXJneUdyYXBoLkJBUl9HUkFQSCxcclxuICAgICAgICBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gbmV3IFRleHQoIEhvb2tlc0xhd1N0cmluZ3MuYmFyR3JhcGhTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgICAgIGNvbWJpbmVPcHRpb25zPFRleHRPcHRpb25zPigge30sIEhvb2tlc0xhd0NvbnN0YW50cy5DT05UUk9MX1RFWFRfT1BUSU9OUywge1xyXG4gICAgICAgICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0ZXh0JyApXHJcbiAgICAgICAgICB9ICkgKSxcclxuICAgICAgICB0YW5kZW1OYW1lOiAnYmFyR3JhcGhSYWRpb0J1dHRvbidcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHZhbHVlOiBFbmVyZ3lHcmFwaC5FTkVSR1lfUExPVCxcclxuICAgICAgICBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gbmV3IFRleHQoIEhvb2tlc0xhd1N0cmluZ3MuZW5lcmd5UGxvdFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgICAgY29tYmluZU9wdGlvbnM8VGV4dE9wdGlvbnM+KCB7fSwgSG9va2VzTGF3Q29uc3RhbnRzLkNPTlRST0xfVEVYVF9PUFRJT05TLCB7XHJcbiAgICAgICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RleHQnIClcclxuICAgICAgICAgIH0gKSApLFxyXG4gICAgICAgIHRhbmRlbU5hbWU6ICdlbmVyZ3lQbG90UmFkaW9CdXR0b24nXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogRW5lcmd5R3JhcGguRk9SQ0VfUExPVCxcclxuICAgICAgICBjcmVhdGVOb2RlOiB0YW5kZW0gPT4gbmV3IFRleHQoIEhvb2tlc0xhd1N0cmluZ3MuZm9yY2VQbG90U3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgICBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIHt9LCBIb29rZXNMYXdDb25zdGFudHMuQ09OVFJPTF9URVhUX09QVElPTlMsIHtcclxuICAgICAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndGV4dCcgKVxyXG4gICAgICAgICAgfSApICksXHJcbiAgICAgICAgdGFuZGVtTmFtZTogJ2ZvcmNlUGxvdFJhZGlvQnV0dG9uJ1xyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHN1cGVyKCBncmFwaFByb3BlcnR5LCBpdGVtcywgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuaG9va2VzTGF3LnJlZ2lzdGVyKCAnRW5lcmd5R3JhcGhSYWRpb0J1dHRvbkdyb3VwJywgRW5lcmd5R3JhcGhSYWRpb0J1dHRvbkdyb3VwICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBQzFDLE9BQU9DLG9CQUFvQixNQUFpRSw0Q0FBNEM7QUFDeEksT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLG9DQUFvQztBQUNuRSxTQUFTQyxJQUFJLFFBQXFCLG1DQUFtQztBQUlyRSxPQUFPQyxTQUFTLElBQUlDLGNBQWMsUUFBMEIsdUNBQXVDO0FBUW5HLGVBQWUsTUFBTUMsMkJBQTJCLFNBQVNOLG9CQUFvQixDQUFjO0VBRWxGTyxXQUFXQSxDQUFFQyxhQUFvQyxFQUFFQyxlQUFtRCxFQUFHO0lBRTlHLE1BQU1DLE9BQU8sR0FBR04sU0FBUyxDQUErRSxDQUFDLENBQUU7TUFDekdPLGtCQUFrQixFQUFFVCxrQkFBa0IsQ0FBQ1U7SUFDekMsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLE1BQU1JLEtBQThDLEdBQUcsQ0FDckQ7TUFDRUMsS0FBSyxFQUFFaEIsV0FBVyxDQUFDaUIsU0FBUztNQUM1QkMsVUFBVSxFQUFFQyxNQUFNLElBQUksSUFBSWQsSUFBSSxDQUFFRixnQkFBZ0IsQ0FBQ2lCLHNCQUFzQixFQUNyRWIsY0FBYyxDQUFlLENBQUMsQ0FBQyxFQUFFSCxrQkFBa0IsQ0FBQ2lCLG9CQUFvQixFQUFFO1FBQ3hFRixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csWUFBWSxDQUFFLE1BQU87TUFDdEMsQ0FBRSxDQUFFLENBQUM7TUFDUEMsVUFBVSxFQUFFO0lBQ2QsQ0FBQyxFQUNEO01BQ0VQLEtBQUssRUFBRWhCLFdBQVcsQ0FBQ3dCLFdBQVc7TUFDOUJOLFVBQVUsRUFBRUMsTUFBTSxJQUFJLElBQUlkLElBQUksQ0FBRUYsZ0JBQWdCLENBQUNzQix3QkFBd0IsRUFDdkVsQixjQUFjLENBQWUsQ0FBQyxDQUFDLEVBQUVILGtCQUFrQixDQUFDaUIsb0JBQW9CLEVBQUU7UUFDeEVGLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsTUFBTztNQUN0QyxDQUFFLENBQUUsQ0FBQztNQUNQQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQ0Q7TUFDRVAsS0FBSyxFQUFFaEIsV0FBVyxDQUFDMEIsVUFBVTtNQUM3QlIsVUFBVSxFQUFFQyxNQUFNLElBQUksSUFBSWQsSUFBSSxDQUFFRixnQkFBZ0IsQ0FBQ3dCLHVCQUF1QixFQUN0RXBCLGNBQWMsQ0FBZSxDQUFDLENBQUMsRUFBRUgsa0JBQWtCLENBQUNpQixvQkFBb0IsRUFBRTtRQUN4RUYsTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSxNQUFPO01BQ3RDLENBQUUsQ0FBRSxDQUFDO01BQ1BDLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FDRjtJQUVELEtBQUssQ0FBRWIsYUFBYSxFQUFFSyxLQUFLLEVBQUVILE9BQVEsQ0FBQztFQUN4QztBQUNGO0FBRUFYLFNBQVMsQ0FBQzJCLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRXBCLDJCQUE0QixDQUFDIn0=