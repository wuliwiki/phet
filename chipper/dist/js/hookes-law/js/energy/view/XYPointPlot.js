// Copyright 2015-2023, University of Colorado Boulder

/**
 * Abstract base type for the Force and Energy XY plots.
 *
 * Responsibilities:
 * - draws the axes
 * - draws a point at (x,y)
 * - draws leader lines from axes to point
 * - draws values, and keeps them from colliding with each other or with the axes
 * - draws tick marks for (x,y) values
 * - draws a 1-dimensional vector for the x value
 * - handles visibility of values and the 1-dimensional vector
 * - keeps all of the above synchronized with x and y Properties
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Circle, Line, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import HookesLawColors from '../../common/HookesLawColors.js';
import HookesLawConstants from '../../common/HookesLawConstants.js';
import hookesLaw from '../../hookesLaw.js';
import HookesLawStrings from '../../HookesLawStrings.js';
import XYAxes from './XYAxes.js';

// constants
const VALUE_X_MARGIN = 6;
const VALUE_Y_MARGIN = 3;
const VALUE_BACKGROUND_CORNER_RADIUS = 3;
const LEADER_LINE_OPTIONS = {
  stroke: 'black',
  lineWidth: 1,
  lineDash: [3, 3]
};
const TICK_LENGTH = 12;
const TICK_OPTIONS = {
  stroke: 'black',
  lineWidth: 1
};
const DEFAULT_AXIS_FONT = new PhetFont(12);
const DEFAULT_VALUE_FONT = new PhetFont(12);
export default class XYPointPlot extends Node {
  /**
   * @param xProperty - x coordinate value
   * @param yProperty - y coordinate value
   * @param valuesVisibleProperty - whether values are visible on the plot
   * @param displacementVectorVisibleProperty - whether the horizontal displacement is displayed
   * @param providedOptions
   */
  constructor(xProperty, yProperty, valuesVisibleProperty, displacementVectorVisibleProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      // both axes
      axisFont: DEFAULT_AXIS_FONT,
      valueFont: DEFAULT_VALUE_FONT,
      // x-axis
      minX: -1,
      maxX: 1,
      xString: 'x',
      xDecimalPlaces: 0,
      xUnits: '',
      xValueFill: 'black',
      xUnitLength: 1,
      xLabelMaxWidth: null,
      xValueBackgroundColor: null,
      // y-axis
      minY: -1,
      maxY: 1,
      yString: 'y',
      yDecimalPlaces: 0,
      yUnits: '',
      yValueFill: 'black',
      yUnitLength: 1,
      yValueBackgroundColor: null,
      // point
      pointFill: 'black',
      pointRadius: 5
    }, providedOptions);
    assert && assert(options.xDecimalPlaces >= 0);
    assert && assert(options.yDecimalPlaces >= 0);
    assert && assert(options.xUnitLength > 0);
    assert && assert(options.yUnitLength > 0);
    assert && assert(options.pointRadius > 0);

    // XY axes
    const axesNode = new XYAxes({
      minX: options.minX,
      maxX: options.maxX,
      minY: options.minY,
      maxY: options.maxY,
      xString: options.xString,
      yString: options.yString,
      font: options.axisFont,
      xLabelMaxWidth: options.xLabelMaxWidth,
      tandem: options.tandem.createTandem('axesNode')
    });

    // point
    const pointNode = new Circle(options.pointRadius, {
      fill: options.pointFill
    });

    // x nodes
    const xValueText = new Text('', {
      maxWidth: 150,
      // i18n
      fill: options.xValueFill,
      font: options.valueFont,
      tandem: options.tandem.createTandem('xValueText')
    });
    const xTickNode = new Line(0, 0, 0, TICK_LENGTH, combineOptions({}, TICK_OPTIONS, {
      centerY: 0
    }));
    const xLeaderLine = new Line(0, 0, 0, 1, LEADER_LINE_OPTIONS);
    const xVectorNode = new Line(0, 0, 1, 0, {
      lineWidth: 3,
      stroke: HookesLawColors.DISPLACEMENT
    });
    const xValueBackgroundNode = new Rectangle(0, 0, 1, 1, {
      fill: options.xValueBackgroundColor
    });

    // y nodes
    const yValueText = new Text('', {
      maxWidth: 150,
      // i18n
      fill: options.yValueFill,
      font: options.valueFont,
      tandem: options.tandem.createTandem('yValueText')
    });
    const yTickNode = new Line(0, 0, TICK_LENGTH, 0, combineOptions({}, TICK_OPTIONS, {
      centerX: 0
    }));
    const yLeaderLine = new Line(0, 0, 1, 0, LEADER_LINE_OPTIONS);
    const yValueBackgroundNode = new Rectangle(0, 0, 1, 1, {
      fill: options.yValueBackgroundColor
    });
    options.children = [axesNode, xLeaderLine, xTickNode, xValueBackgroundNode, xValueText, xVectorNode, yLeaderLine, yTickNode, yValueBackgroundNode, yValueText, pointNode];

    // visibility
    displacementVectorVisibleProperty.link(visible => {
      const xFixed = Utils.toFixedNumber(xProperty.value, options.xDecimalPlaces); // the displayed value
      xVectorNode.visible = visible && xFixed !== 0;
    });
    valuesVisibleProperty.link(visible => {
      // x-axis nodes
      xValueText.visible = visible;
      xValueBackgroundNode.visible = visible;
      xTickNode.visible = visible;
      xLeaderLine.visible = visible;

      // y-axis nodes
      yValueText.visible = visible;
      yValueBackgroundNode.visible = visible;
      yTickNode.visible = visible;
      yLeaderLine.visible = visible;
    });
    xProperty.link(x => {
      const xFixed = Utils.toFixedNumber(x, options.xDecimalPlaces);
      const xView = options.xUnitLength * xFixed;

      // x vector
      xVectorNode.visible = xFixed !== 0 && displacementVectorVisibleProperty.value; // can't draw a zero-length arrow
      if (xFixed !== 0) {
        xVectorNode.setLine(0, 0, xView, 0);
      }

      // x tick mark
      xTickNode.visible = xFixed !== 0 && valuesVisibleProperty.value;
      xTickNode.centerX = xView;

      // x value
      const xString = Utils.toFixed(xFixed, HookesLawConstants.DISPLACEMENT_DECIMAL_PLACES);
      xValueText.string = StringUtils.format(HookesLawStrings.pattern['0value']['1units'], xString, options.xUnits);

      // placement of x value, so that it doesn't collide with y value or axes
      if (options.minY === 0) {
        xValueText.centerX = xView; // centered on the tick
        xValueText.top = 12; // below the x
      } else {
        const X_SPACING = 6;
        if (Math.abs(xView) > X_SPACING + xValueText.width / 2) {
          xValueText.centerX = xView; // centered on the tick
        } else if (xFixed >= 0) {
          xValueText.left = X_SPACING; // to the right of the y-axis
        } else {
          xValueText.right = -X_SPACING; // to the left of the y-axis
        }

        const Y_SPACING = 12;
        if (yProperty.value >= 0) {
          xValueText.top = Y_SPACING; // below the x-axis
        } else {
          xValueText.bottom = -Y_SPACING; // above the x-axis
        }
      }

      // x value background
      xValueBackgroundNode.setRect(0, 0, xValueText.width + 2 * VALUE_X_MARGIN, xValueText.height + 2 * VALUE_Y_MARGIN, VALUE_BACKGROUND_CORNER_RADIUS, VALUE_BACKGROUND_CORNER_RADIUS);
      xValueBackgroundNode.center = xValueText.center;
    });
    yProperty.link(y => {
      const yFixed = Utils.toFixedNumber(y, options.yDecimalPlaces);
      const yView = yFixed * options.yUnitLength;

      // y tick mark
      yTickNode.visible = yFixed !== 0 && valuesVisibleProperty.value;
      yTickNode.centerY = -yView;

      // y value
      const yString = Utils.toFixed(yFixed, options.yDecimalPlaces);
      yValueText.string = StringUtils.format(HookesLawStrings.pattern['0value']['1units'], yString, options.yUnits);

      // placement of y value, so that it doesn't collide with x value or axes
      const X_SPACING = 10;
      if (xProperty.value >= 0) {
        yValueText.right = -X_SPACING; // to the left of the y-axis
      } else {
        yValueText.left = X_SPACING; // to the right of the y-axis
      }

      const Y_SPACING = 4;
      if (Math.abs(yView) > Y_SPACING + yValueText.height / 2) {
        yValueText.centerY = -yView; // centered on the tick
      } else if (yFixed >= 0) {
        yValueText.bottom = -Y_SPACING; // above the x-axis
      } else {
        yValueText.top = Y_SPACING; // below the x-axis
      }

      // y value background
      yValueBackgroundNode.setRect(0, 0, yValueText.width + 2 * VALUE_X_MARGIN, yValueText.height + 2 * VALUE_Y_MARGIN, VALUE_BACKGROUND_CORNER_RADIUS, VALUE_BACKGROUND_CORNER_RADIUS);
      yValueBackgroundNode.center = yValueText.center;
    });

    // Move point and leader lines
    Multilink.multilink([xProperty, yProperty], (x, y) => {
      const xFixed = Utils.toFixedNumber(x, options.xDecimalPlaces);
      const xView = options.xUnitLength * xFixed;
      const yView = -y * options.yUnitLength;

      // point
      pointNode.x = xView;
      pointNode.y = yView;

      // leader lines
      xLeaderLine.setLine(xView, 0, xView, yView);
      yLeaderLine.setLine(0, yView, xView, yView);
    });
    super(options);
  }
}
hookesLaw.register('XYPointPlot', XYPointPlot);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJVdGlscyIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiU3RyaW5nVXRpbHMiLCJQaGV0Rm9udCIsIkNpcmNsZSIsIkxpbmUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsIkhvb2tlc0xhd0NvbG9ycyIsIkhvb2tlc0xhd0NvbnN0YW50cyIsImhvb2tlc0xhdyIsIkhvb2tlc0xhd1N0cmluZ3MiLCJYWUF4ZXMiLCJWQUxVRV9YX01BUkdJTiIsIlZBTFVFX1lfTUFSR0lOIiwiVkFMVUVfQkFDS0dST1VORF9DT1JORVJfUkFESVVTIiwiTEVBREVSX0xJTkVfT1BUSU9OUyIsInN0cm9rZSIsImxpbmVXaWR0aCIsImxpbmVEYXNoIiwiVElDS19MRU5HVEgiLCJUSUNLX09QVElPTlMiLCJERUZBVUxUX0FYSVNfRk9OVCIsIkRFRkFVTFRfVkFMVUVfRk9OVCIsIlhZUG9pbnRQbG90IiwiY29uc3RydWN0b3IiLCJ4UHJvcGVydHkiLCJ5UHJvcGVydHkiLCJ2YWx1ZXNWaXNpYmxlUHJvcGVydHkiLCJkaXNwbGFjZW1lbnRWZWN0b3JWaXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYXhpc0ZvbnQiLCJ2YWx1ZUZvbnQiLCJtaW5YIiwibWF4WCIsInhTdHJpbmciLCJ4RGVjaW1hbFBsYWNlcyIsInhVbml0cyIsInhWYWx1ZUZpbGwiLCJ4VW5pdExlbmd0aCIsInhMYWJlbE1heFdpZHRoIiwieFZhbHVlQmFja2dyb3VuZENvbG9yIiwibWluWSIsIm1heFkiLCJ5U3RyaW5nIiwieURlY2ltYWxQbGFjZXMiLCJ5VW5pdHMiLCJ5VmFsdWVGaWxsIiwieVVuaXRMZW5ndGgiLCJ5VmFsdWVCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEZpbGwiLCJwb2ludFJhZGl1cyIsImFzc2VydCIsImF4ZXNOb2RlIiwiZm9udCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBvaW50Tm9kZSIsImZpbGwiLCJ4VmFsdWVUZXh0IiwibWF4V2lkdGgiLCJ4VGlja05vZGUiLCJjZW50ZXJZIiwieExlYWRlckxpbmUiLCJ4VmVjdG9yTm9kZSIsIkRJU1BMQUNFTUVOVCIsInhWYWx1ZUJhY2tncm91bmROb2RlIiwieVZhbHVlVGV4dCIsInlUaWNrTm9kZSIsImNlbnRlclgiLCJ5TGVhZGVyTGluZSIsInlWYWx1ZUJhY2tncm91bmROb2RlIiwiY2hpbGRyZW4iLCJsaW5rIiwidmlzaWJsZSIsInhGaXhlZCIsInRvRml4ZWROdW1iZXIiLCJ2YWx1ZSIsIngiLCJ4VmlldyIsInNldExpbmUiLCJ0b0ZpeGVkIiwiRElTUExBQ0VNRU5UX0RFQ0lNQUxfUExBQ0VTIiwic3RyaW5nIiwiZm9ybWF0IiwicGF0dGVybiIsInRvcCIsIlhfU1BBQ0lORyIsIk1hdGgiLCJhYnMiLCJ3aWR0aCIsImxlZnQiLCJyaWdodCIsIllfU1BBQ0lORyIsImJvdHRvbSIsInNldFJlY3QiLCJoZWlnaHQiLCJjZW50ZXIiLCJ5IiwieUZpeGVkIiwieVZpZXciLCJtdWx0aWxpbmsiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlhZUG9pbnRQbG90LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IGJhc2UgdHlwZSBmb3IgdGhlIEZvcmNlIGFuZCBFbmVyZ3kgWFkgcGxvdHMuXHJcbiAqXHJcbiAqIFJlc3BvbnNpYmlsaXRpZXM6XHJcbiAqIC0gZHJhd3MgdGhlIGF4ZXNcclxuICogLSBkcmF3cyBhIHBvaW50IGF0ICh4LHkpXHJcbiAqIC0gZHJhd3MgbGVhZGVyIGxpbmVzIGZyb20gYXhlcyB0byBwb2ludFxyXG4gKiAtIGRyYXdzIHZhbHVlcywgYW5kIGtlZXBzIHRoZW0gZnJvbSBjb2xsaWRpbmcgd2l0aCBlYWNoIG90aGVyIG9yIHdpdGggdGhlIGF4ZXNcclxuICogLSBkcmF3cyB0aWNrIG1hcmtzIGZvciAoeCx5KSB2YWx1ZXNcclxuICogLSBkcmF3cyBhIDEtZGltZW5zaW9uYWwgdmVjdG9yIGZvciB0aGUgeCB2YWx1ZVxyXG4gKiAtIGhhbmRsZXMgdmlzaWJpbGl0eSBvZiB2YWx1ZXMgYW5kIHRoZSAxLWRpbWVuc2lvbmFsIHZlY3RvclxyXG4gKiAtIGtlZXBzIGFsbCBvZiB0aGUgYWJvdmUgc3luY2hyb25pemVkIHdpdGggeCBhbmQgeSBQcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIEZvbnQsIExpbmUsIExpbmVPcHRpb25zLCBOb2RlLCBOb2RlT3B0aW9ucywgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucywgUmVjdGFuZ2xlLCBUQ29sb3IsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgSG9va2VzTGF3Q29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9Ib29rZXNMYXdDb2xvcnMuanMnO1xyXG5pbXBvcnQgSG9va2VzTGF3Q29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Ib29rZXNMYXdDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgaG9va2VzTGF3IGZyb20gJy4uLy4uL2hvb2tlc0xhdy5qcyc7XHJcbmltcG9ydCBIb29rZXNMYXdTdHJpbmdzIGZyb20gJy4uLy4uL0hvb2tlc0xhd1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgWFlBeGVzIGZyb20gJy4vWFlBeGVzLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBWQUxVRV9YX01BUkdJTiA9IDY7XHJcbmNvbnN0IFZBTFVFX1lfTUFSR0lOID0gMztcclxuY29uc3QgVkFMVUVfQkFDS0dST1VORF9DT1JORVJfUkFESVVTID0gMztcclxuY29uc3QgTEVBREVSX0xJTkVfT1BUSU9OUyA9IHtcclxuICBzdHJva2U6ICdibGFjaycsXHJcbiAgbGluZVdpZHRoOiAxLFxyXG4gIGxpbmVEYXNoOiBbIDMsIDMgXVxyXG59O1xyXG5jb25zdCBUSUNLX0xFTkdUSCA9IDEyO1xyXG5jb25zdCBUSUNLX09QVElPTlMgPSB7XHJcbiAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gIGxpbmVXaWR0aDogMVxyXG59O1xyXG5jb25zdCBERUZBVUxUX0FYSVNfRk9OVCA9IG5ldyBQaGV0Rm9udCggMTIgKTtcclxuY29uc3QgREVGQVVMVF9WQUxVRV9GT05UID0gbmV3IFBoZXRGb250KCAxMiApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gYm90aCBheGVzXHJcbiAgYXhpc0ZvbnQ/OiBGb250O1xyXG4gIHZhbHVlRm9udD86IEZvbnQ7XHJcblxyXG4gIC8vIHgtYXhpc1xyXG4gIG1pblg/OiBudW1iZXI7XHJcbiAgbWF4WD86IG51bWJlcjtcclxuICB4U3RyaW5nPzogc3RyaW5nO1xyXG4gIHhEZWNpbWFsUGxhY2VzPzogbnVtYmVyO1xyXG4gIHhVbml0cz86IHN0cmluZztcclxuICB4VmFsdWVGaWxsPzogVENvbG9yO1xyXG4gIHhVbml0TGVuZ3RoPzogbnVtYmVyO1xyXG4gIHhMYWJlbE1heFdpZHRoPzogbnVtYmVyIHwgbnVsbDtcclxuICB4VmFsdWVCYWNrZ3JvdW5kQ29sb3I/OiBUQ29sb3I7XHJcblxyXG4gIC8vIHktYXhpc1xyXG4gIG1pblk/OiBudW1iZXI7XHJcbiAgbWF4WT86IG51bWJlcjtcclxuICB5U3RyaW5nPzogc3RyaW5nO1xyXG4gIHlEZWNpbWFsUGxhY2VzPzogbnVtYmVyO1xyXG4gIHlVbml0cz86IHN0cmluZztcclxuICB5VmFsdWVGaWxsPzogVENvbG9yO1xyXG4gIHlVbml0TGVuZ3RoPzogbnVtYmVyO1xyXG4gIHlWYWx1ZUJhY2tncm91bmRDb2xvcj86IFRDb2xvcjtcclxuXHJcbiAgLy8gcG9pbnRcclxuICBwb2ludEZpbGw/OiBUQ29sb3I7XHJcbiAgcG9pbnRSYWRpdXM/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBYWVBvaW50UGxvdE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Tm9kZU9wdGlvbnMsICd0YW5kZW0nIHwgJ3Zpc2libGVQcm9wZXJ0eSc+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWFlQb2ludFBsb3QgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHhQcm9wZXJ0eSAtIHggY29vcmRpbmF0ZSB2YWx1ZVxyXG4gICAqIEBwYXJhbSB5UHJvcGVydHkgLSB5IGNvb3JkaW5hdGUgdmFsdWVcclxuICAgKiBAcGFyYW0gdmFsdWVzVmlzaWJsZVByb3BlcnR5IC0gd2hldGhlciB2YWx1ZXMgYXJlIHZpc2libGUgb24gdGhlIHBsb3RcclxuICAgKiBAcGFyYW0gZGlzcGxhY2VtZW50VmVjdG9yVmlzaWJsZVByb3BlcnR5IC0gd2hldGhlciB0aGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgaXMgZGlzcGxheWVkXHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggeFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgeVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYWNlbWVudFZlY3RvclZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFhZUG9pbnRQbG90T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFhZUG9pbnRQbG90T3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICAvLyBib3RoIGF4ZXNcclxuICAgICAgYXhpc0ZvbnQ6IERFRkFVTFRfQVhJU19GT05ULFxyXG4gICAgICB2YWx1ZUZvbnQ6IERFRkFVTFRfVkFMVUVfRk9OVCxcclxuXHJcbiAgICAgIC8vIHgtYXhpc1xyXG4gICAgICBtaW5YOiAtMSxcclxuICAgICAgbWF4WDogMSxcclxuICAgICAgeFN0cmluZzogJ3gnLFxyXG4gICAgICB4RGVjaW1hbFBsYWNlczogMCxcclxuICAgICAgeFVuaXRzOiAnJyxcclxuICAgICAgeFZhbHVlRmlsbDogJ2JsYWNrJyxcclxuICAgICAgeFVuaXRMZW5ndGg6IDEsXHJcbiAgICAgIHhMYWJlbE1heFdpZHRoOiBudWxsLFxyXG4gICAgICB4VmFsdWVCYWNrZ3JvdW5kQ29sb3I6IG51bGwsXHJcblxyXG4gICAgICAvLyB5LWF4aXNcclxuICAgICAgbWluWTogLTEsXHJcbiAgICAgIG1heFk6IDEsXHJcbiAgICAgIHlTdHJpbmc6ICd5JyxcclxuICAgICAgeURlY2ltYWxQbGFjZXM6IDAsXHJcbiAgICAgIHlVbml0czogJycsXHJcbiAgICAgIHlWYWx1ZUZpbGw6ICdibGFjaycsXHJcbiAgICAgIHlVbml0TGVuZ3RoOiAxLFxyXG4gICAgICB5VmFsdWVCYWNrZ3JvdW5kQ29sb3I6IG51bGwsXHJcblxyXG4gICAgICAvLyBwb2ludFxyXG4gICAgICBwb2ludEZpbGw6ICdibGFjaycsXHJcbiAgICAgIHBvaW50UmFkaXVzOiA1XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnhEZWNpbWFsUGxhY2VzID49IDAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMueURlY2ltYWxQbGFjZXMgPj0gMCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy54VW5pdExlbmd0aCA+IDAgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMueVVuaXRMZW5ndGggPiAwICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnBvaW50UmFkaXVzID4gMCApO1xyXG5cclxuICAgIC8vIFhZIGF4ZXNcclxuICAgIGNvbnN0IGF4ZXNOb2RlID0gbmV3IFhZQXhlcygge1xyXG4gICAgICBtaW5YOiBvcHRpb25zLm1pblgsXHJcbiAgICAgIG1heFg6IG9wdGlvbnMubWF4WCxcclxuICAgICAgbWluWTogb3B0aW9ucy5taW5ZLFxyXG4gICAgICBtYXhZOiBvcHRpb25zLm1heFksXHJcbiAgICAgIHhTdHJpbmc6IG9wdGlvbnMueFN0cmluZyxcclxuICAgICAgeVN0cmluZzogb3B0aW9ucy55U3RyaW5nLFxyXG4gICAgICBmb250OiBvcHRpb25zLmF4aXNGb250LFxyXG4gICAgICB4TGFiZWxNYXhXaWR0aDogb3B0aW9ucy54TGFiZWxNYXhXaWR0aCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdheGVzTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHBvaW50XHJcbiAgICBjb25zdCBwb2ludE5vZGUgPSBuZXcgQ2lyY2xlKCBvcHRpb25zLnBvaW50UmFkaXVzLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMucG9pbnRGaWxsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8geCBub2Rlc1xyXG4gICAgY29uc3QgeFZhbHVlVGV4dCA9IG5ldyBUZXh0KCAnJywge1xyXG4gICAgICBtYXhXaWR0aDogMTUwLCAvLyBpMThuXHJcbiAgICAgIGZpbGw6IG9wdGlvbnMueFZhbHVlRmlsbCxcclxuICAgICAgZm9udDogb3B0aW9ucy52YWx1ZUZvbnQsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAneFZhbHVlVGV4dCcgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgeFRpY2tOb2RlID0gbmV3IExpbmUoIDAsIDAsIDAsIFRJQ0tfTEVOR1RILCBjb21iaW5lT3B0aW9uczxMaW5lT3B0aW9ucz4oIHt9LCBUSUNLX09QVElPTlMsIHsgY2VudGVyWTogMCB9ICkgKTtcclxuICAgIGNvbnN0IHhMZWFkZXJMaW5lID0gbmV3IExpbmUoIDAsIDAsIDAsIDEsIExFQURFUl9MSU5FX09QVElPTlMgKTtcclxuICAgIGNvbnN0IHhWZWN0b3JOb2RlID0gbmV3IExpbmUoIDAsIDAsIDEsIDAsIHsgbGluZVdpZHRoOiAzLCBzdHJva2U6IEhvb2tlc0xhd0NvbG9ycy5ESVNQTEFDRU1FTlQgfSApO1xyXG4gICAgY29uc3QgeFZhbHVlQmFja2dyb3VuZE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxLCAxLCB7IGZpbGw6IG9wdGlvbnMueFZhbHVlQmFja2dyb3VuZENvbG9yIH0gKTtcclxuXHJcbiAgICAvLyB5IG5vZGVzXHJcbiAgICBjb25zdCB5VmFsdWVUZXh0ID0gbmV3IFRleHQoICcnLCB7XHJcbiAgICAgIG1heFdpZHRoOiAxNTAsIC8vIGkxOG5cclxuICAgICAgZmlsbDogb3B0aW9ucy55VmFsdWVGaWxsLFxyXG4gICAgICBmb250OiBvcHRpb25zLnZhbHVlRm9udCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd5VmFsdWVUZXh0JyApXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCB5VGlja05vZGUgPSBuZXcgTGluZSggMCwgMCwgVElDS19MRU5HVEgsIDAsIGNvbWJpbmVPcHRpb25zPExpbmVPcHRpb25zPigge30sIFRJQ0tfT1BUSU9OUywgeyBjZW50ZXJYOiAwIH0gKSApO1xyXG4gICAgY29uc3QgeUxlYWRlckxpbmUgPSBuZXcgTGluZSggMCwgMCwgMSwgMCwgTEVBREVSX0xJTkVfT1BUSU9OUyApO1xyXG4gICAgY29uc3QgeVZhbHVlQmFja2dyb3VuZE5vZGUgPSBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAxLCAxLCB7IGZpbGw6IG9wdGlvbnMueVZhbHVlQmFja2dyb3VuZENvbG9yIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gW1xyXG4gICAgICBheGVzTm9kZSxcclxuICAgICAgeExlYWRlckxpbmUsIHhUaWNrTm9kZSwgeFZhbHVlQmFja2dyb3VuZE5vZGUsIHhWYWx1ZVRleHQsIHhWZWN0b3JOb2RlLFxyXG4gICAgICB5TGVhZGVyTGluZSwgeVRpY2tOb2RlLCB5VmFsdWVCYWNrZ3JvdW5kTm9kZSwgeVZhbHVlVGV4dCxcclxuICAgICAgcG9pbnROb2RlXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIHZpc2liaWxpdHlcclxuICAgIGRpc3BsYWNlbWVudFZlY3RvclZpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlID0+IHtcclxuICAgICAgY29uc3QgeEZpeGVkID0gVXRpbHMudG9GaXhlZE51bWJlciggeFByb3BlcnR5LnZhbHVlLCBvcHRpb25zLnhEZWNpbWFsUGxhY2VzICk7IC8vIHRoZSBkaXNwbGF5ZWQgdmFsdWVcclxuICAgICAgeFZlY3Rvck5vZGUudmlzaWJsZSA9ICggdmlzaWJsZSAmJiB4Rml4ZWQgIT09IDAgKTtcclxuICAgIH0gKTtcclxuICAgIHZhbHVlc1Zpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlID0+IHtcclxuXHJcbiAgICAgIC8vIHgtYXhpcyBub2Rlc1xyXG4gICAgICB4VmFsdWVUZXh0LnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICB4VmFsdWVCYWNrZ3JvdW5kTm9kZS52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgICAgeFRpY2tOb2RlLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICB4TGVhZGVyTGluZS52aXNpYmxlID0gdmlzaWJsZTtcclxuXHJcbiAgICAgIC8vIHktYXhpcyBub2Rlc1xyXG4gICAgICB5VmFsdWVUZXh0LnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICB5VmFsdWVCYWNrZ3JvdW5kTm9kZS52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgICAgeVRpY2tOb2RlLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICB5TGVhZGVyTGluZS52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB4UHJvcGVydHkubGluayggeCA9PiB7XHJcblxyXG4gICAgICBjb25zdCB4Rml4ZWQgPSBVdGlscy50b0ZpeGVkTnVtYmVyKCB4LCBvcHRpb25zLnhEZWNpbWFsUGxhY2VzICk7XHJcbiAgICAgIGNvbnN0IHhWaWV3ID0gb3B0aW9ucy54VW5pdExlbmd0aCAqIHhGaXhlZDtcclxuXHJcbiAgICAgIC8vIHggdmVjdG9yXHJcbiAgICAgIHhWZWN0b3JOb2RlLnZpc2libGUgPSAoIHhGaXhlZCAhPT0gMCAmJiBkaXNwbGFjZW1lbnRWZWN0b3JWaXNpYmxlUHJvcGVydHkudmFsdWUgKTsgLy8gY2FuJ3QgZHJhdyBhIHplcm8tbGVuZ3RoIGFycm93XHJcbiAgICAgIGlmICggeEZpeGVkICE9PSAwICkge1xyXG4gICAgICAgIHhWZWN0b3JOb2RlLnNldExpbmUoIDAsIDAsIHhWaWV3LCAwICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHggdGljayBtYXJrXHJcbiAgICAgIHhUaWNrTm9kZS52aXNpYmxlID0gKCB4Rml4ZWQgIT09IDAgJiYgdmFsdWVzVmlzaWJsZVByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIHhUaWNrTm9kZS5jZW50ZXJYID0geFZpZXc7XHJcblxyXG4gICAgICAvLyB4IHZhbHVlXHJcbiAgICAgIGNvbnN0IHhTdHJpbmcgPSBVdGlscy50b0ZpeGVkKCB4Rml4ZWQsIEhvb2tlc0xhd0NvbnN0YW50cy5ESVNQTEFDRU1FTlRfREVDSU1BTF9QTEFDRVMgKTtcclxuICAgICAgeFZhbHVlVGV4dC5zdHJpbmcgPSBTdHJpbmdVdGlscy5mb3JtYXQoIEhvb2tlc0xhd1N0cmluZ3MucGF0dGVyblsgJzB2YWx1ZScgXVsgJzF1bml0cycgXSwgeFN0cmluZywgb3B0aW9ucy54VW5pdHMgKTtcclxuXHJcbiAgICAgIC8vIHBsYWNlbWVudCBvZiB4IHZhbHVlLCBzbyB0aGF0IGl0IGRvZXNuJ3QgY29sbGlkZSB3aXRoIHkgdmFsdWUgb3IgYXhlc1xyXG4gICAgICBpZiAoIG9wdGlvbnMubWluWSA9PT0gMCApIHtcclxuICAgICAgICB4VmFsdWVUZXh0LmNlbnRlclggPSB4VmlldzsgLy8gY2VudGVyZWQgb24gdGhlIHRpY2tcclxuICAgICAgICB4VmFsdWVUZXh0LnRvcCA9IDEyOyAvLyBiZWxvdyB0aGUgeFxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IFhfU1BBQ0lORyA9IDY7XHJcbiAgICAgICAgaWYgKCBNYXRoLmFicyggeFZpZXcgKSA+ICggWF9TUEFDSU5HICsgeFZhbHVlVGV4dC53aWR0aCAvIDIgKSApIHtcclxuICAgICAgICAgIHhWYWx1ZVRleHQuY2VudGVyWCA9IHhWaWV3OyAvLyBjZW50ZXJlZCBvbiB0aGUgdGlja1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggeEZpeGVkID49IDAgKSB7XHJcbiAgICAgICAgICB4VmFsdWVUZXh0LmxlZnQgPSBYX1NQQUNJTkc7IC8vIHRvIHRoZSByaWdodCBvZiB0aGUgeS1heGlzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgeFZhbHVlVGV4dC5yaWdodCA9IC1YX1NQQUNJTkc7IC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSB5LWF4aXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IFlfU1BBQ0lORyA9IDEyO1xyXG4gICAgICAgIGlmICggeVByb3BlcnR5LnZhbHVlID49IDAgKSB7XHJcbiAgICAgICAgICB4VmFsdWVUZXh0LnRvcCA9IFlfU1BBQ0lORzsgLy8gYmVsb3cgdGhlIHgtYXhpc1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHhWYWx1ZVRleHQuYm90dG9tID0gLVlfU1BBQ0lORzsgLy8gYWJvdmUgdGhlIHgtYXhpc1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8geCB2YWx1ZSBiYWNrZ3JvdW5kXHJcbiAgICAgIHhWYWx1ZUJhY2tncm91bmROb2RlLnNldFJlY3QoIDAsIDAsXHJcbiAgICAgICAgeFZhbHVlVGV4dC53aWR0aCArICggMiAqIFZBTFVFX1hfTUFSR0lOICksIHhWYWx1ZVRleHQuaGVpZ2h0ICsgKCAyICogVkFMVUVfWV9NQVJHSU4gKSxcclxuICAgICAgICBWQUxVRV9CQUNLR1JPVU5EX0NPUk5FUl9SQURJVVMsIFZBTFVFX0JBQ0tHUk9VTkRfQ09STkVSX1JBRElVUyApO1xyXG4gICAgICB4VmFsdWVCYWNrZ3JvdW5kTm9kZS5jZW50ZXIgPSB4VmFsdWVUZXh0LmNlbnRlcjtcclxuICAgIH0gKTtcclxuXHJcbiAgICB5UHJvcGVydHkubGluayggeSA9PiB7XHJcblxyXG4gICAgICBjb25zdCB5Rml4ZWQgPSBVdGlscy50b0ZpeGVkTnVtYmVyKCB5LCBvcHRpb25zLnlEZWNpbWFsUGxhY2VzICk7XHJcbiAgICAgIGNvbnN0IHlWaWV3ID0geUZpeGVkICogb3B0aW9ucy55VW5pdExlbmd0aDtcclxuXHJcbiAgICAgIC8vIHkgdGljayBtYXJrXHJcbiAgICAgIHlUaWNrTm9kZS52aXNpYmxlID0gKCB5Rml4ZWQgIT09IDAgJiYgdmFsdWVzVmlzaWJsZVByb3BlcnR5LnZhbHVlICk7XHJcbiAgICAgIHlUaWNrTm9kZS5jZW50ZXJZID0gLXlWaWV3O1xyXG5cclxuICAgICAgLy8geSB2YWx1ZVxyXG4gICAgICBjb25zdCB5U3RyaW5nID0gVXRpbHMudG9GaXhlZCggeUZpeGVkLCBvcHRpb25zLnlEZWNpbWFsUGxhY2VzICk7XHJcbiAgICAgIHlWYWx1ZVRleHQuc3RyaW5nID0gU3RyaW5nVXRpbHMuZm9ybWF0KCBIb29rZXNMYXdTdHJpbmdzLnBhdHRlcm5bICcwdmFsdWUnIF1bICcxdW5pdHMnIF0sIHlTdHJpbmcsIG9wdGlvbnMueVVuaXRzICk7XHJcblxyXG4gICAgICAvLyBwbGFjZW1lbnQgb2YgeSB2YWx1ZSwgc28gdGhhdCBpdCBkb2Vzbid0IGNvbGxpZGUgd2l0aCB4IHZhbHVlIG9yIGF4ZXNcclxuICAgICAgY29uc3QgWF9TUEFDSU5HID0gMTA7XHJcbiAgICAgIGlmICggeFByb3BlcnR5LnZhbHVlID49IDAgKSB7XHJcbiAgICAgICAgeVZhbHVlVGV4dC5yaWdodCA9IC1YX1NQQUNJTkc7IC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSB5LWF4aXNcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB5VmFsdWVUZXh0LmxlZnQgPSBYX1NQQUNJTkc7IC8vIHRvIHRoZSByaWdodCBvZiB0aGUgeS1heGlzXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IFlfU1BBQ0lORyA9IDQ7XHJcbiAgICAgIGlmICggTWF0aC5hYnMoIHlWaWV3ICkgPiBZX1NQQUNJTkcgKyB5VmFsdWVUZXh0LmhlaWdodCAvIDIgKSB7XHJcbiAgICAgICAgeVZhbHVlVGV4dC5jZW50ZXJZID0gLXlWaWV3OyAvLyBjZW50ZXJlZCBvbiB0aGUgdGlja1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCB5Rml4ZWQgPj0gMCApIHtcclxuICAgICAgICB5VmFsdWVUZXh0LmJvdHRvbSA9IC1ZX1NQQUNJTkc7IC8vIGFib3ZlIHRoZSB4LWF4aXNcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB5VmFsdWVUZXh0LnRvcCA9IFlfU1BBQ0lORzsgLy8gYmVsb3cgdGhlIHgtYXhpc1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB5IHZhbHVlIGJhY2tncm91bmRcclxuICAgICAgeVZhbHVlQmFja2dyb3VuZE5vZGUuc2V0UmVjdCggMCwgMCxcclxuICAgICAgICB5VmFsdWVUZXh0LndpZHRoICsgKCAyICogVkFMVUVfWF9NQVJHSU4gKSwgeVZhbHVlVGV4dC5oZWlnaHQgKyAoIDIgKiBWQUxVRV9ZX01BUkdJTiApLFxyXG4gICAgICAgIFZBTFVFX0JBQ0tHUk9VTkRfQ09STkVSX1JBRElVUywgVkFMVUVfQkFDS0dST1VORF9DT1JORVJfUkFESVVTICk7XHJcbiAgICAgIHlWYWx1ZUJhY2tncm91bmROb2RlLmNlbnRlciA9IHlWYWx1ZVRleHQuY2VudGVyO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIE1vdmUgcG9pbnQgYW5kIGxlYWRlciBsaW5lc1xyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyB4UHJvcGVydHksIHlQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHgsIHkgKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHhGaXhlZCA9IFV0aWxzLnRvRml4ZWROdW1iZXIoIHgsIG9wdGlvbnMueERlY2ltYWxQbGFjZXMgKTtcclxuICAgICAgICBjb25zdCB4VmlldyA9IG9wdGlvbnMueFVuaXRMZW5ndGggKiB4Rml4ZWQ7XHJcbiAgICAgICAgY29uc3QgeVZpZXcgPSAteSAqIG9wdGlvbnMueVVuaXRMZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIHBvaW50XHJcbiAgICAgICAgcG9pbnROb2RlLnggPSB4VmlldztcclxuICAgICAgICBwb2ludE5vZGUueSA9IHlWaWV3O1xyXG5cclxuICAgICAgICAvLyBsZWFkZXIgbGluZXNcclxuICAgICAgICB4TGVhZGVyTGluZS5zZXRMaW5lKCB4VmlldywgMCwgeFZpZXcsIHlWaWV3ICk7XHJcbiAgICAgICAgeUxlYWRlckxpbmUuc2V0TGluZSggMCwgeVZpZXcsIHhWaWV3LCB5VmlldyApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmhvb2tlc0xhdy5yZWdpc3RlciggJ1hZUG9pbnRQbG90JywgWFlQb2ludFBsb3QgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBRXhELE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsU0FBUyxJQUFJQyxjQUFjLFFBQVEsdUNBQXVDO0FBRWpGLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxNQUFNLEVBQVFDLElBQUksRUFBZUMsSUFBSSxFQUF1Q0MsU0FBUyxFQUFVQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3ZKLE9BQU9DLGVBQWUsTUFBTSxpQ0FBaUM7QUFDN0QsT0FBT0Msa0JBQWtCLE1BQU0sb0NBQW9DO0FBQ25FLE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLE1BQU0sTUFBTSxhQUFhOztBQUVoQztBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUFDO0FBQ3hCLE1BQU1DLGNBQWMsR0FBRyxDQUFDO0FBQ3hCLE1BQU1DLDhC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