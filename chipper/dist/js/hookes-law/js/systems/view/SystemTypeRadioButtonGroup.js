// Copyright 2015-2023, University of Colorado Boulder

/**
 * Scene control for the "Systems" screen, switches between series and parallel systems.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import RectangularRadioButton from '../../../../sun/js/buttons/RectangularRadioButton.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import HookesLawIconFactory from '../../common/view/HookesLawIconFactory.js';
import hookesLaw from '../../hookesLaw.js';
import SystemType from './SystemType.js';
export default class SystemTypeRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(systemTypeProperty, tandem) {
    const items = [{
      value: SystemType.PARALLEL,
      createNode: () => HookesLawIconFactory.createParallelSystemIcon(),
      tandemName: `parallel${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }, {
      value: SystemType.SERIES,
      createNode: () => HookesLawIconFactory.createSeriesSystemIcon(),
      tandemName: `series${RectangularRadioButton.TANDEM_NAME_SUFFIX}`
    }];
    super(systemTypeProperty, items, {
      orientation: 'horizontal',
      spacing: 10,
      radioButtonOptions: {
        xMargin: 5,
        yMargin: 5,
        buttonAppearanceStrategyOptions: {
          selectedLineWidth: 2
        }
      },
      tandem: tandem
    });
  }
}
hookesLaw.register('SystemTypeRadioButtonGroup', SystemTypeRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5ndWxhclJhZGlvQnV0dG9uIiwiUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwIiwiSG9va2VzTGF3SWNvbkZhY3RvcnkiLCJob29rZXNMYXciLCJTeXN0ZW1UeXBlIiwiU3lzdGVtVHlwZVJhZGlvQnV0dG9uR3JvdXAiLCJjb25zdHJ1Y3RvciIsInN5c3RlbVR5cGVQcm9wZXJ0eSIsInRhbmRlbSIsIml0ZW1zIiwidmFsdWUiLCJQQVJBTExFTCIsImNyZWF0ZU5vZGUiLCJjcmVhdGVQYXJhbGxlbFN5c3RlbUljb24iLCJ0YW5kZW1OYW1lIiwiVEFOREVNX05BTUVfU1VGRklYIiwiU0VSSUVTIiwiY3JlYXRlU2VyaWVzU3lzdGVtSWNvbiIsIm9yaWVudGF0aW9uIiwic3BhY2luZyIsInJhZGlvQnV0dG9uT3B0aW9ucyIsInhNYXJnaW4iLCJ5TWFyZ2luIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5T3B0aW9ucyIsInNlbGVjdGVkTGluZVdpZHRoIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTeXN0ZW1UeXBlUmFkaW9CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY2VuZSBjb250cm9sIGZvciB0aGUgXCJTeXN0ZW1zXCIgc2NyZWVuLCBzd2l0Y2hlcyBiZXR3ZWVuIHNlcmllcyBhbmQgcGFyYWxsZWwgc3lzdGVtcy5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCwgeyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBJdGVtIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEhvb2tlc0xhd0ljb25GYWN0b3J5IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L0hvb2tlc0xhd0ljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGhvb2tlc0xhdyBmcm9tICcuLi8uLi9ob29rZXNMYXcuanMnO1xyXG5pbXBvcnQgU3lzdGVtVHlwZSBmcm9tICcuL1N5c3RlbVR5cGUuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3lzdGVtVHlwZVJhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXA8U3lzdGVtVHlwZT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHN5c3RlbVR5cGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxTeXN0ZW1UeXBlPiwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgaXRlbXM6IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cEl0ZW08U3lzdGVtVHlwZT5bXSA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHZhbHVlOiBTeXN0ZW1UeXBlLlBBUkFMTEVMLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IEhvb2tlc0xhd0ljb25GYWN0b3J5LmNyZWF0ZVBhcmFsbGVsU3lzdGVtSWNvbigpLFxyXG4gICAgICAgIHRhbmRlbU5hbWU6IGBwYXJhbGxlbCR7UmVjdGFuZ3VsYXJSYWRpb0J1dHRvbi5UQU5ERU1fTkFNRV9TVUZGSVh9YFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdmFsdWU6IFN5c3RlbVR5cGUuU0VSSUVTLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6ICgpID0+IEhvb2tlc0xhd0ljb25GYWN0b3J5LmNyZWF0ZVNlcmllc1N5c3RlbUljb24oKSxcclxuICAgICAgICB0YW5kZW1OYW1lOiBgc2VyaWVzJHtSZWN0YW5ndWxhclJhZGlvQnV0dG9uLlRBTkRFTV9OQU1FX1NVRkZJWH1gXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIHN5c3RlbVR5cGVQcm9wZXJ0eSwgaXRlbXMsIHtcclxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgIHJhZGlvQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHhNYXJnaW46IDUsXHJcbiAgICAgICAgeU1hcmdpbjogNSxcclxuICAgICAgICBidXR0b25BcHBlYXJhbmNlU3RyYXRlZ3lPcHRpb25zOiB7XHJcbiAgICAgICAgICBzZWxlY3RlZExpbmVXaWR0aDogMlxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmhvb2tlc0xhdy5yZWdpc3RlciggJ1N5c3RlbVR5cGVSYWRpb0J1dHRvbkdyb3VwJywgU3lzdGVtVHlwZVJhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0Esc0JBQXNCLE1BQU0sc0RBQXNEO0FBQ3pGLE9BQU9DLDJCQUEyQixNQUEyQywyREFBMkQ7QUFFeEksT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBQzVFLE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsT0FBT0MsVUFBVSxNQUFNLGlCQUFpQjtBQUV4QyxlQUFlLE1BQU1DLDBCQUEwQixTQUFTSiwyQkFBMkIsQ0FBYTtFQUV2RkssV0FBV0EsQ0FBRUMsa0JBQW1ELEVBQUVDLE1BQWMsRUFBRztJQUV4RixNQUFNQyxLQUFvRCxHQUFHLENBQzNEO01BQ0VDLEtBQUssRUFBRU4sVUFBVSxDQUFDTyxRQUFRO01BQzFCQyxVQUFVLEVBQUVBLENBQUEsS0FBTVYsb0JBQW9CLENBQUNXLHdCQUF3QixDQUFDLENBQUM7TUFDakVDLFVBQVUsRUFBRyxXQUFVZCxzQkFBc0IsQ0FBQ2Usa0JBQW1CO0lBQ25FLENBQUMsRUFDRDtNQUNFTCxLQUFLLEVBQUVOLFVBQVUsQ0FBQ1ksTUFBTTtNQUN4QkosVUFBVSxFQUFFQSxDQUFBLEtBQU1WLG9CQUFvQixDQUFDZSxzQkFBc0IsQ0FBQyxDQUFDO01BQy9ESCxVQUFVLEVBQUcsU0FBUWQsc0JBQXNCLENBQUNlLGtCQUFtQjtJQUNqRSxDQUFDLENBQ0Y7SUFFRCxLQUFLLENBQUVSLGtCQUFrQixFQUFFRSxLQUFLLEVBQUU7TUFDaENTLFdBQVcsRUFBRSxZQUFZO01BQ3pCQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxrQkFBa0IsRUFBRTtRQUNsQkMsT0FBTyxFQUFFLENBQUM7UUFDVkMsT0FBTyxFQUFFLENBQUM7UUFDVkMsK0JBQStCLEVBQUU7VUFDL0JDLGlCQUFpQixFQUFFO1FBQ3JCO01BQ0YsQ0FBQztNQUNEaEIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUwsU0FBUyxDQUFDc0IsUUFBUSxDQUFFLDRCQUE0QixFQUFFcEIsMEJBQTJCLENBQUMifQ==