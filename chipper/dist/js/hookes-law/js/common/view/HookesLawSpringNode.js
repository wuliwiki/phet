// Copyright 2015-2023, University of Colorado Boulder

/**
 * HookesLawSpringNode is a specialization of ParametricSpringNode that adapts it to the Hooke's Law spring model.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ParametricSpringNode from '../../../../scenery-phet/js/ParametricSpringNode.js';
import hookesLaw from '../../hookesLaw.js';
export default class HookesLawSpringNode extends ParametricSpringNode {
  constructor(spring, providedOptions) {
    const options = optionize()({
      // SelfOptions
      unitDisplacementLength: 1,
      minLineWidth: 3,
      deltaLineWidth: 0.005,
      leftEndLength: 15,
      rightEndLength: 25,
      // ParametricSpringNodeOptions
      loops: 10,
      // number of loops in the coil
      pointsPerLoop: 40,
      // number of points per loop
      radius: 10,
      // radius of a loop with aspect ratio of 1:1
      aspectRatio: 4,
      // y:x aspect ratio of the loop radius
      boundsMethod: 'none' // method used to compute bounds for phet.scenery.Path components, see Path.boundsMethod
    }, providedOptions);
    super(options);

    // stretch or compress the spring
    spring.lengthProperty.link(length => {
      const coilLength = length * options.unitDisplacementLength - (options.leftEndLength + options.rightEndLength);
      this.xScaleProperty.value = coilLength / (this.loopsProperty.value * this.radiusProperty.value);
    });

    // spring constant determines lineWidth
    spring.springConstantProperty.link(springConstant => {
      this.lineWidthProperty.value = options.minLineWidth + options.deltaLineWidth * (springConstant - spring.springConstantRange.min);
    });
  }
}
hookesLaw.register('HookesLawSpringNode', HookesLawSpringNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJQYXJhbWV0cmljU3ByaW5nTm9kZSIsImhvb2tlc0xhdyIsIkhvb2tlc0xhd1NwcmluZ05vZGUiLCJjb25zdHJ1Y3RvciIsInNwcmluZyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ1bml0RGlzcGxhY2VtZW50TGVuZ3RoIiwibWluTGluZVdpZHRoIiwiZGVsdGFMaW5lV2lkdGgiLCJsZWZ0RW5kTGVuZ3RoIiwicmlnaHRFbmRMZW5ndGgiLCJsb29wcyIsInBvaW50c1Blckxvb3AiLCJyYWRpdXMiLCJhc3BlY3RSYXRpbyIsImJvdW5kc01ldGhvZCIsImxlbmd0aFByb3BlcnR5IiwibGluayIsImxlbmd0aCIsImNvaWxMZW5ndGgiLCJ4U2NhbGVQcm9wZXJ0eSIsInZhbHVlIiwibG9vcHNQcm9wZXJ0eSIsInJhZGl1c1Byb3BlcnR5Iiwic3ByaW5nQ29uc3RhbnRQcm9wZXJ0eSIsInNwcmluZ0NvbnN0YW50IiwibGluZVdpZHRoUHJvcGVydHkiLCJzcHJpbmdDb25zdGFudFJhbmdlIiwibWluIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIb29rZXNMYXdTcHJpbmdOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhvb2tlc0xhd1NwcmluZ05vZGUgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBQYXJhbWV0cmljU3ByaW5nTm9kZSB0aGF0IGFkYXB0cyBpdCB0byB0aGUgSG9va2UncyBMYXcgc3ByaW5nIG1vZGVsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQYXJhbWV0cmljU3ByaW5nTm9kZSwgeyBQYXJhbWV0cmljU3ByaW5nTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGFyYW1ldHJpY1NwcmluZ05vZGUuanMnO1xyXG5pbXBvcnQgaG9va2VzTGF3IGZyb20gJy4uLy4uL2hvb2tlc0xhdy5qcyc7XHJcbmltcG9ydCBTcHJpbmcgZnJvbSAnLi4vbW9kZWwvU3ByaW5nLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgdW5pdERpc3BsYWNlbWVudExlbmd0aD86IG51bWJlcjsgLy8gdmlldyBsZW5ndGggb2YgMSBtZXRlciBvZiBkaXNwbGFjZW1lbnRcclxuICBtaW5MaW5lV2lkdGg/OiBudW1iZXI7IC8vIGxpbmVXaWR0aCB1c2VkIHRvIHN0cm9rZSB0aGUgc3ByaW5nIGZvciBtaW5pbXVtIHNwcmluZyBjb25zdGFudFxyXG4gIGRlbHRhTGluZVdpZHRoPzogbnVtYmVyOyAvLyBpbmNyZWFzZSBpbiBsaW5lIHdpZHRoIHBlciAxIHVuaXQgb2Ygc3ByaW5nIGNvbnN0YW50IGluY3JlYXNlXHJcbiAgbGVmdEVuZExlbmd0aD86IG51bWJlcjsgLy8gbGVuZ3RoIG9mIHRoZSBob3Jpem9udGFsIGxpbmUgYWRkZWQgdG8gdGhlIGxlZnQgZW5kIG9mIHRoZSBjb2lsXHJcbiAgcmlnaHRFbmRMZW5ndGg/OiBudW1iZXI7IC8vIGxlbmd0aCBvZiB0aGUgaG9yaXpvbnRhbCBsaW5lIGFkZGVkIHRvIHRoZSByaWdodCBlbmQgb2YgdGhlIGNvaWxcclxufTtcclxuXHJcbnR5cGUgSG9va2VzTGF3U3ByaW5nTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhcmFtZXRyaWNTcHJpbmdOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvb2tlc0xhd1NwcmluZ05vZGUgZXh0ZW5kcyBQYXJhbWV0cmljU3ByaW5nTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ByaW5nOiBTcHJpbmcsIHByb3ZpZGVkT3B0aW9ucz86IEhvb2tlc0xhd1NwcmluZ05vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SG9va2VzTGF3U3ByaW5nTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYXJhbWV0cmljU3ByaW5nTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHVuaXREaXNwbGFjZW1lbnRMZW5ndGg6IDEsXHJcbiAgICAgIG1pbkxpbmVXaWR0aDogMyxcclxuICAgICAgZGVsdGFMaW5lV2lkdGg6IDAuMDA1LFxyXG4gICAgICBsZWZ0RW5kTGVuZ3RoOiAxNSxcclxuICAgICAgcmlnaHRFbmRMZW5ndGg6IDI1LFxyXG5cclxuICAgICAgLy8gUGFyYW1ldHJpY1NwcmluZ05vZGVPcHRpb25zXHJcbiAgICAgIGxvb3BzOiAxMCwgLy8gbnVtYmVyIG9mIGxvb3BzIGluIHRoZSBjb2lsXHJcbiAgICAgIHBvaW50c1Blckxvb3A6IDQwLCAvLyBudW1iZXIgb2YgcG9pbnRzIHBlciBsb29wXHJcbiAgICAgIHJhZGl1czogMTAsIC8vIHJhZGl1cyBvZiBhIGxvb3Agd2l0aCBhc3BlY3QgcmF0aW8gb2YgMToxXHJcbiAgICAgIGFzcGVjdFJhdGlvOiA0LCAvLyB5OnggYXNwZWN0IHJhdGlvIG9mIHRoZSBsb29wIHJhZGl1c1xyXG4gICAgICBib3VuZHNNZXRob2Q6ICdub25lJyAvLyBtZXRob2QgdXNlZCB0byBjb21wdXRlIGJvdW5kcyBmb3IgcGhldC5zY2VuZXJ5LlBhdGggY29tcG9uZW50cywgc2VlIFBhdGguYm91bmRzTWV0aG9kXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHN0cmV0Y2ggb3IgY29tcHJlc3MgdGhlIHNwcmluZ1xyXG4gICAgc3ByaW5nLmxlbmd0aFByb3BlcnR5LmxpbmsoIGxlbmd0aCA9PiB7XHJcbiAgICAgIGNvbnN0IGNvaWxMZW5ndGggPSAoIGxlbmd0aCAqIG9wdGlvbnMudW5pdERpc3BsYWNlbWVudExlbmd0aCApIC0gKCBvcHRpb25zLmxlZnRFbmRMZW5ndGggKyBvcHRpb25zLnJpZ2h0RW5kTGVuZ3RoICk7XHJcbiAgICAgIHRoaXMueFNjYWxlUHJvcGVydHkudmFsdWUgPSBjb2lsTGVuZ3RoIC8gKCB0aGlzLmxvb3BzUHJvcGVydHkudmFsdWUgKiB0aGlzLnJhZGl1c1Byb3BlcnR5LnZhbHVlICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gc3ByaW5nIGNvbnN0YW50IGRldGVybWluZXMgbGluZVdpZHRoXHJcbiAgICBzcHJpbmcuc3ByaW5nQ29uc3RhbnRQcm9wZXJ0eS5saW5rKCBzcHJpbmdDb25zdGFudCA9PiB7XHJcbiAgICAgIHRoaXMubGluZVdpZHRoUHJvcGVydHkudmFsdWUgPVxyXG4gICAgICAgIG9wdGlvbnMubWluTGluZVdpZHRoICsgb3B0aW9ucy5kZWx0YUxpbmVXaWR0aCAqICggc3ByaW5nQ29uc3RhbnQgLSBzcHJpbmcuc3ByaW5nQ29uc3RhbnRSYW5nZS5taW4gKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmhvb2tlc0xhdy5yZWdpc3RlciggJ0hvb2tlc0xhd1NwcmluZ05vZGUnLCBIb29rZXNMYXdTcHJpbmdOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0Msb0JBQW9CLE1BQXVDLHFEQUFxRDtBQUN2SCxPQUFPQyxTQUFTLE1BQU0sb0JBQW9CO0FBYTFDLGVBQWUsTUFBTUMsbUJBQW1CLFNBQVNGLG9CQUFvQixDQUFDO0VBRTdERyxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLGVBQTRDLEVBQUc7SUFFakYsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQXVFLENBQUMsQ0FBRTtNQUVqRztNQUNBUSxzQkFBc0IsRUFBRSxDQUFDO01BQ3pCQyxZQUFZLEVBQUUsQ0FBQztNQUNmQyxjQUFjLEVBQUUsS0FBSztNQUNyQkMsYUFBYSxFQUFFLEVBQUU7TUFDakJDLGNBQWMsRUFBRSxFQUFFO01BRWxCO01BQ0FDLEtBQUssRUFBRSxFQUFFO01BQUU7TUFDWEMsYUFBYSxFQUFFLEVBQUU7TUFBRTtNQUNuQkMsTUFBTSxFQUFFLEVBQUU7TUFBRTtNQUNaQyxXQUFXLEVBQUUsQ0FBQztNQUFFO01BQ2hCQyxZQUFZLEVBQUUsTUFBTSxDQUFDO0lBQ3ZCLENBQUMsRUFBRVgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQUYsTUFBTSxDQUFDYSxjQUFjLENBQUNDLElBQUksQ0FBRUMsTUFBTSxJQUFJO01BQ3BDLE1BQU1DLFVBQVUsR0FBS0QsTUFBTSxHQUFHYixPQUFPLENBQUNDLHNCQUFzQixJQUFPRCxPQUFPLENBQUNJLGFBQWEsR0FBR0osT0FBTyxDQUFDSyxjQUFjLENBQUU7TUFDbkgsSUFBSSxDQUFDVSxjQUFjLENBQUNDLEtBQUssR0FBR0YsVUFBVSxJQUFLLElBQUksQ0FBQ0csYUFBYSxDQUFDRCxLQUFLLEdBQUcsSUFBSSxDQUFDRSxjQUFjLENBQUNGLEtBQUssQ0FBRTtJQUNuRyxDQUFFLENBQUM7O0lBRUg7SUFDQWxCLE1BQU0sQ0FBQ3FCLHNCQUFzQixDQUFDUCxJQUFJLENBQUVRLGNBQWMsSUFBSTtNQUNwRCxJQUFJLENBQUNDLGlCQUFpQixDQUFDTCxLQUFLLEdBQzFCaEIsT0FBTyxDQUFDRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0csY0FBYyxJQUFLaUIsY0FBYyxHQUFHdEIsTUFBTSxDQUFDd0IsbUJBQW1CLENBQUNDLEdBQUcsQ0FBRTtJQUN2RyxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUE1QixTQUFTLENBQUM2QixRQUFRLENBQUUscUJBQXFCLEVBQUU1QixtQkFBb0IsQ0FBQyJ9