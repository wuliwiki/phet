// Copyright 2022, University of Colorado Boulder

/**
 * EquilibriumPositionCheckbox is the 'Equilibrium Position' checkbox that appears in control panels.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Checkbox from '../../../../sun/js/Checkbox.js';
import HookesLawStrings from '../../HookesLawStrings.js';
import EquilibriumPositionNode from './EquilibriumPositionNode.js';
import hookesLaw from '../../hookesLaw.js';
import { HBox, Text } from '../../../../scenery/js/imports.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import HookesLawConstants from '../HookesLawConstants.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class EquilibriumPositionCheckbox extends Checkbox {
  constructor(equilibriumPositionVisibleProperty, tandem) {
    const text = new Text(HookesLawStrings.equilibriumPositionStringProperty, {
      font: new PhetFont(18),
      tandem: tandem.createTandem('text')
    });
    const line = new EquilibriumPositionNode(text.height, {
      tandem: Tandem.OPT_OUT
    });
    const content = new HBox({
      children: [text, line],
      spacing: 8
    });
    super(equilibriumPositionVisibleProperty, content, combineOptions({
      tandem: tandem
    }, HookesLawConstants.CHECKBOX_OPTIONS));
  }
}
hookesLaw.register('EquilibriumPositionCheckbox', EquilibriumPositionCheckbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGVja2JveCIsIkhvb2tlc0xhd1N0cmluZ3MiLCJFcXVpbGlicml1bVBvc2l0aW9uTm9kZSIsImhvb2tlc0xhdyIsIkhCb3giLCJUZXh0IiwiUGhldEZvbnQiLCJUYW5kZW0iLCJIb29rZXNMYXdDb25zdGFudHMiLCJjb21iaW5lT3B0aW9ucyIsIkVxdWlsaWJyaXVtUG9zaXRpb25DaGVja2JveCIsImNvbnN0cnVjdG9yIiwiZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eSIsInRhbmRlbSIsInRleHQiLCJlcXVpbGlicml1bVBvc2l0aW9uU3RyaW5nUHJvcGVydHkiLCJmb250IiwiY3JlYXRlVGFuZGVtIiwibGluZSIsImhlaWdodCIsIk9QVF9PVVQiLCJjb250ZW50IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiQ0hFQ0tCT1hfT1BUSU9OUyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1aWxpYnJpdW1Qb3NpdGlvbkNoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFcXVpbGlicml1bVBvc2l0aW9uQ2hlY2tib3ggaXMgdGhlICdFcXVpbGlicml1bSBQb3NpdGlvbicgY2hlY2tib3ggdGhhdCBhcHBlYXJzIGluIGNvbnRyb2wgcGFuZWxzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IENoZWNrYm94LCB7IENoZWNrYm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBIb29rZXNMYXdTdHJpbmdzIGZyb20gJy4uLy4uL0hvb2tlc0xhd1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgRXF1aWxpYnJpdW1Qb3NpdGlvbk5vZGUgZnJvbSAnLi9FcXVpbGlicml1bVBvc2l0aW9uTm9kZS5qcyc7XHJcbmltcG9ydCBob29rZXNMYXcgZnJvbSAnLi4vLi4vaG9va2VzTGF3LmpzJztcclxuaW1wb3J0IHsgSEJveCwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSG9va2VzTGF3Q29uc3RhbnRzIGZyb20gJy4uL0hvb2tlc0xhd0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcXVpbGlicml1bVBvc2l0aW9uQ2hlY2tib3ggZXh0ZW5kcyBDaGVja2JveCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dCggSG9va2VzTGF3U3RyaW5ncy5lcXVpbGlicml1bVBvc2l0aW9uU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxOCApLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0ZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbGluZSA9IG5ldyBFcXVpbGlicml1bVBvc2l0aW9uTm9kZSggdGV4dC5oZWlnaHQsIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogWyB0ZXh0LCBsaW5lIF0sXHJcbiAgICAgIHNwYWNpbmc6IDhcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggZXF1aWxpYnJpdW1Qb3NpdGlvblZpc2libGVQcm9wZXJ0eSwgY29udGVudCwgY29tYmluZU9wdGlvbnM8Q2hlY2tib3hPcHRpb25zPigge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSwgSG9va2VzTGF3Q29uc3RhbnRzLkNIRUNLQk9YX09QVElPTlMgKSApO1xyXG4gIH1cclxufVxyXG5cclxuaG9va2VzTGF3LnJlZ2lzdGVyKCAnRXF1aWxpYnJpdW1Qb3NpdGlvbkNoZWNrYm94JywgRXF1aWxpYnJpdW1Qb3NpdGlvbkNoZWNrYm94ICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxRQUFRLE1BQTJCLGdDQUFnQztBQUMxRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFDMUMsU0FBU0MsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsU0FBU0MsY0FBYyxRQUFRLHVDQUF1QztBQUV0RSxlQUFlLE1BQU1DLDJCQUEyQixTQUFTVixRQUFRLENBQUM7RUFFekRXLFdBQVdBLENBQUVDLGtDQUFxRCxFQUFFQyxNQUFjLEVBQUc7SUFFMUYsTUFBTUMsSUFBSSxHQUFHLElBQUlULElBQUksQ0FBRUosZ0JBQWdCLENBQUNjLGlDQUFpQyxFQUFFO01BQ3pFQyxJQUFJLEVBQUUsSUFBSVYsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4Qk8sTUFBTSxFQUFFQSxNQUFNLENBQUNJLFlBQVksQ0FBRSxNQUFPO0lBQ3RDLENBQUUsQ0FBQztJQUVILE1BQU1DLElBQUksR0FBRyxJQUFJaEIsdUJBQXVCLENBQUVZLElBQUksQ0FBQ0ssTUFBTSxFQUFFO01BQ3JETixNQUFNLEVBQUVOLE1BQU0sQ0FBQ2E7SUFDakIsQ0FBRSxDQUFDO0lBRUgsTUFBTUMsT0FBTyxHQUFHLElBQUlqQixJQUFJLENBQUU7TUFDeEJrQixRQUFRLEVBQUUsQ0FBRVIsSUFBSSxFQUFFSSxJQUFJLENBQUU7TUFDeEJLLE9BQU8sRUFBRTtJQUNYLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVgsa0NBQWtDLEVBQUVTLE9BQU8sRUFBRVosY0FBYyxDQUFtQjtNQUNuRkksTUFBTSxFQUFFQTtJQUNWLENBQUMsRUFBRUwsa0JBQWtCLENBQUNnQixnQkFBaUIsQ0FBRSxDQUFDO0VBQzVDO0FBQ0Y7QUFFQXJCLFNBQVMsQ0FBQ3NCLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRWYsMkJBQTRCLENBQUMifQ==