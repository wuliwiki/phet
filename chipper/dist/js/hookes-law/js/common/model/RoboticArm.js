// Copyright 2015-2023, University of Colorado Boulder

/**
 * The robotic arm. The left end is movable, the right end is fixed.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import hookesLaw from '../../hookesLaw.js';
export default class RoboticArm {
  // right (fixed) end of the arm

  // left (movable) end of the arm

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      left: 0,
      right: 1
    }, providedOptions);
    this.right = options.right;
    this.leftProperty = new NumberProperty(options.left, {
      // The left end of the robotic arm and the spring's displacement (x) participate in a 2-way relationship,
      // where changing one of them results in recalculation of the other.  For some values, this results in
      // floating-point error that causes reentrant behavior.  See #63.
      reentrant: true,
      isValidValue: value => value < this.right,
      tandem: options.tandem.createTandem('leftProperty'),
      phetioReadOnly: true // because you should adjust the appliedForceProperty instead
    });

    phet.log && this.leftProperty.link(left => phet.log(`roboticArm left=${left}`));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.leftProperty.reset();
  }
}
hookesLaw.register('RoboticArm', RoboticArm);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsImhvb2tlc0xhdyIsIlJvYm90aWNBcm0iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0UHJvcGVydHkiLCJyZWVudHJhbnQiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1JlYWRPbmx5IiwicGhldCIsImxvZyIsImxpbmsiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJvYm90aWNBcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIHJvYm90aWMgYXJtLiBUaGUgbGVmdCBlbmQgaXMgbW92YWJsZSwgdGhlIHJpZ2h0IGVuZCBpcyBmaXhlZC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgaG9va2VzTGF3IGZyb20gJy4uLy4uL2hvb2tlc0xhdy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGxlZnQ/OiBudW1iZXI7ICAvLyB7bnVtYmVyfSBpbml0aWFsIHggcG9zaXRpb24gb2YgdGhlIGxlZnQgKG1vdmFibGUpIGVuZCBvZiB0aGUgYXJtLCB1bml0cyA9IG1cclxuICByaWdodD86IG51bWJlcjsgLy8ge251bWJlcn0gaW5pdGlhbCB4IHBvc2l0aW9uIG9mIHRoZSByaWdodCAoZml4ZWQpIGVuZCBvZiB0aGUgYXJtLCB1bml0cyA9IG1cclxufTtcclxuXHJcbnR5cGUgUm9ib3RpY0FybU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2JvdGljQXJtIHtcclxuXHJcbiAgLy8gcmlnaHQgKGZpeGVkKSBlbmQgb2YgdGhlIGFybVxyXG4gIHB1YmxpYyByZWFkb25seSByaWdodDogbnVtYmVyO1xyXG5cclxuICAvLyBsZWZ0IChtb3ZhYmxlKSBlbmQgb2YgdGhlIGFybVxyXG4gIHB1YmxpYyByZWFkb25seSBsZWZ0UHJvcGVydHk6IFByb3BlcnR5PG51bWJlcj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBSb2JvdGljQXJtT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJvYm90aWNBcm1PcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgcmlnaHQ6IDFcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMucmlnaHQgPSBvcHRpb25zLnJpZ2h0O1xyXG5cclxuICAgIHRoaXMubGVmdFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBvcHRpb25zLmxlZnQsIHtcclxuXHJcbiAgICAgIC8vIFRoZSBsZWZ0IGVuZCBvZiB0aGUgcm9ib3RpYyBhcm0gYW5kIHRoZSBzcHJpbmcncyBkaXNwbGFjZW1lbnQgKHgpIHBhcnRpY2lwYXRlIGluIGEgMi13YXkgcmVsYXRpb25zaGlwLFxyXG4gICAgICAvLyB3aGVyZSBjaGFuZ2luZyBvbmUgb2YgdGhlbSByZXN1bHRzIGluIHJlY2FsY3VsYXRpb24gb2YgdGhlIG90aGVyLiAgRm9yIHNvbWUgdmFsdWVzLCB0aGlzIHJlc3VsdHMgaW5cclxuICAgICAgLy8gZmxvYXRpbmctcG9pbnQgZXJyb3IgdGhhdCBjYXVzZXMgcmVlbnRyYW50IGJlaGF2aW9yLiAgU2VlICM2My5cclxuICAgICAgcmVlbnRyYW50OiB0cnVlLFxyXG4gICAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+ICggdmFsdWUgPCB0aGlzLnJpZ2h0ICksXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbGVmdFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSAvLyBiZWNhdXNlIHlvdSBzaG91bGQgYWRqdXN0IHRoZSBhcHBsaWVkRm9yY2VQcm9wZXJ0eSBpbnN0ZWFkXHJcbiAgICB9ICk7XHJcbiAgICBwaGV0LmxvZyAmJiB0aGlzLmxlZnRQcm9wZXJ0eS5saW5rKCBsZWZ0ID0+IHBoZXQubG9nKCBgcm9ib3RpY0FybSBsZWZ0PSR7bGVmdH1gICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmxlZnRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuaG9va2VzTGF3LnJlZ2lzdGVyKCAnUm9ib3RpY0FybScsIFJvYm90aWNBcm0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyxTQUFTLE1BQU0sdUNBQXVDO0FBRzdELE9BQU9DLFNBQVMsTUFBTSxvQkFBb0I7QUFTMUMsZUFBZSxNQUFNQyxVQUFVLENBQUM7RUFFOUI7O0VBR0E7O0VBR09DLFdBQVdBLENBQUVDLGVBQWtDLEVBQUc7SUFFdkQsTUFBTUMsT0FBTyxHQUFHTCxTQUFTLENBQWlDLENBQUMsQ0FBRTtNQUUzRDtNQUNBTSxJQUFJLEVBQUUsQ0FBQztNQUNQQyxLQUFLLEVBQUU7SUFDVCxDQUFDLEVBQUVILGVBQWdCLENBQUM7SUFFcEIsSUFBSSxDQUFDRyxLQUFLLEdBQUdGLE9BQU8sQ0FBQ0UsS0FBSztJQUUxQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJVCxjQUFjLENBQUVNLE9BQU8sQ0FBQ0MsSUFBSSxFQUFFO01BRXBEO01BQ0E7TUFDQTtNQUNBRyxTQUFTLEVBQUUsSUFBSTtNQUNmQyxZQUFZLEVBQUVDLEtBQUssSUFBTUEsS0FBSyxHQUFHLElBQUksQ0FBQ0osS0FBTztNQUM3Q0ssTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGNBQWUsQ0FBQztNQUNyREMsY0FBYyxFQUFFLElBQUksQ0FBQztJQUN2QixDQUFFLENBQUM7O0lBQ0hDLElBQUksQ0FBQ0MsR0FBRyxJQUFJLElBQUksQ0FBQ1IsWUFBWSxDQUFDUyxJQUFJLENBQUVYLElBQUksSUFBSVMsSUFBSSxDQUFDQyxHQUFHLENBQUcsbUJBQWtCVixJQUFLLEVBQUUsQ0FBRSxDQUFDO0VBQ3JGO0VBRU9ZLE9BQU9BLENBQUEsRUFBUztJQUNyQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0VBRU9DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNaLFlBQVksQ0FBQ1ksS0FBSyxDQUFDLENBQUM7RUFDM0I7QUFDRjtBQUVBbkIsU0FBUyxDQUFDb0IsUUFBUSxDQUFFLFlBQVksRUFBRW5CLFVBQVcsQ0FBQyJ9