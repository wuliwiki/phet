// Copyright 2023, University of Colorado Boulder

/**
 * An ABSwitch for choosing the primary or secondary locale.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Text } from '../../../../scenery/js/imports.js';
import ABSwitch from '../../../../sun/js/ABSwitch.js';
import localeProperty from '../../../../joist/js/i18n/localeProperty.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import numberPlay from '../../numberPlay.js';

// constants
const TOGGLE_SWITCH_SIZE = new Dimension2(40, 20);
const SPACING = 8;
const TEXT_OPTIONS = {
  font: new PhetFont(14)
};
export default class LocaleSwitch extends ABSwitch {
  constructor(preferences, utteranceQueue, maxWidth) {
    const firstLanguageStringProperty = new DerivedProperty([localeProperty], StringUtils.localeToLocalizedName);
    const secondLanguageStringProperty = new DerivedProperty([preferences.secondLocaleProperty], StringUtils.localeToLocalizedName);
    const firstLanguageText = new Text(firstLanguageStringProperty, TEXT_OPTIONS);
    const secondLanguageText = new Text(secondLanguageStringProperty, TEXT_OPTIONS);
    super(preferences.isPrimaryLocaleProperty, true, firstLanguageText, false, secondLanguageText, {
      spacing: SPACING,
      toggleSwitchOptions: {
        size: TOGGLE_SWITCH_SIZE
      },
      visibleProperty: new DerivedProperty([preferences.showSecondLocaleProperty], showSecondLocale => showSecondLocale)
    });

    // Speak speechData if autoHear is turned on.
    this.onInputEmitter.addListener(() => preferences.autoHearEnabledProperty.value && utteranceQueue.speakSpeechData());
    const availableTextSpace = maxWidth - TOGGLE_SWITCH_SIZE.width - SPACING * 2;
    let isAdjusting = false; // to prevent recursion that will exceed maximum call stack size
    this.boundsProperty.link(() => {
      if (!isAdjusting) {
        isAdjusting = true;

        // Assume that neither label needs to be scaled.
        firstLanguageText.maxWidth = null;
        secondLanguageText.maxWidth = null;

        // If there's not enough space for both full-size labels, give each Text label half of the available space.
        if (firstLanguageText.width + secondLanguageText.width > availableTextSpace) {
          firstLanguageText.maxWidth = availableTextSpace / 2;
          secondLanguageText.maxWidth = availableTextSpace / 2;
        }
        isAdjusting = false;
      }
    });
  }
}
numberPlay.register('LocaleSwitch', LocaleSwitch);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiUGhldEZvbnQiLCJUZXh0IiwiQUJTd2l0Y2giLCJsb2NhbGVQcm9wZXJ0eSIsIkRlcml2ZWRQcm9wZXJ0eSIsIlN0cmluZ1V0aWxzIiwibnVtYmVyUGxheSIsIlRPR0dMRV9TV0lUQ0hfU0laRSIsIlNQQUNJTkciLCJURVhUX09QVElPTlMiLCJmb250IiwiTG9jYWxlU3dpdGNoIiwiY29uc3RydWN0b3IiLCJwcmVmZXJlbmNlcyIsInV0dGVyYW5jZVF1ZXVlIiwibWF4V2lkdGgiLCJmaXJzdExhbmd1YWdlU3RyaW5nUHJvcGVydHkiLCJsb2NhbGVUb0xvY2FsaXplZE5hbWUiLCJzZWNvbmRMYW5ndWFnZVN0cmluZ1Byb3BlcnR5Iiwic2Vjb25kTG9jYWxlUHJvcGVydHkiLCJmaXJzdExhbmd1YWdlVGV4dCIsInNlY29uZExhbmd1YWdlVGV4dCIsImlzUHJpbWFyeUxvY2FsZVByb3BlcnR5Iiwic3BhY2luZyIsInRvZ2dsZVN3aXRjaE9wdGlvbnMiLCJzaXplIiwidmlzaWJsZVByb3BlcnR5Iiwic2hvd1NlY29uZExvY2FsZVByb3BlcnR5Iiwic2hvd1NlY29uZExvY2FsZSIsIm9uSW5wdXRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJhdXRvSGVhckVuYWJsZWRQcm9wZXJ0eSIsInZhbHVlIiwic3BlYWtTcGVlY2hEYXRhIiwiYXZhaWxhYmxlVGV4dFNwYWNlIiwid2lkdGgiLCJpc0FkanVzdGluZyIsImJvdW5kc1Byb3BlcnR5IiwibGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTG9jYWxlU3dpdGNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbiBBQlN3aXRjaCBmb3IgY2hvb3NpbmcgdGhlIHByaW1hcnkgb3Igc2Vjb25kYXJ5IGxvY2FsZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQUJTd2l0Y2ggZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FCU3dpdGNoLmpzJztcclxuaW1wb3J0IGxvY2FsZVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vbG9jYWxlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1zdWl0ZS1jb21tb24vanMvY29tbW9uL21vZGVsL051bWJlclN1aXRlQ29tbW9uUHJlZmVyZW5jZXMuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25VdHRlcmFuY2VRdWV1ZSBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItc3VpdGUtY29tbW9uL2pzL2NvbW1vbi92aWV3L051bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUuanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheSBmcm9tICcuLi8uLi9udW1iZXJQbGF5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBUT0dHTEVfU1dJVENIX1NJWkUgPSBuZXcgRGltZW5zaW9uMiggNDAsIDIwICk7XHJcbmNvbnN0IFNQQUNJTkcgPSA4O1xyXG5jb25zdCBURVhUX09QVElPTlMgPSB7XHJcbiAgZm9udDogbmV3IFBoZXRGb250KCAxNCApXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGVTd2l0Y2ggZXh0ZW5kcyBBQlN3aXRjaDxib29sZWFuPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByZWZlcmVuY2VzOiBOdW1iZXJTdWl0ZUNvbW1vblByZWZlcmVuY2VzLFxyXG4gICAgdXR0ZXJhbmNlUXVldWU6IE51bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUsXHJcbiAgICBtYXhXaWR0aDogbnVtYmVyXHJcbiAgKSB7XHJcblxyXG4gICAgY29uc3QgZmlyc3RMYW5ndWFnZVN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBsb2NhbGVQcm9wZXJ0eSBdLCBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUgKTtcclxuXHJcbiAgICBjb25zdCBzZWNvbmRMYW5ndWFnZVN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBwcmVmZXJlbmNlcy5zZWNvbmRMb2NhbGVQcm9wZXJ0eSBdLFxyXG4gICAgICBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUgKTtcclxuXHJcbiAgICBjb25zdCBmaXJzdExhbmd1YWdlVGV4dCA9IG5ldyBUZXh0KCBmaXJzdExhbmd1YWdlU3RyaW5nUHJvcGVydHksIFRFWFRfT1BUSU9OUyApO1xyXG4gICAgY29uc3Qgc2Vjb25kTGFuZ3VhZ2VUZXh0ID0gbmV3IFRleHQoIHNlY29uZExhbmd1YWdlU3RyaW5nUHJvcGVydHksIFRFWFRfT1BUSU9OUyApO1xyXG5cclxuICAgIHN1cGVyKCBwcmVmZXJlbmNlcy5pc1ByaW1hcnlMb2NhbGVQcm9wZXJ0eSxcclxuICAgICAgdHJ1ZSwgZmlyc3RMYW5ndWFnZVRleHQsXHJcbiAgICAgIGZhbHNlLCBzZWNvbmRMYW5ndWFnZVRleHQsIHtcclxuICAgICAgICBzcGFjaW5nOiBTUEFDSU5HLFxyXG4gICAgICAgIHRvZ2dsZVN3aXRjaE9wdGlvbnM6IHtcclxuICAgICAgICAgIHNpemU6IFRPR0dMRV9TV0lUQ0hfU0laRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHByZWZlcmVuY2VzLnNob3dTZWNvbmRMb2NhbGVQcm9wZXJ0eSBdLCBzaG93U2Vjb25kTG9jYWxlID0+IHNob3dTZWNvbmRMb2NhbGUgKVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIFNwZWFrIHNwZWVjaERhdGEgaWYgYXV0b0hlYXIgaXMgdHVybmVkIG9uLlxyXG4gICAgdGhpcy5vbklucHV0RW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4gcHJlZmVyZW5jZXMuYXV0b0hlYXJFbmFibGVkUHJvcGVydHkudmFsdWUgJiYgdXR0ZXJhbmNlUXVldWUuc3BlYWtTcGVlY2hEYXRhKCkgKTtcclxuXHJcbiAgICBjb25zdCBhdmFpbGFibGVUZXh0U3BhY2UgPSBtYXhXaWR0aCAtIFRPR0dMRV9TV0lUQ0hfU0laRS53aWR0aCAtIFNQQUNJTkcgKiAyO1xyXG4gICAgbGV0IGlzQWRqdXN0aW5nID0gZmFsc2U7IC8vIHRvIHByZXZlbnQgcmVjdXJzaW9uIHRoYXQgd2lsbCBleGNlZWQgbWF4aW11bSBjYWxsIHN0YWNrIHNpemVcclxuICAgIHRoaXMuYm91bmRzUHJvcGVydHkubGluayggKCkgPT4ge1xyXG4gICAgICBpZiAoICFpc0FkanVzdGluZyApIHtcclxuICAgICAgICBpc0FkanVzdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIEFzc3VtZSB0aGF0IG5laXRoZXIgbGFiZWwgbmVlZHMgdG8gYmUgc2NhbGVkLlxyXG4gICAgICAgIGZpcnN0TGFuZ3VhZ2VUZXh0Lm1heFdpZHRoID0gbnVsbDtcclxuICAgICAgICBzZWNvbmRMYW5ndWFnZVRleHQubWF4V2lkdGggPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2UgZm9yIGJvdGggZnVsbC1zaXplIGxhYmVscywgZ2l2ZSBlYWNoIFRleHQgbGFiZWwgaGFsZiBvZiB0aGUgYXZhaWxhYmxlIHNwYWNlLlxyXG4gICAgICAgIGlmICggZmlyc3RMYW5ndWFnZVRleHQud2lkdGggKyBzZWNvbmRMYW5ndWFnZVRleHQud2lkdGggPiBhdmFpbGFibGVUZXh0U3BhY2UgKSB7XHJcbiAgICAgICAgICBmaXJzdExhbmd1YWdlVGV4dC5tYXhXaWR0aCA9IGF2YWlsYWJsZVRleHRTcGFjZSAvIDI7XHJcbiAgICAgICAgICBzZWNvbmRMYW5ndWFnZVRleHQubWF4V2lkdGggPSBhdmFpbGFibGVUZXh0U3BhY2UgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpc0FkanVzdGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJQbGF5LnJlZ2lzdGVyKCAnTG9jYWxlU3dpdGNoJywgTG9jYWxlU3dpdGNoICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsY0FBYyxNQUFNLDZDQUE2QztBQUN4RSxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFHdkUsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjs7QUFFNUM7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxJQUFJUixVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztBQUNuRCxNQUFNUyxPQUFPLEdBQUcsQ0FBQztBQUNqQixNQUFNQyxZQUFZLEdBQUc7RUFDbkJDLElBQUksRUFBRSxJQUFJVixRQUFRLENBQUUsRUFBRztBQUN6QixDQUFDO0FBRUQsZUFBZSxNQUFNVyxZQUFZLFNBQVNULFFBQVEsQ0FBVTtFQUVuRFUsV0FBV0EsQ0FDaEJDLFdBQXlDLEVBQ3pDQyxjQUErQyxFQUMvQ0MsUUFBZ0IsRUFDaEI7SUFFQSxNQUFNQywyQkFBMkIsR0FBRyxJQUFJWixlQUFlLENBQUUsQ0FBRUQsY0FBYyxDQUFFLEVBQUVFLFdBQVcsQ0FBQ1kscUJBQXNCLENBQUM7SUFFaEgsTUFBTUMsNEJBQTRCLEdBQUcsSUFBSWQsZUFBZSxDQUFFLENBQUVTLFdBQVcsQ0FBQ00sb0JBQW9CLENBQUUsRUFDNUZkLFdBQVcsQ0FBQ1kscUJBQXNCLENBQUM7SUFFckMsTUFBTUcsaUJBQWlCLEdBQUcsSUFBSW5CLElBQUksQ0FBRWUsMkJBQTJCLEVBQUVQLFlBQWEsQ0FBQztJQUMvRSxNQUFNWSxrQkFBa0IsR0FBRyxJQUFJcEIsSUFBSSxDQUFFaUIsNEJBQTRCLEVBQUVULFlBQWEsQ0FBQztJQUVqRixLQUFLLENBQUVJLFdBQVcsQ0FBQ1MsdUJBQXVCLEVBQ3hDLElBQUksRUFBRUYsaUJBQWlCLEVBQ3ZCLEtBQUssRUFBRUMsa0JBQWtCLEVBQUU7TUFDekJFLE9BQU8sRUFBRWYsT0FBTztNQUNoQmdCLG1CQUFtQixFQUFFO1FBQ25CQyxJQUFJLEVBQUVsQjtNQUNSLENBQUM7TUFDRG1CLGVBQWUsRUFBRSxJQUFJdEIsZUFBZSxDQUFFLENBQUVTLFdBQVcsQ0FBQ2Msd0JBQXdCLENBQUUsRUFBRUMsZ0JBQWdCLElBQUlBLGdCQUFpQjtJQUN2SCxDQUNGLENBQUM7O0lBRUQ7SUFDQSxJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsV0FBVyxDQUFFLE1BQU1qQixXQUFXLENBQUNrQix1QkFBdUIsQ0FBQ0MsS0FBSyxJQUFJbEIsY0FBYyxDQUFDbUIsZUFBZSxDQUFDLENBQUUsQ0FBQztJQUV0SCxNQUFNQyxrQkFBa0IsR0FBR25CLFFBQVEsR0FBR1Isa0JBQWtCLENBQUM0QixLQUFLLEdBQUczQixPQUFPLEdBQUcsQ0FBQztJQUM1RSxJQUFJNEIsV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUUsTUFBTTtNQUM5QixJQUFLLENBQUNGLFdBQVcsRUFBRztRQUNsQkEsV0FBVyxHQUFHLElBQUk7O1FBRWxCO1FBQ0FoQixpQkFBaUIsQ0FBQ0wsUUFBUSxHQUFHLElBQUk7UUFDakNNLGtCQUFrQixDQUFDTixRQUFRLEdBQUcsSUFBSTs7UUFFbEM7UUFDQSxJQUFLSyxpQkFBaUIsQ0FBQ2UsS0FBSyxHQUFHZCxrQkFBa0IsQ0FBQ2MsS0FBSyxHQUFHRCxrQkFBa0IsRUFBRztVQUM3RWQsaUJBQWlCLENBQUNMLFFBQVEsR0FBR21CLGtCQUFrQixHQUFHLENBQUM7VUFDbkRiLGtCQUFrQixDQUFDTixRQUFRLEdBQUdtQixrQkFBa0IsR0FBRyxDQUFDO1FBQ3REO1FBQ0FFLFdBQVcsR0FBRyxLQUFLO01BQ3JCO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBOUIsVUFBVSxDQUFDaUMsUUFBUSxDQUFFLGNBQWMsRUFBRTVCLFlBQWEsQ0FBQyJ9