// Copyright 2019-2023, University of Colorado Boulder

/**
 * Class for the 'Word' accordion box, which is the panel in the upper left corner of the sim that displays a written
 * representation of the current number.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import { Text } from '../../../../scenery/js/imports.js';
import numberPlay from '../../numberPlay.js';
import localeProperty from '../../../../joist/js/i18n/localeProperty.js';
import NumberPlayStrings from '../../NumberPlayStrings.js';
import NumberPlayConstants from '../NumberPlayConstants.js';
import NumberSuiteCommonAccordionBox from '../../../../number-suite-common/js/common/view/NumberSuiteCommonAccordionBox.js';
import optionize from '../../../../phet-core/js/optionize.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import numberPlayPreferences from '../model/numberPlayPreferences.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberSuiteCommonConstants, { NUMBER_STRING_PROPERTIES } from '../../../../number-suite-common/js/common/NumberSuiteCommonConstants.js';
import Multilink from '../../../../axon/js/Multilink.js';

// types

// constants
const TEXT_MARGIN = 5;
class WordAccordionBox extends NumberSuiteCommonAccordionBox {
  constructor(currentNumberProperty, heightProperty, providedOptions) {
    const titleStringProperty = new DerivedProperty([localeProperty, numberPlayPreferences.secondLocaleProperty, numberPlayPreferences.isPrimaryLocaleProperty, NumberPlayStrings.wordStringProperty, NumberPlayStrings.wordLanguageStringProperty], (primaryLocale, secondLocale, isPrimaryLocale) => {
      const primaryLocaleTitleString = StringUtils.fillIn(NumberPlayStrings.wordStringProperty.value, {
        language: StringUtils.localeToLocalizedName(primaryLocale)
      });
      const secondaryLocaleTitleString = StringUtils.fillIn(NumberPlayStrings.wordLanguageStringProperty.value, {
        language: StringUtils.localeToLocalizedName(secondLocale)
      });
      return isPrimaryLocale ? primaryLocaleTitleString : secondaryLocaleTitleString;
    });
    const options = optionize()({
      titleStringProperty: titleStringProperty,
      titleTextOptions: {
        maxWidth: NumberPlayConstants.UPPER_OUTER_AB_TITLE_MAX_WIDTH
      }
    }, providedOptions);
    super(NumberPlayConstants.UPPER_OUTER_ACCORDION_BOX_WIDTH, heightProperty, options);

    // The word shown in the accordion box
    const wordStringProperty = new DerivedProperty([currentNumberProperty, numberPlayPreferences.isPrimaryLocaleProperty, numberPlayPreferences.secondLocaleStringsProperty, localeProperty], (currentNumber, isPrimaryLocale, secondLocaleStrings) => NumberSuiteCommonConstants.numberToWord(secondLocaleStrings, currentNumber, isPrimaryLocale));

    // Instead of needing to use DerivedProperty.deriveAny which doesn't allow callback parameters, just recompute with
    // these Property changes.
    Multilink.multilinkAny(NUMBER_STRING_PROPERTIES, () => {
      wordStringProperty.recomputeDerivation();
    });

    // initialize as blank, updated in link below
    const wordText = new Text(wordStringProperty, {
      font: options.font,
      maxWidth: this.contentBoundsProperty.value.width - options.textOffsetX - TEXT_MARGIN
    });
    this.contentNode.addChild(wordText);
    this.contentBoundsProperty.link(contentBounds => {
      wordText.left = contentBounds.left + options.textOffsetX;
      wordText.centerY = contentBounds.centerY;
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberPlay.register('WordAccordionBox', WordAccordionBox);
export default WordAccordionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0IiwibnVtYmVyUGxheSIsImxvY2FsZVByb3BlcnR5IiwiTnVtYmVyUGxheVN0cmluZ3MiLCJOdW1iZXJQbGF5Q29uc3RhbnRzIiwiTnVtYmVyU3VpdGVDb21tb25BY2NvcmRpb25Cb3giLCJvcHRpb25pemUiLCJTdHJpbmdVdGlscyIsIm51bWJlclBsYXlQcmVmZXJlbmNlcyIsIkRlcml2ZWRQcm9wZXJ0eSIsIk51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIiwiTlVNQkVSX1NUUklOR19QUk9QRVJUSUVTIiwiTXVsdGlsaW5rIiwiVEVYVF9NQVJHSU4iLCJXb3JkQWNjb3JkaW9uQm94IiwiY29uc3RydWN0b3IiLCJjdXJyZW50TnVtYmVyUHJvcGVydHkiLCJoZWlnaHRQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJzZWNvbmRMb2NhbGVQcm9wZXJ0eSIsImlzUHJpbWFyeUxvY2FsZVByb3BlcnR5Iiwid29yZFN0cmluZ1Byb3BlcnR5Iiwid29yZExhbmd1YWdlU3RyaW5nUHJvcGVydHkiLCJwcmltYXJ5TG9jYWxlIiwic2Vjb25kTG9jYWxlIiwiaXNQcmltYXJ5TG9jYWxlIiwicHJpbWFyeUxvY2FsZVRpdGxlU3RyaW5nIiwiZmlsbEluIiwidmFsdWUiLCJsYW5ndWFnZSIsImxvY2FsZVRvTG9jYWxpemVkTmFtZSIsInNlY29uZGFyeUxvY2FsZVRpdGxlU3RyaW5nIiwib3B0aW9ucyIsInRpdGxlVGV4dE9wdGlvbnMiLCJtYXhXaWR0aCIsIlVQUEVSX09VVEVSX0FCX1RJVExFX01BWF9XSURUSCIsIlVQUEVSX09VVEVSX0FDQ09SRElPTl9CT1hfV0lEVEgiLCJzZWNvbmRMb2NhbGVTdHJpbmdzUHJvcGVydHkiLCJjdXJyZW50TnVtYmVyIiwic2Vjb25kTG9jYWxlU3RyaW5ncyIsIm51bWJlclRvV29yZCIsIm11bHRpbGlua0FueSIsInJlY29tcHV0ZURlcml2YXRpb24iLCJ3b3JkVGV4dCIsImZvbnQiLCJjb250ZW50Qm91bmRzUHJvcGVydHkiLCJ3aWR0aCIsInRleHRPZmZzZXRYIiwiY29udGVudE5vZGUiLCJhZGRDaGlsZCIsImxpbmsiLCJjb250ZW50Qm91bmRzIiwibGVmdCIsImNlbnRlclkiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJXb3JkQWNjb3JkaW9uQm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciB0aGUgJ1dvcmQnIGFjY29yZGlvbiBib3gsIHdoaWNoIGlzIHRoZSBwYW5lbCBpbiB0aGUgdXBwZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNpbSB0aGF0IGRpc3BsYXlzIGEgd3JpdHRlblxyXG4gKiByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBudW1iZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgeyBGb250LCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bWJlclBsYXkgZnJvbSAnLi4vLi4vbnVtYmVyUGxheS5qcyc7XHJcbmltcG9ydCBsb2NhbGVQcm9wZXJ0eSwgeyBMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9qb2lzdC9qcy9pMThuL2xvY2FsZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclBsYXlTdHJpbmdzIGZyb20gJy4uLy4uL051bWJlclBsYXlTdHJpbmdzLmpzJztcclxuaW1wb3J0IE51bWJlclBsYXlDb25zdGFudHMgZnJvbSAnLi4vTnVtYmVyUGxheUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBOdW1iZXJTdWl0ZUNvbW1vbkFjY29yZGlvbkJveCwgeyBOdW1iZXJTdWl0ZUNvbW1vbkFjY29yZGlvbkJveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItc3VpdGUtY29tbW9uL2pzL2NvbW1vbi92aWV3L051bWJlclN1aXRlQ29tbW9uQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheVByZWZlcmVuY2VzIGZyb20gJy4uL21vZGVsL251bWJlclBsYXlQcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMsIHsgTlVNQkVSX1NUUklOR19QUk9QRVJUSUVTIH0gZnJvbSAnLi4vLi4vLi4vLi4vbnVtYmVyLXN1aXRlLWNvbW1vbi9qcy9jb21tb24vTnVtYmVyU3VpdGVDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbi8vIHR5cGVzXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgdGV4dE9mZnNldFg6IG51bWJlcjtcclxuICBmb250OiBGb250O1xyXG59O1xyXG5leHBvcnQgdHlwZSBXb3JkQWNjb3JkaW9uQm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBTdHJpY3RPbWl0PE51bWJlclN1aXRlQ29tbW9uQWNjb3JkaW9uQm94T3B0aW9ucywgJ3RpdGxlU3RyaW5nUHJvcGVydHknPjtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBURVhUX01BUkdJTiA9IDU7XHJcblxyXG5jbGFzcyBXb3JkQWNjb3JkaW9uQm94IGV4dGVuZHMgTnVtYmVyU3VpdGVDb21tb25BY2NvcmRpb25Cb3gge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGN1cnJlbnROdW1iZXJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPiwgaGVpZ2h0UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9uczogV29yZEFjY29yZGlvbkJveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgdGl0bGVTdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgbG9jYWxlUHJvcGVydHksIG51bWJlclBsYXlQcmVmZXJlbmNlcy5zZWNvbmRMb2NhbGVQcm9wZXJ0eSwgbnVtYmVyUGxheVByZWZlcmVuY2VzLmlzUHJpbWFyeUxvY2FsZVByb3BlcnR5LFxyXG4gICAgICAgIE51bWJlclBsYXlTdHJpbmdzLndvcmRTdHJpbmdQcm9wZXJ0eSwgTnVtYmVyUGxheVN0cmluZ3Mud29yZExhbmd1YWdlU3RyaW5nUHJvcGVydHkgXSxcclxuICAgICAgKCBwcmltYXJ5TG9jYWxlOiBMb2NhbGUsIHNlY29uZExvY2FsZTogTG9jYWxlLCBpc1ByaW1hcnlMb2NhbGUgKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJpbWFyeUxvY2FsZVRpdGxlU3RyaW5nID0gU3RyaW5nVXRpbHMuZmlsbEluKCBOdW1iZXJQbGF5U3RyaW5ncy53b3JkU3RyaW5nUHJvcGVydHkudmFsdWUsIHtcclxuICAgICAgICAgIGxhbmd1YWdlOiBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUoIHByaW1hcnlMb2NhbGUgKVxyXG4gICAgICAgIH0gKTtcclxuICAgICAgICBjb25zdCBzZWNvbmRhcnlMb2NhbGVUaXRsZVN0cmluZyA9IFN0cmluZ1V0aWxzLmZpbGxJbiggTnVtYmVyUGxheVN0cmluZ3Mud29yZExhbmd1YWdlU3RyaW5nUHJvcGVydHkudmFsdWUsIHtcclxuICAgICAgICAgIGxhbmd1YWdlOiBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUoIHNlY29uZExvY2FsZSApXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICByZXR1cm4gaXNQcmltYXJ5TG9jYWxlID8gcHJpbWFyeUxvY2FsZVRpdGxlU3RyaW5nIDogc2Vjb25kYXJ5TG9jYWxlVGl0bGVTdHJpbmc7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdvcmRBY2NvcmRpb25Cb3hPcHRpb25zLCBTZWxmT3B0aW9ucywgTnVtYmVyU3VpdGVDb21tb25BY2NvcmRpb25Cb3hPcHRpb25zPigpKCB7XHJcbiAgICAgIHRpdGxlU3RyaW5nUHJvcGVydHk6IHRpdGxlU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIHRpdGxlVGV4dE9wdGlvbnM6IHtcclxuICAgICAgICBtYXhXaWR0aDogTnVtYmVyUGxheUNvbnN0YW50cy5VUFBFUl9PVVRFUl9BQl9USVRMRV9NQVhfV0lEVEhcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIE51bWJlclBsYXlDb25zdGFudHMuVVBQRVJfT1VURVJfQUNDT1JESU9OX0JPWF9XSURUSCwgaGVpZ2h0UHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGUgd29yZCBzaG93biBpbiB0aGUgYWNjb3JkaW9uIGJveFxyXG4gICAgY29uc3Qgd29yZFN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyBjdXJyZW50TnVtYmVyUHJvcGVydHksXHJcbiAgICAgICAgbnVtYmVyUGxheVByZWZlcmVuY2VzLmlzUHJpbWFyeUxvY2FsZVByb3BlcnR5LFxyXG4gICAgICAgIG51bWJlclBsYXlQcmVmZXJlbmNlcy5zZWNvbmRMb2NhbGVTdHJpbmdzUHJvcGVydHksXHJcbiAgICAgICAgbG9jYWxlUHJvcGVydHlcclxuICAgICAgXSxcclxuICAgICAgKCBjdXJyZW50TnVtYmVyLCBpc1ByaW1hcnlMb2NhbGUsIHNlY29uZExvY2FsZVN0cmluZ3MgKSA9PlxyXG4gICAgICAgIE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzLm51bWJlclRvV29yZCggc2Vjb25kTG9jYWxlU3RyaW5ncywgY3VycmVudE51bWJlciwgaXNQcmltYXJ5TG9jYWxlIClcclxuICAgICk7XHJcblxyXG4gICAgLy8gSW5zdGVhZCBvZiBuZWVkaW5nIHRvIHVzZSBEZXJpdmVkUHJvcGVydHkuZGVyaXZlQW55IHdoaWNoIGRvZXNuJ3QgYWxsb3cgY2FsbGJhY2sgcGFyYW1ldGVycywganVzdCByZWNvbXB1dGUgd2l0aFxyXG4gICAgLy8gdGhlc2UgUHJvcGVydHkgY2hhbmdlcy5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmtBbnkoIE5VTUJFUl9TVFJJTkdfUFJPUEVSVElFUywgKCkgPT4ge1xyXG4gICAgICB3b3JkU3RyaW5nUHJvcGVydHkucmVjb21wdXRlRGVyaXZhdGlvbigpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGluaXRpYWxpemUgYXMgYmxhbmssIHVwZGF0ZWQgaW4gbGluayBiZWxvd1xyXG4gICAgY29uc3Qgd29yZFRleHQgPSBuZXcgVGV4dCggd29yZFN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgbWF4V2lkdGg6IHRoaXMuY29udGVudEJvdW5kc1Byb3BlcnR5LnZhbHVlLndpZHRoIC0gb3B0aW9ucy50ZXh0T2Zmc2V0WCAtIFRFWFRfTUFSR0lOXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmNvbnRlbnROb2RlLmFkZENoaWxkKCB3b3JkVGV4dCApO1xyXG5cclxuICAgIHRoaXMuY29udGVudEJvdW5kc1Byb3BlcnR5LmxpbmsoIGNvbnRlbnRCb3VuZHMgPT4ge1xyXG4gICAgICB3b3JkVGV4dC5sZWZ0ID0gY29udGVudEJvdW5kcy5sZWZ0ICsgb3B0aW9ucy50ZXh0T2Zmc2V0WDtcclxuICAgICAgd29yZFRleHQuY2VudGVyWSA9IGNvbnRlbnRCb3VuZHMuY2VudGVyWTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJQbGF5LnJlZ2lzdGVyKCAnV29yZEFjY29yZGlvbkJveCcsIFdvcmRBY2NvcmRpb25Cb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgV29yZEFjY29yZGlvbkJveDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFlQSxJQUFJLFFBQVEsbUNBQW1DO0FBQzlELE9BQU9DLFVBQVUsTUFBTSxxQkFBcUI7QUFDNUMsT0FBT0MsY0FBYyxNQUFrQiw2Q0FBNkM7QUFDcEYsT0FBT0MsaUJBQWlCLE1BQU0sNEJBQTRCO0FBQzFELE9BQU9DLG1CQUFtQixNQUFNLDJCQUEyQjtBQUMzRCxPQUFPQyw2QkFBNkIsTUFBZ0QsaUZBQWlGO0FBQ3JLLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUd2RSxPQUFPQyxxQkFBcUIsTUFBTSxtQ0FBbUM7QUFDckUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQywwQkFBMEIsSUFBSUMsd0JBQXdCLFFBQVEseUVBQXlFO0FBQzlJLE9BQU9DLFNBQVMsTUFBTSxr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