// Copyright 2022-2023, University of Colorado Boulder

/**
 * A singleton UtteranceQueue that is used for voicing specific to Number Play. This is needed because Number Play
 * doesn't have the Voicing feature, but still needs to use speech synthesis.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import numberPlay from '../../numberPlay.js';
import numberPlaySpeechSynthesisAnnouncer from './numberPlaySpeechSynthesisAnnouncer.js';
import NumberSuiteCommonUtteranceQueue from '../../../../number-suite-common/js/common/view/NumberSuiteCommonUtteranceQueue.js';
import TenScreen from '../../ten/TenScreen.js';
import TwentyScreen from '../../twenty/TwentyScreen.js';
import numberPlayPreferences from '../model/numberPlayPreferences.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import StringProperty from '../../../../axon/js/StringProperty.js';
class NumberPlayUtteranceQueue extends NumberSuiteCommonUtteranceQueue {
  // Data from the 'Ten' screen that can be spoken to the user. Should be updated in the screen's model.

  // Data from the 'Twenty' screen that can be spoken to the user. Should be updated in the screen's model.

  constructor() {
    super(numberPlaySpeechSynthesisAnnouncer, numberPlayPreferences.isPrimaryLocaleProperty, numberPlayPreferences.primaryVoiceProperty, numberPlayPreferences.secondVoiceProperty, numberPlayPreferences.autoHearEnabledProperty);
    this.tenScreenSpeechDataProperty = new StringProperty('');
    this.twentyScreenSpeechDataProperty = new StringProperty('');
  }

  /**
   * Starts the initialization process by using the provided selectedScreenProperty to determine which speechData
   * to use for a given screen that the user is viewing. This is needed because selectedScreenProperty doesn't exist
   * yet during the creation of this singleton.
   */
  initialize(selectedScreenProperty) {
    const speechDataProperty = new DerivedProperty([this.tenScreenSpeechDataProperty, this.twentyScreenSpeechDataProperty, selectedScreenProperty], (tenScreenSpeechData, twentyScreenSpeechData, selectedScreen) => {
      // We want the speech data to reflect the selected screen. Returns null for screens that do not support speech
      // synthesis.
      return selectedScreen instanceof TenScreen ? tenScreenSpeechData : selectedScreen instanceof TwentyScreen ? twentyScreenSpeechData : null;
    });

    // Notify listeners on speechDataProperty so if autoHear is turned on, the data is spoken whenever the selected
    // screen changes. The DerivedProperty above covers most, but not all, cases when changing screens. See https://github.com/phetsims/number-play/issues/217.
    selectedScreenProperty.lazyLink(() => {
      speechDataProperty.value && speechDataProperty.notifyListenersStatic();
    });
    this.initializeNumberSuiteCommonUtteranceQueue(speechDataProperty);
  }
}
const numberPlayUtteranceQueue = new NumberPlayUtteranceQueue();
numberPlay.register('numberPlayUtteranceQueue', numberPlayUtteranceQueue);
export default numberPlayUtteranceQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJudW1iZXJQbGF5IiwibnVtYmVyUGxheVNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciIsIk51bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUiLCJUZW5TY3JlZW4iLCJUd2VudHlTY3JlZW4iLCJudW1iZXJQbGF5UHJlZmVyZW5jZXMiLCJEZXJpdmVkUHJvcGVydHkiLCJTdHJpbmdQcm9wZXJ0eSIsIk51bWJlclBsYXlVdHRlcmFuY2VRdWV1ZSIsImNvbnN0cnVjdG9yIiwiaXNQcmltYXJ5TG9jYWxlUHJvcGVydHkiLCJwcmltYXJ5Vm9pY2VQcm9wZXJ0eSIsInNlY29uZFZvaWNlUHJvcGVydHkiLCJhdXRvSGVhckVuYWJsZWRQcm9wZXJ0eSIsInRlblNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eSIsInR3ZW50eVNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eSIsImluaXRpYWxpemUiLCJzZWxlY3RlZFNjcmVlblByb3BlcnR5Iiwic3BlZWNoRGF0YVByb3BlcnR5IiwidGVuU2NyZWVuU3BlZWNoRGF0YSIsInR3ZW50eVNjcmVlblNwZWVjaERhdGEiLCJzZWxlY3RlZFNjcmVlbiIsImxhenlMaW5rIiwidmFsdWUiLCJub3RpZnlMaXN0ZW5lcnNTdGF0aWMiLCJpbml0aWFsaXplTnVtYmVyU3VpdGVDb21tb25VdHRlcmFuY2VRdWV1ZSIsIm51bWJlclBsYXlVdHRlcmFuY2VRdWV1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsibnVtYmVyUGxheVV0dGVyYW5jZVF1ZXVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc2luZ2xldG9uIFV0dGVyYW5jZVF1ZXVlIHRoYXQgaXMgdXNlZCBmb3Igdm9pY2luZyBzcGVjaWZpYyB0byBOdW1iZXIgUGxheS4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBOdW1iZXIgUGxheVxyXG4gKiBkb2Vzbid0IGhhdmUgdGhlIFZvaWNpbmcgZmVhdHVyZSwgYnV0IHN0aWxsIG5lZWRzIHRvIHVzZSBzcGVlY2ggc3ludGhlc2lzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBudW1iZXJQbGF5IGZyb20gJy4uLy4uL251bWJlclBsYXkuanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheVNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciBmcm9tICcuL251bWJlclBsYXlTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIuanMnO1xyXG5pbXBvcnQgTnVtYmVyU3VpdGVDb21tb25VdHRlcmFuY2VRdWV1ZSBmcm9tICcuLi8uLi8uLi8uLi9udW1iZXItc3VpdGUtY29tbW9uL2pzL2NvbW1vbi92aWV3L051bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUuanMnO1xyXG5pbXBvcnQgVGVuU2NyZWVuIGZyb20gJy4uLy4uL3Rlbi9UZW5TY3JlZW4uanMnO1xyXG5pbXBvcnQgVHdlbnR5U2NyZWVuIGZyb20gJy4uLy4uL3R3ZW50eS9Ud2VudHlTY3JlZW4uanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheVByZWZlcmVuY2VzIGZyb20gJy4uL21vZGVsL251bWJlclBsYXlQcmVmZXJlbmNlcy5qcyc7XHJcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgQW55U2NyZWVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcblxyXG5jbGFzcyBOdW1iZXJQbGF5VXR0ZXJhbmNlUXVldWUgZXh0ZW5kcyBOdW1iZXJTdWl0ZUNvbW1vblV0dGVyYW5jZVF1ZXVlIHtcclxuXHJcbiAgLy8gRGF0YSBmcm9tIHRoZSAnVGVuJyBzY3JlZW4gdGhhdCBjYW4gYmUgc3Bva2VuIHRvIHRoZSB1c2VyLiBTaG91bGQgYmUgdXBkYXRlZCBpbiB0aGUgc2NyZWVuJ3MgbW9kZWwuXHJcbiAgcHVibGljIHJlYWRvbmx5IHRlblNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eTogVFByb3BlcnR5PHN0cmluZz47XHJcblxyXG4gIC8vIERhdGEgZnJvbSB0aGUgJ1R3ZW50eScgc2NyZWVuIHRoYXQgY2FuIGJlIHNwb2tlbiB0byB0aGUgdXNlci4gU2hvdWxkIGJlIHVwZGF0ZWQgaW4gdGhlIHNjcmVlbidzIG1vZGVsLlxyXG4gIHB1YmxpYyByZWFkb25seSB0d2VudHlTY3JlZW5TcGVlY2hEYXRhUHJvcGVydHk6IFRQcm9wZXJ0eTxzdHJpbmc+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgbnVtYmVyUGxheVNwZWVjaFN5bnRoZXNpc0Fubm91bmNlcixcclxuICAgICAgbnVtYmVyUGxheVByZWZlcmVuY2VzLmlzUHJpbWFyeUxvY2FsZVByb3BlcnR5LFxyXG4gICAgICBudW1iZXJQbGF5UHJlZmVyZW5jZXMucHJpbWFyeVZvaWNlUHJvcGVydHksXHJcbiAgICAgIG51bWJlclBsYXlQcmVmZXJlbmNlcy5zZWNvbmRWb2ljZVByb3BlcnR5LFxyXG4gICAgICBudW1iZXJQbGF5UHJlZmVyZW5jZXMuYXV0b0hlYXJFbmFibGVkUHJvcGVydHlcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy50ZW5TY3JlZW5TcGVlY2hEYXRhUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoICcnICk7XHJcbiAgICB0aGlzLnR3ZW50eVNjcmVlblNwZWVjaERhdGFQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJycgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgaW5pdGlhbGl6YXRpb24gcHJvY2VzcyBieSB1c2luZyB0aGUgcHJvdmlkZWQgc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eSB0byBkZXRlcm1pbmUgd2hpY2ggc3BlZWNoRGF0YVxyXG4gICAqIHRvIHVzZSBmb3IgYSBnaXZlbiBzY3JlZW4gdGhhdCB0aGUgdXNlciBpcyB2aWV3aW5nLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHNlbGVjdGVkU2NyZWVuUHJvcGVydHkgZG9lc24ndCBleGlzdFxyXG4gICAqIHlldCBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoaXMgc2luZ2xldG9uLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplKCBzZWxlY3RlZFNjcmVlblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxBbnlTY3JlZW4+ICk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IHNwZWVjaERhdGFQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgdGhpcy50ZW5TY3JlZW5TcGVlY2hEYXRhUHJvcGVydHksIHRoaXMudHdlbnR5U2NyZWVuU3BlZWNoRGF0YVByb3BlcnR5LCBzZWxlY3RlZFNjcmVlblByb3BlcnR5IF0sXHJcbiAgICAgICggdGVuU2NyZWVuU3BlZWNoRGF0YSwgdHdlbnR5U2NyZWVuU3BlZWNoRGF0YSwgc2VsZWN0ZWRTY3JlZW4gKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIFdlIHdhbnQgdGhlIHNwZWVjaCBkYXRhIHRvIHJlZmxlY3QgdGhlIHNlbGVjdGVkIHNjcmVlbi4gUmV0dXJucyBudWxsIGZvciBzY3JlZW5zIHRoYXQgZG8gbm90IHN1cHBvcnQgc3BlZWNoXHJcbiAgICAgICAgLy8gc3ludGhlc2lzLlxyXG4gICAgICAgIHJldHVybiBzZWxlY3RlZFNjcmVlbiBpbnN0YW5jZW9mIFRlblNjcmVlbiA/IHRlblNjcmVlblNwZWVjaERhdGEgOlxyXG4gICAgICAgICAgICAgICBzZWxlY3RlZFNjcmVlbiBpbnN0YW5jZW9mIFR3ZW50eVNjcmVlbiA/IHR3ZW50eVNjcmVlblNwZWVjaERhdGEgOiBudWxsO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gTm90aWZ5IGxpc3RlbmVycyBvbiBzcGVlY2hEYXRhUHJvcGVydHkgc28gaWYgYXV0b0hlYXIgaXMgdHVybmVkIG9uLCB0aGUgZGF0YSBpcyBzcG9rZW4gd2hlbmV2ZXIgdGhlIHNlbGVjdGVkXHJcbiAgICAvLyBzY3JlZW4gY2hhbmdlcy4gVGhlIERlcml2ZWRQcm9wZXJ0eSBhYm92ZSBjb3ZlcnMgbW9zdCwgYnV0IG5vdCBhbGwsIGNhc2VzIHdoZW4gY2hhbmdpbmcgc2NyZWVucy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9udW1iZXItcGxheS9pc3N1ZXMvMjE3LlxyXG4gICAgc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eS5sYXp5TGluayggKCkgPT4ge1xyXG4gICAgICBzcGVlY2hEYXRhUHJvcGVydHkudmFsdWUgJiYgc3BlZWNoRGF0YVByb3BlcnR5Lm5vdGlmeUxpc3RlbmVyc1N0YXRpYygpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuaW5pdGlhbGl6ZU51bWJlclN1aXRlQ29tbW9uVXR0ZXJhbmNlUXVldWUoIHNwZWVjaERhdGFQcm9wZXJ0eSApO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgbnVtYmVyUGxheVV0dGVyYW5jZVF1ZXVlID0gbmV3IE51bWJlclBsYXlVdHRlcmFuY2VRdWV1ZSgpO1xyXG5cclxubnVtYmVyUGxheS5yZWdpc3RlciggJ251bWJlclBsYXlVdHRlcmFuY2VRdWV1ZScsIG51bWJlclBsYXlVdHRlcmFuY2VRdWV1ZSApO1xyXG5leHBvcnQgZGVmYXVsdCBudW1iZXJQbGF5VXR0ZXJhbmNlUXVldWU7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLHFCQUFxQjtBQUM1QyxPQUFPQyxrQ0FBa0MsTUFBTSx5Q0FBeUM7QUFDeEYsT0FBT0MsK0JBQStCLE1BQU0sbUZBQW1GO0FBQy9ILE9BQU9DLFNBQVMsTUFBTSx3QkFBd0I7QUFDOUMsT0FBT0MsWUFBWSxNQUFNLDhCQUE4QjtBQUN2RCxPQUFPQyxxQkFBcUIsTUFBTSxtQ0FBbUM7QUFFckUsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUdwRSxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBRWxFLE1BQU1DLHdCQUF3QixTQUFTTiwrQkFBK0IsQ0FBQztFQUVyRTs7RUFHQTs7RUFHT08sV0FBV0EsQ0FBQSxFQUFHO0lBQ25CLEtBQUssQ0FDSFIsa0NBQWtDLEVBQ2xDSSxxQkFBcUIsQ0FBQ0ssdUJBQXVCLEVBQzdDTCxxQkFBcUIsQ0FBQ00sb0JBQW9CLEVBQzFDTixxQkFBcUIsQ0FBQ08sbUJBQW1CLEVBQ3pDUCxxQkFBcUIsQ0FBQ1EsdUJBQ3hCLENBQUM7SUFFRCxJQUFJLENBQUNDLDJCQUEyQixHQUFHLElBQUlQLGNBQWMsQ0FBRSxFQUFHLENBQUM7SUFDM0QsSUFBSSxDQUFDUSw4QkFBOEIsR0FBRyxJQUFJUixjQUFjLENBQUUsRUFBRyxDQUFDO0VBQ2hFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU1MsVUFBVUEsQ0FBRUMsc0JBQW9ELEVBQVM7SUFFOUUsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSVosZUFBZSxDQUM1QyxDQUFFLElBQUksQ0FBQ1EsMkJBQTJCLEVBQUUsSUFBSSxDQUFDQyw4QkFBOEIsRUFBRUUsc0JBQXNCLENBQUUsRUFDakcsQ0FBRUUsbUJBQW1CLEVBQUVDLHNCQUFzQixFQUFFQyxjQUFjLEtBQU07TUFFakU7TUFDQTtNQUNBLE9BQU9BLGNBQWMsWUFBWWxCLFNBQVMsR0FBR2dCLG1CQUFtQixHQUN6REUsY0FBYyxZQUFZakIsWUFBWSxHQUFHZ0Isc0JBQXNCLEdBQUcsSUFBSTtJQUMvRSxDQUFFLENBQUM7O0lBRUw7SUFDQTtJQUNBSCxzQkFBc0IsQ0FBQ0ssUUFBUSxDQUFFLE1BQU07TUFDckNKLGtCQUFrQixDQUFDSyxLQUFLLElBQUlMLGtCQUFrQixDQUFDTSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3hFLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0MseUNBQXlDLENBQUVQLGtCQUFtQixDQUFDO0VBQ3RFO0FBQ0Y7QUFFQSxNQUFNUSx3QkFBd0IsR0FBRyxJQUFJbEIsd0JBQXdCLENBQUMsQ0FBQztBQUUvRFIsVUFBVSxDQUFDMkIsUUFBUSxDQUFFLDBCQUEwQixFQUFFRCx3QkFBeUIsQ0FBQztBQUMzRSxlQUFlQSx3QkFBd0IifQ==