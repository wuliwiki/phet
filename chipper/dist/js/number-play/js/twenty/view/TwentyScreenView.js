// Copyright 2023, University of Colorado Boulder

/**
 * TwentyScreenView is the view for the 'Twenty' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import numberPlay from '../../numberPlay.js';
import NumberPlayScreenView from '../../common/view/NumberPlayScreenView.js';
import NumberPlayColors from '../../common/NumberPlayColors.js';
import NumberPlayConstants from '../../common/NumberPlayConstants.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import NumberSuiteCommonColors from '../../../../number-suite-common/js/common/NumberSuiteCommonColors.js';
import NumberSuiteCommonConstants from '../../../../number-suite-common/js/common/NumberSuiteCommonConstants.js';
export default class TwentyScreenView extends NumberPlayScreenView {
  constructor(model, tandem) {
    super(model, {
      wordAccordionBoxOptions: {
        fill: NumberPlayColors.orangeBackgroundColorProperty,
        font: new PhetFont(54),
        textOffsetX: 40
      },
      totalAccordionBoxOptions: {
        fill: NumberSuiteCommonColors.lightPurpleBackgroundColorProperty,
        font: new PhetFont(80),
        arrowButtonOptions: {
          arrowWidth: 16,
          // empirically determined
          arrowHeight: 16 // empirically determined
        },

        arrowButtonSpacing: 5 // empirically determined
      },

      tenFrameAccordionBoxOptions: {
        fill: NumberPlayColors.orangeBackgroundColorProperty,
        tenFrameOffsetX: 13
      },
      upperAccordionBoxHeight: NumberPlayConstants.TWENTY_UPPER_ACCORDION_BOX_HEIGHT,
      lowerAccordionBoxHeight: NumberSuiteCommonConstants.TALL_LOWER_ACCORDION_BOX_HEIGHT,
      tandem: tandem
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberPlay.register('TwentyScreenView', TwentyScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJudW1iZXJQbGF5IiwiTnVtYmVyUGxheVNjcmVlblZpZXciLCJOdW1iZXJQbGF5Q29sb3JzIiwiTnVtYmVyUGxheUNvbnN0YW50cyIsIlBoZXRGb250IiwiTnVtYmVyU3VpdGVDb21tb25Db2xvcnMiLCJOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cyIsIlR3ZW50eVNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwidGFuZGVtIiwid29yZEFjY29yZGlvbkJveE9wdGlvbnMiLCJmaWxsIiwib3JhbmdlQmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJmb250IiwidGV4dE9mZnNldFgiLCJ0b3RhbEFjY29yZGlvbkJveE9wdGlvbnMiLCJsaWdodFB1cnBsZUJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiYXJyb3dCdXR0b25PcHRpb25zIiwiYXJyb3dXaWR0aCIsImFycm93SGVpZ2h0IiwiYXJyb3dCdXR0b25TcGFjaW5nIiwidGVuRnJhbWVBY2NvcmRpb25Cb3hPcHRpb25zIiwidGVuRnJhbWVPZmZzZXRYIiwidXBwZXJBY2NvcmRpb25Cb3hIZWlnaHQiLCJUV0VOVFlfVVBQRVJfQUNDT1JESU9OX0JPWF9IRUlHSFQiLCJsb3dlckFjY29yZGlvbkJveEhlaWdodCIsIlRBTExfTE9XRVJfQUNDT1JESU9OX0JPWF9IRUlHSFQiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUd2VudHlTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUd2VudHlTY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ1R3ZW50eScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG51bWJlclBsYXkgZnJvbSAnLi4vLi4vbnVtYmVyUGxheS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQbGF5U2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9OdW1iZXJQbGF5U2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQbGF5Q29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9OdW1iZXJQbGF5Q29sb3JzLmpzJztcclxuaW1wb3J0IE51bWJlclBsYXlDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL051bWJlclBsYXlDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29sb3JzIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1zdWl0ZS1jb21tb24vanMvY29tbW9uL051bWJlclN1aXRlQ29tbW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IFR3ZW50eU1vZGVsIGZyb20gJy4uL21vZGVsL1R3ZW50eU1vZGVsLmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1zdWl0ZS1jb21tb24vanMvY29tbW9uL051bWJlclN1aXRlQ29tbW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3ZW50eVNjcmVlblZpZXcgZXh0ZW5kcyBOdW1iZXJQbGF5U2NyZWVuVmlldyB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFR3ZW50eU1vZGVsLCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHtcclxuICAgICAgd29yZEFjY29yZGlvbkJveE9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiBOdW1iZXJQbGF5Q29sb3JzLm9yYW5nZUJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggNTQgKSxcclxuICAgICAgICB0ZXh0T2Zmc2V0WDogNDBcclxuICAgICAgfSxcclxuICAgICAgdG90YWxBY2NvcmRpb25Cb3hPcHRpb25zOiB7XHJcbiAgICAgICAgZmlsbDogTnVtYmVyU3VpdGVDb21tb25Db2xvcnMubGlnaHRQdXJwbGVCYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDgwICksXHJcbiAgICAgICAgYXJyb3dCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgICBhcnJvd1dpZHRoOiAxNiwgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgICAgICAgYXJyb3dIZWlnaHQ6IDE2IC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFycm93QnV0dG9uU3BhY2luZzogNSAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkXHJcbiAgICAgIH0sXHJcbiAgICAgIHRlbkZyYW1lQWNjb3JkaW9uQm94T3B0aW9uczoge1xyXG4gICAgICAgIGZpbGw6IE51bWJlclBsYXlDb2xvcnMub3JhbmdlQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgICAgdGVuRnJhbWVPZmZzZXRYOiAxM1xyXG4gICAgICB9LFxyXG4gICAgICB1cHBlckFjY29yZGlvbkJveEhlaWdodDogTnVtYmVyUGxheUNvbnN0YW50cy5UV0VOVFlfVVBQRVJfQUNDT1JESU9OX0JPWF9IRUlHSFQsXHJcbiAgICAgIGxvd2VyQWNjb3JkaW9uQm94SGVpZ2h0OiBOdW1iZXJTdWl0ZUNvbW1vbkNvbnN0YW50cy5UQUxMX0xPV0VSX0FDQ09SRElPTl9CT1hfSEVJR0hULFxyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlclBsYXkucmVnaXN0ZXIoICdUd2VudHlTY3JlZW5WaWV3JywgVHdlbnR5U2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxxQkFBcUI7QUFDNUMsT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBRTVFLE9BQU9DLGdCQUFnQixNQUFNLGtDQUFrQztBQUMvRCxPQUFPQyxtQkFBbUIsTUFBTSxxQ0FBcUM7QUFDckUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyx1QkFBdUIsTUFBTSxzRUFBc0U7QUFFMUcsT0FBT0MsMEJBQTBCLE1BQU0seUVBQXlFO0FBRWhILGVBQWUsTUFBTUMsZ0JBQWdCLFNBQVNOLG9CQUFvQixDQUFDO0VBRTFETyxXQUFXQSxDQUFFQyxLQUFrQixFQUFFQyxNQUFjLEVBQUc7SUFFdkQsS0FBSyxDQUFFRCxLQUFLLEVBQUU7TUFDWkUsdUJBQXVCLEVBQUU7UUFDdkJDLElBQUksRUFBRVYsZ0JBQWdCLENBQUNXLDZCQUE2QjtRQUNwREMsSUFBSSxFQUFFLElBQUlWLFFBQVEsQ0FBRSxFQUFHLENBQUM7UUFDeEJXLFdBQVcsRUFBRTtNQUNmLENBQUM7TUFDREMsd0JBQXdCLEVBQUU7UUFDeEJKLElBQUksRUFBRVAsdUJBQXVCLENBQUNZLGtDQUFrQztRQUNoRUgsSUFBSSxFQUFFLElBQUlWLFFBQVEsQ0FBRSxFQUFHLENBQUM7UUFDeEJjLGtCQUFrQixFQUFFO1VBQ2xCQyxVQUFVLEVBQUUsRUFBRTtVQUFFO1VBQ2hCQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLENBQUM7O1FBQ0RDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztNQUN4QixDQUFDOztNQUNEQywyQkFBMkIsRUFBRTtRQUMzQlYsSUFBSSxFQUFFVixnQkFBZ0IsQ0FBQ1csNkJBQTZCO1FBQ3BEVSxlQUFlLEVBQUU7TUFDbkIsQ0FBQztNQUNEQyx1QkFBdUIsRUFBRXJCLG1CQUFtQixDQUFDc0IsaUNBQWlDO01BQzlFQyx1QkFBdUIsRUFBRXBCLDBCQUEwQixDQUFDcUIsK0JBQStCO01BQ25GakIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0VBRWdCa0IsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUE1QixVQUFVLENBQUM4QixRQUFRLENBQUUsa0JBQWtCLEVBQUV2QixnQkFBaUIsQ0FBQyJ9