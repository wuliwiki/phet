// Copyright 2023, University of Colorado Boulder

/**
 * TenScreenView is the view for the 'Ten' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import numberPlay from '../../numberPlay.js';
import NumberPlayScreenView from '../../common/view/NumberPlayScreenView.js';
import NumberPlayColors from '../../common/NumberPlayColors.js';
import NumberPlayConstants from '../../common/NumberPlayConstants.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import NumberSuiteCommonColors from '../../../../number-suite-common/js/common/NumberSuiteCommonColors.js';
export default class TenScreenView extends NumberPlayScreenView {
  constructor(model, tandem) {
    super(model, {
      wordAccordionBoxOptions: {
        fill: NumberPlayColors.purpleBackgroundColorProperty,
        font: new PhetFont(62),
        textOffsetX: 30
      },
      totalAccordionBoxOptions: {
        fill: NumberSuiteCommonColors.lightOrangeBackgroundColorProperty,
        font: new PhetFont(98),
        arrowButtonOptions: {
          arrowWidth: 20,
          // empirically determined
          arrowHeight: 20 // empirically determined
        },

        arrowButtonSpacing: 10 // empirically determined
      },

      tenFrameAccordionBoxOptions: {
        fill: NumberPlayColors.purpleBackgroundColorProperty,
        tenFrameOffsetX: 0
      },
      upperAccordionBoxHeight: NumberPlayConstants.TEN_UPPER_ACCORDION_BOX_HEIGHT,
      lowerAccordionBoxHeight: NumberPlayConstants.TEN_LOWER_ACCORDION_BOX_HEIGHT,
      tandem: tandem
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberPlay.register('TenScreenView', TenScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJudW1iZXJQbGF5IiwiTnVtYmVyUGxheVNjcmVlblZpZXciLCJOdW1iZXJQbGF5Q29sb3JzIiwiTnVtYmVyUGxheUNvbnN0YW50cyIsIlBoZXRGb250IiwiTnVtYmVyU3VpdGVDb21tb25Db2xvcnMiLCJUZW5TY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsIndvcmRBY2NvcmRpb25Cb3hPcHRpb25zIiwiZmlsbCIsInB1cnBsZUJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiZm9udCIsInRleHRPZmZzZXRYIiwidG90YWxBY2NvcmRpb25Cb3hPcHRpb25zIiwibGlnaHRPcmFuZ2VCYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImFycm93QnV0dG9uT3B0aW9ucyIsImFycm93V2lkdGgiLCJhcnJvd0hlaWdodCIsImFycm93QnV0dG9uU3BhY2luZyIsInRlbkZyYW1lQWNjb3JkaW9uQm94T3B0aW9ucyIsInRlbkZyYW1lT2Zmc2V0WCIsInVwcGVyQWNjb3JkaW9uQm94SGVpZ2h0IiwiVEVOX1VQUEVSX0FDQ09SRElPTl9CT1hfSEVJR0hUIiwibG93ZXJBY2NvcmRpb25Cb3hIZWlnaHQiLCJURU5fTE9XRVJfQUNDT1JESU9OX0JPWF9IRUlHSFQiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJUZW5TY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZW5TY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ1Rlbicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IG51bWJlclBsYXkgZnJvbSAnLi4vLi4vbnVtYmVyUGxheS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQbGF5U2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9OdW1iZXJQbGF5U2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQbGF5Q29sb3JzIGZyb20gJy4uLy4uL2NvbW1vbi9OdW1iZXJQbGF5Q29sb3JzLmpzJztcclxuaW1wb3J0IE51bWJlclBsYXlDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL051bWJlclBsYXlDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IE51bWJlclN1aXRlQ29tbW9uQ29sb3JzIGZyb20gJy4uLy4uLy4uLy4uL251bWJlci1zdWl0ZS1jb21tb24vanMvY29tbW9uL051bWJlclN1aXRlQ29tbW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IFRlbk1vZGVsIGZyb20gJy4uL21vZGVsL1Rlbk1vZGVsLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlblNjcmVlblZpZXcgZXh0ZW5kcyBOdW1iZXJQbGF5U2NyZWVuVmlldyB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IFRlbk1vZGVsLCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHtcclxuICAgICAgd29yZEFjY29yZGlvbkJveE9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiBOdW1iZXJQbGF5Q29sb3JzLnB1cnBsZUJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggNjIgKSxcclxuICAgICAgICB0ZXh0T2Zmc2V0WDogMzBcclxuICAgICAgfSxcclxuICAgICAgdG90YWxBY2NvcmRpb25Cb3hPcHRpb25zOiB7XHJcbiAgICAgICAgZmlsbDogTnVtYmVyU3VpdGVDb21tb25Db2xvcnMubGlnaHRPcmFuZ2VCYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSxcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDk4ICksXHJcbiAgICAgICAgYXJyb3dCdXR0b25PcHRpb25zOiB7XHJcbiAgICAgICAgICBhcnJvd1dpZHRoOiAyMCwgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgICAgICAgYXJyb3dIZWlnaHQ6IDIwIC8vIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFycm93QnV0dG9uU3BhY2luZzogMTAgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgICB9LFxyXG4gICAgICB0ZW5GcmFtZUFjY29yZGlvbkJveE9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiBOdW1iZXJQbGF5Q29sb3JzLnB1cnBsZUJhY2tncm91bmRDb2xvclByb3BlcnR5LFxyXG4gICAgICAgIHRlbkZyYW1lT2Zmc2V0WDogMFxyXG4gICAgICB9LFxyXG4gICAgICB1cHBlckFjY29yZGlvbkJveEhlaWdodDogTnVtYmVyUGxheUNvbnN0YW50cy5URU5fVVBQRVJfQUNDT1JESU9OX0JPWF9IRUlHSFQsXHJcbiAgICAgIGxvd2VyQWNjb3JkaW9uQm94SGVpZ2h0OiBOdW1iZXJQbGF5Q29uc3RhbnRzLlRFTl9MT1dFUl9BQ0NPUkRJT05fQk9YX0hFSUdIVCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJQbGF5LnJlZ2lzdGVyKCAnVGVuU2NyZWVuVmlldycsIFRlblNjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLE9BQU9DLG9CQUFvQixNQUFNLDJDQUEyQztBQUU1RSxPQUFPQyxnQkFBZ0IsTUFBTSxrQ0FBa0M7QUFDL0QsT0FBT0MsbUJBQW1CLE1BQU0scUNBQXFDO0FBQ3JFLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsdUJBQXVCLE1BQU0sc0VBQXNFO0FBRzFHLGVBQWUsTUFBTUMsYUFBYSxTQUFTTCxvQkFBb0IsQ0FBQztFQUV2RE0sV0FBV0EsQ0FBRUMsS0FBZSxFQUFFQyxNQUFjLEVBQUc7SUFFcEQsS0FBSyxDQUFFRCxLQUFLLEVBQUU7TUFDWkUsdUJBQXVCLEVBQUU7UUFDdkJDLElBQUksRUFBRVQsZ0JBQWdCLENBQUNVLDZCQUE2QjtRQUNwREMsSUFBSSxFQUFFLElBQUlULFFBQVEsQ0FBRSxFQUFHLENBQUM7UUFDeEJVLFdBQVcsRUFBRTtNQUNmLENBQUM7TUFDREMsd0JBQXdCLEVBQUU7UUFDeEJKLElBQUksRUFBRU4sdUJBQXVCLENBQUNXLGtDQUFrQztRQUNoRUgsSUFBSSxFQUFFLElBQUlULFFBQVEsQ0FBRSxFQUFHLENBQUM7UUFDeEJhLGtCQUFrQixFQUFFO1VBQ2xCQyxVQUFVLEVBQUUsRUFBRTtVQUFFO1VBQ2hCQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLENBQUM7O1FBQ0RDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztNQUN6QixDQUFDOztNQUNEQywyQkFBMkIsRUFBRTtRQUMzQlYsSUFBSSxFQUFFVCxnQkFBZ0IsQ0FBQ1UsNkJBQTZCO1FBQ3BEVSxlQUFlLEVBQUU7TUFDbkIsQ0FBQztNQUNEQyx1QkFBdUIsRUFBRXBCLG1CQUFtQixDQUFDcUIsOEJBQThCO01BQzNFQyx1QkFBdUIsRUFBRXRCLG1CQUFtQixDQUFDdUIsOEJBQThCO01BQzNFakIsTUFBTSxFQUFFQTtJQUNWLENBQUUsQ0FBQztFQUNMO0VBRWdCa0IsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUEzQixVQUFVLENBQUM2QixRQUFRLENBQUUsZUFBZSxFQUFFdkIsYUFBYyxDQUFDIn0=