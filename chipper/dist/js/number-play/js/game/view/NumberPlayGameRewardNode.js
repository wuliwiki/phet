// Copyright 2023, University of Colorado Boulder

/**
 * NumberPlayGameRewardNode is the various objects that are falling behind the RewardDialog when the user reaches the
 * score that results in a reward.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import CountingCommonConstants from '../../../../counting-common/js/common/CountingCommonConstants.js';
import CountingObjectType from '../../../../counting-common/js/common/model/CountingObjectType.js';
import StarNode from '../../../../scenery-phet/js/StarNode.js';
import RewardNode from '../../../../vegas/js/RewardNode.js';
import numberPlay from '../../numberPlay.js';
import { Image } from '../../../../scenery/js/imports.js';

// constants
const NUMBER_OF_NODES = 100;
const IMAGE_OPTIONS = {
  maxHeight: 40
};
const NODES = [new StarNode(), new Image(CountingCommonConstants.COUNTING_OBJECT_TYPE_TO_IMAGE.get(CountingObjectType.DOG), IMAGE_OPTIONS), new Image(CountingCommonConstants.COUNTING_OBJECT_TYPE_TO_IMAGE.get(CountingObjectType.BALL), IMAGE_OPTIONS), new Image(CountingCommonConstants.COUNTING_OBJECT_TYPE_TO_IMAGE.get(CountingObjectType.APPLE), IMAGE_OPTIONS), new Image(CountingCommonConstants.COUNTING_OBJECT_TYPE_TO_IMAGE.get(CountingObjectType.BUTTERFLY), IMAGE_OPTIONS)];
export default class NumberPlayGameRewardNode extends RewardNode {
  constructor() {
    super({
      visible: false,
      nodes: RewardNode.createRandomNodes(NODES, NUMBER_OF_NODES)
    });
  }
}
numberPlay.register('NumberPlayGameRewardNode', NumberPlayGameRewardNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb3VudGluZ0NvbW1vbkNvbnN0YW50cyIsIkNvdW50aW5nT2JqZWN0VHlwZSIsIlN0YXJOb2RlIiwiUmV3YXJkTm9kZSIsIm51bWJlclBsYXkiLCJJbWFnZSIsIk5VTUJFUl9PRl9OT0RFUyIsIklNQUdFX09QVElPTlMiLCJtYXhIZWlnaHQiLCJOT0RFUyIsIkNPVU5USU5HX09CSkVDVF9UWVBFX1RPX0lNQUdFIiwiZ2V0IiwiRE9HIiwiQkFMTCIsIkFQUExFIiwiQlVUVEVSRkxZIiwiTnVtYmVyUGxheUdhbWVSZXdhcmROb2RlIiwiY29uc3RydWN0b3IiLCJ2aXNpYmxlIiwibm9kZXMiLCJjcmVhdGVSYW5kb21Ob2RlcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyUGxheUdhbWVSZXdhcmROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOdW1iZXJQbGF5R2FtZVJld2FyZE5vZGUgaXMgdGhlIHZhcmlvdXMgb2JqZWN0cyB0aGF0IGFyZSBmYWxsaW5nIGJlaGluZCB0aGUgUmV3YXJkRGlhbG9nIHdoZW4gdGhlIHVzZXIgcmVhY2hlcyB0aGVcclxuICogc2NvcmUgdGhhdCByZXN1bHRzIGluIGEgcmV3YXJkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IENvdW50aW5nQ29tbW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uL2NvdW50aW5nLWNvbW1vbi9qcy9jb21tb24vQ291bnRpbmdDb21tb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgQ291bnRpbmdPYmplY3RUeXBlIGZyb20gJy4uLy4uLy4uLy4uL2NvdW50aW5nLWNvbW1vbi9qcy9jb21tb24vbW9kZWwvQ291bnRpbmdPYmplY3RUeXBlLmpzJztcclxuaW1wb3J0IFN0YXJOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TdGFyTm9kZS5qcyc7XHJcbmltcG9ydCBSZXdhcmROb2RlIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Jld2FyZE5vZGUuanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheSBmcm9tICcuLi8uLi9udW1iZXJQbGF5LmpzJztcclxuaW1wb3J0IHsgSW1hZ2UsIEltYWdlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTlVNQkVSX09GX05PREVTID0gMTAwO1xyXG5jb25zdCBJTUFHRV9PUFRJT05TOiBJbWFnZU9wdGlvbnMgPSB7XHJcbiAgbWF4SGVpZ2h0OiA0MFxyXG59O1xyXG5jb25zdCBOT0RFUyA9IFtcclxuICBuZXcgU3Rhck5vZGUoKSxcclxuICBuZXcgSW1hZ2UoIENvdW50aW5nQ29tbW9uQ29uc3RhbnRzLkNPVU5USU5HX09CSkVDVF9UWVBFX1RPX0lNQUdFLmdldCggQ291bnRpbmdPYmplY3RUeXBlLkRPRyApLCBJTUFHRV9PUFRJT05TICksXHJcbiAgbmV3IEltYWdlKCBDb3VudGluZ0NvbW1vbkNvbnN0YW50cy5DT1VOVElOR19PQkpFQ1RfVFlQRV9UT19JTUFHRS5nZXQoIENvdW50aW5nT2JqZWN0VHlwZS5CQUxMICksIElNQUdFX09QVElPTlMgKSxcclxuICBuZXcgSW1hZ2UoIENvdW50aW5nQ29tbW9uQ29uc3RhbnRzLkNPVU5USU5HX09CSkVDVF9UWVBFX1RPX0lNQUdFLmdldCggQ291bnRpbmdPYmplY3RUeXBlLkFQUExFICksIElNQUdFX09QVElPTlMgKSxcclxuICBuZXcgSW1hZ2UoIENvdW50aW5nQ29tbW9uQ29uc3RhbnRzLkNPVU5USU5HX09CSkVDVF9UWVBFX1RPX0lNQUdFLmdldCggQ291bnRpbmdPYmplY3RUeXBlLkJVVFRFUkZMWSApLCBJTUFHRV9PUFRJT05TIClcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bWJlclBsYXlHYW1lUmV3YXJkTm9kZSBleHRlbmRzIFJld2FyZE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgIG5vZGVzOiBSZXdhcmROb2RlLmNyZWF0ZVJhbmRvbU5vZGVzKCBOT0RFUywgTlVNQkVSX09GX05PREVTIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlclBsYXkucmVnaXN0ZXIoICdOdW1iZXJQbGF5R2FtZVJld2FyZE5vZGUnLCBOdW1iZXJQbGF5R2FtZVJld2FyZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx1QkFBdUIsTUFBTSxrRUFBa0U7QUFDdEcsT0FBT0Msa0JBQWtCLE1BQU0sbUVBQW1FO0FBQ2xHLE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsVUFBVSxNQUFNLG9DQUFvQztBQUMzRCxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBQzVDLFNBQVNDLEtBQUssUUFBc0IsbUNBQW1DOztBQUV2RTtBQUNBLE1BQU1DLGVBQWUsR0FBRyxHQUFHO0FBQzNCLE1BQU1DLGFBQTJCLEdBQUc7RUFDbENDLFNBQVMsRUFBRTtBQUNiLENBQUM7QUFDRCxNQUFNQyxLQUFLLEdBQUcsQ0FDWixJQUFJUCxRQUFRLENBQUMsQ0FBQyxFQUNkLElBQUlHLEtBQUssQ0FBRUwsdUJBQXVCLENBQUNVLDZCQUE2QixDQUFDQyxHQUFHLENBQUVWLGtCQUFrQixDQUFDVyxHQUFJLENBQUMsRUFBRUwsYUFBYyxDQUFDLEVBQy9HLElBQUlGLEtBQUssQ0FBRUwsdUJBQXVCLENBQUNVLDZCQUE2QixDQUFDQyxHQUFHLENBQUVWLGtCQUFrQixDQUFDWSxJQUFLLENBQUMsRUFBRU4sYUFBYyxDQUFDLEVBQ2hILElBQUlGLEtBQUssQ0FBRUwsdUJBQXVCLENBQUNVLDZCQUE2QixDQUFDQyxHQUFHLENBQUVWLGtCQUFrQixDQUFDYSxLQUFNLENBQUMsRUFBRVAsYUFBYyxDQUFDLEVBQ2pILElBQUlGLEtBQUssQ0FBRUwsdUJBQXVCLENBQUNVLDZCQUE2QixDQUFDQyxHQUFHLENBQUVWLGtCQUFrQixDQUFDYyxTQUFVLENBQUMsRUFBRVIsYUFBYyxDQUFDLENBQ3RIO0FBRUQsZUFBZSxNQUFNUyx3QkFBd0IsU0FBU2IsVUFBVSxDQUFDO0VBRXhEYyxXQUFXQSxDQUFBLEVBQUc7SUFFbkIsS0FBSyxDQUFFO01BQ0xDLE9BQU8sRUFBRSxLQUFLO01BQ2RDLEtBQUssRUFBRWhCLFVBQVUsQ0FBQ2lCLGlCQUFpQixDQUFFWCxLQUFLLEVBQUVILGVBQWdCO0lBQzlELENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUYsVUFBVSxDQUFDaUIsUUFBUSxDQUFFLDBCQUEwQixFQUFFTCx3QkFBeUIsQ0FBQyJ9