// Copyright 2021-2023, University of Colorado Boulder

/**
 * SubitizerRevealButton re-reveals the subitizer shape when pressed.
 *
 * @author Luisa Vargas
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import { Color, Path } from '../../../../scenery/js/imports.js';
import numberPlay from '../../numberPlay.js';
import RectangularPushButton from '../../../../sun/js/buttons/RectangularPushButton.js';
import SceneryPhetConstants from '../../../../scenery-phet/js/SceneryPhetConstants.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import eyeSolidShape from '../../../../sherpa/js/fontawesome-5/eyeSolidShape.js';
import NumberPlayColors from '../../common/NumberPlayColors.js';
// constants
const BUTTON_SIDE_LENGTH = SceneryPhetConstants.DEFAULT_BUTTON_RADIUS * 2;
const BUTTON_CONTENT_MARGIN = 6;
const BUTTON_TOUCH_AREA_DILATION = 10;
class SubitizeRevealButton extends RectangularPushButton {
  constructor(isChallengeSolvedProperty, subitizerIsInputEnabledProperty, isShapeVisibleProperty) {
    const eyeNode = new Path(eyeSolidShape, {
      fill: Color.BLACK
    });

    // The reveal button is visible only when a challenge is unsolved, when the subitizer is accepting input, and
    // when the subitizer shape is not visible.
    const revealButtonVisibleProperty = new DerivedProperty([isChallengeSolvedProperty, subitizerIsInputEnabledProperty, isShapeVisibleProperty], (isChallengeSolved, subitizerIsInputEnabled, isShapeVisible) => {
      return !isChallengeSolved && subitizerIsInputEnabled && !isShapeVisible;
    });
    super({
      content: eyeNode,
      xMargin: BUTTON_CONTENT_MARGIN,
      yMargin: BUTTON_CONTENT_MARGIN,
      touchAreaXDilation: BUTTON_TOUCH_AREA_DILATION,
      touchAreaYDilation: BUTTON_TOUCH_AREA_DILATION,
      size: new Dimension2(BUTTON_SIDE_LENGTH, BUTTON_SIDE_LENGTH),
      baseColor: NumberPlayColors.subitizeGameLightColorProperty,
      visibleProperty: revealButtonVisibleProperty,
      listener: () => {
        isShapeVisibleProperty.value = true;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberPlay.register('SubitizeRevealButton', SubitizeRevealButton);
export default SubitizeRevealButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIlBhdGgiLCJudW1iZXJQbGF5IiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiU2NlbmVyeVBoZXRDb25zdGFudHMiLCJEaW1lbnNpb24yIiwiRGVyaXZlZFByb3BlcnR5IiwiZXllU29saWRTaGFwZSIsIk51bWJlclBsYXlDb2xvcnMiLCJCVVRUT05fU0lERV9MRU5HVEgiLCJERUZBVUxUX0JVVFRPTl9SQURJVVMiLCJCVVRUT05fQ09OVEVOVF9NQVJHSU4iLCJCVVRUT05fVE9VQ0hfQVJFQV9ESUxBVElPTiIsIlN1Yml0aXplUmV2ZWFsQnV0dG9uIiwiY29uc3RydWN0b3IiLCJpc0NoYWxsZW5nZVNvbHZlZFByb3BlcnR5Iiwic3ViaXRpemVySXNJbnB1dEVuYWJsZWRQcm9wZXJ0eSIsImlzU2hhcGVWaXNpYmxlUHJvcGVydHkiLCJleWVOb2RlIiwiZmlsbCIsIkJMQUNLIiwicmV2ZWFsQnV0dG9uVmlzaWJsZVByb3BlcnR5IiwiaXNDaGFsbGVuZ2VTb2x2ZWQiLCJzdWJpdGl6ZXJJc0lucHV0RW5hYmxlZCIsImlzU2hhcGVWaXNpYmxlIiwiY29udGVudCIsInhNYXJnaW4iLCJ5TWFyZ2luIiwidG91Y2hBcmVhWERpbGF0aW9uIiwidG91Y2hBcmVhWURpbGF0aW9uIiwic2l6ZSIsImJhc2VDb2xvciIsInN1Yml0aXplR2FtZUxpZ2h0Q29sb3JQcm9wZXJ0eSIsInZpc2libGVQcm9wZXJ0eSIsImxpc3RlbmVyIiwidmFsdWUiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdWJpdGl6ZVJldmVhbEJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdWJpdGl6ZXJSZXZlYWxCdXR0b24gcmUtcmV2ZWFscyB0aGUgc3ViaXRpemVyIHNoYXBlIHdoZW4gcHJlc3NlZC5cclxuICpcclxuICogQGF1dGhvciBMdWlzYSBWYXJnYXNcclxuICogQGF1dGhvciBDaHJpcyBLbHVzZW5kb3JmIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENvbG9yLCBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG51bWJlclBsYXkgZnJvbSAnLi4vLi4vbnVtYmVyUGxheS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IFNjZW5lcnlQaGV0Q29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TY2VuZXJ5UGhldENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBleWVTb2xpZFNoYXBlIGZyb20gJy4uLy4uLy4uLy4uL3NoZXJwYS9qcy9mb250YXdlc29tZS01L2V5ZVNvbGlkU2hhcGUuanMnO1xyXG5pbXBvcnQgTnVtYmVyUGxheUNvbG9ycyBmcm9tICcuLi8uLi9jb21tb24vTnVtYmVyUGxheUNvbG9ycy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQlVUVE9OX1NJREVfTEVOR1RIID0gU2NlbmVyeVBoZXRDb25zdGFudHMuREVGQVVMVF9CVVRUT05fUkFESVVTICogMjtcclxuY29uc3QgQlVUVE9OX0NPTlRFTlRfTUFSR0lOID0gNjtcclxuY29uc3QgQlVUVE9OX1RPVUNIX0FSRUFfRElMQVRJT04gPSAxMDtcclxuXHJcbmNsYXNzIFN1Yml0aXplUmV2ZWFsQnV0dG9uIGV4dGVuZHMgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpc0NoYWxsZW5nZVNvbHZlZFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPiwgc3ViaXRpemVySXNJbnB1dEVuYWJsZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBpc1NoYXBlVmlzaWJsZVByb3BlcnR5OiBUUHJvcGVydHk8Ym9vbGVhbj4gKSB7XHJcblxyXG4gICAgY29uc3QgZXllTm9kZSA9IG5ldyBQYXRoKCBleWVTb2xpZFNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IENvbG9yLkJMQUNLXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVGhlIHJldmVhbCBidXR0b24gaXMgdmlzaWJsZSBvbmx5IHdoZW4gYSBjaGFsbGVuZ2UgaXMgdW5zb2x2ZWQsIHdoZW4gdGhlIHN1Yml0aXplciBpcyBhY2NlcHRpbmcgaW5wdXQsIGFuZFxyXG4gICAgLy8gd2hlbiB0aGUgc3ViaXRpemVyIHNoYXBlIGlzIG5vdCB2aXNpYmxlLlxyXG4gICAgY29uc3QgcmV2ZWFsQnV0dG9uVmlzaWJsZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyBpc0NoYWxsZW5nZVNvbHZlZFByb3BlcnR5LCBzdWJpdGl6ZXJJc0lucHV0RW5hYmxlZFByb3BlcnR5LCBpc1NoYXBlVmlzaWJsZVByb3BlcnR5IF0sXHJcbiAgICAgICggaXNDaGFsbGVuZ2VTb2x2ZWQsIHN1Yml0aXplcklzSW5wdXRFbmFibGVkLCBpc1NoYXBlVmlzaWJsZSApID0+IHtcclxuICAgICAgICByZXR1cm4gIWlzQ2hhbGxlbmdlU29sdmVkICYmIHN1Yml0aXplcklzSW5wdXRFbmFibGVkICYmICFpc1NoYXBlVmlzaWJsZTtcclxuICAgICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIGNvbnRlbnQ6IGV5ZU5vZGUsXHJcbiAgICAgIHhNYXJnaW46IEJVVFRPTl9DT05URU5UX01BUkdJTixcclxuICAgICAgeU1hcmdpbjogQlVUVE9OX0NPTlRFTlRfTUFSR0lOLFxyXG4gICAgICB0b3VjaEFyZWFYRGlsYXRpb246IEJVVFRPTl9UT1VDSF9BUkVBX0RJTEFUSU9OLFxyXG4gICAgICB0b3VjaEFyZWFZRGlsYXRpb246IEJVVFRPTl9UT1VDSF9BUkVBX0RJTEFUSU9OLFxyXG4gICAgICBzaXplOiBuZXcgRGltZW5zaW9uMiggQlVUVE9OX1NJREVfTEVOR1RILCBCVVRUT05fU0lERV9MRU5HVEggKSxcclxuICAgICAgYmFzZUNvbG9yOiBOdW1iZXJQbGF5Q29sb3JzLnN1Yml0aXplR2FtZUxpZ2h0Q29sb3JQcm9wZXJ0eSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiByZXZlYWxCdXR0b25WaXNpYmxlUHJvcGVydHksXHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgaXNTaGFwZVZpc2libGVQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJQbGF5LnJlZ2lzdGVyKCAnU3ViaXRpemVSZXZlYWxCdXR0b24nLCBTdWJpdGl6ZVJldmVhbEJ1dHRvbiApO1xyXG5leHBvcnQgZGVmYXVsdCBTdWJpdGl6ZVJldmVhbEJ1dHRvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDL0QsT0FBT0MsVUFBVSxNQUFNLHFCQUFxQjtBQUM1QyxPQUFPQyxxQkFBcUIsTUFBTSxxREFBcUQ7QUFDdkYsT0FBT0Msb0JBQW9CLE1BQU0scURBQXFEO0FBQ3RGLE9BQU9DLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxhQUFhLE1BQU0sc0RBQXNEO0FBQ2hGLE9BQU9DLGdCQUFnQixNQUFNLGtDQUFrQztBQUkvRDtBQUNBLE1BQU1DLGtCQUFrQixHQUFHTCxvQkFBb0IsQ0FBQ00scUJBQXFCLEdBQUcsQ0FBQztBQUN6RSxNQUFNQyxxQkFBcUIsR0FBRyxDQUFDO0FBQy9CLE1BQU1DLDBCQUEwQixHQUFHLEVBQUU7QUFFckMsTUFBTUMsb0JBQW9CLFNBQVNWLHFCQUFxQixDQUFDO0VBRWhEVyxXQUFXQSxDQUFFQyx5QkFBcUQsRUFBRUMsK0JBQTJELEVBQ2xIQyxzQkFBMEMsRUFBRztJQUUvRCxNQUFNQyxPQUFPLEdBQUcsSUFBSWpCLElBQUksQ0FBRU0sYUFBYSxFQUFFO01BQ3ZDWSxJQUFJLEVBQUVuQixLQUFLLENBQUNvQjtJQUNkLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0EsTUFBTUMsMkJBQTJCLEdBQUcsSUFBSWYsZUFBZSxDQUNyRCxDQUFFUyx5QkFBeUIsRUFBRUMsK0JBQStCLEVBQUVDLHNCQUFzQixDQUFFLEVBQ3RGLENBQUVLLGlCQUFpQixFQUFFQyx1QkFBdUIsRUFBRUMsY0FBYyxLQUFNO01BQ2hFLE9BQU8sQ0FBQ0YsaUJBQWlCLElBQUlDLHVCQUF1QixJQUFJLENBQUNDLGNBQWM7SUFDekUsQ0FBRSxDQUFDO0lBRUwsS0FBSyxDQUFFO01BQ0xDLE9BQU8sRUFBRVAsT0FBTztNQUNoQlEsT0FBTyxFQUFFZixxQkFBcUI7TUFDOUJnQixPQUFPLEVBQUVoQixxQkFBcUI7TUFDOUJpQixrQkFBa0IsRUFBRWhCLDBCQUEwQjtNQUM5Q2lCLGtCQUFrQixFQUFFakIsMEJBQTBCO01BQzlDa0IsSUFBSSxFQUFFLElBQUl6QixVQUFVLENBQUVJLGtCQUFrQixFQUFFQSxrQkFBbUIsQ0FBQztNQUM5RHNCLFNBQVMsRUFBRXZCLGdCQUFnQixDQUFDd0IsOEJBQThCO01BQzFEQyxlQUFlLEVBQUVaLDJCQUEyQjtNQUM1Q2EsUUFBUSxFQUFFQSxDQUFBLEtBQU07UUFDZGpCLHNCQUFzQixDQUFDa0IsS0FBSyxHQUFHLElBQUk7TUFDckM7SUFDRixDQUFFLENBQUM7RUFDTDtFQUVnQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFsQyxVQUFVLENBQUNvQyxRQUFRLENBQUUsc0JBQXNCLEVBQUV6QixvQkFBcUIsQ0FBQztBQUNuRSxlQUFlQSxvQkFBb0IifQ==