// Copyright 2022-2023, University of Colorado Boulder

/**
 * NumberPlayGameLevelSelectionButtonGroup is the group of level-selection buttons in the 'Game' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */

import { HBox, Image, VBox } from '../../../../scenery/js/imports.js';
import numberPlay from '../../numberPlay.js';
import NumberPlayConstants from '../../common/NumberPlayConstants.js';
import ScoreDisplayNumberAndStar from '../../../../vegas/js/ScoreDisplayNumberAndStar.js';
import LevelSelectionButtonGroup from '../../../../vegas/js/LevelSelectionButtonGroup.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import NumberPlayQueryParameters from '../../common/NumberPlayQueryParameters.js';

// constants
const BUTTON_SPACING = 30;
class NumberPlayGameLevelSelectionButtonGroup extends LevelSelectionButtonGroup {
  constructor(levelProperty, levels) {
    const options = {
      levelSelectionButtonOptions: {
        iconToScoreDisplayYSpace: 0,
        touchAreaXDilation: NumberPlayConstants.TOUCH_AREA_DILATION,
        touchAreaYDilation: NumberPlayConstants.TOUCH_AREA_DILATION
      },
      // always put the counting levels on the top row, subitize levels always on the bottoms row
      createLayoutNode: levelSelectionButtons => {
        assert && assert(levelSelectionButtons.length === 4, 'this layout is hardcoded for 4 buttons');
        return new VBox({
          children: [new HBox({
            children: [levelSelectionButtons[0], levelSelectionButtons[1]],
            spacing: BUTTON_SPACING
          }), new HBox({
            children: [levelSelectionButtons[2], levelSelectionButtons[3]],
            spacing: BUTTON_SPACING
          })],
          spacing: BUTTON_SPACING
        });
      },
      gameLevels: NumberPlayQueryParameters.gameLevels,
      tandem: Tandem.REQUIRED
    };
    const items = levels.map(level => {
      return {
        icon: new Image(level.gameType.levelImages[level.levelNumber]),
        scoreProperty: level.scoreProperty,
        options: {
          createScoreDisplay: scoreProperty => new ScoreDisplayNumberAndStar(scoreProperty),
          listener: () => {
            levelProperty.value = level;
          },
          baseColor: level.baseColorProperty
        }
      };
    });
    super(items, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
numberPlay.register('NumberPlayGameLevelSelectionButtonGroup', NumberPlayGameLevelSelectionButtonGroup);
export default NumberPlayGameLevelSelectionButtonGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiSW1hZ2UiLCJWQm94IiwibnVtYmVyUGxheSIsIk51bWJlclBsYXlDb25zdGFudHMiLCJTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIiwiTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCIsIlRhbmRlbSIsIk51bWJlclBsYXlRdWVyeVBhcmFtZXRlcnMiLCJCVVRUT05fU1BBQ0lORyIsIk51bWJlclBsYXlHYW1lTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwibGV2ZWxQcm9wZXJ0eSIsImxldmVscyIsIm9wdGlvbnMiLCJsZXZlbFNlbGVjdGlvbkJ1dHRvbk9wdGlvbnMiLCJpY29uVG9TY29yZURpc3BsYXlZU3BhY2UiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJUT1VDSF9BUkVBX0RJTEFUSU9OIiwidG91Y2hBcmVhWURpbGF0aW9uIiwiY3JlYXRlTGF5b3V0Tm9kZSIsImxldmVsU2VsZWN0aW9uQnV0dG9ucyIsImFzc2VydCIsImxlbmd0aCIsImNoaWxkcmVuIiwic3BhY2luZyIsImdhbWVMZXZlbHMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsIml0ZW1zIiwibWFwIiwibGV2ZWwiLCJpY29uIiwiZ2FtZVR5cGUiLCJsZXZlbEltYWdlcyIsImxldmVsTnVtYmVyIiwic2NvcmVQcm9wZXJ0eSIsImNyZWF0ZVNjb3JlRGlzcGxheSIsImxpc3RlbmVyIiwidmFsdWUiLCJiYXNlQ29sb3IiLCJiYXNlQ29sb3JQcm9wZXJ0eSIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51bWJlclBsYXlHYW1lTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOdW1iZXJQbGF5R2FtZUxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAgaXMgdGhlIGdyb3VwIG9mIGxldmVsLXNlbGVjdGlvbiBidXR0b25zIGluIHRoZSAnR2FtZScgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSEJveCwgSW1hZ2UsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgbnVtYmVyUGxheSBmcm9tICcuLi8uLi9udW1iZXJQbGF5LmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQbGF5R2FtZUxldmVsIGZyb20gJy4uL21vZGVsL051bWJlclBsYXlHYW1lTGV2ZWwuanMnO1xyXG5pbXBvcnQgTnVtYmVyUGxheUNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vTnVtYmVyUGxheUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyIGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL1Njb3JlRGlzcGxheU51bWJlckFuZFN0YXIuanMnO1xyXG5pbXBvcnQgTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCwgeyBMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3ZlZ2FzL2pzL0xldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgTGV2ZWxTZWxlY3Rpb25CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vdmVnYXMvanMvTGV2ZWxTZWxlY3Rpb25CdXR0b24uanMnO1xyXG5pbXBvcnQgTnVtYmVyUGxheVF1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi9jb21tb24vTnVtYmVyUGxheVF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQlVUVE9OX1NQQUNJTkcgPSAzMDtcclxuXHJcbmNsYXNzIE51bWJlclBsYXlHYW1lTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCBleHRlbmRzIExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGxldmVsUHJvcGVydHk6IFRQcm9wZXJ0eTxOdW1iZXJQbGF5R2FtZUxldmVsIHwgbnVsbD4sIGxldmVsczogTnVtYmVyUGxheUdhbWVMZXZlbFtdICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnM6IExldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXBPcHRpb25zID0ge1xyXG4gICAgICBsZXZlbFNlbGVjdGlvbkJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBpY29uVG9TY29yZURpc3BsYXlZU3BhY2U6IDAsXHJcbiAgICAgICAgdG91Y2hBcmVhWERpbGF0aW9uOiBOdW1iZXJQbGF5Q29uc3RhbnRzLlRPVUNIX0FSRUFfRElMQVRJT04sXHJcbiAgICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiBOdW1iZXJQbGF5Q29uc3RhbnRzLlRPVUNIX0FSRUFfRElMQVRJT05cclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIGFsd2F5cyBwdXQgdGhlIGNvdW50aW5nIGxldmVscyBvbiB0aGUgdG9wIHJvdywgc3ViaXRpemUgbGV2ZWxzIGFsd2F5cyBvbiB0aGUgYm90dG9tcyByb3dcclxuICAgICAgY3JlYXRlTGF5b3V0Tm9kZTogKCBsZXZlbFNlbGVjdGlvbkJ1dHRvbnM6IExldmVsU2VsZWN0aW9uQnV0dG9uW10gKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggbGV2ZWxTZWxlY3Rpb25CdXR0b25zLmxlbmd0aCA9PT0gNCwgJ3RoaXMgbGF5b3V0IGlzIGhhcmRjb2RlZCBmb3IgNCBidXR0b25zJyApO1xyXG4gICAgICAgIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgbmV3IEhCb3goIHtcclxuICAgICAgICAgICAgICBjaGlsZHJlbjogWyBsZXZlbFNlbGVjdGlvbkJ1dHRvbnNbIDAgXSwgbGV2ZWxTZWxlY3Rpb25CdXR0b25zWyAxIF0gXSxcclxuICAgICAgICAgICAgICBzcGFjaW5nOiBCVVRUT05fU1BBQ0lOR1xyXG4gICAgICAgICAgICB9ICksXHJcbiAgICAgICAgICAgIG5ldyBIQm94KCB7XHJcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFsgbGV2ZWxTZWxlY3Rpb25CdXR0b25zWyAyIF0sIGxldmVsU2VsZWN0aW9uQnV0dG9uc1sgMyBdIF0sXHJcbiAgICAgICAgICAgICAgc3BhY2luZzogQlVUVE9OX1NQQUNJTkdcclxuICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgc3BhY2luZzogQlVUVE9OX1NQQUNJTkdcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdhbWVMZXZlbHM6IE51bWJlclBsYXlRdWVyeVBhcmFtZXRlcnMuZ2FtZUxldmVscyxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaXRlbXMgPSBsZXZlbHMubWFwKCBsZXZlbCA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWNvbjogbmV3IEltYWdlKCBsZXZlbC5nYW1lVHlwZS5sZXZlbEltYWdlc1sgbGV2ZWwubGV2ZWxOdW1iZXIgXSApLFxyXG4gICAgICAgIHNjb3JlUHJvcGVydHk6IGxldmVsLnNjb3JlUHJvcGVydHksXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgY3JlYXRlU2NvcmVEaXNwbGF5OiAoIHNjb3JlUHJvcGVydHk6IFRQcm9wZXJ0eTxudW1iZXI+ICkgPT4gbmV3IFNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIoIHNjb3JlUHJvcGVydHkgKSxcclxuICAgICAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldmVsUHJvcGVydHkudmFsdWUgPSBsZXZlbDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBiYXNlQ29sb3I6IGxldmVsLmJhc2VDb2xvclByb3BlcnR5XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBpdGVtcywgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm51bWJlclBsYXkucmVnaXN0ZXIoICdOdW1iZXJQbGF5R2FtZUxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAnLCBOdW1iZXJQbGF5R2FtZUxldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAgKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyUGxheUdhbWVMZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNyRSxPQUFPQyxVQUFVLE1BQU0scUJBQXFCO0FBRzVDLE9BQU9DLG1CQUFtQixNQUFNLHFDQUFxQztBQUNyRSxPQUFPQyx5QkFBeUIsTUFBTSxtREFBbUQ7QUFDekYsT0FBT0MseUJBQXlCLE1BQTRDLG1EQUFtRDtBQUMvSCxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBRXBELE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQzs7QUFFakY7QUFDQSxNQUFNQyxjQUFjLEdBQUcsRUFBRTtBQUV6QixNQUFNQyx1Q0FBdUMsU0FBU0oseUJBQXlCLENBQUM7RUFFdkVLLFdBQVdBLENBQUVDLGFBQW9ELEVBQUVDLE1BQTZCLEVBQUc7SUFFeEcsTUFBTUMsT0FBeUMsR0FBRztNQUNoREMsMkJBQTJCLEVBQUU7UUFDM0JDLHdCQUF3QixFQUFFLENBQUM7UUFDM0JDLGtCQUFrQixFQUFFYixtQkFBbUIsQ0FBQ2MsbUJBQW1CO1FBQzNEQyxrQkFBa0IsRUFBRWYsbUJBQW1CLENBQUNjO01BQzFDLENBQUM7TUFFRDtNQUNBRSxnQkFBZ0IsRUFBSUMscUJBQTZDLElBQU07UUFDckVDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxxQkFBcUIsQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFBRSx3Q0FBeUMsQ0FBQztRQUNoRyxPQUFPLElBQUlyQixJQUFJLENBQUU7VUFDZnNCLFFBQVEsRUFBRSxDQUNSLElBQUl4QixJQUFJLENBQUU7WUFDUndCLFFBQVEsRUFBRSxDQUFFSCxxQkFBcUIsQ0FBRSxDQUFDLENBQUUsRUFBRUEscUJBQXFCLENBQUUsQ0FBQyxDQUFFLENBQUU7WUFDcEVJLE9BQU8sRUFBRWhCO1VBQ1gsQ0FBRSxDQUFDLEVBQ0gsSUFBSVQsSUFBSSxDQUFFO1lBQ1J3QixRQUFRLEVBQUUsQ0FBRUgscUJBQXFCLENBQUUsQ0FBQyxDQUFFLEVBQUVBLHFCQUFxQixDQUFFLENBQUMsQ0FBRSxDQUFFO1lBQ3BFSSxPQUFPLEVBQUVoQjtVQUNYLENBQUUsQ0FBQyxDQUNKO1VBQ0RnQixPQUFPLEVBQUVoQjtRQUNYLENBQUUsQ0FBQztNQUNMLENBQUM7TUFDRGlCLFVBQVUsRUFBRWxCLHlCQUF5QixDQUFDa0IsVUFBVTtNQUNoREMsTUFBTSxFQUFFcEIsTUFBTSxDQUFDcUI7SUFDakIsQ0FBQztJQUVELE1BQU1DLEtBQUssR0FBR2hCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBRUMsS0FBSyxJQUFJO01BQ2pDLE9BQU87UUFDTEMsSUFBSSxFQUFFLElBQUkvQixLQUFLLENBQUU4QixLQUFLLENBQUNFLFFBQVEsQ0FBQ0MsV0FBVyxDQUFFSCxLQUFLLENBQUNJLFdBQVcsQ0FBRyxDQUFDO1FBQ2xFQyxhQUFhLEVBQUVMLEtBQUssQ0FBQ0ssYUFBYTtRQUNsQ3RCLE9BQU8sRUFBRTtVQUNQdUIsa0JBQWtCLEVBQUlELGFBQWdDLElBQU0sSUFBSS9CLHlCQUF5QixDQUFFK0IsYUFBYyxDQUFDO1VBQzFHRSxRQUFRLEVBQUVBLENBQUEsS0FBTTtZQUNkMUIsYUFBYSxDQUFDMkIsS0FBSyxHQUFHUixLQUFLO1VBQzdCLENBQUM7VUFDRFMsU0FBUyxFQUFFVCxLQUFLLENBQUNVO1FBQ25CO01BQ0YsQ0FBQztJQUNILENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVosS0FBSyxFQUFFZixPQUFRLENBQUM7RUFDekI7RUFFZ0I0QixPQUFPQSxDQUFBLEVBQVM7SUFDOUJwQixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDb0IsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkMsVUFBVSxDQUFDd0MsUUFBUSxDQUFFLHlDQUF5QyxFQUFFakMsdUNBQXdDLENBQUM7QUFDekcsZUFBZUEsdUNBQXVDIn0=