// Copyright 2021-2023, University of Colorado Boulder

/**
 * NumberPlayGameLevel is the model for a game level which each type of game will extend.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Luisa Vargas
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import numberPlay from '../../numberPlay.js';
import Range from '../../../../dot/js/Range.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
class NumberPlayGameLevel {
  static REWARD_SCORE = 10;

  // the total number of points that have been awarded for this level

  // whether the current challenge has been solved. A challenge is considered solved when the user has correctly
  // guessed the answer
  // the range of numbers used for all challenges of this level
  // the random number generated to create a representation for
  // used to store old challenge number values. this.oldChallengeNumberOne tracks the most recent value of
  // this.challengeNumberProperty, and this.oldChallengeNumberTwo tracks the value used before that.
  // the number of times any wrong answer button in answerButtons was pressed
  /**
   * @param levelNumber
   * @param gameType
   * @param levelChallengeRange - the range of challenge numbers for a level, where 'range' is referring to a
   * mathematical range, where the min and max values are unknown, so it is just a number
   */
  constructor(levelNumber, gameType, levelChallengeRange) {
    this.levelNumber = levelNumber;
    this.gameType = gameType;
    this.challengeRange = NumberPlayGameLevel.getChallengeRange(levelNumber, levelChallengeRange);
    this.scoreProperty = new NumberProperty(0, {
      numberType: 'Integer',
      isValidValue: value => value >= 0
    });
    this.isChallengeSolvedProperty = new BooleanProperty(false);
    this.challengeNumberProperty = new NumberProperty(this.getRandomChallengeNumber(), {
      numberType: 'Integer',
      range: this.challengeRange
    });
    this.oldChallengeNumberOne = this.challengeNumberProperty.value;
    this.oldChallengeNumberTwo = this.challengeNumberProperty.value;
    this.numberOfAnswerButtonPressesProperty = new NumberProperty(0, {
      numberType: 'Integer',
      isValidValue: value => value >= 0
    });
  }
  reset() {
    this.scoreProperty.reset();
    this.isChallengeSolvedProperty.reset();
    this.numberOfAnswerButtonPressesProperty.reset();

    // the challengeNumber should not necessarily be reset to the same initial number that the screen loaded with,
    // so don't use traditional reset()
    this.challengeNumberProperty.value = this.getRandomChallengeNumber();
  }

  /**
   * @param dt - in seconds
   */
  step(dt) {
    // See subclass for implementation
  }

  /**
   * Sets up a new challenge for this level.
   */
  newChallenge() {
    this.isChallengeSolvedProperty.value = false;
    this.setRandomChallengeNumber();
    this.numberOfAnswerButtonPressesProperty.reset();
  }

  /**
   * Sets a new challenge number. Can be the value of the previous challenge number, but there cannot be three of the
   * same number in a row.
   */
  setRandomChallengeNumber() {
    assert && assert(this.challengeRange.min !== this.challengeRange.max, `challengeRange must contain more than one number: ${this.challengeRange.toString()}`);

    // shift values down to make room for a new challenge number
    this.oldChallengeNumberTwo = this.oldChallengeNumberOne;
    this.oldChallengeNumberOne = this.challengeNumberProperty.value;
    let newChallengeNumber = this.getRandomChallengeNumber();
    while (newChallengeNumber === this.oldChallengeNumberOne && newChallengeNumber === this.oldChallengeNumberTwo) {
      newChallengeNumber = this.getRandomChallengeNumber();
    }
    this.challengeNumberProperty.value = newChallengeNumber;
  }

  /**
   * Generate a random challenge number that is in the defined challenge range.
   */
  getRandomChallengeNumber() {
    return dotRandom.nextIntBetween(this.challengeRange.min, this.challengeRange.max);
  }

  /**
   * Calculates the range of the challenge numbers for the given level number and input range. This is converting
   * levelChallengeRange, a mathematical range (see parameter doc of this class), to a Range type, which includes min
   * and max values.
   *
   * Examples:
   * 1, 10 => 1, 10
   * 2, 10 => 11, 20
   * 1, 5 => 1, 5
   * 2, 5 => 6, 10
   */
  static getChallengeRange(levelNumber, levelChallengeRange) {
    const minimumChallengeNumber = (levelNumber - 1) * levelChallengeRange + 1;
    const maximumChallengeNumber = levelNumber * levelChallengeRange;
    return new Range(minimumChallengeNumber, maximumChallengeNumber);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
numberPlay.register('NumberPlayGameLevel', NumberPlayGameLevel);
export default NumberPlayGameLevel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,