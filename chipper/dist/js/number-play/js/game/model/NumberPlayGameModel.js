// Copyright 2021-2023, University of Colorado Boulder

/**
 * Model class for the 'Game' screen.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Luisa Vargas
 */

import Property from '../../../../axon/js/Property.js';
import numberPlay from '../../numberPlay.js';
import SubitizeGameLevel from './SubitizeGameLevel.js';
import CountingGameLevel from './CountingGameLevel.js';
class NumberPlayGameModel {
  // the selected game level - null means 'no selection' so that the view returns to the level-selection UI

  constructor(tandem) {
    // create the levels for each game
    this.countingLevels = [new CountingGameLevel(1), new CountingGameLevel(2)];
    this.subitizeLevels = [new SubitizeGameLevel(1), new SubitizeGameLevel(2)];
    this.levels = [...this.countingLevels, ...this.subitizeLevels];
    this.levelProperty = new Property(null, {
      validValues: [null, ...this.levels]
    });
  }
  reset() {
    this.levels.forEach(level => level.reset());
  }

  /**
   * @param dt - in seconds
   */
  step(dt) {
    this.levels.forEach(level => level.step(dt));
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
numberPlay.register('NumberPlayGameModel', NumberPlayGameModel);
export default NumberPlayGameModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIm51bWJlclBsYXkiLCJTdWJpdGl6ZUdhbWVMZXZlbCIsIkNvdW50aW5nR2FtZUxldmVsIiwiTnVtYmVyUGxheUdhbWVNb2RlbCIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiY291bnRpbmdMZXZlbHMiLCJzdWJpdGl6ZUxldmVscyIsImxldmVscyIsImxldmVsUHJvcGVydHkiLCJ2YWxpZFZhbHVlcyIsInJlc2V0IiwiZm9yRWFjaCIsImxldmVsIiwic3RlcCIsImR0IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTnVtYmVyUGxheUdhbWVNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBjbGFzcyBmb3IgdGhlICdHYW1lJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBMdWlzYSBWYXJnYXNcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBudW1iZXJQbGF5IGZyb20gJy4uLy4uL251bWJlclBsYXkuanMnO1xyXG5pbXBvcnQgU3ViaXRpemVHYW1lTGV2ZWwgZnJvbSAnLi9TdWJpdGl6ZUdhbWVMZXZlbC5qcyc7XHJcbmltcG9ydCBDb3VudGluZ0dhbWVMZXZlbCBmcm9tICcuL0NvdW50aW5nR2FtZUxldmVsLmpzJztcclxuaW1wb3J0IE51bWJlclBsYXlHYW1lTGV2ZWwgZnJvbSAnLi9OdW1iZXJQbGF5R2FtZUxldmVsLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUTW9kZWwgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvVE1vZGVsLmpzJztcclxuXHJcbmNsYXNzIE51bWJlclBsYXlHYW1lTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgc3ViaXRpemVMZXZlbHM6IFN1Yml0aXplR2FtZUxldmVsW107XHJcbiAgcHVibGljIHJlYWRvbmx5IGNvdW50aW5nTGV2ZWxzOiBDb3VudGluZ0dhbWVMZXZlbFtdO1xyXG4gIHB1YmxpYyByZWFkb25seSBsZXZlbHM6IEFycmF5PE51bWJlclBsYXlHYW1lTGV2ZWw+O1xyXG5cclxuICAvLyB0aGUgc2VsZWN0ZWQgZ2FtZSBsZXZlbCAtIG51bGwgbWVhbnMgJ25vIHNlbGVjdGlvbicgc28gdGhhdCB0aGUgdmlldyByZXR1cm5zIHRvIHRoZSBsZXZlbC1zZWxlY3Rpb24gVUlcclxuICBwdWJsaWMgcmVhZG9ubHkgbGV2ZWxQcm9wZXJ0eTogVFByb3BlcnR5PE51bWJlclBsYXlHYW1lTGV2ZWwgfCBudWxsPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGhlIGxldmVscyBmb3IgZWFjaCBnYW1lXHJcbiAgICB0aGlzLmNvdW50aW5nTGV2ZWxzID0gWyBuZXcgQ291bnRpbmdHYW1lTGV2ZWwoIDEgKSwgbmV3IENvdW50aW5nR2FtZUxldmVsKCAyICkgXTtcclxuICAgIHRoaXMuc3ViaXRpemVMZXZlbHMgPSBbIG5ldyBTdWJpdGl6ZUdhbWVMZXZlbCggMSApLCBuZXcgU3ViaXRpemVHYW1lTGV2ZWwoIDIgKSBdO1xyXG4gICAgdGhpcy5sZXZlbHMgPSBbIC4uLnRoaXMuY291bnRpbmdMZXZlbHMsIC4uLnRoaXMuc3ViaXRpemVMZXZlbHMgXTtcclxuXHJcbiAgICB0aGlzLmxldmVsUHJvcGVydHkgPSBuZXcgUHJvcGVydHk8TnVtYmVyUGxheUdhbWVMZXZlbCB8IG51bGw+KCBudWxsLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBbIG51bGwsIC4uLnRoaXMubGV2ZWxzIF1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMubGV2ZWxzLmZvckVhY2goIGxldmVsID0+IGxldmVsLnJlc2V0KCkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkdCAtIGluIHNlY29uZHNcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcCggZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIHRoaXMubGV2ZWxzLmZvckVhY2goIGxldmVsID0+IGxldmVsLnN0ZXAoIGR0ICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgfVxyXG59XHJcblxyXG5udW1iZXJQbGF5LnJlZ2lzdGVyKCAnTnVtYmVyUGxheUdhbWVNb2RlbCcsIE51bWJlclBsYXlHYW1lTW9kZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVyUGxheUdhbWVNb2RlbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBRXRELE9BQU9DLFVBQVUsTUFBTSxxQkFBcUI7QUFDNUMsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBQ3RELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUt0RCxNQUFNQyxtQkFBbUIsQ0FBbUI7RUFNMUM7O0VBR09DLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUVuQztJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQUUsSUFBSUosaUJBQWlCLENBQUUsQ0FBRSxDQUFDLEVBQUUsSUFBSUEsaUJBQWlCLENBQUUsQ0FBRSxDQUFDLENBQUU7SUFDaEYsSUFBSSxDQUFDSyxjQUFjLEdBQUcsQ0FBRSxJQUFJTixpQkFBaUIsQ0FBRSxDQUFFLENBQUMsRUFBRSxJQUFJQSxpQkFBaUIsQ0FBRSxDQUFFLENBQUMsQ0FBRTtJQUNoRixJQUFJLENBQUNPLE1BQU0sR0FBRyxDQUFFLEdBQUcsSUFBSSxDQUFDRixjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBRTtJQUVoRSxJQUFJLENBQUNFLGFBQWEsR0FBRyxJQUFJVixRQUFRLENBQThCLElBQUksRUFBRTtNQUNuRVcsV0FBVyxFQUFFLENBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDRixNQUFNO0lBQ3JDLENBQUUsQ0FBQztFQUNMO0VBRU9HLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFFQyxLQUFLLElBQUlBLEtBQUssQ0FBQ0YsS0FBSyxDQUFDLENBQUUsQ0FBQztFQUMvQzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0csSUFBSUEsQ0FBRUMsRUFBVSxFQUFTO0lBQzlCLElBQUksQ0FBQ1AsTUFBTSxDQUFDSSxPQUFPLENBQUVDLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxJQUFJLENBQUVDLEVBQUcsQ0FBRSxDQUFDO0VBQ2xEO0VBRU9DLE9BQU9BLENBQUEsRUFBUztJQUNyQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0FBQ0Y7QUFFQWpCLFVBQVUsQ0FBQ2tCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWYsbUJBQW9CLENBQUM7QUFDakUsZUFBZUEsbUJBQW1CIn0=