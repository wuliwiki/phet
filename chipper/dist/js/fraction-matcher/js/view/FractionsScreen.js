// Copyright 2013-2022, University of Colorado Boulder

/**
 * Main entry point for the 'Fraction Matcher sim.
 *
 * @author Anton Ulyanov (Mlearner)
 * @author Andrew Zelenkov (Mlearner)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import MatchingGameModel from '../../../fractions-common/js/matching/model/MatchingGameModel.js';
import MatchingGameScreenView from '../../../fractions-common/js/matching/view/MatchingGameScreenView.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import merge from '../../../phet-core/js/merge.js';
import fractionMatcher from '../fractionMatcher.js';
import FractionMatcherStrings from '../FractionMatcherStrings.js';
class FractionsScreen extends Screen {
  /**
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(tandem, options) {
    options = merge({
      name: FractionMatcherStrings.fractionsTitleStringProperty,
      homeScreenIcon: new ScreenIcon(MatchingGameScreenView.createIntroHomeIcon(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(MatchingGameScreenView.createIntroNavbarIcon(), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    }, options);
    super(() => new MatchingGameModel(false), model => new MatchingGameScreenView(model), options);
  }
}
fractionMatcher.register('FractionsScreen', FractionsScreen);
export default FractionsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRjaGluZ0dhbWVNb2RlbCIsIk1hdGNoaW5nR2FtZVNjcmVlblZpZXciLCJTY3JlZW4iLCJTY3JlZW5JY29uIiwibWVyZ2UiLCJmcmFjdGlvbk1hdGNoZXIiLCJGcmFjdGlvbk1hdGNoZXJTdHJpbmdzIiwiRnJhY3Rpb25zU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsImZyYWN0aW9uc1RpdGxlU3RyaW5nUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsImNyZWF0ZUludHJvSG9tZUljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsImNyZWF0ZUludHJvTmF2YmFySWNvbiIsIm1vZGVsIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGcmFjdGlvbnNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlICdGcmFjdGlvbiBNYXRjaGVyIHNpbS5cclxuICpcclxuICogQGF1dGhvciBBbnRvbiBVbHlhbm92IChNbGVhcm5lcilcclxuICogQGF1dGhvciBBbmRyZXcgWmVsZW5rb3YgKE1sZWFybmVyKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXRjaGluZ0dhbWVNb2RlbCBmcm9tICcuLi8uLi8uLi9mcmFjdGlvbnMtY29tbW9uL2pzL21hdGNoaW5nL21vZGVsL01hdGNoaW5nR2FtZU1vZGVsLmpzJztcclxuaW1wb3J0IE1hdGNoaW5nR2FtZVNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vZnJhY3Rpb25zLWNvbW1vbi9qcy9tYXRjaGluZy92aWV3L01hdGNoaW5nR2FtZVNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IGZyYWN0aW9uTWF0Y2hlciBmcm9tICcuLi9mcmFjdGlvbk1hdGNoZXIuanMnO1xyXG5pbXBvcnQgRnJhY3Rpb25NYXRjaGVyU3RyaW5ncyBmcm9tICcuLi9GcmFjdGlvbk1hdGNoZXJTdHJpbmdzLmpzJztcclxuXHJcbmNsYXNzIEZyYWN0aW9uc1NjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtLCBvcHRpb25zICkge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7XHJcbiAgICAgIG5hbWU6IEZyYWN0aW9uTWF0Y2hlclN0cmluZ3MuZnJhY3Rpb25zVGl0bGVTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBNYXRjaGluZ0dhbWVTY3JlZW5WaWV3LmNyZWF0ZUludHJvSG9tZUljb24oKSwge1xyXG4gICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgfSApLFxyXG4gICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFNjcmVlbkljb24oIE1hdGNoaW5nR2FtZVNjcmVlblZpZXcuY3JlYXRlSW50cm9OYXZiYXJJY29uKCksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW1cclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggKCkgPT4gbmV3IE1hdGNoaW5nR2FtZU1vZGVsKCBmYWxzZSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgTWF0Y2hpbmdHYW1lU2NyZWVuVmlldyggbW9kZWwgKSxcclxuICAgICAgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuZnJhY3Rpb25NYXRjaGVyLnJlZ2lzdGVyKCAnRnJhY3Rpb25zU2NyZWVuJywgRnJhY3Rpb25zU2NyZWVuICk7XHJcbmV4cG9ydCBkZWZhdWx0IEZyYWN0aW9uc1NjcmVlbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGlCQUFpQixNQUFNLGtFQUFrRTtBQUNoRyxPQUFPQyxzQkFBc0IsTUFBTSxzRUFBc0U7QUFDekcsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxzQkFBc0IsTUFBTSw4QkFBOEI7QUFFakUsTUFBTUMsZUFBZSxTQUFTTCxNQUFNLENBQUM7RUFDbkM7QUFDRjtBQUNBO0FBQ0E7RUFDRU0sV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFDN0JBLE9BQU8sR0FBR04sS0FBSyxDQUFFO01BQ2ZPLElBQUksRUFBRUwsc0JBQXNCLENBQUNNLDRCQUE0QjtNQUN6REMsY0FBYyxFQUFFLElBQUlWLFVBQVUsQ0FBRUYsc0JBQXNCLENBQUNhLG1CQUFtQixDQUFDLENBQUMsRUFBRTtRQUM1RUMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLGlCQUFpQixFQUFFLElBQUlkLFVBQVUsQ0FBRUYsc0JBQXNCLENBQUNpQixxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7UUFDakZILHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIUCxNQUFNLEVBQUVBO0lBQ1YsQ0FBQyxFQUFFQyxPQUFRLENBQUM7SUFFWixLQUFLLENBQUUsTUFBTSxJQUFJVixpQkFBaUIsQ0FBRSxLQUFNLENBQUMsRUFDekNtQixLQUFLLElBQUksSUFBSWxCLHNCQUFzQixDQUFFa0IsS0FBTSxDQUFDLEVBQzVDVCxPQUFRLENBQUM7RUFDYjtBQUNGO0FBRUFMLGVBQWUsQ0FBQ2UsUUFBUSxDQUFFLGlCQUFpQixFQUFFYixlQUFnQixDQUFDO0FBQzlELGVBQWVBLGVBQWUifQ==