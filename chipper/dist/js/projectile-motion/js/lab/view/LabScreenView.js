// Copyright 2016-2023, University of Colorado Boulder

/**
 * ScreenView for the 'Lab' screen
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node } from '../../../../scenery/js/imports.js';
import ProjectileMotionScreenView from '../../common/view/ProjectileMotionScreenView.js';
import ProjectileMotionViewProperties from '../../common/view/ProjectileMotionViewProperties.js';
import projectileMotion from '../../projectileMotion.js';
import InitialValuesPanel from './InitialValuesPanel.js';
import KeypadLayer from './KeypadLayer.js';
import LabProjectileControlPanel from './LabProjectileControlPanel.js';

// constants
const X_MARGIN = 10;
class LabScreenView extends ProjectileMotionScreenView {
  /**
   * @param {LabModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    options = merge({
      cannonNodeOptions: {
        preciseCannonDelta: true
      }
    }, options);

    // contains Properties about vector visibility, used in super class
    const visibilityProperties = new ProjectileMotionViewProperties();

    // acts as listParent for the projectile dropdown box
    const comboBoxListParent = new Node();
    const keypadLayer = new KeypadLayer({
      tandem: options.tandem.createTandem('keypadLayer'),
      phetioDocumentation: 'The container for the keypad, responsible displaying and laying out the keypad'
    });
    const labProjectilePanel = new LabProjectileControlPanel(comboBoxListParent, keypadLayer, model, {
      tandem: options.tandem.createTandem('projectileControlPanel')
    });
    super(model, new InitialValuesPanel(model.cannonHeightProperty, model.cannonAngleProperty, model.initialSpeedProperty, {
      tandem: options.tandem.createTandem('initialValuesPanel')
    }), labProjectilePanel, visibilityProperties, options);

    // insert dropdown right on top of the rightside panels
    this.insertChild(this.indexOfChild(this.bottomRightPanel) + 1, comboBoxListParent);

    // add the keypad layer on top of everything
    this.addChild(keypadLayer);

    // @private, for layout
    this.labProjectilePanel = labProjectilePanel;
    this.keypadLayer = keypadLayer;
  }

  /**
   * Layout according to screenview and layout the combo box
   * @public (joist internal)
   * @override
   *
   * @param {Bounds2} viewBounds
   */
  layout(viewBounds) {
    this.labProjectilePanel.hideComboBoxList();
    super.layout(viewBounds);
    this.keypadLayer.positionKeypad(this.setKeypadPosition.bind(this));
  }

  /**
   * Lays out keypad
   * @private
   *
   * @param {KeypadPanel} keypad
   */
  setKeypadPosition(keypadPanel) {
    keypadPanel.right = this.topRightPanel.left - X_MARGIN;
    keypadPanel.top = this.bottomRightPanel.top;
  }
}
projectileMotion.register('LabScreenView', LabScreenView);
export default LabScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJQcm9qZWN0aWxlTW90aW9uU2NyZWVuVmlldyIsIlByb2plY3RpbGVNb3Rpb25WaWV3UHJvcGVydGllcyIsInByb2plY3RpbGVNb3Rpb24iLCJJbml0aWFsVmFsdWVzUGFuZWwiLCJLZXlwYWRMYXllciIsIkxhYlByb2plY3RpbGVDb250cm9sUGFuZWwiLCJYX01BUkdJTiIsIkxhYlNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsImNhbm5vbk5vZGVPcHRpb25zIiwicHJlY2lzZUNhbm5vbkRlbHRhIiwidmlzaWJpbGl0eVByb3BlcnRpZXMiLCJjb21ib0JveExpc3RQYXJlbnQiLCJrZXlwYWRMYXllciIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJsYWJQcm9qZWN0aWxlUGFuZWwiLCJjYW5ub25IZWlnaHRQcm9wZXJ0eSIsImNhbm5vbkFuZ2xlUHJvcGVydHkiLCJpbml0aWFsU3BlZWRQcm9wZXJ0eSIsImluc2VydENoaWxkIiwiaW5kZXhPZkNoaWxkIiwiYm90dG9tUmlnaHRQYW5lbCIsImFkZENoaWxkIiwibGF5b3V0Iiwidmlld0JvdW5kcyIsImhpZGVDb21ib0JveExpc3QiLCJwb3NpdGlvbktleXBhZCIsInNldEtleXBhZFBvc2l0aW9uIiwiYmluZCIsImtleXBhZFBhbmVsIiwicmlnaHQiLCJ0b3BSaWdodFBhbmVsIiwibGVmdCIsInRvcCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTY3JlZW5WaWV3IGZvciB0aGUgJ0xhYicgc2NyZWVuXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQcm9qZWN0aWxlTW90aW9uU2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Qcm9qZWN0aWxlTW90aW9uU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBQcm9qZWN0aWxlTW90aW9uVmlld1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUHJvamVjdGlsZU1vdGlvblZpZXdQcm9wZXJ0aWVzLmpzJztcclxuaW1wb3J0IHByb2plY3RpbGVNb3Rpb24gZnJvbSAnLi4vLi4vcHJvamVjdGlsZU1vdGlvbi5qcyc7XHJcbmltcG9ydCBJbml0aWFsVmFsdWVzUGFuZWwgZnJvbSAnLi9Jbml0aWFsVmFsdWVzUGFuZWwuanMnO1xyXG5pbXBvcnQgS2V5cGFkTGF5ZXIgZnJvbSAnLi9LZXlwYWRMYXllci5qcyc7XHJcbmltcG9ydCBMYWJQcm9qZWN0aWxlQ29udHJvbFBhbmVsIGZyb20gJy4vTGFiUHJvamVjdGlsZUNvbnRyb2xQYW5lbC5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgWF9NQVJHSU4gPSAxMDtcclxuXHJcbmNsYXNzIExhYlNjcmVlblZpZXcgZXh0ZW5kcyBQcm9qZWN0aWxlTW90aW9uU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TGFiTW9kZWx9IG1vZGVsXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBtb2RlbCwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHsgY2Fubm9uTm9kZU9wdGlvbnM6IHsgcHJlY2lzZUNhbm5vbkRlbHRhOiB0cnVlIH0gfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGNvbnRhaW5zIFByb3BlcnRpZXMgYWJvdXQgdmVjdG9yIHZpc2liaWxpdHksIHVzZWQgaW4gc3VwZXIgY2xhc3NcclxuICAgIGNvbnN0IHZpc2liaWxpdHlQcm9wZXJ0aWVzID0gbmV3IFByb2plY3RpbGVNb3Rpb25WaWV3UHJvcGVydGllcygpO1xyXG5cclxuICAgIC8vIGFjdHMgYXMgbGlzdFBhcmVudCBmb3IgdGhlIHByb2plY3RpbGUgZHJvcGRvd24gYm94XHJcbiAgICBjb25zdCBjb21ib0JveExpc3RQYXJlbnQgPSBuZXcgTm9kZSgpO1xyXG4gICAgY29uc3Qga2V5cGFkTGF5ZXIgPSBuZXcgS2V5cGFkTGF5ZXIoIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdrZXlwYWRMYXllcicgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSBjb250YWluZXIgZm9yIHRoZSBrZXlwYWQsIHJlc3BvbnNpYmxlIGRpc3BsYXlpbmcgYW5kIGxheWluZyBvdXQgdGhlIGtleXBhZCdcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGxhYlByb2plY3RpbGVQYW5lbCA9IG5ldyBMYWJQcm9qZWN0aWxlQ29udHJvbFBhbmVsKFxyXG4gICAgICBjb21ib0JveExpc3RQYXJlbnQsXHJcbiAgICAgIGtleXBhZExheWVyLFxyXG4gICAgICBtb2RlbCxcclxuICAgICAgeyB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2plY3RpbGVDb250cm9sUGFuZWwnICkgfVxyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgbW9kZWwsXHJcbiAgICAgIG5ldyBJbml0aWFsVmFsdWVzUGFuZWwoXHJcbiAgICAgICAgbW9kZWwuY2Fubm9uSGVpZ2h0UHJvcGVydHksXHJcbiAgICAgICAgbW9kZWwuY2Fubm9uQW5nbGVQcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5pbml0aWFsU3BlZWRQcm9wZXJ0eSxcclxuICAgICAgICB7IHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaW5pdGlhbFZhbHVlc1BhbmVsJyApIH1cclxuICAgICAgKSxcclxuICAgICAgbGFiUHJvamVjdGlsZVBhbmVsLFxyXG4gICAgICB2aXNpYmlsaXR5UHJvcGVydGllcyxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyBpbnNlcnQgZHJvcGRvd24gcmlnaHQgb24gdG9wIG9mIHRoZSByaWdodHNpZGUgcGFuZWxzXHJcbiAgICB0aGlzLmluc2VydENoaWxkKCB0aGlzLmluZGV4T2ZDaGlsZCggdGhpcy5ib3R0b21SaWdodFBhbmVsICkgKyAxLCBjb21ib0JveExpc3RQYXJlbnQgKTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIGtleXBhZCBsYXllciBvbiB0b3Agb2YgZXZlcnl0aGluZ1xyXG4gICAgdGhpcy5hZGRDaGlsZCgga2V5cGFkTGF5ZXIgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSwgZm9yIGxheW91dFxyXG4gICAgdGhpcy5sYWJQcm9qZWN0aWxlUGFuZWwgPSBsYWJQcm9qZWN0aWxlUGFuZWw7XHJcbiAgICB0aGlzLmtleXBhZExheWVyID0ga2V5cGFkTGF5ZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMYXlvdXQgYWNjb3JkaW5nIHRvIHNjcmVlbnZpZXcgYW5kIGxheW91dCB0aGUgY29tYm8gYm94XHJcbiAgICogQHB1YmxpYyAoam9pc3QgaW50ZXJuYWwpXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IHZpZXdCb3VuZHNcclxuICAgKi9cclxuICBsYXlvdXQoIHZpZXdCb3VuZHMgKSB7XHJcbiAgICB0aGlzLmxhYlByb2plY3RpbGVQYW5lbC5oaWRlQ29tYm9Cb3hMaXN0KCk7XHJcbiAgICBzdXBlci5sYXlvdXQoIHZpZXdCb3VuZHMgKTtcclxuICAgIHRoaXMua2V5cGFkTGF5ZXIucG9zaXRpb25LZXlwYWQoIHRoaXMuc2V0S2V5cGFkUG9zaXRpb24uYmluZCggdGhpcyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMYXlzIG91dCBrZXlwYWRcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtLZXlwYWRQYW5lbH0ga2V5cGFkXHJcbiAgICovXHJcbiAgc2V0S2V5cGFkUG9zaXRpb24oIGtleXBhZFBhbmVsICkge1xyXG4gICAga2V5cGFkUGFuZWwucmlnaHQgPSB0aGlzLnRvcFJpZ2h0UGFuZWwubGVmdCAtIFhfTUFSR0lOO1xyXG4gICAga2V5cGFkUGFuZWwudG9wID0gdGhpcy5ib3R0b21SaWdodFBhbmVsLnRvcDtcclxuICB9XHJcbn1cclxuXHJcbnByb2plY3RpbGVNb3Rpb24ucmVnaXN0ZXIoICdMYWJTY3JlZW5WaWV3JywgTGFiU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBMYWJTY3JlZW5WaWV3O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQywwQkFBMEIsTUFBTSxpREFBaUQ7QUFDeEYsT0FBT0MsOEJBQThCLE1BQU0scURBQXFEO0FBQ2hHLE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyxrQkFBa0IsTUFBTSx5QkFBeUI7QUFDeEQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyx5QkFBeUIsTUFBTSxnQ0FBZ0M7O0FBRXRFO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLEVBQUU7QUFFbkIsTUFBTUMsYUFBYSxTQUFTUCwwQkFBMEIsQ0FBQztFQUVyRDtBQUNGO0FBQ0E7QUFDQTtFQUNFUSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUU1QkEsT0FBTyxHQUFHWixLQUFLLENBQUU7TUFBRWEsaUJBQWlCLEVBQUU7UUFBRUMsa0JBQWtCLEVBQUU7TUFBSztJQUFFLENBQUMsRUFBRUYsT0FBUSxDQUFDOztJQUUvRTtJQUNBLE1BQU1HLG9CQUFvQixHQUFHLElBQUlaLDhCQUE4QixDQUFDLENBQUM7O0lBRWpFO0lBQ0EsTUFBTWEsa0JBQWtCLEdBQUcsSUFBSWYsSUFBSSxDQUFDLENBQUM7SUFDckMsTUFBTWdCLFdBQVcsR0FBRyxJQUFJWCxXQUFXLENBQUU7TUFDbkNZLE1BQU0sRUFBRU4sT0FBTyxDQUFDTSxNQUFNLENBQUNDLFlBQVksQ0FBRSxhQUFjLENBQUM7TUFDcERDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUNILE1BQU1DLGtCQUFrQixHQUFHLElBQUlkLHlCQUF5QixDQUN0RFMsa0JBQWtCLEVBQ2xCQyxXQUFXLEVBQ1hOLEtBQUssRUFDTDtNQUFFTyxNQUFNLEVBQUVOLE9BQU8sQ0FBQ00sTUFBTSxDQUFDQyxZQUFZLENBQUUsd0JBQXlCO0lBQUUsQ0FDcEUsQ0FBQztJQUVELEtBQUssQ0FDSFIsS0FBSyxFQUNMLElBQUlOLGtCQUFrQixDQUNwQk0sS0FBSyxDQUFDVyxvQkFBb0IsRUFDMUJYLEtBQUssQ0FBQ1ksbUJBQW1CLEVBQ3pCWixLQUFLLENBQUNhLG9CQUFvQixFQUMxQjtNQUFFTixNQUFNLEVBQUVOLE9BQU8sQ0FBQ00sTUFBTSxDQUFDQyxZQUFZLENBQUUsb0JBQXFCO0lBQUUsQ0FDaEUsQ0FBQyxFQUNERSxrQkFBa0IsRUFDbEJOLG9CQUFvQixFQUNwQkgsT0FDRixDQUFDOztJQUVEO0lBQ0EsSUFBSSxDQUFDYSxXQUFXLENBQUUsSUFBSSxDQUFDQyxZQUFZLENBQUUsSUFBSSxDQUFDQyxnQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRVgsa0JBQW1CLENBQUM7O0lBRXRGO0lBQ0EsSUFBSSxDQUFDWSxRQUFRLENBQUVYLFdBQVksQ0FBQzs7SUFFNUI7SUFDQSxJQUFJLENBQUNJLGtCQUFrQixHQUFHQSxrQkFBa0I7SUFDNUMsSUFBSSxDQUFDSixXQUFXLEdBQUdBLFdBQVc7RUFDaEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRVksTUFBTUEsQ0FBRUMsVUFBVSxFQUFHO0lBQ25CLElBQUksQ0FBQ1Qsa0JBQWtCLENBQUNVLGdCQUFnQixDQUFDLENBQUM7SUFDMUMsS0FBSyxDQUFDRixNQUFNLENBQUVDLFVBQVcsQ0FBQztJQUMxQixJQUFJLENBQUNiLFdBQVcsQ0FBQ2UsY0FBYyxDQUFFLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUUsQ0FBQztFQUN4RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUQsaUJBQWlCQSxDQUFFRSxXQUFXLEVBQUc7SUFDL0JBLFdBQVcsQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxJQUFJLEdBQUc5QixRQUFRO0lBQ3REMkIsV0FBVyxDQUFDSSxHQUFHLEdBQUcsSUFBSSxDQUFDWixnQkFBZ0IsQ0FBQ1ksR0FBRztFQUM3QztBQUNGO0FBRUFuQyxnQkFBZ0IsQ0FBQ29DLFFBQVEsQ0FBRSxlQUFlLEVBQUUvQixhQUFjLENBQUM7QUFDM0QsZUFBZUEsYUFBYSJ9