// Copyright 2016-2022, University of Colorado Boulder

/**
 * Control panel for choosing which vectors are visible.
 *
 * @author Andrea Lin(PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { HBox, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Panel from '../../../../sun/js/Panel.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ProjectileMotionConstants from '../../common/ProjectileMotionConstants.js';
import projectileMotion from '../../projectileMotion.js';
import ProjectileMotionStrings from '../../ProjectileMotionStrings.js';
const accelerationVectorsString = ProjectileMotionStrings.accelerationVectors;
const componentsString = ProjectileMotionStrings.components;
const totalString = ProjectileMotionStrings.total;
const velocityVectorsString = ProjectileMotionStrings.velocityVectors;

// constants
const TITLE_OPTIONS = ProjectileMotionConstants.PANEL_TITLE_OPTIONS;
const LABEL_OPTIONS = ProjectileMotionConstants.PANEL_LABEL_OPTIONS;
const VELOCITY_VECTOR_ICON = ProjectileMotionConstants.VELOCITY_VECTOR_ICON;
const ACCELERATION_VECTOR_ICON = ProjectileMotionConstants.ACCELERATION_VECTOR_ICON;
class IntroVectorsControlPanel extends Panel {
  /**
   * @param {ProjectileMotionViewProperties} viewProperties - Properties that determine which vectors are shown
   * @param {Object} [options]
   */
  constructor(viewProperties, options) {
    // The first object is a placeholder so none of the others get mutated
    // The second object is the default, in the constants files
    // The third object is options specific to this panel, which overrides the defaults
    // The fourth object is options given at time of construction, which overrides all the others
    options = merge({}, ProjectileMotionConstants.RIGHTSIDE_PANEL_OPTIONS, {
      align: 'left',
      tandem: Tandem.REQUIRED
    }, options);
    const velocityVectorsTandem = options.tandem.createTandem('velocityVectors');
    const accelerationVectorsTandem = options.tandem.createTandem('accelerationVectors');
    const titleOptions = merge({}, TITLE_OPTIONS, {
      maxWidth: options.minWidth - 3 * options.xMargin - VELOCITY_VECTOR_ICON.width
    });
    const velocityVectorsTitle = new Text(velocityVectorsString, titleOptions);
    const velocityTitleBox = new HBox({
      spacing: options.xMargin,
      children: [velocityVectorsTitle, new Node({
        children: [VELOCITY_VECTOR_ICON]
      })],
      tandem: velocityVectorsTandem.createTandem('titleNode')
    });
    const checkboxOptions = {
      maxWidth: titleOptions.maxWidth,
      boxWidth: 18
    };
    const totalVelocityLabel = new Text(totalString, LABEL_OPTIONS);
    const totalVelocityCheckbox = new Checkbox(viewProperties.totalVelocityVectorOnProperty, totalVelocityLabel, merge({
      tandem: velocityVectorsTandem.createTandem('totalCheckbox')
    }, checkboxOptions));
    const componentsVelocityLabel = new Text(componentsString, LABEL_OPTIONS);
    const componentsVelocityCheckbox = new Checkbox(viewProperties.componentsVelocityVectorsOnProperty, componentsVelocityLabel, merge({
      tandem: velocityVectorsTandem.createTandem('componentsCheckbox')
    }, checkboxOptions));
    const accelerationVectorsTitle = new Text(accelerationVectorsString, titleOptions);
    const accelerationTitleBox = new HBox({
      spacing: options.xMargin,
      children: [accelerationVectorsTitle, new Node({
        children: [ACCELERATION_VECTOR_ICON]
      })],
      tandem: accelerationVectorsTandem.createTandem('titleNode')
    });
    const totalAccelerationLabel = new Text(totalString, LABEL_OPTIONS);
    const totalAccelerationCheckbox = new Checkbox(viewProperties.totalAccelerationVectorOnProperty, totalAccelerationLabel, merge({
      tandem: accelerationVectorsTandem.createTandem('totalCheckbox')
    }, checkboxOptions));
    const componentsAccelerationLabel = new Text(componentsString, LABEL_OPTIONS);
    const componentsAccelerationCheckbox = new Checkbox(viewProperties.componentsAccelerationVectorsOnProperty, componentsAccelerationLabel, merge({
      tandem: accelerationVectorsTandem.createTandem('componentsCheckbox')
    }, checkboxOptions));

    // The contents of the control panel
    const content = new VBox({
      align: 'left',
      spacing: options.controlsVerticalSpace,
      children: [new VBox({
        spacing: options.controlsVerticalSpace,
        align: 'left',
        tandem: velocityVectorsTandem,
        children: [velocityTitleBox, totalVelocityCheckbox, componentsVelocityCheckbox]
      }), new VBox({
        align: 'left',
        spacing: options.controlsVerticalSpace,
        tandem: accelerationVectorsTandem,
        children: [accelerationTitleBox, totalAccelerationCheckbox, componentsAccelerationCheckbox]
      })]
    });
    super(content, options);
  }
}
projectileMotion.register('IntroVectorsControlPanel', IntroVectorsControlPanel);
export default IntroVectorsControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkhCb3giLCJOb2RlIiwiVGV4dCIsIlZCb3giLCJDaGVja2JveCIsIlBhbmVsIiwiVGFuZGVtIiwiUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyIsInByb2plY3RpbGVNb3Rpb24iLCJQcm9qZWN0aWxlTW90aW9uU3RyaW5ncyIsImFjY2VsZXJhdGlvblZlY3RvcnNTdHJpbmciLCJhY2NlbGVyYXRpb25WZWN0b3JzIiwiY29tcG9uZW50c1N0cmluZyIsImNvbXBvbmVudHMiLCJ0b3RhbFN0cmluZyIsInRvdGFsIiwidmVsb2NpdHlWZWN0b3JzU3RyaW5nIiwidmVsb2NpdHlWZWN0b3JzIiwiVElUTEVfT1BUSU9OUyIsIlBBTkVMX1RJVExFX09QVElPTlMiLCJMQUJFTF9PUFRJT05TIiwiUEFORUxfTEFCRUxfT1BUSU9OUyIsIlZFTE9DSVRZX1ZFQ1RPUl9JQ09OIiwiQUNDRUxFUkFUSU9OX1ZFQ1RPUl9JQ09OIiwiSW50cm9WZWN0b3JzQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJ2aWV3UHJvcGVydGllcyIsIm9wdGlvbnMiLCJSSUdIVFNJREVfUEFORUxfT1BUSU9OUyIsImFsaWduIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ2ZWxvY2l0eVZlY3RvcnNUYW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJhY2NlbGVyYXRpb25WZWN0b3JzVGFuZGVtIiwidGl0bGVPcHRpb25zIiwibWF4V2lkdGgiLCJtaW5XaWR0aCIsInhNYXJnaW4iLCJ3aWR0aCIsInZlbG9jaXR5VmVjdG9yc1RpdGxlIiwidmVsb2NpdHlUaXRsZUJveCIsInNwYWNpbmciLCJjaGlsZHJlbiIsImNoZWNrYm94T3B0aW9ucyIsImJveFdpZHRoIiwidG90YWxWZWxvY2l0eUxhYmVsIiwidG90YWxWZWxvY2l0eUNoZWNrYm94IiwidG90YWxWZWxvY2l0eVZlY3Rvck9uUHJvcGVydHkiLCJjb21wb25lbnRzVmVsb2NpdHlMYWJlbCIsImNvbXBvbmVudHNWZWxvY2l0eUNoZWNrYm94IiwiY29tcG9uZW50c1ZlbG9jaXR5VmVjdG9yc09uUHJvcGVydHkiLCJhY2NlbGVyYXRpb25WZWN0b3JzVGl0bGUiLCJhY2NlbGVyYXRpb25UaXRsZUJveCIsInRvdGFsQWNjZWxlcmF0aW9uTGFiZWwiLCJ0b3RhbEFjY2VsZXJhdGlvbkNoZWNrYm94IiwidG90YWxBY2NlbGVyYXRpb25WZWN0b3JPblByb3BlcnR5IiwiY29tcG9uZW50c0FjY2VsZXJhdGlvbkxhYmVsIiwiY29tcG9uZW50c0FjY2VsZXJhdGlvbkNoZWNrYm94IiwiY29tcG9uZW50c0FjY2VsZXJhdGlvblZlY3RvcnNPblByb3BlcnR5IiwiY29udGVudCIsImNvbnRyb2xzVmVydGljYWxTcGFjZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSW50cm9WZWN0b3JzQ29udHJvbFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIGNob29zaW5nIHdoaWNoIHZlY3RvcnMgYXJlIHZpc2libGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbihQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyBmcm9tICcuLi8uLi9jb21tb24vUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uLy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblN0cmluZ3MgZnJvbSAnLi4vLi4vUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgYWNjZWxlcmF0aW9uVmVjdG9yc1N0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLmFjY2VsZXJhdGlvblZlY3RvcnM7XHJcbmNvbnN0IGNvbXBvbmVudHNTdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5jb21wb25lbnRzO1xyXG5jb25zdCB0b3RhbFN0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLnRvdGFsO1xyXG5jb25zdCB2ZWxvY2l0eVZlY3RvcnNTdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy52ZWxvY2l0eVZlY3RvcnM7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgVElUTEVfT1BUSU9OUyA9IFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUEFORUxfVElUTEVfT1BUSU9OUztcclxuY29uc3QgTEFCRUxfT1BUSU9OUyA9IFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUEFORUxfTEFCRUxfT1BUSU9OUztcclxuY29uc3QgVkVMT0NJVFlfVkVDVE9SX0lDT04gPSBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLlZFTE9DSVRZX1ZFQ1RPUl9JQ09OO1xyXG5jb25zdCBBQ0NFTEVSQVRJT05fVkVDVE9SX0lDT04gPSBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLkFDQ0VMRVJBVElPTl9WRUNUT1JfSUNPTjtcclxuXHJcbmNsYXNzIEludHJvVmVjdG9yc0NvbnRyb2xQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9qZWN0aWxlTW90aW9uVmlld1Byb3BlcnRpZXN9IHZpZXdQcm9wZXJ0aWVzIC0gUHJvcGVydGllcyB0aGF0IGRldGVybWluZSB3aGljaCB2ZWN0b3JzIGFyZSBzaG93blxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggdmlld1Byb3BlcnRpZXMsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gVGhlIGZpcnN0IG9iamVjdCBpcyBhIHBsYWNlaG9sZGVyIHNvIG5vbmUgb2YgdGhlIG90aGVycyBnZXQgbXV0YXRlZFxyXG4gICAgLy8gVGhlIHNlY29uZCBvYmplY3QgaXMgdGhlIGRlZmF1bHQsIGluIHRoZSBjb25zdGFudHMgZmlsZXNcclxuICAgIC8vIFRoZSB0aGlyZCBvYmplY3QgaXMgb3B0aW9ucyBzcGVjaWZpYyB0byB0aGlzIHBhbmVsLCB3aGljaCBvdmVycmlkZXMgdGhlIGRlZmF1bHRzXHJcbiAgICAvLyBUaGUgZm91cnRoIG9iamVjdCBpcyBvcHRpb25zIGdpdmVuIGF0IHRpbWUgb2YgY29uc3RydWN0aW9uLCB3aGljaCBvdmVycmlkZXMgYWxsIHRoZSBvdGhlcnNcclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge30sIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUklHSFRTSURFX1BBTkVMX09QVElPTlMsIHtcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcclxuICAgIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB2ZWxvY2l0eVZlY3RvcnNUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZWxvY2l0eVZlY3RvcnMnICk7XHJcbiAgICBjb25zdCBhY2NlbGVyYXRpb25WZWN0b3JzVGFuZGVtID0gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYWNjZWxlcmF0aW9uVmVjdG9ycycgKTtcclxuXHJcbiAgICBjb25zdCB0aXRsZU9wdGlvbnMgPSBtZXJnZSgge30sIFRJVExFX09QVElPTlMsIHtcclxuICAgICAgbWF4V2lkdGg6IG9wdGlvbnMubWluV2lkdGggLSAzICogb3B0aW9ucy54TWFyZ2luIC0gVkVMT0NJVFlfVkVDVE9SX0lDT04ud2lkdGhcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHZlbG9jaXR5VmVjdG9yc1RpdGxlID0gbmV3IFRleHQoIHZlbG9jaXR5VmVjdG9yc1N0cmluZywgdGl0bGVPcHRpb25zICk7XHJcbiAgICBjb25zdCB2ZWxvY2l0eVRpdGxlQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy54TWFyZ2luLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIHZlbG9jaXR5VmVjdG9yc1RpdGxlLFxyXG4gICAgICAgIG5ldyBOb2RlKCB7IGNoaWxkcmVuOiBbIFZFTE9DSVRZX1ZFQ1RPUl9JQ09OIF0gfSApXHJcbiAgICAgIF0sXHJcbiAgICAgIHRhbmRlbTogdmVsb2NpdHlWZWN0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpdGxlTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNoZWNrYm94T3B0aW9ucyA9IHsgbWF4V2lkdGg6IHRpdGxlT3B0aW9ucy5tYXhXaWR0aCwgYm94V2lkdGg6IDE4IH07XHJcbiAgICBjb25zdCB0b3RhbFZlbG9jaXR5TGFiZWwgPSBuZXcgVGV4dCggdG90YWxTdHJpbmcsIExBQkVMX09QVElPTlMgKTtcclxuICAgIGNvbnN0IHRvdGFsVmVsb2NpdHlDaGVja2JveCA9IG5ldyBDaGVja2JveCggdmlld1Byb3BlcnRpZXMudG90YWxWZWxvY2l0eVZlY3Rvck9uUHJvcGVydHksIHRvdGFsVmVsb2NpdHlMYWJlbCwgbWVyZ2UoIHsgdGFuZGVtOiB2ZWxvY2l0eVZlY3RvcnNUYW5kZW0uY3JlYXRlVGFuZGVtKCAndG90YWxDaGVja2JveCcgKSB9LCBjaGVja2JveE9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGNvbXBvbmVudHNWZWxvY2l0eUxhYmVsID0gbmV3IFRleHQoIGNvbXBvbmVudHNTdHJpbmcsIExBQkVMX09QVElPTlMgKTtcclxuICAgIGNvbnN0IGNvbXBvbmVudHNWZWxvY2l0eUNoZWNrYm94ID0gbmV3IENoZWNrYm94KCB2aWV3UHJvcGVydGllcy5jb21wb25lbnRzVmVsb2NpdHlWZWN0b3JzT25Qcm9wZXJ0eSwgY29tcG9uZW50c1ZlbG9jaXR5TGFiZWwsIG1lcmdlKCB7IHRhbmRlbTogdmVsb2NpdHlWZWN0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbXBvbmVudHNDaGVja2JveCcgKSB9LCBjaGVja2JveE9wdGlvbnMgKSApO1xyXG5cclxuICAgIGNvbnN0IGFjY2VsZXJhdGlvblZlY3RvcnNUaXRsZSA9IG5ldyBUZXh0KCBhY2NlbGVyYXRpb25WZWN0b3JzU3RyaW5nLCB0aXRsZU9wdGlvbnMgKTtcclxuICAgIGNvbnN0IGFjY2VsZXJhdGlvblRpdGxlQm94ID0gbmV3IEhCb3goIHtcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy54TWFyZ2luLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGFjY2VsZXJhdGlvblZlY3RvcnNUaXRsZSxcclxuICAgICAgICBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBBQ0NFTEVSQVRJT05fVkVDVE9SX0lDT04gXSB9IClcclxuICAgICAgXSxcclxuICAgICAgdGFuZGVtOiBhY2NlbGVyYXRpb25WZWN0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RpdGxlTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsQWNjZWxlcmF0aW9uTGFiZWwgPSBuZXcgVGV4dCggdG90YWxTdHJpbmcsIExBQkVMX09QVElPTlMgKTtcclxuICAgIGNvbnN0IHRvdGFsQWNjZWxlcmF0aW9uQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goIHZpZXdQcm9wZXJ0aWVzLnRvdGFsQWNjZWxlcmF0aW9uVmVjdG9yT25Qcm9wZXJ0eSwgdG90YWxBY2NlbGVyYXRpb25MYWJlbCwgbWVyZ2UoIHsgdGFuZGVtOiBhY2NlbGVyYXRpb25WZWN0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RvdGFsQ2hlY2tib3gnICkgfSwgY2hlY2tib3hPcHRpb25zICkgKTtcclxuXHJcbiAgICBjb25zdCBjb21wb25lbnRzQWNjZWxlcmF0aW9uTGFiZWwgPSBuZXcgVGV4dCggY29tcG9uZW50c1N0cmluZywgTEFCRUxfT1BUSU9OUyApO1xyXG4gICAgY29uc3QgY29tcG9uZW50c0FjY2VsZXJhdGlvbkNoZWNrYm94ID0gbmV3IENoZWNrYm94KCB2aWV3UHJvcGVydGllcy5jb21wb25lbnRzQWNjZWxlcmF0aW9uVmVjdG9yc09uUHJvcGVydHksIGNvbXBvbmVudHNBY2NlbGVyYXRpb25MYWJlbCwgbWVyZ2UoIHsgdGFuZGVtOiBhY2NlbGVyYXRpb25WZWN0b3JzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2NvbXBvbmVudHNDaGVja2JveCcgKSB9LCBjaGVja2JveE9wdGlvbnMgKSApO1xyXG5cclxuICAgIC8vIFRoZSBjb250ZW50cyBvZiB0aGUgY29udHJvbCBwYW5lbFxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBWQm94KCB7XHJcbiAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgIHNwYWNpbmc6IG9wdGlvbnMuY29udHJvbHNWZXJ0aWNhbFNwYWNlLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBWQm94KCB7XHJcbiAgICAgICAgICBzcGFjaW5nOiBvcHRpb25zLmNvbnRyb2xzVmVydGljYWxTcGFjZSxcclxuICAgICAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgICB0YW5kZW06IHZlbG9jaXR5VmVjdG9yc1RhbmRlbSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgIHZlbG9jaXR5VGl0bGVCb3gsXHJcbiAgICAgICAgICAgIHRvdGFsVmVsb2NpdHlDaGVja2JveCxcclxuICAgICAgICAgICAgY29tcG9uZW50c1ZlbG9jaXR5Q2hlY2tib3hcclxuICAgICAgICAgIF1cclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmV3IFZCb3goIHtcclxuICAgICAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgICBzcGFjaW5nOiBvcHRpb25zLmNvbnRyb2xzVmVydGljYWxTcGFjZSxcclxuICAgICAgICAgIHRhbmRlbTogYWNjZWxlcmF0aW9uVmVjdG9yc1RhbmRlbSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgIGFjY2VsZXJhdGlvblRpdGxlQm94LFxyXG4gICAgICAgICAgICB0b3RhbEFjY2VsZXJhdGlvbkNoZWNrYm94LFxyXG4gICAgICAgICAgICBjb21wb25lbnRzQWNjZWxlcmF0aW9uQ2hlY2tib3hcclxuICAgICAgICAgIF1cclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5wcm9qZWN0aWxlTW90aW9uLnJlZ2lzdGVyKCAnSW50cm9WZWN0b3JzQ29udHJvbFBhbmVsJywgSW50cm9WZWN0b3JzQ29udHJvbFBhbmVsICk7XHJcbmV4cG9ydCBkZWZhdWx0IEludHJvVmVjdG9yc0NvbnRyb2xQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxTQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzFFLE9BQU9DLFFBQVEsTUFBTSxnQ0FBZ0M7QUFDckQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxNQUFNLE1BQU0saUNBQWlDO0FBQ3BELE9BQU9DLHlCQUF5QixNQUFNLDJDQUEyQztBQUNqRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtD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