// Copyright 2016-2023, University of Colorado Boulder

/**
 * The 'Vectors' screen.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import projectileMotion from '../projectileMotion.js';
import ProjectileMotionStrings from '../ProjectileMotionStrings.js';
import VectorsModel from './model/VectorsModel.js';
import VectorsIconNode from './view/VectorsIconNode.js';
import VectorsScreenView from './view/VectorsScreenView.js';
class VectorsScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const options = {
      name: ProjectileMotionStrings.screen.vectorsStringProperty,
      backgroundColorProperty: new Property('white'),
      homeScreenIcon: new ScreenIcon(new VectorsIconNode('screen'), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new VectorsIconNode('nav'), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    };
    super(() => new VectorsModel(tandem.createTandem('model')), model => new VectorsScreenView(model, {
      tandem: tandem.createTandem('view')
    }), options);
  }
}
projectileMotion.register('VectorsScreen', VectorsScreen);
export default VectorsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJwcm9qZWN0aWxlTW90aW9uIiwiUHJvamVjdGlsZU1vdGlvblN0cmluZ3MiLCJWZWN0b3JzTW9kZWwiLCJWZWN0b3JzSWNvbk5vZGUiLCJWZWN0b3JzU2NyZWVuVmlldyIsIlZlY3RvcnNTY3JlZW4iLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm9wdGlvbnMiLCJuYW1lIiwic2NyZWVuIiwidmVjdG9yc1N0cmluZ1Byb3BlcnR5IiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJob21lU2NyZWVuSWNvbiIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm5hdmlnYXRpb25CYXJJY29uIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlY3RvcnNTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlICdWZWN0b3JzJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuLmpzJztcclxuaW1wb3J0IFNjcmVlbkljb24gZnJvbSAnLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuSWNvbi5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblN0cmluZ3MgZnJvbSAnLi4vUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVmVjdG9yc01vZGVsIGZyb20gJy4vbW9kZWwvVmVjdG9yc01vZGVsLmpzJztcclxuaW1wb3J0IFZlY3RvcnNJY29uTm9kZSBmcm9tICcuL3ZpZXcvVmVjdG9yc0ljb25Ob2RlLmpzJztcclxuaW1wb3J0IFZlY3RvcnNTY3JlZW5WaWV3IGZyb20gJy4vdmlldy9WZWN0b3JzU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jbGFzcyBWZWN0b3JzU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbmFtZTogUHJvamVjdGlsZU1vdGlvblN0cmluZ3Muc2NyZWVuLnZlY3RvcnNTdHJpbmdQcm9wZXJ0eSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3doaXRlJyApLFxyXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBWZWN0b3JzSWNvbk5vZGUoICdzY3JlZW4nICksIHtcclxuICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgIH0gKSxcclxuICAgICAgbmF2aWdhdGlvbkJhckljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgVmVjdG9yc0ljb25Ob2RlKCAnbmF2JyApLCB7XHJcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICB9ICksXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9O1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICAoKSA9PiBuZXcgVmVjdG9yc01vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IFZlY3RvcnNTY3JlZW5WaWV3KCBtb2RlbCwgeyB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApIH0gKSxcclxuICAgICAgb3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbnByb2plY3RpbGVNb3Rpb24ucmVnaXN0ZXIoICdWZWN0b3JzU2NyZWVuJywgVmVjdG9yc1NjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3JzU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSw2QkFBNkI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxnQkFBZ0IsTUFBTSx3QkFBd0I7QUFDckQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLFlBQVksTUFBTSx5QkFBeUI7QUFDbEQsT0FBT0MsZUFBZSxNQUFNLDJCQUEyQjtBQUN2RCxPQUFPQyxpQkFBaUIsTUFBTSw2QkFBNkI7QUFFM0QsTUFBTUMsYUFBYSxTQUFTUCxNQUFNLENBQUM7RUFFakM7QUFDRjtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLE1BQU0sRUFBRztJQUVwQixNQUFNQyxPQUFPLEdBQUc7TUFDZEMsSUFBSSxFQUFFUix1QkFBdUIsQ0FBQ1MsTUFBTSxDQUFDQyxxQkFBcUI7TUFDMURDLHVCQUF1QixFQUFFLElBQUlmLFFBQVEsQ0FBRSxPQUFRLENBQUM7TUFDaERnQixjQUFjLEVBQUUsSUFBSWQsVUFBVSxDQUFFLElBQUlJLGVBQWUsQ0FBRSxRQUFTLENBQUMsRUFBRTtRQUMvRFcsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLGlCQUFpQixFQUFFLElBQUlqQixVQUFVLENBQUUsSUFBSUksZUFBZSxDQUFFLEtBQU0sQ0FBQyxFQUFFO1FBQy9EVyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFIsTUFBTSxFQUFFQTtJQUNWLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFBTSxJQUFJTCxZQUFZLENBQUVLLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE9BQVEsQ0FBRSxDQUFDLEVBQ3hEQyxLQUFLLElBQUksSUFBSWQsaUJBQWlCLENBQUVjLEtBQUssRUFBRTtNQUFFWCxNQUFNLEVBQUVBLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLE1BQU87SUFBRSxDQUFFLENBQUMsRUFDbEZULE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVIsZ0JBQWdCLENBQUNtQixRQUFRLENBQUUsZUFBZSxFQUFFZCxhQUFjLENBQUM7QUFDM0QsZUFBZUEsYUFBYSJ9