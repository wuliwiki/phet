// Copyright 2016-2023, University of Colorado Boulder

/**
 * ScreenView for the 'Vectors' screen.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import ProjectileMotionScreenView from '../../common/view/ProjectileMotionScreenView.js';
import projectileMotion from '../../projectileMotion.js';
import VectorsProjectileControlPanel from './VectorsProjectileControlPanel.js';
import VectorsVectorsControlPanel from './VectorsVectorsControlPanel.js';
import VectorsViewProperties from './VectorsViewProperties.js';
class VectorsScreenView extends ProjectileMotionScreenView {
  /**
   * @param {VectorsModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    options = merge({
      addFlatirons: false
    }, options);

    // contains Properties about vector visibility, used in super class
    const visibilityProperties = new VectorsViewProperties(options.tandem.createTandem('viewProperties'));
    super(model, new VectorsProjectileControlPanel(model.selectedProjectileObjectTypeProperty, model.projectileDiameterProperty, model.projectileMassProperty, model.airResistanceOnProperty, model.projectileDragCoefficientProperty, {
      tandem: options.tandem.createTandem('projectileControlPanel')
    }), new VectorsVectorsControlPanel(visibilityProperties, {
      tandem: options.tandem.createTandem('vectorsControlPanel')
    }), visibilityProperties, options);
  }
}
projectileMotion.register('VectorsScreenView', VectorsScreenView);
export default VectorsScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlByb2plY3RpbGVNb3Rpb25TY3JlZW5WaWV3IiwicHJvamVjdGlsZU1vdGlvbiIsIlZlY3RvcnNQcm9qZWN0aWxlQ29udHJvbFBhbmVsIiwiVmVjdG9yc1ZlY3RvcnNDb250cm9sUGFuZWwiLCJWZWN0b3JzVmlld1Byb3BlcnRpZXMiLCJWZWN0b3JzU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJvcHRpb25zIiwiYWRkRmxhdGlyb25zIiwidmlzaWJpbGl0eVByb3BlcnRpZXMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJzZWxlY3RlZFByb2plY3RpbGVPYmplY3RUeXBlUHJvcGVydHkiLCJwcm9qZWN0aWxlRGlhbWV0ZXJQcm9wZXJ0eSIsInByb2plY3RpbGVNYXNzUHJvcGVydHkiLCJhaXJSZXNpc3RhbmNlT25Qcm9wZXJ0eSIsInByb2plY3RpbGVEcmFnQ29lZmZpY2llbnRQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVmVjdG9yc1NjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NyZWVuVmlldyBmb3IgdGhlICdWZWN0b3JzJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFByb2plY3RpbGVNb3Rpb25TY3JlZW5WaWV3IGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1Byb2plY3RpbGVNb3Rpb25TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IHByb2plY3RpbGVNb3Rpb24gZnJvbSAnLi4vLi4vcHJvamVjdGlsZU1vdGlvbi5qcyc7XHJcbmltcG9ydCBWZWN0b3JzUHJvamVjdGlsZUNvbnRyb2xQYW5lbCBmcm9tICcuL1ZlY3RvcnNQcm9qZWN0aWxlQ29udHJvbFBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvcnNWZWN0b3JzQ29udHJvbFBhbmVsIGZyb20gJy4vVmVjdG9yc1ZlY3RvcnNDb250cm9sUGFuZWwuanMnO1xyXG5pbXBvcnQgVmVjdG9yc1ZpZXdQcm9wZXJ0aWVzIGZyb20gJy4vVmVjdG9yc1ZpZXdQcm9wZXJ0aWVzLmpzJztcclxuXHJcbmNsYXNzIFZlY3RvcnNTY3JlZW5WaWV3IGV4dGVuZHMgUHJvamVjdGlsZU1vdGlvblNjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1ZlY3RvcnNNb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCBvcHRpb25zICkge1xyXG5cclxuICAgIG9wdGlvbnMgPSBtZXJnZSgge1xyXG4gICAgICBhZGRGbGF0aXJvbnM6IGZhbHNlXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gY29udGFpbnMgUHJvcGVydGllcyBhYm91dCB2ZWN0b3IgdmlzaWJpbGl0eSwgdXNlZCBpbiBzdXBlciBjbGFzc1xyXG4gICAgY29uc3QgdmlzaWJpbGl0eVByb3BlcnRpZXMgPSBuZXcgVmVjdG9yc1ZpZXdQcm9wZXJ0aWVzKCBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3UHJvcGVydGllcycgKSApO1xyXG5cclxuICAgIHN1cGVyKFxyXG4gICAgICBtb2RlbCxcclxuICAgICAgbmV3IFZlY3RvcnNQcm9qZWN0aWxlQ29udHJvbFBhbmVsKFxyXG4gICAgICAgIG1vZGVsLnNlbGVjdGVkUHJvamVjdGlsZU9iamVjdFR5cGVQcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5wcm9qZWN0aWxlRGlhbWV0ZXJQcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5wcm9qZWN0aWxlTWFzc1Byb3BlcnR5LFxyXG4gICAgICAgIG1vZGVsLmFpclJlc2lzdGFuY2VPblByb3BlcnR5LFxyXG4gICAgICAgIG1vZGVsLnByb2plY3RpbGVEcmFnQ29lZmZpY2llbnRQcm9wZXJ0eSxcclxuICAgICAgICB7IHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncHJvamVjdGlsZUNvbnRyb2xQYW5lbCcgKSB9XHJcbiAgICAgICksXHJcbiAgICAgIG5ldyBWZWN0b3JzVmVjdG9yc0NvbnRyb2xQYW5lbCggdmlzaWJpbGl0eVByb3BlcnRpZXMsIHsgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZWN0b3JzQ29udHJvbFBhbmVsJyApIH0gKSxcclxuICAgICAgdmlzaWJpbGl0eVByb3BlcnRpZXMsXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5wcm9qZWN0aWxlTW90aW9uLnJlZ2lzdGVyKCAnVmVjdG9yc1NjcmVlblZpZXcnLCBWZWN0b3JzU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBWZWN0b3JzU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQywwQkFBMEIsTUFBTSxpREFBaUQ7QUFDeEYsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLDZCQUE2QixNQUFNLG9DQUFvQztBQUM5RSxPQUFPQywwQkFBMEIsTUFBTSxpQ0FBaUM7QUFDeEUsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRTlELE1BQU1DLGlCQUFpQixTQUFTTCwwQkFBMEIsQ0FBQztFQUV6RDtBQUNGO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRztJQUU1QkEsT0FBTyxHQUFHVCxLQUFLLENBQUU7TUFDZlUsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRUQsT0FBUSxDQUFDOztJQUVaO0lBQ0EsTUFBTUUsb0JBQW9CLEdBQUcsSUFBSU4scUJBQXFCLENBQUVJLE9BQU8sQ0FBQ0csTUFBTSxDQUFDQyxZQUFZLENBQUUsZ0JBQWlCLENBQUUsQ0FBQztJQUV6RyxLQUFLLENBQ0hMLEtBQUssRUFDTCxJQUFJTCw2QkFBNkIsQ0FDL0JLLEtBQUssQ0FBQ00sb0NBQW9DLEVBQzFDTixLQUFLLENBQUNPLDBCQUEwQixFQUNoQ1AsS0FBSyxDQUFDUSxzQkFBc0IsRUFDNUJSLEtBQUssQ0FBQ1MsdUJBQXVCLEVBQzdCVCxLQUFLLENBQUNVLGlDQUFpQyxFQUN2QztNQUFFTixNQUFNLEVBQUVILE9BQU8sQ0FBQ0csTUFBTSxDQUFDQyxZQUFZLENBQUUsd0JBQXlCO0lBQUUsQ0FDcEUsQ0FBQyxFQUNELElBQUlULDBCQUEwQixDQUFFTyxvQkFBb0IsRUFBRTtNQUFFQyxNQUFNLEVBQUVILE9BQU8sQ0FBQ0csTUFBTSxDQUFDQyxZQUFZLENBQUUscUJBQXNCO0lBQUUsQ0FBRSxDQUFDLEVBQ3hIRixvQkFBb0IsRUFDcEJGLE9BQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQVAsZ0JBQWdCLENBQUNpQixRQUFRLENBQUUsbUJBQW1CLEVBQUViLGlCQUFrQixDQUFDO0FBQ25FLGVBQWVBLGlCQUFpQiJ9