// Copyright 2016-2023, University of Colorado Boulder

/**
 * Model for the measuring tape in projectile motion.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 * @author Matthew Blackman (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import projectileMotion from '../../projectileMotion.js';
class ProjectileMotionMeasuringTape {
  constructor(tandem) {
    this.basePositionProperty = new Vector2Property(new Vector2(0, 0), {
      tandem: tandem.createTandem('basePositionProperty'),
      units: 'm',
      phetioDocumentation: 'Base (start of tape from the container) position'
    });
    this.tipPositionProperty = new Vector2Property(new Vector2(1, 0), {
      tandem: tandem.createTandem('tipPositionProperty'),
      units: 'm',
      phetioDocumentation: 'Tip (end of measuring tape) position'
    });
    this.isActiveProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('isActiveProperty'),
      phetioDocumentation: 'Whether the measuring tape is out in the play area (false when in the toolbox)'
    });
  }

  /**
   * Reset these Properties
   */
  reset() {
    this.basePositionProperty.reset();
    this.tipPositionProperty.reset();
    this.isActiveProperty.reset();
  }
}
projectileMotion.register('ProjectileMotionMeasuringTape', ProjectileMotionMeasuringTape);
export default ProjectileMotionMeasuringTape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJWZWN0b3IyIiwiVmVjdG9yMlByb3BlcnR5IiwicHJvamVjdGlsZU1vdGlvbiIsIlByb2plY3RpbGVNb3Rpb25NZWFzdXJpbmdUYXBlIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJiYXNlUG9zaXRpb25Qcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInVuaXRzIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInRpcFBvc2l0aW9uUHJvcGVydHkiLCJpc0FjdGl2ZVByb3BlcnR5IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlByb2plY3RpbGVNb3Rpb25NZWFzdXJpbmdUYXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgbWVhc3VyaW5nIHRhcGUgaW4gcHJvamVjdGlsZSBtb3Rpb24uXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNYXR0aGV3IEJsYWNrbWFuIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IFZlY3RvcjJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMlByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHByb2plY3RpbGVNb3Rpb24gZnJvbSAnLi4vLi4vcHJvamVjdGlsZU1vdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBQcm9qZWN0aWxlTW90aW9uTWVhc3VyaW5nVGFwZSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBiYXNlUG9zaXRpb25Qcm9wZXJ0eTogVmVjdG9yMlByb3BlcnR5O1xyXG4gIHB1YmxpYyByZWFkb25seSB0aXBQb3NpdGlvblByb3BlcnR5OiBWZWN0b3IyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzQWN0aXZlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG4gICAgdGhpcy5iYXNlUG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBWZWN0b3IyUHJvcGVydHkoIG5ldyBWZWN0b3IyKCAwLCAwICksIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmFzZVBvc2l0aW9uUHJvcGVydHknICksXHJcbiAgICAgIHVuaXRzOiAnbScsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdCYXNlIChzdGFydCBvZiB0YXBlIGZyb20gdGhlIGNvbnRhaW5lcikgcG9zaXRpb24nXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy50aXBQb3NpdGlvblByb3BlcnR5ID0gbmV3IFZlY3RvcjJQcm9wZXJ0eSggbmV3IFZlY3RvcjIoIDEsIDAgKSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aXBQb3NpdGlvblByb3BlcnR5JyApLFxyXG4gICAgICB1bml0czogJ20nLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGlwIChlbmQgb2YgbWVhc3VyaW5nIHRhcGUpIHBvc2l0aW9uJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuaXNBY3RpdmVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2lzQWN0aXZlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdXaGV0aGVyIHRoZSBtZWFzdXJpbmcgdGFwZSBpcyBvdXQgaW4gdGhlIHBsYXkgYXJlYSAoZmFsc2Ugd2hlbiBpbiB0aGUgdG9vbGJveCknXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGVzZSBQcm9wZXJ0aWVzXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5iYXNlUG9zaXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50aXBQb3NpdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmlzQWN0aXZlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnByb2plY3RpbGVNb3Rpb24ucmVnaXN0ZXIoICdQcm9qZWN0aWxlTW90aW9uTWVhc3VyaW5nVGFwZScsIFByb2plY3RpbGVNb3Rpb25NZWFzdXJpbmdUYXBlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0aWxlTW90aW9uTWVhc3VyaW5nVGFwZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBRXBFLE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsZUFBZSxNQUFNLHVDQUF1QztBQUVuRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFFeEQsTUFBTUMsNkJBQTZCLENBQUM7RUFNM0JDLFdBQVdBLENBQUVDLE1BQWMsRUFBRztJQUNuQyxJQUFJLENBQUNDLG9CQUFvQixHQUFHLElBQUlMLGVBQWUsQ0FBRSxJQUFJRCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO01BQ3BFSyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLHNCQUF1QixDQUFDO01BQ3JEQyxLQUFLLEVBQUUsR0FBRztNQUNWQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNDLG1CQUFtQixHQUFHLElBQUlULGVBQWUsQ0FBRSxJQUFJRCxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO01BQ25FSyxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLHFCQUFzQixDQUFDO01BQ3BEQyxLQUFLLEVBQUUsR0FBRztNQUNWQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLGdCQUFnQixHQUFHLElBQUlaLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDbERNLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsa0JBQW1CLENBQUM7TUFDakRFLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDTixvQkFBb0IsQ0FBQ00sS0FBSyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDRixtQkFBbUIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDL0I7QUFDRjtBQUVBVixnQkFBZ0IsQ0FBQ1csUUFBUSxDQUFFLCtCQUErQixFQUFFViw2QkFBOEIsQ0FBQztBQUUzRixlQUFlQSw2QkFBNkIifQ==