// Copyright 2016-2023, University of Colorado Boulder

/**
 * Projectile object that contains properties of the projectile
 * Creates constants that are used by projectile choice dropdown on the Intro Screen.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
import projectileMotion from '../../projectileMotion.js';
import ProjectileMotionStrings from '../../ProjectileMotionStrings.js';
import ProjectileMotionConstants from '../ProjectileMotionConstants.js';
import ProjectileObjectViewFactory from '../view/ProjectileObjectViewFactory.js';
const baseballString = ProjectileMotionStrings.baseball;
const cannonballString = ProjectileMotionStrings.cannonball;
const carString = ProjectileMotionStrings.car;
const customString = ProjectileMotionStrings.custom;
const footballString = ProjectileMotionStrings.football;
const golfBallString = ProjectileMotionStrings.golfBall;
const humanString = ProjectileMotionStrings.human;
const pianoString = ProjectileMotionStrings.piano;
const pumpkinString = ProjectileMotionStrings.pumpkin;
const tankShellString = ProjectileMotionStrings.tankShell;

// constants
const objectTypesTandem = Tandem.GLOBAL_MODEL.createTandem('projectileObjectTypes');
class ProjectileObjectType extends PhetioObject {
  // name of the object, such as 'Golf ball', or null if it doesn't have a name
  // identifier of the object benchmark, such as 'tankShell', also considered a 'name' for it like for Tandems. null for screens with only one object type
  // whether the object rotates or just translates in air
  // in kg
  // in meters

  constructor(name, mass, diameter, dragCoefficient, benchmark, rotates, providedOptions) {
    const options = optionize()({
      massRange: new Range(1, 10),
      massRound: 1,
      diameterRange: new Range(0.1, 1),
      diameterRound: 0.1,
      // most objectTypes have a max of 1
      dragCoefficientRange: new Range(ProjectileMotionConstants.PROJECTILE_DRAG_COEFFICIENT_RANGE.min, 1),
      viewCreationFunction: null,
      phetioType: ProjectileObjectType.ProjectileObjectTypeIO
    }, providedOptions);
    super(options);
    this.projectileObjectTypeOptions = options;
    this.name = name;
    this.benchmark = benchmark;
    this.rotates = rotates;

    // writable on the lab screen
    this.mass = mass;
    this.diameter = diameter;
    this.dragCoefficient = dragCoefficient;

    // these mutable values also store their initial values
    this.initialMass = mass;
    this.initialDiameter = diameter;
    this.initialDragCoefficient = dragCoefficient;
    this.massRange = options.massRange;
    this.massRound = options.massRound;
    this.diameterRange = options.diameterRange;
    this.diameterRound = options.diameterRound;
    this.dragCoefficientRange = options.dragCoefficientRange;
    this.viewCreationFunction = options.viewCreationFunction;
  }
  toStateObject() {
    return {
      name: NullableIO(StringIO).toStateObject(this.name),
      mass: this.mass,
      diameter: this.diameter,
      dragCoefficient: this.dragCoefficient,
      benchmark: NullableIO(StringIO).toStateObject(this.benchmark),
      rotates: this.rotates,
      massRange: Range.RangeIO.toStateObject(this.massRange),
      massRound: this.massRound,
      diameterRange: Range.RangeIO.toStateObject(this.diameterRange),
      diameterRound: this.diameterRound,
      dragCoefficientRange: Range.RangeIO.toStateObject(this.dragCoefficientRange)
    };
  }
  static get STATE_SCHEMA() {
    return {
      name: NullableIO(StringIO),
      mass: NumberIO,
      diameter: NumberIO,
      dragCoefficient: NumberIO,
      benchmark: NullableIO(StringIO),
      rotates: BooleanIO,
      massRange: Range.RangeIO,
      massRound: NumberIO,
      diameterRange: Range.RangeIO,
      diameterRound: NumberIO,
      dragCoefficientRange: Range.RangeIO
    };
  }
  applyState(stateObject) {
    this.name = NullableIO(StringIO).fromStateObject(stateObject.name);
    this.mass = stateObject.mass;
    this.diameter = stateObject.diameter;
    this.dragCoefficient = stateObject.dragCoefficient;
    this.benchmark = NullableIO(StringIO).fromStateObject(stateObject.benchmark);
    this.rotates = stateObject.rotates;
    this.massRange = Range.RangeIO.fromStateObject(stateObject.massRange);
    this.massRound = stateObject.massRound;
    this.diameterRange = Range.RangeIO.fromStateObject(stateObject.diameterRange);
    this.diameterRound = stateObject.diameterRound;
    this.dragCoefficientRange = Range.RangeIO.fromStateObject(stateObject.dragCoefficientRange);
  }
  static ProjectileObjectTypeIO = new IOType('ProjectileObjectTypeIO', {
    valueType: ProjectileObjectType,
    toStateObject: projectileObjectType => projectileObjectType.toStateObject(),
    applyState: (projectileObjectType, stateObject) => projectileObjectType.applyState(stateObject),
    stateSchema: ProjectileObjectType.STATE_SCHEMA,
    documentation: 'A data type that stores the variables for a given object type.'
  });

  //-------------------------------------------------------------------------------------------
  // Specific projectile objects below ...
  //-------------------------------------------------------------------------------------------

  static CANNONBALL = new ProjectileObjectType(cannonballString, ProjectileMotionConstants.CANNONBALL_MASS, ProjectileMotionConstants.CANNONBALL_DIAMETER, ProjectileMotionConstants.CANNONBALL_DRAG_COEFFICIENT, 'cannonball', false, {
    massRange: new Range(1, 31.00),
    massRound: 0.01,
    diameterRange: new Range(0.1, 1),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createCannonball,
    tandem: objectTypesTandem.createTandem('cannonball')
  });
  static PUMPKIN = new ProjectileObjectType(pumpkinString, 5, 0.37, 0.6, 'pumpkin', false, {
    massRange: new Range(1, 1000),
    massRound: 1,
    diameterRange: new Range(0.1, 3),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createPumpkin,
    tandem: objectTypesTandem.createTandem('pumpkin')
  });
  static BASEBALL = new ProjectileObjectType(baseballString, 0.15, 0.07, 0.35, 'baseball', false, {
    massRange: new Range(0.01, 5),
    massRound: 0.01,
    diameterRange: new Range(0.01, 1),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createBaseball,
    tandem: objectTypesTandem.createTandem('baseball')
  });
  static CAR = new ProjectileObjectType(carString, 2000, 2, 0.55, 'car', true, {
    massRange: new Range(100, 5000),
    massRound: 1,
    diameterRange: new Range(0.5, 3),
    diameterRound: 0.1,
    viewCreationFunction: ProjectileObjectViewFactory.createCar,
    tandem: objectTypesTandem.createTandem('car')
  });
  static FOOTBALL = new ProjectileObjectType(footballString, 0.41, 0.17, 0.05, 'football', true, {
    massRange: new Range(0.01, 5),
    massRound: 0.01,
    diameterRange: new Range(0.01, 1),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createFootball,
    tandem: objectTypesTandem.createTandem('football')
  });
  static HUMAN = new ProjectileObjectType(humanString, 70, 0.5, 0.6, 'human', true, {
    massRange: new Range(10, 200),
    massRound: 1,
    diameterRange: new Range(0.1, 1.5),
    diameterRound: 0.1,
    viewCreationFunction: ProjectileObjectViewFactory.createHuman,
    tandem: objectTypesTandem.createTandem('human')
  });
  static PIANO = new ProjectileObjectType(pianoString, 400, 2.2, ProjectileMotionConstants.PROJECTILE_DRAG_COEFFICIENT_RANGE.max, 'piano', false, {
    massRange: new Range(50, 1000),
    massRound: 1,
    diameterRange: new Range(0.5, 3),
    diameterRound: 0.1,
    // the piano can accept all drag coefficient ranges
    dragCoefficientRange: ProjectileMotionConstants.PROJECTILE_DRAG_COEFFICIENT_RANGE,
    viewCreationFunction: ProjectileObjectViewFactory.createPiano,
    tandem: objectTypesTandem.createTandem('piano')
  });
  static GOLF_BALL = new ProjectileObjectType(golfBallString, 0.05, 0.04, 0.25, 'golfBall', false, {
    massRange: new Range(0.01, 5),
    massRound: 0.01,
    diameterRange: new Range(0.01, 1),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createGolfBall,
    tandem: objectTypesTandem.createTandem('golfBall')
  });
  static TANK_SHELL = new ProjectileObjectType(tankShellString, 42, 0.15, 0.06, 'tankShell', true, {
    massRange: new Range(5, 200),
    massRound: 1,
    diameterRange: new Range(0.1, 1),
    diameterRound: 0.01,
    viewCreationFunction: ProjectileObjectViewFactory.createTankShell,
    tandem: objectTypesTandem.createTandem('tankShell')
  });
  static CUSTOM = new ProjectileObjectType(customString, 100, 1, ProjectileMotionConstants.CANNONBALL_DRAG_COEFFICIENT, 'custom', true, {
    massRange: new Range(1, 5000),
    massRound: 0.01,
    diameterRange: new Range(0.01, 3),
    diameterRound: 0.01,
    dragCoefficientRange: new Range(0.04, 1),
    tandem: objectTypesTandem.createTandem('custom'),
    phetioDocumentation: 'A custom projectile type that can have its values edited by the user'
  });

  // Meant to be used on screens that don't have object type selection, and only use a single object type
  static COMPANIONLESS = new ProjectileObjectType(null, 5, 0.8, ProjectileMotionConstants.CANNONBALL_DRAG_COEFFICIENT, null, true, {
    tandem: objectTypesTandem.createTandem('genericObjectType'),
    phetioDocumentation: 'On some screens there are only a single, general projectile object type. It cannot be ' + 'changed to a different object type, but can be altered via Properties in the model.'
  });
}
projectileMotion.register('ProjectileObjectType', ProjectileObjectType);
export default ProjectileObjectType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIm9wdGlvbml6ZSIsIlBoZXRpb09iamVjdCIsIlRhbmRlbSIsIkJvb2xlYW5JTyIsIklPVHlwZSIsIk51bGxhYmxlSU8iLCJOdW1iZXJJTyIsIlN0cmluZ0lPIiwicHJvamVjdGlsZU1vdGlvbiIsIlByb2plY3RpbGVNb3Rpb25TdHJpbmdzIiwiUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyIsIlByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeSIsImJhc2ViYWxsU3RyaW5nIiwiYmFzZWJhbGwiLCJjYW5ub25iYWxsU3RyaW5nIiwiY2Fubm9uYmFsbCIsImNhclN0cmluZyIsImNhciIsImN1c3RvbVN0cmluZyIsImN1c3RvbSIsImZvb3RiYWxsU3RyaW5nIiwiZm9vdGJhbGwiLCJnb2xmQmFsbFN0cmluZyIsImdvbGZCYWxsIiwiaHVtYW5TdHJpbmciLCJodW1hbiIsInBpYW5vU3RyaW5nIiwicGlhbm8iLCJwdW1wa2luU3RyaW5nIiwicHVtcGtpbiIsInRhbmtTaGVsbFN0cmluZyIsInRhbmtTaGVsbCIsIm9iamVjdFR5cGVzVGFuZGVtIiwiR0xPQkFMX01PREVMIiwiY3JlYXRlVGFuZGVtIiwiUHJvamVjdGlsZU9iamVjdFR5cGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXNzIiwiZGlhbWV0ZXIiLCJkcmFnQ29lZmZpY2llbnQiLCJiZW5jaG1hcmsiLCJyb3RhdGVzIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm1hc3NSYW5nZSIsIm1hc3NSb3VuZCIsImRpYW1ldGVyUmFuZ2UiLCJkaWFtZXRlclJvdW5kIiwiZHJhZ0NvZWZmaWNpZW50UmFuZ2UiLCJQUk9KRUNUSUxFX0RSQUdfQ09FRkZJQ0lFTlRfUkFOR0UiLCJtaW4iLCJ2aWV3Q3JlYXRpb25GdW5jdGlvbiIsInBoZXRpb1R5cGUiLCJQcm9qZWN0aWxlT2JqZWN0VHlwZUlPIiwicHJvamVjdGlsZU9iamVjdFR5cGVPcHRpb25zIiwiaW5pdGlhbE1hc3MiLCJpbml0aWFsRGlhbWV0ZXIiLCJpbml0aWFsRHJhZ0NvZWZmaWNpZW50IiwidG9TdGF0ZU9iamVjdCIsIlJhbmdlSU8iLCJTVEFURV9TQ0hFTUEiLCJhcHBseVN0YXRlIiwic3RhdGVPYmplY3QiLCJmcm9tU3RhdGVPYmplY3QiLCJ2YWx1ZVR5cGUiLCJwcm9qZWN0aWxlT2JqZWN0VHlwZSIsInN0YXRlU2NoZW1hIiwiZG9jdW1lbnRhdGlvbiIsIkNBTk5PTkJBTEwiLCJDQU5OT05CQUxMX01BU1MiLCJDQU5OT05CQUxMX0RJQU1FVEVSIiwiQ0FOTk9OQkFMTF9EUkFHX0NPRUZGSUNJRU5UIiwiY3JlYXRlQ2Fubm9uYmFsbCIsInRhbmRlbSIsIlBVTVBLSU4iLCJjcmVhdGVQdW1wa2luIiwiQkFTRUJBTEwiLCJjcmVhdGVCYXNlYmFsbCIsIkNBUiIsImNyZWF0ZUNhciIsIkZPT1RCQUxMIiwiY3JlYXRlRm9vdGJhbGwiLCJIVU1BTiIsImNyZWF0ZUh1bWFuIiwiUElBTk8iLCJtYXgiLCJjcmVhdGVQaWFubyIsIkdPTEZfQkFMTCIsImNyZWF0ZUdvbGZCYWxsIiwiVEFOS19TSEVMTCIsImNyZWF0ZVRhbmtTaGVsbCIsIkNVU1RPTSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJDT01QQU5JT05MRVNTIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9qZWN0aWxlT2JqZWN0VHlwZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQcm9qZWN0aWxlIG9iamVjdCB0aGF0IGNvbnRhaW5zIHByb3BlcnRpZXMgb2YgdGhlIHByb2plY3RpbGVcclxuICogQ3JlYXRlcyBjb25zdGFudHMgdGhhdCBhcmUgdXNlZCBieSBwcm9qZWN0aWxlIGNob2ljZSBkcm9wZG93biBvbiB0aGUgSW50cm8gU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFuZHJlYSBMaW4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJhbmdlLCB7IFJhbmdlU3RhdGVPYmplY3QgfSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgTW9kZWxWaWV3VHJhbnNmb3JtMiBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3ZpZXcvTW9kZWxWaWV3VHJhbnNmb3JtMi5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0LCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEJvb2xlYW5JTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvQm9vbGVhbklPLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IHsgQ29tcG9zaXRlU2NoZW1hIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0YXRlU2NoZW1hLmpzJztcclxuaW1wb3J0IFN0cmluZ0lPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9TdHJpbmdJTy5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uLy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblN0cmluZ3MgZnJvbSAnLi4vLi4vUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyBmcm9tICcuLi9Qcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeSBmcm9tICcuLi92aWV3L1Byb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5qcyc7XHJcblxyXG5jb25zdCBiYXNlYmFsbFN0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLmJhc2ViYWxsO1xyXG5jb25zdCBjYW5ub25iYWxsU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuY2Fubm9uYmFsbDtcclxuY29uc3QgY2FyU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuY2FyO1xyXG5jb25zdCBjdXN0b21TdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5jdXN0b207XHJcbmNvbnN0IGZvb3RiYWxsU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuZm9vdGJhbGw7XHJcbmNvbnN0IGdvbGZCYWxsU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuZ29sZkJhbGw7XHJcbmNvbnN0IGh1bWFuU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuaHVtYW47XHJcbmNvbnN0IHBpYW5vU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MucGlhbm87XHJcbmNvbnN0IHB1bXBraW5TdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5wdW1wa2luO1xyXG5jb25zdCB0YW5rU2hlbGxTdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy50YW5rU2hlbGw7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3Qgb2JqZWN0VHlwZXNUYW5kZW0gPSBUYW5kZW0uR0xPQkFMX01PREVMLmNyZWF0ZVRhbmRlbSggJ3Byb2plY3RpbGVPYmplY3RUeXBlcycgKTtcclxuXHJcbmV4cG9ydCB0eXBlIFByb2plY3RpbGVPYmplY3RWaWV3Q3JlYXRvciA9ICggZGlhbWV0ZXI6IG51bWJlciwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yLCBsYW5kZWQ6IGJvb2xlYW4gKSA9PiBOb2RlO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBtYXNzUmFuZ2U/OiBSYW5nZTtcclxuICBtYXNzUm91bmQ/OiBudW1iZXI7XHJcbiAgZGlhbWV0ZXJSYW5nZT86IFJhbmdlO1xyXG4gIGRpYW1ldGVyUm91bmQ/OiBudW1iZXI7XHJcblxyXG4gIC8vIG1vc3Qgb2JqZWN0VHlwZXMgaGF2ZSBhIG1heCBvZiAxXHJcbiAgZHJhZ0NvZWZmaWNpZW50UmFuZ2U/OiBSYW5nZTtcclxuICB2aWV3Q3JlYXRpb25GdW5jdGlvbj86IFByb2plY3RpbGVPYmplY3RWaWV3Q3JlYXRvciB8IG51bGw7XHJcbn07XHJcblxyXG50eXBlIFByb2plY3RpbGVPYmplY3RUeXBlT3B0aW9ucyA9IFNlbGZPcHRpb25zICZcclxuICBQaGV0aW9PYmplY3RPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPiAmXHJcblxyXG4gIC8vIHZpZXdDcmVhdGlvbkZ1bmN0aW9uIHNob3VsZCBuZXZlciBiZSBudWxsIGlmIHByb3ZpZGVkXHJcbiAgeyB2aWV3Q3JlYXRpb25GdW5jdGlvbj86IFByb2plY3RpbGVPYmplY3RWaWV3Q3JlYXRvciB9O1xyXG5cclxudHlwZSBQcm9qZWN0aWxlT2JqZWN0VHlwZVN0YXRlT2JqZWN0ID0ge1xyXG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XHJcbiAgbWFzczogbnVtYmVyO1xyXG4gIGRpYW1ldGVyOiBudW1iZXI7XHJcbiAgZHJhZ0NvZWZmaWNpZW50OiBudW1iZXI7XHJcbiAgYmVuY2htYXJrOiBzdHJpbmcgfCBudWxsO1xyXG4gIHJvdGF0ZXM6IGJvb2xlYW47XHJcbiAgbWFzc1JhbmdlOiBSYW5nZVN0YXRlT2JqZWN0O1xyXG4gIG1hc3NSb3VuZDogbnVtYmVyO1xyXG4gIGRpYW1ldGVyUmFuZ2U6IFJhbmdlU3RhdGVPYmplY3Q7XHJcbiAgZGlhbWV0ZXJSb3VuZDogbnVtYmVyO1xyXG4gIGRyYWdDb2VmZmljaWVudFJhbmdlOiBSYW5nZVN0YXRlT2JqZWN0O1xyXG59O1xyXG5cclxuY2xhc3MgUHJvamVjdGlsZU9iamVjdFR5cGUgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgfCBudWxsOyAvLyBuYW1lIG9mIHRoZSBvYmplY3QsIHN1Y2ggYXMgJ0dvbGYgYmFsbCcsIG9yIG51bGwgaWYgaXQgZG9lc24ndCBoYXZlIGEgbmFtZVxyXG4gIHB1YmxpYyBiZW5jaG1hcms6IHN0cmluZyB8IG51bGw7IC8vIGlkZW50aWZpZXIgb2YgdGhlIG9iamVjdCBiZW5jaG1hcmssIHN1Y2ggYXMgJ3RhbmtTaGVsbCcsIGFsc28gY29uc2lkZXJlZCBhICduYW1lJyBmb3IgaXQgbGlrZSBmb3IgVGFuZGVtcy4gbnVsbCBmb3Igc2NyZWVucyB3aXRoIG9ubHkgb25lIG9iamVjdCB0eXBlXHJcbiAgcHVibGljIHJvdGF0ZXM6IGJvb2xlYW47IC8vIHdoZXRoZXIgdGhlIG9iamVjdCByb3RhdGVzIG9yIGp1c3QgdHJhbnNsYXRlcyBpbiBhaXJcclxuICBwdWJsaWMgbWFzczogbnVtYmVyOyAvLyBpbiBrZ1xyXG4gIHB1YmxpYyBkaWFtZXRlcjogbnVtYmVyOyAvLyBpbiBtZXRlcnNcclxuICBwdWJsaWMgZHJhZ0NvZWZmaWNpZW50OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGluaXRpYWxNYXNzOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGluaXRpYWxEaWFtZXRlcjogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpbml0aWFsRHJhZ0NvZWZmaWNpZW50OiBudW1iZXI7XHJcbiAgcHVibGljIG1hc3NSYW5nZTogUmFuZ2U7XHJcbiAgcHVibGljIG1hc3NSb3VuZDogbnVtYmVyO1xyXG4gIHB1YmxpYyBkaWFtZXRlclJhbmdlOiBSYW5nZTtcclxuICBwdWJsaWMgZGlhbWV0ZXJSb3VuZDogbnVtYmVyO1xyXG4gIHB1YmxpYyBkcmFnQ29lZmZpY2llbnRSYW5nZTogUmFuZ2U7XHJcbiAgcHVibGljIHZpZXdDcmVhdGlvbkZ1bmN0aW9uOiBQcm9qZWN0aWxlT2JqZWN0Vmlld0NyZWF0b3IgfCBudWxsO1xyXG4gIHB1YmxpYyByZWFkb25seSBwcm9qZWN0aWxlT2JqZWN0VHlwZU9wdGlvbnM6IFByb2plY3RpbGVPYmplY3RUeXBlT3B0aW9ucztcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBuYW1lOiBzdHJpbmcgfCBudWxsLCBtYXNzOiBudW1iZXIsIGRpYW1ldGVyOiBudW1iZXIsIGRyYWdDb2VmZmljaWVudDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgYmVuY2htYXJrOiBzdHJpbmcgfCBudWxsLCByb3RhdGVzOiBib29sZWFuLCBwcm92aWRlZE9wdGlvbnM/OiBQcm9qZWN0aWxlT2JqZWN0VHlwZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQcm9qZWN0aWxlT2JqZWN0VHlwZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9PYmplY3RPcHRpb25zPigpKCB7XHJcbiAgICAgIG1hc3NSYW5nZTogbmV3IFJhbmdlKCAxLCAxMCApLFxyXG4gICAgICBtYXNzUm91bmQ6IDEsXHJcbiAgICAgIGRpYW1ldGVyUmFuZ2U6IG5ldyBSYW5nZSggMC4xLCAxICksXHJcbiAgICAgIGRpYW1ldGVyUm91bmQ6IDAuMSxcclxuXHJcbiAgICAgIC8vIG1vc3Qgb2JqZWN0VHlwZXMgaGF2ZSBhIG1heCBvZiAxXHJcbiAgICAgIGRyYWdDb2VmZmljaWVudFJhbmdlOiBuZXcgUmFuZ2UoIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUFJPSkVDVElMRV9EUkFHX0NPRUZGSUNJRU5UX1JBTkdFLm1pbiwgMSApLFxyXG4gICAgICB2aWV3Q3JlYXRpb25GdW5jdGlvbjogbnVsbCxcclxuICAgICAgcGhldGlvVHlwZTogUHJvamVjdGlsZU9iamVjdFR5cGUuUHJvamVjdGlsZU9iamVjdFR5cGVJT1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnByb2plY3RpbGVPYmplY3RUeXBlT3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuYmVuY2htYXJrID0gYmVuY2htYXJrO1xyXG4gICAgdGhpcy5yb3RhdGVzID0gcm90YXRlcztcclxuXHJcbiAgICAvLyB3cml0YWJsZSBvbiB0aGUgbGFiIHNjcmVlblxyXG4gICAgdGhpcy5tYXNzID0gbWFzcztcclxuICAgIHRoaXMuZGlhbWV0ZXIgPSBkaWFtZXRlcjtcclxuICAgIHRoaXMuZHJhZ0NvZWZmaWNpZW50ID0gZHJhZ0NvZWZmaWNpZW50O1xyXG5cclxuICAgIC8vIHRoZXNlIG11dGFibGUgdmFsdWVzIGFsc28gc3RvcmUgdGhlaXIgaW5pdGlhbCB2YWx1ZXNcclxuICAgIHRoaXMuaW5pdGlhbE1hc3MgPSBtYXNzO1xyXG4gICAgdGhpcy5pbml0aWFsRGlhbWV0ZXIgPSBkaWFtZXRlcjtcclxuICAgIHRoaXMuaW5pdGlhbERyYWdDb2VmZmljaWVudCA9IGRyYWdDb2VmZmljaWVudDtcclxuXHJcbiAgICB0aGlzLm1hc3NSYW5nZSA9IG9wdGlvbnMubWFzc1JhbmdlO1xyXG4gICAgdGhpcy5tYXNzUm91bmQgPSBvcHRpb25zLm1hc3NSb3VuZDtcclxuICAgIHRoaXMuZGlhbWV0ZXJSYW5nZSA9IG9wdGlvbnMuZGlhbWV0ZXJSYW5nZTtcclxuICAgIHRoaXMuZGlhbWV0ZXJSb3VuZCA9IG9wdGlvbnMuZGlhbWV0ZXJSb3VuZDtcclxuICAgIHRoaXMuZHJhZ0NvZWZmaWNpZW50UmFuZ2UgPSBvcHRpb25zLmRyYWdDb2VmZmljaWVudFJhbmdlO1xyXG4gICAgdGhpcy52aWV3Q3JlYXRpb25GdW5jdGlvbiA9IG9wdGlvbnMudmlld0NyZWF0aW9uRnVuY3Rpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9TdGF0ZU9iamVjdCgpOiBQcm9qZWN0aWxlT2JqZWN0VHlwZVN0YXRlT2JqZWN0IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IE51bGxhYmxlSU8oIFN0cmluZ0lPICkudG9TdGF0ZU9iamVjdCggdGhpcy5uYW1lICksXHJcbiAgICAgIG1hc3M6IHRoaXMubWFzcyxcclxuICAgICAgZGlhbWV0ZXI6IHRoaXMuZGlhbWV0ZXIsXHJcbiAgICAgIGRyYWdDb2VmZmljaWVudDogdGhpcy5kcmFnQ29lZmZpY2llbnQsXHJcbiAgICAgIGJlbmNobWFyazogTnVsbGFibGVJTyggU3RyaW5nSU8gKS50b1N0YXRlT2JqZWN0KCB0aGlzLmJlbmNobWFyayApLFxyXG4gICAgICByb3RhdGVzOiB0aGlzLnJvdGF0ZXMsXHJcbiAgICAgIG1hc3NSYW5nZTogUmFuZ2UuUmFuZ2VJTy50b1N0YXRlT2JqZWN0KCB0aGlzLm1hc3NSYW5nZSApLFxyXG4gICAgICBtYXNzUm91bmQ6IHRoaXMubWFzc1JvdW5kLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBSYW5nZS5SYW5nZUlPLnRvU3RhdGVPYmplY3QoIHRoaXMuZGlhbWV0ZXJSYW5nZSApLFxyXG4gICAgICBkaWFtZXRlclJvdW5kOiB0aGlzLmRpYW1ldGVyUm91bmQsXHJcbiAgICAgIGRyYWdDb2VmZmljaWVudFJhbmdlOiBSYW5nZS5SYW5nZUlPLnRvU3RhdGVPYmplY3QoIHRoaXMuZHJhZ0NvZWZmaWNpZW50UmFuZ2UgKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IFNUQVRFX1NDSEVNQSgpOiBDb21wb3NpdGVTY2hlbWEge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogTnVsbGFibGVJTyggU3RyaW5nSU8gKSxcclxuICAgICAgbWFzczogTnVtYmVySU8sXHJcbiAgICAgIGRpYW1ldGVyOiBOdW1iZXJJTyxcclxuICAgICAgZHJhZ0NvZWZmaWNpZW50OiBOdW1iZXJJTyxcclxuICAgICAgYmVuY2htYXJrOiBOdWxsYWJsZUlPKCBTdHJpbmdJTyApLFxyXG4gICAgICByb3RhdGVzOiBCb29sZWFuSU8sXHJcbiAgICAgIG1hc3NSYW5nZTogUmFuZ2UuUmFuZ2VJTyxcclxuICAgICAgbWFzc1JvdW5kOiBOdW1iZXJJTyxcclxuICAgICAgZGlhbWV0ZXJSYW5nZTogUmFuZ2UuUmFuZ2VJTyxcclxuICAgICAgZGlhbWV0ZXJSb3VuZDogTnVtYmVySU8sXHJcbiAgICAgIGRyYWdDb2VmZmljaWVudFJhbmdlOiBSYW5nZS5SYW5nZUlPXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhcHBseVN0YXRlKCBzdGF0ZU9iamVjdDogUHJvamVjdGlsZU9iamVjdFR5cGVTdGF0ZU9iamVjdCApOiB2b2lkIHtcclxuICAgIHRoaXMubmFtZSA9IE51bGxhYmxlSU8oIFN0cmluZ0lPICkuZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdC5uYW1lICk7XHJcbiAgICB0aGlzLm1hc3MgPSBzdGF0ZU9iamVjdC5tYXNzO1xyXG4gICAgdGhpcy5kaWFtZXRlciA9IHN0YXRlT2JqZWN0LmRpYW1ldGVyO1xyXG4gICAgdGhpcy5kcmFnQ29lZmZpY2llbnQgPSBzdGF0ZU9iamVjdC5kcmFnQ29lZmZpY2llbnQ7XHJcbiAgICB0aGlzLmJlbmNobWFyayA9IE51bGxhYmxlSU8oIFN0cmluZ0lPICkuZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdC5iZW5jaG1hcmsgKTtcclxuICAgIHRoaXMucm90YXRlcyA9IHN0YXRlT2JqZWN0LnJvdGF0ZXM7XHJcbiAgICB0aGlzLm1hc3NSYW5nZSA9IFJhbmdlLlJhbmdlSU8uZnJvbVN0YXRlT2JqZWN0KCBzdGF0ZU9iamVjdC5tYXNzUmFuZ2UgKTtcclxuICAgIHRoaXMubWFzc1JvdW5kID0gc3RhdGVPYmplY3QubWFzc1JvdW5kO1xyXG4gICAgdGhpcy5kaWFtZXRlclJhbmdlID0gUmFuZ2UuUmFuZ2VJTy5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0LmRpYW1ldGVyUmFuZ2UgKTtcclxuICAgIHRoaXMuZGlhbWV0ZXJSb3VuZCA9IHN0YXRlT2JqZWN0LmRpYW1ldGVyUm91bmQ7XHJcbiAgICB0aGlzLmRyYWdDb2VmZmljaWVudFJhbmdlID0gUmFuZ2UuUmFuZ2VJTy5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0LmRyYWdDb2VmZmljaWVudFJhbmdlICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFByb2plY3RpbGVPYmplY3RUeXBlSU8gPSBuZXcgSU9UeXBlKCAnUHJvamVjdGlsZU9iamVjdFR5cGVJTycsIHtcclxuICAgIHZhbHVlVHlwZTogUHJvamVjdGlsZU9iamVjdFR5cGUsXHJcbiAgICB0b1N0YXRlT2JqZWN0OiBwcm9qZWN0aWxlT2JqZWN0VHlwZSA9PiBwcm9qZWN0aWxlT2JqZWN0VHlwZS50b1N0YXRlT2JqZWN0KCksXHJcbiAgICBhcHBseVN0YXRlOiAoIHByb2plY3RpbGVPYmplY3RUeXBlLCBzdGF0ZU9iamVjdCApID0+IHByb2plY3RpbGVPYmplY3RUeXBlLmFwcGx5U3RhdGUoIHN0YXRlT2JqZWN0ICksXHJcbiAgICBzdGF0ZVNjaGVtYTogUHJvamVjdGlsZU9iamVjdFR5cGUuU1RBVEVfU0NIRU1BLFxyXG4gICAgZG9jdW1lbnRhdGlvbjogJ0EgZGF0YSB0eXBlIHRoYXQgc3RvcmVzIHRoZSB2YXJpYWJsZXMgZm9yIGEgZ2l2ZW4gb2JqZWN0IHR5cGUuJ1xyXG4gIH0gKTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTcGVjaWZpYyBwcm9qZWN0aWxlIG9iamVjdHMgYmVsb3cgLi4uXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBTk5PTkJBTEwgPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBjYW5ub25iYWxsU3RyaW5nLFxyXG4gICAgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5DQU5OT05CQUxMX01BU1MsXHJcbiAgICBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLkNBTk5PTkJBTExfRElBTUVURVIsXHJcbiAgICBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLkNBTk5PTkJBTExfRFJBR19DT0VGRklDSUVOVCxcclxuICAgICdjYW5ub25iYWxsJyxcclxuICAgIGZhbHNlLCB7XHJcbiAgICAgIG1hc3NSYW5nZTogbmV3IFJhbmdlKCAxLCAzMS4wMCApLFxyXG4gICAgICBtYXNzUm91bmQ6IDAuMDEsXHJcbiAgICAgIGRpYW1ldGVyUmFuZ2U6IG5ldyBSYW5nZSggMC4xLCAxICksXHJcbiAgICAgIGRpYW1ldGVyUm91bmQ6IDAuMDEsXHJcbiAgICAgIHZpZXdDcmVhdGlvbkZ1bmN0aW9uOiBQcm9qZWN0aWxlT2JqZWN0Vmlld0ZhY3RvcnkuY3JlYXRlQ2Fubm9uYmFsbCxcclxuICAgICAgdGFuZGVtOiBvYmplY3RUeXBlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdjYW5ub25iYWxsJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQVU1QS0lOID0gbmV3IFByb2plY3RpbGVPYmplY3RUeXBlKFxyXG4gICAgcHVtcGtpblN0cmluZyxcclxuICAgIDUsXHJcbiAgICAwLjM3LFxyXG4gICAgMC42LFxyXG4gICAgJ3B1bXBraW4nLFxyXG4gICAgZmFsc2UsIHtcclxuICAgICAgbWFzc1JhbmdlOiBuZXcgUmFuZ2UoIDEsIDEwMDAgKSxcclxuICAgICAgbWFzc1JvdW5kOiAxLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBuZXcgUmFuZ2UoIDAuMSwgMyApLFxyXG4gICAgICBkaWFtZXRlclJvdW5kOiAwLjAxLFxyXG4gICAgICB2aWV3Q3JlYXRpb25GdW5jdGlvbjogUHJvamVjdGlsZU9iamVjdFZpZXdGYWN0b3J5LmNyZWF0ZVB1bXBraW4sXHJcbiAgICAgIHRhbmRlbTogb2JqZWN0VHlwZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAncHVtcGtpbicgKVxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQkFTRUJBTEwgPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBiYXNlYmFsbFN0cmluZyxcclxuICAgIDAuMTUsXHJcbiAgICAwLjA3LFxyXG4gICAgMC4zNSxcclxuICAgICdiYXNlYmFsbCcsXHJcbiAgICBmYWxzZSwge1xyXG4gICAgICBtYXNzUmFuZ2U6IG5ldyBSYW5nZSggMC4wMSwgNSApLFxyXG4gICAgICBtYXNzUm91bmQ6IDAuMDEsXHJcbiAgICAgIGRpYW1ldGVyUmFuZ2U6IG5ldyBSYW5nZSggMC4wMSwgMSApLFxyXG4gICAgICBkaWFtZXRlclJvdW5kOiAwLjAxLFxyXG4gICAgICB2aWV3Q3JlYXRpb25GdW5jdGlvbjogUHJvamVjdGlsZU9iamVjdFZpZXdGYWN0b3J5LmNyZWF0ZUJhc2ViYWxsLFxyXG4gICAgICB0YW5kZW06IG9iamVjdFR5cGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2Jhc2ViYWxsJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDQVIgPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBjYXJTdHJpbmcsXHJcbiAgICAyMDAwLFxyXG4gICAgMixcclxuICAgIDAuNTUsXHJcbiAgICAnY2FyJyxcclxuICAgIHRydWUsIHtcclxuICAgICAgbWFzc1JhbmdlOiBuZXcgUmFuZ2UoIDEwMCwgNTAwMCApLFxyXG4gICAgICBtYXNzUm91bmQ6IDEsXHJcbiAgICAgIGRpYW1ldGVyUmFuZ2U6IG5ldyBSYW5nZSggMC41LCAzICksXHJcbiAgICAgIGRpYW1ldGVyUm91bmQ6IDAuMSxcclxuICAgICAgdmlld0NyZWF0aW9uRnVuY3Rpb246IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5jcmVhdGVDYXIsXHJcbiAgICAgIHRhbmRlbTogb2JqZWN0VHlwZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAnY2FyJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBGT09UQkFMTCA9IG5ldyBQcm9qZWN0aWxlT2JqZWN0VHlwZShcclxuICAgIGZvb3RiYWxsU3RyaW5nLFxyXG4gICAgMC40MSxcclxuICAgIDAuMTcsXHJcbiAgICAwLjA1LFxyXG4gICAgJ2Zvb3RiYWxsJyxcclxuICAgIHRydWUsIHtcclxuICAgICAgbWFzc1JhbmdlOiBuZXcgUmFuZ2UoIDAuMDEsIDUgKSxcclxuICAgICAgbWFzc1JvdW5kOiAwLjAxLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBuZXcgUmFuZ2UoIDAuMDEsIDEgKSxcclxuICAgICAgZGlhbWV0ZXJSb3VuZDogMC4wMSxcclxuICAgICAgdmlld0NyZWF0aW9uRnVuY3Rpb246IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5jcmVhdGVGb290YmFsbCxcclxuICAgICAgdGFuZGVtOiBvYmplY3RUeXBlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdmb290YmFsbCcgKVxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSFVNQU4gPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBodW1hblN0cmluZyxcclxuICAgIDcwLFxyXG4gICAgMC41LFxyXG4gICAgMC42LFxyXG4gICAgJ2h1bWFuJyxcclxuICAgIHRydWUsIHtcclxuICAgICAgbWFzc1JhbmdlOiBuZXcgUmFuZ2UoIDEwLCAyMDAgKSxcclxuICAgICAgbWFzc1JvdW5kOiAxLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBuZXcgUmFuZ2UoIDAuMSwgMS41ICksXHJcbiAgICAgIGRpYW1ldGVyUm91bmQ6IDAuMSxcclxuICAgICAgdmlld0NyZWF0aW9uRnVuY3Rpb246IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5jcmVhdGVIdW1hbixcclxuICAgICAgdGFuZGVtOiBvYmplY3RUeXBlc1RhbmRlbS5jcmVhdGVUYW5kZW0oICdodW1hbicgKVxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUElBTk8gPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBwaWFub1N0cmluZyxcclxuICAgIDQwMCxcclxuICAgIDIuMixcclxuICAgIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUFJPSkVDVElMRV9EUkFHX0NPRUZGSUNJRU5UX1JBTkdFLm1heCxcclxuICAgICdwaWFubycsXHJcbiAgICBmYWxzZSwge1xyXG4gICAgICBtYXNzUmFuZ2U6IG5ldyBSYW5nZSggNTAsIDEwMDAgKSxcclxuICAgICAgbWFzc1JvdW5kOiAxLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBuZXcgUmFuZ2UoIDAuNSwgMyApLFxyXG4gICAgICBkaWFtZXRlclJvdW5kOiAwLjEsXHJcblxyXG4gICAgICAvLyB0aGUgcGlhbm8gY2FuIGFjY2VwdCBhbGwgZHJhZyBjb2VmZmljaWVudCByYW5nZXNcclxuICAgICAgZHJhZ0NvZWZmaWNpZW50UmFuZ2U6IFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUFJPSkVDVElMRV9EUkFHX0NPRUZGSUNJRU5UX1JBTkdFLFxyXG4gICAgICB2aWV3Q3JlYXRpb25GdW5jdGlvbjogUHJvamVjdGlsZU9iamVjdFZpZXdGYWN0b3J5LmNyZWF0ZVBpYW5vLFxyXG4gICAgICB0YW5kZW06IG9iamVjdFR5cGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BpYW5vJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBHT0xGX0JBTEwgPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBnb2xmQmFsbFN0cmluZyxcclxuICAgIDAuMDUsXHJcbiAgICAwLjA0LFxyXG4gICAgMC4yNSxcclxuICAgICdnb2xmQmFsbCcsXHJcbiAgICBmYWxzZSwge1xyXG4gICAgICBtYXNzUmFuZ2U6IG5ldyBSYW5nZSggMC4wMSwgNSApLFxyXG4gICAgICBtYXNzUm91bmQ6IDAuMDEsXHJcbiAgICAgIGRpYW1ldGVyUmFuZ2U6IG5ldyBSYW5nZSggMC4wMSwgMSApLFxyXG4gICAgICBkaWFtZXRlclJvdW5kOiAwLjAxLFxyXG4gICAgICB2aWV3Q3JlYXRpb25GdW5jdGlvbjogUHJvamVjdGlsZU9iamVjdFZpZXdGYWN0b3J5LmNyZWF0ZUdvbGZCYWxsLFxyXG4gICAgICB0YW5kZW06IG9iamVjdFR5cGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2dvbGZCYWxsJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBUQU5LX1NIRUxMID0gbmV3IFByb2plY3RpbGVPYmplY3RUeXBlKFxyXG4gICAgdGFua1NoZWxsU3RyaW5nLFxyXG4gICAgNDIsXHJcbiAgICAwLjE1LFxyXG4gICAgMC4wNixcclxuICAgICd0YW5rU2hlbGwnLFxyXG4gICAgdHJ1ZSwge1xyXG4gICAgICBtYXNzUmFuZ2U6IG5ldyBSYW5nZSggNSwgMjAwICksXHJcbiAgICAgIG1hc3NSb3VuZDogMSxcclxuICAgICAgZGlhbWV0ZXJSYW5nZTogbmV3IFJhbmdlKCAwLjEsIDEgKSxcclxuICAgICAgZGlhbWV0ZXJSb3VuZDogMC4wMSxcclxuICAgICAgdmlld0NyZWF0aW9uRnVuY3Rpb246IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5jcmVhdGVUYW5rU2hlbGwsXHJcbiAgICAgIHRhbmRlbTogb2JqZWN0VHlwZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAndGFua1NoZWxsJyApXHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDVVNUT00gPSBuZXcgUHJvamVjdGlsZU9iamVjdFR5cGUoXHJcbiAgICBjdXN0b21TdHJpbmcsXHJcbiAgICAxMDAsXHJcbiAgICAxLFxyXG4gICAgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5DQU5OT05CQUxMX0RSQUdfQ09FRkZJQ0lFTlQsXHJcbiAgICAnY3VzdG9tJyxcclxuICAgIHRydWUsIHtcclxuICAgICAgbWFzc1JhbmdlOiBuZXcgUmFuZ2UoIDEsIDUwMDAgKSxcclxuICAgICAgbWFzc1JvdW5kOiAwLjAxLFxyXG4gICAgICBkaWFtZXRlclJhbmdlOiBuZXcgUmFuZ2UoIDAuMDEsIDMgKSxcclxuICAgICAgZGlhbWV0ZXJSb3VuZDogMC4wMSxcclxuICAgICAgZHJhZ0NvZWZmaWNpZW50UmFuZ2U6IG5ldyBSYW5nZSggMC4wNCwgMSApLFxyXG4gICAgICB0YW5kZW06IG9iamVjdFR5cGVzVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2N1c3RvbScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ0EgY3VzdG9tIHByb2plY3RpbGUgdHlwZSB0aGF0IGNhbiBoYXZlIGl0cyB2YWx1ZXMgZWRpdGVkIGJ5IHRoZSB1c2VyJ1xyXG4gICAgfVxyXG4gICk7XHJcblxyXG4vLyBNZWFudCB0byBiZSB1c2VkIG9uIHNjcmVlbnMgdGhhdCBkb24ndCBoYXZlIG9iamVjdCB0eXBlIHNlbGVjdGlvbiwgYW5kIG9ubHkgdXNlIGEgc2luZ2xlIG9iamVjdCB0eXBlXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDT01QQU5JT05MRVNTID0gbmV3IFByb2plY3RpbGVPYmplY3RUeXBlKFxyXG4gICAgbnVsbCxcclxuICAgIDUsXHJcbiAgICAwLjgsXHJcbiAgICBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLkNBTk5PTkJBTExfRFJBR19DT0VGRklDSUVOVCxcclxuICAgIG51bGwsXHJcbiAgICB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogb2JqZWN0VHlwZXNUYW5kZW0uY3JlYXRlVGFuZGVtKCAnZ2VuZXJpY09iamVjdFR5cGUnICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdPbiBzb21lIHNjcmVlbnMgdGhlcmUgYXJlIG9ubHkgYSBzaW5nbGUsIGdlbmVyYWwgcHJvamVjdGlsZSBvYmplY3QgdHlwZS4gSXQgY2Fubm90IGJlICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmdlZCB0byBhIGRpZmZlcmVudCBvYmplY3QgdHlwZSwgYnV0IGNhbiBiZSBhbHRlcmVkIHZpYSBQcm9wZXJ0aWVzIGluIHRoZSBtb2RlbC4nXHJcbiAgICB9XHJcbiAgKTtcclxufVxyXG5cclxucHJvamVjdGlsZU1vdGlvbi5yZWdpc3RlciggJ1Byb2plY3RpbGVPYmplY3RUeXBlJywgUHJvamVjdGlsZU9iamVjdFR5cGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2plY3RpbGVPYmplY3RUeXBlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBNEIsNkJBQTZCO0FBQ3JFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFJN0QsT0FBT0MsWUFBWSxNQUErQix1Q0FBdUM7QUFDekYsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyxTQUFTLE1BQU0sMENBQTBDO0FBQ2hFLE9BQU9DLE1BQU0sTUFBTSx1Q0FBdUM7QUFDMUQsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FB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