// Copyright 2017-2023, University of Colorado Boulder

/**
 * View Properties that are specific to visibility of vectors
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import projectileMotion from '../../projectileMotion.js';
class ProjectileMotionViewProperties {
  // whether total velocity vector is showing
  // whether component velocity vectors are showing
  // whether total acceleration vector is shown
  // whether component acceleration vectors are showing
  // whether total force vector is showing
  // whether component force vectors are showing
  constructor(providedOptions) {
    const options = optionize()({
      tandem: Tandem.OPTIONAL,
      forceProperties: true,
      accelerationProperties: true
    }, providedOptions);
    this.forceProperties = options.forceProperties;
    this.accelerationProperties = options.accelerationProperties;
    this.totalVelocityVectorOnProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('totalVelocityVectorOnProperty'),
      phetioDocumentation: 'Whether to display the total velocity vectors for flying projectiles'
    });
    this.componentsVelocityVectorsOnProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('componentsVelocityVectorsOnProperty'),
      phetioDocumentation: 'Whether to display the component velocity vectors for flying projectiles'
    });
    if (options.accelerationProperties) {
      this.totalAccelerationVectorOnProperty = new BooleanProperty(false, {
        tandem: options.tandem.createTandem('totalAccelerationVectorOnProperty'),
        phetioDocumentation: 'Whether to display the total acceleration vectors for flying projectiles'
      });
      this.componentsAccelerationVectorsOnProperty = new BooleanProperty(false, {
        tandem: options.tandem.createTandem('componentsAccelerationVectorsOnProperty'),
        phetioDocumentation: 'Whether to display the component acceleration vectors for flying projectiles'
      });
    }
    if (options.forceProperties) {
      this.totalForceVectorOnProperty = new BooleanProperty(false, {
        tandem: options.tandem.createTandem('totalForceVectorOnProperty'),
        phetioDocumentation: 'Whether to display the total force vectors in a free body diagram for flying projectiles'
      });
      this.componentsForceVectorsOnProperty = new BooleanProperty(false, {
        tandem: options.tandem.createTandem('componentsForceVectorsOnProperty'),
        phetioDocumentation: 'Whether to display the component force vectors in a free body diagram for flying projectiles'
      });
    }
  }
  reset() {
    this.totalVelocityVectorOnProperty.reset();
    this.componentsVelocityVectorsOnProperty.reset();
    if (this.accelerationProperties) {
      assert && assert(this.totalAccelerationVectorOnProperty, 'If accelerationProperties is true, totalAccelerationVectorOnProperty must be set');
      this.totalAccelerationVectorOnProperty.reset();
      assert && assert(this.componentsAccelerationVectorsOnProperty, 'If accelerationProperties is true, componentsAccelerationVectorsOnProperty must be set');
      this.componentsAccelerationVectorsOnProperty.reset();
    }
    if (this.forceProperties) {
      assert && assert(this.totalForceVectorOnProperty, 'If forceProperties is true, totalForceVectorOnProperty must be set');
      this.totalForceVectorOnProperty.reset();
      assert && assert(this.componentsForceVectorsOnProperty, 'If forceProperties is true, componentsForceVectorsOnProperty must be set');
      this.componentsForceVectorsOnProperty.reset();
    }
  }
}
projectileMotion.register('ProjectileMotionViewProperties', ProjectileMotionViewProperties);
export default ProjectileMotionViewProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,