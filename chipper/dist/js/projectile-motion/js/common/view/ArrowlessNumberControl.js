// Copyright 2019-2023, University of Colorado Boulder

/**
 * A specific NumberControl for this sim that doesn't have tweaker buttons.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import { Text } from '../../../../scenery/js/imports.js';
import projectileMotion from '../../projectileMotion.js';
import ProjectileMotionStrings from '../../ProjectileMotionStrings.js';
import ProjectileMotionConstants from '../ProjectileMotionConstants.js';
const pattern0Value1UnitsWithSpaceString = ProjectileMotionStrings.pattern0Value1UnitsWithSpace;
class ArrowlessNumberControl extends NumberControl {
  /**
   * Auxiliary function that creates a NumberControl
   * @param labelString - label for the parameter
   * @param unitsString - units
   * @param valueProperty - the Property that is set and linked to
   * @param range - range for the valueProperty value
   * @param round - for minor ticks
   */
  constructor(labelString, unitsString, valueProperty, range, round, providedOptions) {
    // options used to compute other option values
    const initialOptions = optionize()({
      containerWidth: 200,
      numberDisplayMaxWidth: 50,
      // this is a separate option as it is used to compute other components' maxWidth.
      xMargin: 8
    }, providedOptions);

    // compute maxWidth for subcomponents
    const titleMaxWidth = initialOptions.containerWidth - 3 * initialOptions.xMargin - initialOptions.numberDisplayMaxWidth;

    // now specify the rest of the options
    const options = optionize()({
      titleNodeOptions: combineOptions({}, ProjectileMotionConstants.PANEL_LABEL_OPTIONS, {
        maxWidth: titleMaxWidth
      }),
      numberDisplayOptions: combineOptions({}, ProjectileMotionConstants.NUMBER_DISPLAY_OPTIONS, {
        valuePattern: StringUtils.fillIn(pattern0Value1UnitsWithSpaceString, {
          units: unitsString
        }),
        decimalPlaces: null,
        maxWidth: initialOptions.numberDisplayMaxWidth
      }),
      sliderOptions: {
        constrainValue: value => Utils.roundToInterval(value, round),
        // two decimal place accuracy
        majorTickLength: 12,
        minorTickLength: 5,
        minorTickSpacing: round,
        tickLabelSpacing: 2,
        trackSize: new Dimension2(initialOptions.containerWidth - 2 * initialOptions.xMargin - 30, 0.5),
        thumbSize: new Dimension2(13, 22),
        thumbTouchAreaXDilation: 6,
        thumbTouchAreaYDilation: 4,
        // smaller to prevent overlap with above number spinner buttons
        majorTicks: [{
          value: range.min,
          label: new Text(range.min, ProjectileMotionConstants.PANEL_LABEL_OPTIONS)
        }, {
          value: range.max,
          label: new Text(range.max, ProjectileMotionConstants.PANEL_LABEL_OPTIONS)
        }]
      },
      includeArrowButtons: false,
      layoutFunction: NumberControl.createLayoutFunction4({
        sliderPadding: initialOptions.xMargin / 2
      })
    }, initialOptions);
    super(labelString, valueProperty, range, options);
  }
}
projectileMotion.register('ArrowlessNumberControl', ArrowlessNumberControl);
export default ArrowlessNumberControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVXRpbHMiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlN0cmluZ1V0aWxzIiwiTnVtYmVyQ29udHJvbCIsIlRleHQiLCJwcm9qZWN0aWxlTW90aW9uIiwiUHJvamVjdGlsZU1vdGlvblN0cmluZ3MiLCJQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzIiwicGF0dGVybjBWYWx1ZTFVbml0c1dpdGhTcGFjZVN0cmluZyIsInBhdHRlcm4wVmFsdWUxVW5pdHNXaXRoU3BhY2UiLCJBcnJvd2xlc3NOdW1iZXJDb250cm9sIiwiY29uc3RydWN0b3IiLCJsYWJlbFN0cmluZyIsInVuaXRzU3RyaW5nIiwidmFsdWVQcm9wZXJ0eSIsInJhbmdlIiwicm91bmQiLCJwcm92aWRlZE9wdGlvbnMiLCJpbml0aWFsT3B0aW9ucyIsImNvbnRhaW5lcldpZHRoIiwibnVtYmVyRGlzcGxheU1heFdpZHRoIiwieE1hcmdpbiIsInRpdGxlTWF4V2lkdGgiLCJvcHRpb25zIiwidGl0bGVOb2RlT3B0aW9ucyIsIlBBTkVMX0xBQkVMX09QVElPTlMiLCJtYXhXaWR0aCIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwiTlVNQkVSX0RJU1BMQVlfT1BUSU9OUyIsInZhbHVlUGF0dGVybiIsImZpbGxJbiIsInVuaXRzIiwiZGVjaW1hbFBsYWNlcyIsInNsaWRlck9wdGlvbnMiLCJjb25zdHJhaW5WYWx1ZSIsInZhbHVlIiwicm91bmRUb0ludGVydmFsIiwibWFqb3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrU3BhY2luZyIsInRpY2tMYWJlbFNwYWNpbmciLCJ0cmFja1NpemUiLCJ0aHVtYlNpemUiLCJ0aHVtYlRvdWNoQXJlYVhEaWxhdGlvbiIsInRodW1iVG91Y2hBcmVhWURpbGF0aW9uIiwibWFqb3JUaWNrcyIsIm1pbiIsImxhYmVsIiwibWF4IiwiaW5jbHVkZUFycm93QnV0dG9ucyIsImxheW91dEZ1bmN0aW9uIiwiY3JlYXRlTGF5b3V0RnVuY3Rpb240Iiwic2xpZGVyUGFkZGluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXJyb3dsZXNzTnVtYmVyQ29udHJvbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHNwZWNpZmljIE51bWJlckNvbnRyb2wgZm9yIHRoaXMgc2ltIHRoYXQgZG9lc24ndCBoYXZlIHR3ZWFrZXIgYnV0dG9ucy5cclxuICpcclxuICogQGF1dGhvciBBbmRyZWEgTGluIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy91dGlsL1N0cmluZ1V0aWxzLmpzJztcclxuaW1wb3J0IE51bWJlckNvbnRyb2wsIHsgTnVtYmVyQ29udHJvbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTnVtYmVyQ29udHJvbC5qcyc7XHJcbmltcG9ydCB7IE51bWJlckRpc3BsYXlPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL051bWJlckRpc3BsYXkuanMnO1xyXG5pbXBvcnQgeyBUZXh0LCBUZXh0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uLy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblN0cmluZ3MgZnJvbSAnLi4vLi4vUHJvamVjdGlsZU1vdGlvblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cywgeyBQcm9qZWN0aWxlTW90aW9uVUlPcHRpb25zIH0gZnJvbSAnLi4vUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5qcyc7XHJcblxyXG5jb25zdCBwYXR0ZXJuMFZhbHVlMVVuaXRzV2l0aFNwYWNlU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MucGF0dGVybjBWYWx1ZTFVbml0c1dpdGhTcGFjZTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgY29udGFpbmVyV2lkdGg/OiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIEFycm93bGVzc051bWJlckNvbnRyb2xPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQcm9qZWN0aWxlTW90aW9uVUlPcHRpb25zO1xyXG5cclxuY2xhc3MgQXJyb3dsZXNzTnVtYmVyQ29udHJvbCBleHRlbmRzIE51bWJlckNvbnRyb2wge1xyXG5cclxuICAvKipcclxuICAgKiBBdXhpbGlhcnkgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgTnVtYmVyQ29udHJvbFxyXG4gICAqIEBwYXJhbSBsYWJlbFN0cmluZyAtIGxhYmVsIGZvciB0aGUgcGFyYW1ldGVyXHJcbiAgICogQHBhcmFtIHVuaXRzU3RyaW5nIC0gdW5pdHNcclxuICAgKiBAcGFyYW0gdmFsdWVQcm9wZXJ0eSAtIHRoZSBQcm9wZXJ0eSB0aGF0IGlzIHNldCBhbmQgbGlua2VkIHRvXHJcbiAgICogQHBhcmFtIHJhbmdlIC0gcmFuZ2UgZm9yIHRoZSB2YWx1ZVByb3BlcnR5IHZhbHVlXHJcbiAgICogQHBhcmFtIHJvdW5kIC0gZm9yIG1pbm9yIHRpY2tzXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsYWJlbFN0cmluZzogc3RyaW5nLCB1bml0c1N0cmluZzogc3RyaW5nLCB2YWx1ZVByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXI+LCByYW5nZTogUmFuZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICByb3VuZDogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBBcnJvd2xlc3NOdW1iZXJDb250cm9sT3B0aW9ucyApIHtcclxuICAgIC8vIG9wdGlvbnMgdXNlZCB0byBjb21wdXRlIG90aGVyIG9wdGlvbiB2YWx1ZXNcclxuICAgIGNvbnN0IGluaXRpYWxPcHRpb25zID0gb3B0aW9uaXplPEFycm93bGVzc051bWJlckNvbnRyb2xPcHRpb25zLCBTZWxmT3B0aW9ucywgUHJvamVjdGlsZU1vdGlvblVJT3B0aW9ucz4oKSgge1xyXG4gICAgICBjb250YWluZXJXaWR0aDogMjAwLFxyXG4gICAgICBudW1iZXJEaXNwbGF5TWF4V2lkdGg6IDUwLCAvLyB0aGlzIGlzIGEgc2VwYXJhdGUgb3B0aW9uIGFzIGl0IGlzIHVzZWQgdG8gY29tcHV0ZSBvdGhlciBjb21wb25lbnRzJyBtYXhXaWR0aC5cclxuICAgICAgeE1hcmdpbjogOFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gY29tcHV0ZSBtYXhXaWR0aCBmb3Igc3ViY29tcG9uZW50c1xyXG4gICAgY29uc3QgdGl0bGVNYXhXaWR0aCA9IGluaXRpYWxPcHRpb25zLmNvbnRhaW5lcldpZHRoIC0gMyAqIGluaXRpYWxPcHRpb25zLnhNYXJnaW4gLSBpbml0aWFsT3B0aW9ucy5udW1iZXJEaXNwbGF5TWF4V2lkdGg7XHJcblxyXG4gICAgLy8gbm93IHNwZWNpZnkgdGhlIHJlc3Qgb2YgdGhlIG9wdGlvbnNcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QXJyb3dsZXNzTnVtYmVyQ29udHJvbE9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMsIE51bWJlckNvbnRyb2xPcHRpb25zPigpKCB7XHJcbiAgICAgIHRpdGxlTm9kZU9wdGlvbnM6IGNvbWJpbmVPcHRpb25zPFRleHRPcHRpb25zPigge30sIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUEFORUxfTEFCRUxfT1BUSU9OUywge1xyXG4gICAgICAgIG1heFdpZHRoOiB0aXRsZU1heFdpZHRoXHJcbiAgICAgIH0gKSxcclxuICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IGNvbWJpbmVPcHRpb25zPE51bWJlckRpc3BsYXlPcHRpb25zPigge30sIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuTlVNQkVSX0RJU1BMQVlfT1BUSU9OUywge1xyXG4gICAgICAgIHZhbHVlUGF0dGVybjogU3RyaW5nVXRpbHMuZmlsbEluKCBwYXR0ZXJuMFZhbHVlMVVuaXRzV2l0aFNwYWNlU3RyaW5nLCB7IHVuaXRzOiB1bml0c1N0cmluZyB9ICksXHJcbiAgICAgICAgZGVjaW1hbFBsYWNlczogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogaW5pdGlhbE9wdGlvbnMubnVtYmVyRGlzcGxheU1heFdpZHRoXHJcbiAgICAgIH0gKSxcclxuICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCByb3VuZCApLCAvLyB0d28gZGVjaW1hbCBwbGFjZSBhY2N1cmFjeVxyXG4gICAgICAgIG1ham9yVGlja0xlbmd0aDogMTIsXHJcbiAgICAgICAgbWlub3JUaWNrTGVuZ3RoOiA1LFxyXG4gICAgICAgIG1pbm9yVGlja1NwYWNpbmc6IHJvdW5kLFxyXG4gICAgICAgIHRpY2tMYWJlbFNwYWNpbmc6IDIsXHJcbiAgICAgICAgdHJhY2tTaXplOiBuZXcgRGltZW5zaW9uMiggaW5pdGlhbE9wdGlvbnMuY29udGFpbmVyV2lkdGggLSAyICogaW5pdGlhbE9wdGlvbnMueE1hcmdpbiAtIDMwLCAwLjUgKSxcclxuICAgICAgICB0aHVtYlNpemU6IG5ldyBEaW1lbnNpb24yKCAxMywgMjIgKSxcclxuICAgICAgICB0aHVtYlRvdWNoQXJlYVhEaWxhdGlvbjogNixcclxuICAgICAgICB0aHVtYlRvdWNoQXJlYVlEaWxhdGlvbjogNCwgLy8gc21hbGxlciB0byBwcmV2ZW50IG92ZXJsYXAgd2l0aCBhYm92ZSBudW1iZXIgc3Bpbm5lciBidXR0b25zXHJcbiAgICAgICAgbWFqb3JUaWNrczogW1xyXG4gICAgICAgICAgeyB2YWx1ZTogcmFuZ2UubWluLCBsYWJlbDogbmV3IFRleHQoIHJhbmdlLm1pbiwgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5QQU5FTF9MQUJFTF9PUFRJT05TICkgfSxcclxuICAgICAgICAgIHsgdmFsdWU6IHJhbmdlLm1heCwgbGFiZWw6IG5ldyBUZXh0KCByYW5nZS5tYXgsIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUEFORUxfTEFCRUxfT1BUSU9OUyApIH1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIGluY2x1ZGVBcnJvd0J1dHRvbnM6IGZhbHNlLFxyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogTnVtYmVyQ29udHJvbC5jcmVhdGVMYXlvdXRGdW5jdGlvbjQoIHtcclxuICAgICAgICBzbGlkZXJQYWRkaW5nOiBpbml0aWFsT3B0aW9ucy54TWFyZ2luIC8gMlxyXG4gICAgICB9IClcclxuICAgIH0sIGluaXRpYWxPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGxhYmVsU3RyaW5nLCB2YWx1ZVByb3BlcnR5LCByYW5nZSwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucHJvamVjdGlsZU1vdGlvbi5yZWdpc3RlciggJ0Fycm93bGVzc051bWJlckNvbnRyb2wnLCBBcnJvd2xlc3NOdW1iZXJDb250cm9sICk7XHJcbmV4cG9ydCBkZWZhdWx0IEFycm93bGVzc051bWJlckNvbnRyb2w7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsVUFBVSxNQUFNLGtDQUFrQztBQUV6RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUEwQix1Q0FBdUM7QUFDbkcsT0FBT0MsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyxhQUFhLE1BQWdDLDhDQUE4QztBQUVsRyxTQUFTQyxJQUFJLFFBQXFCLG1DQUFtQztBQUNyRSxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBQ3RFLE9BQU9DLHlCQUF5QixNQUFxQyxpQ0FBaUM7QUFFdEcsTUFBTUMsa0NBQWtDLEdBQUdGLHVCQUF1QixDQUFDRyw0QkFBNEI7QUFRL0YsTUFBTUMsc0JBQXNCLFNBQVNQLGFBQWEsQ0FBQztFQUVqRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NRLFdBQVdBLENBQUVDLFdBQW1CLEVBQUVDLFdBQW1CLEVBQUVDLGFBQStCLEVBQUVDLEtBQVksRUFDdkZDLEtBQWEsRUFBRUMsZUFBK0MsRUFBRztJQUNuRjtJQUNBLE1BQU1DLGNBQWMsR0FBR2xCLFNBQVMsQ0FBd0UsQ0FBQyxDQUFFO01BQ3pHbUIsY0FBYyxFQUFFLEdBQUc7TUFDbkJDLHFCQUFxQixFQUFFLEVBQUU7TUFBRTtNQUMzQkMsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxFQUFFSixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1LLGFBQWEsR0FBR0osY0FBYyxDQUFDQyxjQUFjLEdBQUcsQ0FBQyxHQUFHRCxjQUFjLENBQUNHLE9BQU8sR0FBR0gsY0FBYyxDQUFDRSxxQkFBcUI7O0lBRXZIO0lBQ0EsTUFBTUcsT0FBTyxHQUFHdkIsU0FBUyxDQUF3RSxDQUFDLENBQUU7TUFDbEd3QixnQkFBZ0IsRUFBRXZCLGNBQWMsQ0FBZSxDQUFDLENBQUMsRUFBRU0seUJBQXlCLENBQUNrQixtQkFBbUIsRUFBRTtRQUNoR0MsUUFBUSxFQUFFSjtNQUNaLENBQUUsQ0FBQztNQUNISyxvQkFBb0IsRUFBRTFCLGNBQWMsQ0FBd0IsQ0FBQyxDQUFDLEVBQUVNLHlCQUF5QixDQUFDcUIsc0JBQXNCLEVBQUU7UUFDaEhDLFlBQVksRUFBRTNCLFdBQVcsQ0FBQzRCLE1BQU0sQ0FBRXRCLGtDQUFrQyxFQUFFO1VBQUV1QixLQUFLLEVBQUVsQjtRQUFZLENBQUUsQ0FBQztRQUM5Rm1CLGFBQWEsRUFBRSxJQUFJO1FBQ25CTixRQUFRLEVBQUVSLGNBQWMsQ0FBQ0U7TUFDM0IsQ0FBRSxDQUFDO01BQ0hhLGFBQWEsRUFBRTtRQUNiQyxjQUFjLEVBQUVDLEtBQUssSUFBSXBDLEtBQUssQ0FBQ3FDLGVBQWUsQ0FBRUQsS0FBSyxFQUFFbkIsS0FBTSxDQUFDO1FBQUU7UUFDaEVxQixlQUFlLEVBQUUsRUFBRTtRQUNuQkMsZUFBZSxFQUFFLENBQUM7UUFDbEJDLGdCQUFnQixFQUFFdkIsS0FBSztRQUN2QndCLGdCQUFnQixFQUFFLENBQUM7UUFDbkJDLFNBQVMsRUFBRSxJQUFJM0MsVUFBVSxDQUFFb0IsY0FBYyxDQUFDQyxjQUFjLEdBQUcsQ0FBQyxHQUFHRCxjQUFjLENBQUNHLE9BQU8sR0FBRyxFQUFFLEVBQUUsR0FBSSxDQUFDO1FBQ2pHcUIsU0FBUyxFQUFFLElBQUk1QyxVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUcsQ0FBQztRQUNuQzZDLHVCQUF1QixFQUFFLENBQUM7UUFDMUJDLHVCQUF1QixFQUFFLENBQUM7UUFBRTtRQUM1QkMsVUFBVSxFQUFFLENBQ1Y7VUFBRVYsS0FBSyxFQUFFcEIsS0FBSyxDQUFDK0IsR0FBRztVQUFFQyxLQUFLLEVBQUUsSUFBSTNDLElBQUksQ0FBRVcsS0FBSyxDQUFDK0IsR0FBRyxFQUFFdkMseUJBQXlCLENBQUNrQixtQkFBb0I7UUFBRSxDQUFDLEVBQ2pHO1VBQUVVLEtBQUssRUFBRXBCLEtBQUssQ0FBQ2lDLEdBQUc7VUFBRUQsS0FBSyxFQUFFLElBQUkzQyxJQUFJLENBQUVXLEtBQUssQ0FBQ2lDLEdBQUcsRUFBRXpDLHlCQUF5QixDQUFDa0IsbUJBQW9CO1FBQUUsQ0FBQztNQUVyRyxDQUFDO01BQ0R3QixtQkFBbUIsRUFBRSxLQUFLO01BQzFCQyxjQUFjLEVBQUUvQyxhQUFhLENBQUNnRCxxQkFBcUIsQ0FBRTtRQUNuREMsYUFBYSxFQUFFbEMsY0FBYyxDQUFDRyxPQUFPLEdBQUc7TUFDMUMsQ0FBRTtJQUNKLENBQUMsRUFBRUgsY0FBZSxDQUFDO0lBRW5CLEtBQUssQ0FBRU4sV0FBVyxFQUFFRSxhQUFhLEVBQUVDLEtBQUssRUFBRVEsT0FBUSxDQUFDO0VBQ3JEO0FBQ0Y7QUFFQWxCLGdCQUFnQixDQUFDZ0QsUUFBUSxDQUFFLHdCQUF3QixFQUFFM0Msc0JBQXVCLENBQUM7QUFDN0UsZUFBZUEsc0JBQXNCIn0=