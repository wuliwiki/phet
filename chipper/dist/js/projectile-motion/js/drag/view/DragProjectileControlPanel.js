// Copyright 2016-2022, University of Colorado Boulder

/**
 * Control panel that allows users to alter properties of the projectile fired.
 * Also includes a slider for changing altitude, which changes air density.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import NumberControl from '../../../../scenery-phet/js/NumberControl.js';
import { HBox, HStrut, Node, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import ProjectileMotionConstants from '../../common/ProjectileMotionConstants.js';
import ArrowlessNumberControl from '../../common/view/ArrowlessNumberControl.js';
import ProjectileObjectViewFactory from '../../common/view/ProjectileObjectViewFactory.js';
import projectileMotion from '../../projectileMotion.js';
import ProjectileMotionStrings from '../../ProjectileMotionStrings.js';
const altitudeString = ProjectileMotionStrings.altitude;
const diameterString = ProjectileMotionStrings.diameter;
const dragCoefficientString = ProjectileMotionStrings.dragCoefficient;
const kgString = ProjectileMotionStrings.kg;
const massString = ProjectileMotionStrings.mass;
const mString = ProjectileMotionStrings.m;
const pattern0Value1UnitsWithSpaceString = ProjectileMotionStrings.pattern0Value1UnitsWithSpace;

// constants
const DRAG_OBJECT_DISPLAY_DIAMETER = 24;
const DRAG_OBJECT_MAX_WIDTH = 70; // empirically determined to account for the largest width of dragObjectDisplay
const TEXT_FONT = ProjectileMotionConstants.PANEL_LABEL_OPTIONS.font;
const READOUT_X_MARGIN = ProjectileMotionConstants.RIGHTSIDE_PANEL_OPTIONS.readoutXMargin;
class DragProjectileControlPanel extends Panel {
  /**
   * @param {Property.<ProjectileObjectType>} selectedObjectTypeProperty
   * @param {Property.<number>} projectileDragCoefficientProperty
   * @param {Property.<number>} projectileDiameterProperty
   * @param {Property.<number>} projectileMassProperty
   * @param {Property.<number>} altitudeProperty
   * @param {Object} [options]
   */
  constructor(selectedObjectTypeProperty, projectileDragCoefficientProperty, projectileDiameterProperty, projectileMassProperty, altitudeProperty, options) {
    // The first object is a placeholder so none of the others get mutated
    // The second object is the default, in the constants files
    // The third object is options specific to this panel, which overrides the defaults
    // The fourth object is options given at time of construction, which overrides all the others
    options = merge({}, ProjectileMotionConstants.RIGHTSIDE_PANEL_OPTIONS, {
      tandem: Tandem.REQUIRED
    }, options);
    const diameterNumberControl = new ArrowlessNumberControl(diameterString, mString, projectileDiameterProperty, selectedObjectTypeProperty.get().diameterRange, selectedObjectTypeProperty.get().diameterRound, {
      containerWidth: options.minWidth,
      xMargin: options.xMargin,
      numberDisplayMaxWidth: options.numberDisplayMaxWidth,
      tandem: options.tandem.createTandem('diameterNumberControl'),
      phetioDocumentation: 'UI control to adjust the diameter of the projectile'
    });
    const massNumberControl = new ArrowlessNumberControl(massString, kgString, projectileMassProperty, selectedObjectTypeProperty.get().massRange, selectedObjectTypeProperty.get().massRound, {
      containerWidth: options.minWidth,
      xMargin: options.xMargin,
      numberDisplayMaxWidth: options.numberDisplayMaxWidth,
      tandem: options.tandem.createTandem('massNumberControl'),
      phetioDocumentation: 'UI control to adjust the mass of the projectile'
    });
    const defaultNumberControlOptions = {
      numberDisplayOptions: {
        align: 'right',
        maxWidth: options.numberDisplayMaxWidth + options.readoutXMargin * 2,
        xMargin: READOUT_X_MARGIN,
        yMargin: 4,
        textOptions: {
          font: TEXT_FONT
        }
      },
      titleNodeOptions: {
        font: TEXT_FONT,
        maxWidth: options.minWidth - options.numberDisplayMaxWidth - 3 * options.readoutXMargin - 2 * options.xMargin
      },
      sliderOptions: {
        trackSize: new Dimension2(options.minWidth - 2 * options.xMargin - 80, 0.5),
        thumbSize: new Dimension2(13, 22),
        thumbTouchAreaXDilation: 6,
        thumbTouchAreaYDilation: 4
      },
      arrowButtonOptions: {
        scale: 0.56,
        touchAreaXDilation: 20,
        touchAreaYDilation: 20
      }
    };

    // create altitude number control
    const altitudeBox = new NumberControl(altitudeString, altitudeProperty, ProjectileMotionConstants.ALTITUDE_RANGE, merge({}, defaultNumberControlOptions, {
      numberDisplayOptions: {
        // results in '{{value}} m'
        valuePattern: StringUtils.fillIn(pattern0Value1UnitsWithSpaceString, {
          units: mString
        }),
        xMargin: 8
      },
      sliderOptions: {
        constrainValue: value => Utils.roundToInterval(value, 100)
      },
      delta: 100,
      layoutFunction: NumberControl.createLayoutFunction4({
        arrowButtonSpacing: 10
      }),
      tandem: options.tandem.createTandem('altitudeNumberControl'),
      phetioDocumentation: 'UI control to adjust the altitude of position where the projectile is being launched'
    }));
    const dragObjectDisplay = new Node({
      tandem: options.tandem.createTandem('dragObjectDisplay'),
      phetioDocumentation: 'the icon that changes shape as the drag coefficient changes value'
    });
    dragObjectDisplay.addChild(new HStrut(DRAG_OBJECT_DISPLAY_DIAMETER)); // min size

    // layout function for drag coefficient NumberControl. This is needed to add the icon in
    const dragLayoutFunction = (titleNode, numberDisplay, slider, leftArrowButton, rightArrowButton) => {
      const strut = new HStrut(DRAG_OBJECT_MAX_WIDTH); //
      const displayBox = new VBox({
        align: 'center',
        children: [strut, dragObjectDisplay]
      });
      const displayAndValueBox = new HBox({
        spacing: options.xMargin,
        children: [displayBox, numberDisplay]
      });
      return NumberControl.createLayoutFunction4({
        arrowButtonSpacing: 10
      })(titleNode, displayAndValueBox, slider, leftArrowButton, rightArrowButton);
    };

    // create drag coefficient control box
    const dragCoefficientBox = new NumberControl(dragCoefficientString, projectileDragCoefficientProperty, selectedObjectTypeProperty.get().dragCoefficientRange, merge({}, defaultNumberControlOptions, {
      titleNodeOptions: {
        // whole panel, take away margins, take away numberDisplay, take away drag icon
        maxWidth: options.minWidth - 2 * options.xMargin - options.numberDisplayMaxWidth - options.readoutXMargin - DRAG_OBJECT_MAX_WIDTH
      },
      numberDisplayOptions: {
        constrainValue: value => Utils.roundToInterval(value, 0.01),
        decimalPlaces: 2
      },
      delta: 0.01,
      layoutFunction: dragLayoutFunction,
      tandem: options.tandem.createTandem('dragCoefficientNumberControl'),
      phetioDocumentation: 'UI control to adjust the drag coefficient of the projectile'
    }));

    // Listen to changes in model drag coefficient and update the little projectile object display
    projectileDragCoefficientProperty.link(dragCoefficient => {
      if (dragObjectDisplay.children.length > 1) {
        dragObjectDisplay.removeChildAt(1);
      }
      const objectView = ProjectileObjectViewFactory.createCustom(DRAG_OBJECT_DISPLAY_DIAMETER, dragCoefficient);
      objectView.center = dragObjectDisplay.center;
      dragObjectDisplay.addChild(objectView);
    });

    // The contents of the control panel
    const content = new VBox({
      align: 'left',
      spacing: options.controlsVerticalSpace,
      children: [dragCoefficientBox, diameterNumberControl, massNumberControl, altitudeBox]
    });
    super(content, options);
  }
}
projectileMotion.register('DragProjectileControlPanel', DragProjectileControlPanel);
export default DragProjectileControlPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVXRpbHMiLCJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiTnVtYmVyQ29udHJvbCIsIkhCb3giLCJIU3RydXQiLCJOb2RlIiwiVkJveCIsIlBhbmVsIiwiVGFuZGVtIiwiUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyIsIkFycm93bGVzc051bWJlckNvbnRyb2wiLCJQcm9qZWN0aWxlT2JqZWN0Vmlld0ZhY3RvcnkiLCJwcm9qZWN0aWxlTW90aW9uIiwiUHJvamVjdGlsZU1vdGlvblN0cmluZ3MiLCJhbHRpdHVkZVN0cmluZyIsImFsdGl0dWRlIiwiZGlhbWV0ZXJTdHJpbmciLCJkaWFtZXRlciIsImRyYWdDb2VmZmljaWVudFN0cmluZyIsImRyYWdDb2VmZmljaWVudCIsImtnU3RyaW5nIiwia2ciLCJtYXNzU3RyaW5nIiwibWFzcyIsIm1TdHJpbmciLCJtIiwicGF0dGVybjBWYWx1ZTFVbml0c1dpdGhTcGFjZVN0cmluZyIsInBhdHRlcm4wVmFsdWUxVW5pdHNXaXRoU3BhY2UiLCJEUkFHX09CSkVDVF9ESVNQTEFZX0RJQU1FVEVSIiwiRFJBR19PQkpFQ1RfTUFYX1dJRFRIIiwiVEVYVF9GT05UIiwiUEFORUxfTEFCRUxfT1BUSU9OUyIsImZvbnQiLCJSRUFET1VUX1hfTUFSR0lOIiwiUklHSFRTSURFX1BBTkVMX09QVElPTlMiLCJyZWFkb3V0WE1hcmdpbiIsIkRyYWdQcm9qZWN0aWxlQ29udHJvbFBhbmVsIiwiY29uc3RydWN0b3IiLCJzZWxlY3RlZE9iamVjdFR5cGVQcm9wZXJ0eSIsInByb2plY3RpbGVEcmFnQ29lZmZpY2llbnRQcm9wZXJ0eSIsInByb2plY3RpbGVEaWFtZXRlclByb3BlcnR5IiwicHJvamVjdGlsZU1hc3NQcm9wZXJ0eSIsImFsdGl0dWRlUHJvcGVydHkiLCJvcHRpb25zIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJkaWFtZXRlck51bWJlckNvbnRyb2wiLCJnZXQiLCJkaWFtZXRlclJhbmdlIiwiZGlhbWV0ZXJSb3VuZCIsImNvbnRhaW5lcldpZHRoIiwibWluV2lkdGgiLCJ4TWFyZ2luIiwibnVtYmVyRGlzcGxheU1heFdpZHRoIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsIm1hc3NOdW1iZXJDb250cm9sIiwibWFzc1JhbmdlIiwibWFzc1JvdW5kIiwiZGVmYXVsdE51bWJlckNvbnRyb2xPcHRpb25zIiwibnVtYmVyRGlzcGxheU9wdGlvbnMiLCJhbGlnbiIsIm1heFdpZHRoIiwieU1hcmdpbiIsInRleHRPcHRpb25zIiwidGl0bGVOb2RlT3B0aW9ucyIsInNsaWRlck9wdGlvbnMiLCJ0cmFja1NpemUiLCJ0aHVtYlNpemUiLCJ0aHVtYlRvdWNoQXJlYVhEaWxhdGlvbiIsInRodW1iVG91Y2hBcmVhWURpbGF0aW9uIiwiYXJyb3dCdXR0b25PcHRpb25zIiwic2NhbGUiLCJ0b3VjaEFyZWFYRGlsYXRpb24iLCJ0b3VjaEFyZWFZRGlsYXRpb24iLCJhbHRpdHVkZUJveCIsIkFMVElUVURFX1JBTkdFIiwidmFsdWVQYXR0ZXJuIiwiZmlsbEluIiwidW5pdHMiLCJjb25zdHJhaW5WYWx1ZSIsInZhbHVlIiwicm91bmRUb0ludGVydmFsIiwiZGVsdGEiLCJsYXlvdXRGdW5jdGlvbiIsImNyZWF0ZUxheW91dEZ1bmN0aW9uNCIsImFycm93QnV0dG9uU3BhY2luZyIsImRyYWdPYmplY3REaXNwbGF5IiwiYWRkQ2hpbGQiLCJkcmFnTGF5b3V0RnVuY3Rpb24iLCJ0aXRsZU5vZGUiLCJudW1iZXJEaXNwbGF5Iiwic2xpZGVyIiwibGVmdEFycm93QnV0dG9uIiwicmlnaHRBcnJvd0J1dHRvbiIsInN0cnV0IiwiZGlzcGxheUJveCIsImNoaWxkcmVuIiwiZGlzcGxheUFuZFZhbHVlQm94Iiwic3BhY2luZyIsImRyYWdDb2VmZmljaWVudEJveCIsImRyYWdDb2VmZmljaWVudFJhbmdlIiwiZGVjaW1hbFBsYWNlcyIsImxpbmsiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZEF0Iiwib2JqZWN0VmlldyIsImNyZWF0ZUN1c3RvbSIsImNlbnRlciIsImNvbnRlbnQiLCJjb250cm9sc1ZlcnRpY2FsU3BhY2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkRyYWdQcm9qZWN0aWxlQ29udHJvbFBhbmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgdGhhdCBhbGxvd3MgdXNlcnMgdG8gYWx0ZXIgcHJvcGVydGllcyBvZiB0aGUgcHJvamVjdGlsZSBmaXJlZC5cclxuICogQWxzbyBpbmNsdWRlcyBhIHNsaWRlciBmb3IgY2hhbmdpbmcgYWx0aXR1ZGUsIHdoaWNoIGNoYW5nZXMgYWlyIGRlbnNpdHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJDb250cm9sLmpzJztcclxuaW1wb3J0IHsgSEJveCwgSFN0cnV0LCBOb2RlLCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9Qcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEFycm93bGVzc051bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvQXJyb3dsZXNzTnVtYmVyQ29udHJvbC5qcyc7XHJcbmltcG9ydCBQcm9qZWN0aWxlT2JqZWN0Vmlld0ZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUHJvamVjdGlsZU9iamVjdFZpZXdGYWN0b3J5LmpzJztcclxuaW1wb3J0IHByb2plY3RpbGVNb3Rpb24gZnJvbSAnLi4vLi4vcHJvamVjdGlsZU1vdGlvbi5qcyc7XHJcbmltcG9ydCBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncyBmcm9tICcuLi8uLi9Qcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5qcyc7XHJcblxyXG5jb25zdCBhbHRpdHVkZVN0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLmFsdGl0dWRlO1xyXG5jb25zdCBkaWFtZXRlclN0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLmRpYW1ldGVyO1xyXG5jb25zdCBkcmFnQ29lZmZpY2llbnRTdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5kcmFnQ29lZmZpY2llbnQ7XHJcbmNvbnN0IGtnU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3Mua2c7XHJcbmNvbnN0IG1hc3NTdHJpbmcgPSBQcm9qZWN0aWxlTW90aW9uU3RyaW5ncy5tYXNzO1xyXG5jb25zdCBtU3RyaW5nID0gUHJvamVjdGlsZU1vdGlvblN0cmluZ3MubTtcclxuY29uc3QgcGF0dGVybjBWYWx1ZTFVbml0c1dpdGhTcGFjZVN0cmluZyA9IFByb2plY3RpbGVNb3Rpb25TdHJpbmdzLnBhdHRlcm4wVmFsdWUxVW5pdHNXaXRoU3BhY2U7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgRFJBR19PQkpFQ1RfRElTUExBWV9ESUFNRVRFUiA9IDI0O1xyXG5jb25zdCBEUkFHX09CSkVDVF9NQVhfV0lEVEggPSA3MDsgLy8gZW1waXJpY2FsbHkgZGV0ZXJtaW5lZCB0byBhY2NvdW50IGZvciB0aGUgbGFyZ2VzdCB3aWR0aCBvZiBkcmFnT2JqZWN0RGlzcGxheVxyXG5jb25zdCBURVhUX0ZPTlQgPSBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLlBBTkVMX0xBQkVMX09QVElPTlMuZm9udDtcclxuY29uc3QgUkVBRE9VVF9YX01BUkdJTiA9IFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuUklHSFRTSURFX1BBTkVMX09QVElPTlMucmVhZG91dFhNYXJnaW47XHJcblxyXG5jbGFzcyBEcmFnUHJvamVjdGlsZUNvbnRyb2xQYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48UHJvamVjdGlsZU9iamVjdFR5cGU+fSBzZWxlY3RlZE9iamVjdFR5cGVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IHByb2plY3RpbGVEcmFnQ29lZmZpY2llbnRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IHByb2plY3RpbGVEaWFtZXRlclByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48bnVtYmVyPn0gcHJvamVjdGlsZU1hc3NQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPG51bWJlcj59IGFsdGl0dWRlUHJvcGVydHlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHNlbGVjdGVkT2JqZWN0VHlwZVByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBwcm9qZWN0aWxlRHJhZ0NvZWZmaWNpZW50UHJvcGVydHksXHJcbiAgICAgICAgICAgICAgIHByb2plY3RpbGVEaWFtZXRlclByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBwcm9qZWN0aWxlTWFzc1Byb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBhbHRpdHVkZVByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICBvcHRpb25zICkge1xyXG5cclxuICAgIC8vIFRoZSBmaXJzdCBvYmplY3QgaXMgYSBwbGFjZWhvbGRlciBzbyBub25lIG9mIHRoZSBvdGhlcnMgZ2V0IG11dGF0ZWRcclxuICAgIC8vIFRoZSBzZWNvbmQgb2JqZWN0IGlzIHRoZSBkZWZhdWx0LCBpbiB0aGUgY29uc3RhbnRzIGZpbGVzXHJcbiAgICAvLyBUaGUgdGhpcmQgb2JqZWN0IGlzIG9wdGlvbnMgc3BlY2lmaWMgdG8gdGhpcyBwYW5lbCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0c1xyXG4gICAgLy8gVGhlIGZvdXJ0aCBvYmplY3QgaXMgb3B0aW9ucyBnaXZlbiBhdCB0aW1lIG9mIGNvbnN0cnVjdGlvbiwgd2hpY2ggb3ZlcnJpZGVzIGFsbCB0aGUgb3RoZXJzXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHt9LCBQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLlJJR0hUU0lERV9QQU5FTF9PUFRJT05TLCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVEXHJcbiAgICB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgZGlhbWV0ZXJOdW1iZXJDb250cm9sID0gbmV3IEFycm93bGVzc051bWJlckNvbnRyb2woXHJcbiAgICAgIGRpYW1ldGVyU3RyaW5nLFxyXG4gICAgICBtU3RyaW5nLFxyXG4gICAgICBwcm9qZWN0aWxlRGlhbWV0ZXJQcm9wZXJ0eSxcclxuICAgICAgc2VsZWN0ZWRPYmplY3RUeXBlUHJvcGVydHkuZ2V0KCkuZGlhbWV0ZXJSYW5nZSxcclxuICAgICAgc2VsZWN0ZWRPYmplY3RUeXBlUHJvcGVydHkuZ2V0KCkuZGlhbWV0ZXJSb3VuZCwge1xyXG4gICAgICAgIGNvbnRhaW5lcldpZHRoOiBvcHRpb25zLm1pbldpZHRoLFxyXG4gICAgICAgIHhNYXJnaW46IG9wdGlvbnMueE1hcmdpbixcclxuICAgICAgICBudW1iZXJEaXNwbGF5TWF4V2lkdGg6IG9wdGlvbnMubnVtYmVyRGlzcGxheU1heFdpZHRoLFxyXG4gICAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZGlhbWV0ZXJOdW1iZXJDb250cm9sJyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdVSSBjb250cm9sIHRvIGFkanVzdCB0aGUgZGlhbWV0ZXIgb2YgdGhlIHByb2plY3RpbGUnXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbWFzc051bWJlckNvbnRyb2wgPSBuZXcgQXJyb3dsZXNzTnVtYmVyQ29udHJvbChcclxuICAgICAgbWFzc1N0cmluZyxcclxuICAgICAga2dTdHJpbmcsXHJcbiAgICAgIHByb2plY3RpbGVNYXNzUHJvcGVydHksXHJcbiAgICAgIHNlbGVjdGVkT2JqZWN0VHlwZVByb3BlcnR5LmdldCgpLm1hc3NSYW5nZSxcclxuICAgICAgc2VsZWN0ZWRPYmplY3RUeXBlUHJvcGVydHkuZ2V0KCkubWFzc1JvdW5kLCB7XHJcbiAgICAgICAgY29udGFpbmVyV2lkdGg6IG9wdGlvbnMubWluV2lkdGgsXHJcbiAgICAgICAgeE1hcmdpbjogb3B0aW9ucy54TWFyZ2luLFxyXG4gICAgICAgIG51bWJlckRpc3BsYXlNYXhXaWR0aDogb3B0aW9ucy5udW1iZXJEaXNwbGF5TWF4V2lkdGgsXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdtYXNzTnVtYmVyQ29udHJvbCcgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVUkgY29udHJvbCB0byBhZGp1c3QgdGhlIG1hc3Mgb2YgdGhlIHByb2plY3RpbGUnXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdE51bWJlckNvbnRyb2xPcHRpb25zID0ge1xyXG4gICAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICAgIGFsaWduOiAncmlnaHQnLFxyXG4gICAgICAgIG1heFdpZHRoOiBvcHRpb25zLm51bWJlckRpc3BsYXlNYXhXaWR0aCArIG9wdGlvbnMucmVhZG91dFhNYXJnaW4gKiAyLFxyXG4gICAgICAgIHhNYXJnaW46IFJFQURPVVRfWF9NQVJHSU4sXHJcbiAgICAgICAgeU1hcmdpbjogNCxcclxuICAgICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgICAgZm9udDogVEVYVF9GT05UXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0aXRsZU5vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgZm9udDogVEVYVF9GT05ULFxyXG4gICAgICAgIG1heFdpZHRoOiBvcHRpb25zLm1pbldpZHRoIC0gb3B0aW9ucy5udW1iZXJEaXNwbGF5TWF4V2lkdGggLSAzICogb3B0aW9ucy5yZWFkb3V0WE1hcmdpbiAtIDIgKiBvcHRpb25zLnhNYXJnaW5cclxuICAgICAgfSxcclxuICAgICAgc2xpZGVyT3B0aW9uczoge1xyXG4gICAgICAgIHRyYWNrU2l6ZTogbmV3IERpbWVuc2lvbjIoIG9wdGlvbnMubWluV2lkdGggLSAyICogb3B0aW9ucy54TWFyZ2luIC0gODAsIDAuNSApLFxyXG4gICAgICAgIHRodW1iU2l6ZTogbmV3IERpbWVuc2lvbjIoIDEzLCAyMiApLFxyXG4gICAgICAgIHRodW1iVG91Y2hBcmVhWERpbGF0aW9uOiA2LFxyXG4gICAgICAgIHRodW1iVG91Y2hBcmVhWURpbGF0aW9uOiA0XHJcbiAgICAgIH0sXHJcbiAgICAgIGFycm93QnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHNjYWxlOiAwLjU2LFxyXG4gICAgICAgIHRvdWNoQXJlYVhEaWxhdGlvbjogMjAsXHJcbiAgICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiAyMFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhbHRpdHVkZSBudW1iZXIgY29udHJvbFxyXG4gICAgY29uc3QgYWx0aXR1ZGVCb3ggPSBuZXcgTnVtYmVyQ29udHJvbChcclxuICAgICAgYWx0aXR1ZGVTdHJpbmcsIGFsdGl0dWRlUHJvcGVydHksXHJcbiAgICAgIFByb2plY3RpbGVNb3Rpb25Db25zdGFudHMuQUxUSVRVREVfUkFOR0UsXHJcbiAgICAgIG1lcmdlKCB7fSwgZGVmYXVsdE51bWJlckNvbnRyb2xPcHRpb25zLCB7XHJcbiAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuXHJcbiAgICAgICAgICAvLyByZXN1bHRzIGluICd7e3ZhbHVlfX0gbSdcclxuICAgICAgICAgIHZhbHVlUGF0dGVybjogU3RyaW5nVXRpbHMuZmlsbEluKCBwYXR0ZXJuMFZhbHVlMVVuaXRzV2l0aFNwYWNlU3RyaW5nLCB7IHVuaXRzOiBtU3RyaW5nIH0gKSxcclxuICAgICAgICAgIHhNYXJnaW46IDhcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCAxMDAgKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsdGE6IDEwMCxcclxuICAgICAgICBsYXlvdXRGdW5jdGlvbjogTnVtYmVyQ29udHJvbC5jcmVhdGVMYXlvdXRGdW5jdGlvbjQoIHtcclxuICAgICAgICAgIGFycm93QnV0dG9uU3BhY2luZzogMTBcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhbHRpdHVkZU51bWJlckNvbnRyb2wnICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1VJIGNvbnRyb2wgdG8gYWRqdXN0IHRoZSBhbHRpdHVkZSBvZiBwb3NpdGlvbiB3aGVyZSB0aGUgcHJvamVjdGlsZSBpcyBiZWluZyBsYXVuY2hlZCdcclxuICAgICAgfSApXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGRyYWdPYmplY3REaXNwbGF5ID0gbmV3IE5vZGUoIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdkcmFnT2JqZWN0RGlzcGxheScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ3RoZSBpY29uIHRoYXQgY2hhbmdlcyBzaGFwZSBhcyB0aGUgZHJhZyBjb2VmZmljaWVudCBjaGFuZ2VzIHZhbHVlJ1xyXG4gICAgfSApO1xyXG4gICAgZHJhZ09iamVjdERpc3BsYXkuYWRkQ2hpbGQoIG5ldyBIU3RydXQoIERSQUdfT0JKRUNUX0RJU1BMQVlfRElBTUVURVIgKSApOyAvLyBtaW4gc2l6ZVxyXG5cclxuICAgIC8vIGxheW91dCBmdW5jdGlvbiBmb3IgZHJhZyBjb2VmZmljaWVudCBOdW1iZXJDb250cm9sLiBUaGlzIGlzIG5lZWRlZCB0byBhZGQgdGhlIGljb24gaW5cclxuICAgIGNvbnN0IGRyYWdMYXlvdXRGdW5jdGlvbiA9ICggdGl0bGVOb2RlLCBudW1iZXJEaXNwbGF5LCBzbGlkZXIsIGxlZnRBcnJvd0J1dHRvbiwgcmlnaHRBcnJvd0J1dHRvbiApID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IHN0cnV0ID0gbmV3IEhTdHJ1dCggRFJBR19PQkpFQ1RfTUFYX1dJRFRIICk7IC8vXHJcbiAgICAgIGNvbnN0IGRpc3BsYXlCb3ggPSBuZXcgVkJveCggeyBhbGlnbjogJ2NlbnRlcicsIGNoaWxkcmVuOiBbIHN0cnV0LCBkcmFnT2JqZWN0RGlzcGxheSBdIH0gKTtcclxuICAgICAgY29uc3QgZGlzcGxheUFuZFZhbHVlQm94ID0gbmV3IEhCb3goIHsgc3BhY2luZzogb3B0aW9ucy54TWFyZ2luLCBjaGlsZHJlbjogWyBkaXNwbGF5Qm94LCBudW1iZXJEaXNwbGF5IF0gfSApO1xyXG4gICAgICByZXR1cm4gTnVtYmVyQ29udHJvbC5jcmVhdGVMYXlvdXRGdW5jdGlvbjQoIHtcclxuICAgICAgICBhcnJvd0J1dHRvblNwYWNpbmc6IDEwXHJcbiAgICAgIH0gKSggdGl0bGVOb2RlLCBkaXNwbGF5QW5kVmFsdWVCb3gsIHNsaWRlciwgbGVmdEFycm93QnV0dG9uLCByaWdodEFycm93QnV0dG9uICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNyZWF0ZSBkcmFnIGNvZWZmaWNpZW50IGNvbnRyb2wgYm94XHJcbiAgICBjb25zdCBkcmFnQ29lZmZpY2llbnRCb3ggPSBuZXcgTnVtYmVyQ29udHJvbChcclxuICAgICAgZHJhZ0NvZWZmaWNpZW50U3RyaW5nLFxyXG4gICAgICBwcm9qZWN0aWxlRHJhZ0NvZWZmaWNpZW50UHJvcGVydHksXHJcbiAgICAgIHNlbGVjdGVkT2JqZWN0VHlwZVByb3BlcnR5LmdldCgpLmRyYWdDb2VmZmljaWVudFJhbmdlLFxyXG4gICAgICBtZXJnZSgge30sIGRlZmF1bHROdW1iZXJDb250cm9sT3B0aW9ucywge1xyXG4gICAgICAgIHRpdGxlTm9kZU9wdGlvbnM6IHtcclxuXHJcbiAgICAgICAgICAvLyB3aG9sZSBwYW5lbCwgdGFrZSBhd2F5IG1hcmdpbnMsIHRha2UgYXdheSBudW1iZXJEaXNwbGF5LCB0YWtlIGF3YXkgZHJhZyBpY29uXHJcbiAgICAgICAgICBtYXhXaWR0aDogb3B0aW9ucy5taW5XaWR0aCAtIDIgKiBvcHRpb25zLnhNYXJnaW4gLSBvcHRpb25zLm51bWJlckRpc3BsYXlNYXhXaWR0aCAtIG9wdGlvbnMucmVhZG91dFhNYXJnaW4gLVxyXG4gICAgICAgICAgICAgICAgICAgIERSQUdfT0JKRUNUX01BWF9XSURUSFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbnVtYmVyRGlzcGxheU9wdGlvbnM6IHtcclxuICAgICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFRvSW50ZXJ2YWwoIHZhbHVlLCAwLjAxICksXHJcbiAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVsdGE6IDAuMDEsXHJcbiAgICAgICAgbGF5b3V0RnVuY3Rpb246IGRyYWdMYXlvdXRGdW5jdGlvbixcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2RyYWdDb2VmZmljaWVudE51bWJlckNvbnRyb2wnICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1VJIGNvbnRyb2wgdG8gYWRqdXN0IHRoZSBkcmFnIGNvZWZmaWNpZW50IG9mIHRoZSBwcm9qZWN0aWxlJ1xyXG4gICAgICB9IClcclxuICAgICk7XHJcblxyXG4gICAgLy8gTGlzdGVuIHRvIGNoYW5nZXMgaW4gbW9kZWwgZHJhZyBjb2VmZmljaWVudCBhbmQgdXBkYXRlIHRoZSBsaXR0bGUgcHJvamVjdGlsZSBvYmplY3QgZGlzcGxheVxyXG4gICAgcHJvamVjdGlsZURyYWdDb2VmZmljaWVudFByb3BlcnR5LmxpbmsoIGRyYWdDb2VmZmljaWVudCA9PiB7XHJcbiAgICAgIGlmICggZHJhZ09iamVjdERpc3BsYXkuY2hpbGRyZW4ubGVuZ3RoID4gMSApIHtcclxuICAgICAgICBkcmFnT2JqZWN0RGlzcGxheS5yZW1vdmVDaGlsZEF0KCAxICk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgb2JqZWN0VmlldyA9IFByb2plY3RpbGVPYmplY3RWaWV3RmFjdG9yeS5jcmVhdGVDdXN0b20oIERSQUdfT0JKRUNUX0RJU1BMQVlfRElBTUVURVIsIGRyYWdDb2VmZmljaWVudCApO1xyXG4gICAgICBvYmplY3RWaWV3LmNlbnRlciA9IGRyYWdPYmplY3REaXNwbGF5LmNlbnRlcjtcclxuICAgICAgZHJhZ09iamVjdERpc3BsYXkuYWRkQ2hpbGQoIG9iamVjdFZpZXcgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBUaGUgY29udGVudHMgb2YgdGhlIGNvbnRyb2wgcGFuZWxcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBvcHRpb25zLmNvbnRyb2xzVmVydGljYWxTcGFjZSxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBkcmFnQ29lZmZpY2llbnRCb3gsXHJcbiAgICAgICAgZGlhbWV0ZXJOdW1iZXJDb250cm9sLFxyXG4gICAgICAgIG1hc3NOdW1iZXJDb250cm9sLFxyXG4gICAgICAgIGFsdGl0dWRlQm94XHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucHJvamVjdGlsZU1vdGlvbi5yZWdpc3RlciggJ0RyYWdQcm9qZWN0aWxlQ29udHJvbFBhbmVsJywgRHJhZ1Byb2plY3RpbGVDb250cm9sUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgRHJhZ1Byb2plY3RpbGVDb250cm9sUGFuZWw7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsYUFBYSxNQUFNLDhDQUE4QztBQUN4RSxTQUFTQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQzVFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsTUFBTSxNQUFNLGlDQUFpQztBQUNwRCxPQUFPQyx5QkFBeUIsTUFBTSwyQ0FBMkM7QUFDakYsT0FBT0Msc0JBQXNCLE1BQU0sNkNBQTZDO0FBQ2hGLE9BQU9DLDJCQUEyQixNQUFNLGtEQUFrRDtBQUMxRixPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0MsdUJBQXVCLE1BQU0sa0NBQWtDO0FBRXRFLE1BQU1DLGNBQWMsR0FBR0QsdUJBQXVCLENBQUNFLFFBQVE7QUFD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