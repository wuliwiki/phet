// Copyright 2013-2022, University of Colorado Boulder

/**
 * Solution shown in a beaker.
 * Assumes that the beaker is represented as a cylinder, with elliptical top and bottom.
 * Origin is at the upper-left corner of this cylinder.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import { Shape } from '../../../../kite/js/imports.js';
import { Circle, Color, Node, Path, Rectangle } from '../../../../scenery/js/imports.js';
import molarity from '../../molarity.js';

// constants
const DEBUG_ORIGIN = false;
class SolutionNode extends Node {
  /**
   * @param {Dimension2} cylinderSize
   * @param {number} cylinderEndHeight
   * @param {MacroSolution} solution
   * @param {number} maxVolume - liters
   * @param {Tandem} tandem
   */
  constructor(cylinderSize, cylinderEndHeight, solution, maxVolume, tandem) {
    super({
      pickable: false,
      tandem: tandem
    });

    // middle shape will change with volume
    const middleNode = new Rectangle(0, 0, 1, 1, {
      tandem: tandem.createTandem('middleNode')
    });
    const endShape = Shape.ellipse(cylinderSize.width / 2, 0, cylinderSize.width / 2, cylinderEndHeight / 2);
    const topNode = new Path(endShape, {
      lineWidth: 0.5,
      stroke: new Color(0, 0, 0, 85),
      tandem: tandem.createTandem('topNode')
    });
    const bottomNode = new Path(endShape, {
      tandem: tandem.createTandem('bottomNode')
    });
    this.addChild(bottomNode);
    this.addChild(middleNode);
    this.addChild(topNode);
    if (DEBUG_ORIGIN) {
      this.addChild(new Circle({
        radius: 3,
        fill: 'red'
      }));
    }

    // sync with model
    const updateColor = () => {
      const color = solution.getColor();
      topNode.fill = color;
      middleNode.fill = color;
      bottomNode.fill = color;
    };
    solution.concentrationProperty.link(updateColor);
    solution.soluteProperty.link(updateColor);
    const updateShape = () => {
      const height = Utils.linear(0, maxVolume, 0, cylinderSize.height, solution.volumeProperty.get());
      topNode.visible = bottomNode.visible = middleNode.visible = height > 0;
      if (height > 0) {
        middleNode.setRect(0, cylinderSize.height - height, cylinderSize.width, height);
        topNode.y = cylinderSize.height - height;
        bottomNode.y = cylinderSize.height;
      }
    };
    solution.volumeProperty.link(updateShape);
  }
}
molarity.register('SolutionNode', SolutionNode);
export default SolutionNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlNoYXBlIiwiQ2lyY2xlIiwiQ29sb3IiLCJOb2RlIiwiUGF0aCIsIlJlY3RhbmdsZSIsIm1vbGFyaXR5IiwiREVCVUdfT1JJR0lOIiwiU29sdXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJjeWxpbmRlclNpemUiLCJjeWxpbmRlckVuZEhlaWdodCIsInNvbHV0aW9uIiwibWF4Vm9sdW1lIiwidGFuZGVtIiwicGlja2FibGUiLCJtaWRkbGVOb2RlIiwiY3JlYXRlVGFuZGVtIiwiZW5kU2hhcGUiLCJlbGxpcHNlIiwid2lkdGgiLCJ0b3BOb2RlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiYm90dG9tTm9kZSIsImFkZENoaWxkIiwicmFkaXVzIiwiZmlsbCIsInVwZGF0ZUNvbG9yIiwiY29sb3IiLCJnZXRDb2xvciIsImNvbmNlbnRyYXRpb25Qcm9wZXJ0eSIsImxpbmsiLCJzb2x1dGVQcm9wZXJ0eSIsInVwZGF0ZVNoYXBlIiwiaGVpZ2h0IiwibGluZWFyIiwidm9sdW1lUHJvcGVydHkiLCJnZXQiLCJ2aXNpYmxlIiwic2V0UmVjdCIsInkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNvbHV0aW9uTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTb2x1dGlvbiBzaG93biBpbiBhIGJlYWtlci5cclxuICogQXNzdW1lcyB0aGF0IHRoZSBiZWFrZXIgaXMgcmVwcmVzZW50ZWQgYXMgYSBjeWxpbmRlciwgd2l0aCBlbGxpcHRpY2FsIHRvcCBhbmQgYm90dG9tLlxyXG4gKiBPcmlnaW4gaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoaXMgY3lsaW5kZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBDb2xvciwgTm9kZSwgUGF0aCwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vbGFyaXR5IGZyb20gJy4uLy4uL21vbGFyaXR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUJVR19PUklHSU4gPSBmYWxzZTtcclxuXHJcbmNsYXNzIFNvbHV0aW9uTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7RGltZW5zaW9uMn0gY3lsaW5kZXJTaXplXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGN5bGluZGVyRW5kSGVpZ2h0XHJcbiAgICogQHBhcmFtIHtNYWNyb1NvbHV0aW9ufSBzb2x1dGlvblxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhWb2x1bWUgLSBsaXRlcnNcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGN5bGluZGVyU2l6ZSwgY3lsaW5kZXJFbmRIZWlnaHQsIHNvbHV0aW9uLCBtYXhWb2x1bWUsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBwaWNrYWJsZTogZmFsc2UsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gbWlkZGxlIHNoYXBlIHdpbGwgY2hhbmdlIHdpdGggdm9sdW1lXHJcbiAgICBjb25zdCBtaWRkbGVOb2RlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMSwgMSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtaWRkbGVOb2RlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZW5kU2hhcGUgPSBTaGFwZS5lbGxpcHNlKCBjeWxpbmRlclNpemUud2lkdGggLyAyLCAwLCBjeWxpbmRlclNpemUud2lkdGggLyAyLCBjeWxpbmRlckVuZEhlaWdodCAvIDIgKTtcclxuXHJcbiAgICBjb25zdCB0b3BOb2RlID0gbmV3IFBhdGgoIGVuZFNoYXBlLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogMC41LFxyXG4gICAgICBzdHJva2U6IG5ldyBDb2xvciggMCwgMCwgMCwgODUgKSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndG9wTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGJvdHRvbU5vZGUgPSBuZXcgUGF0aCggZW5kU2hhcGUsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm90dG9tTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIGJvdHRvbU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG1pZGRsZU5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRvcE5vZGUgKTtcclxuXHJcbiAgICBpZiAoIERFQlVHX09SSUdJTiApIHtcclxuICAgICAgdGhpcy5hZGRDaGlsZCggbmV3IENpcmNsZSggeyByYWRpdXM6IDMsIGZpbGw6ICdyZWQnIH0gKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN5bmMgd2l0aCBtb2RlbFxyXG4gICAgY29uc3QgdXBkYXRlQ29sb3IgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbG9yID0gc29sdXRpb24uZ2V0Q29sb3IoKTtcclxuICAgICAgdG9wTm9kZS5maWxsID0gY29sb3I7XHJcbiAgICAgIG1pZGRsZU5vZGUuZmlsbCA9IGNvbG9yO1xyXG4gICAgICBib3R0b21Ob2RlLmZpbGwgPSBjb2xvcjtcclxuICAgIH07XHJcbiAgICBzb2x1dGlvbi5jb25jZW50cmF0aW9uUHJvcGVydHkubGluayggdXBkYXRlQ29sb3IgKTtcclxuICAgIHNvbHV0aW9uLnNvbHV0ZVByb3BlcnR5LmxpbmsoIHVwZGF0ZUNvbG9yICk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlU2hhcGUgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGhlaWdodCA9IFV0aWxzLmxpbmVhciggMCwgbWF4Vm9sdW1lLCAwLCBjeWxpbmRlclNpemUuaGVpZ2h0LCBzb2x1dGlvbi52b2x1bWVQcm9wZXJ0eS5nZXQoKSApO1xyXG4gICAgICB0b3BOb2RlLnZpc2libGUgPSBib3R0b21Ob2RlLnZpc2libGUgPSBtaWRkbGVOb2RlLnZpc2libGUgPSAoIGhlaWdodCA+IDAgKTtcclxuICAgICAgaWYgKCBoZWlnaHQgPiAwICkge1xyXG4gICAgICAgIG1pZGRsZU5vZGUuc2V0UmVjdCggMCwgY3lsaW5kZXJTaXplLmhlaWdodCAtIGhlaWdodCwgY3lsaW5kZXJTaXplLndpZHRoLCBoZWlnaHQgKTtcclxuICAgICAgICB0b3BOb2RlLnkgPSBjeWxpbmRlclNpemUuaGVpZ2h0IC0gaGVpZ2h0O1xyXG4gICAgICAgIGJvdHRvbU5vZGUueSA9IGN5bGluZGVyU2l6ZS5oZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBzb2x1dGlvbi52b2x1bWVQcm9wZXJ0eS5saW5rKCB1cGRhdGVTaGFwZSApO1xyXG4gIH1cclxufVxyXG5cclxubW9sYXJpdHkucmVnaXN0ZXIoICdTb2x1dGlvbk5vZGUnLCBTb2x1dGlvbk5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNvbHV0aW9uTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxTQUFTQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFDeEYsT0FBT0MsUUFBUSxNQUFNLG1CQUFtQjs7QUFFeEM7QUFDQSxNQUFNQyxZQUFZLEdBQUcsS0FBSztBQUUxQixNQUFNQyxZQUFZLFNBQVNMLElBQUksQ0FBQztFQUM5QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxZQUFZLEVBQUVDLGlCQUFpQixFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFHO0lBRTFFLEtBQUssQ0FBRTtNQUNMQyxRQUFRLEVBQUUsS0FBSztNQUNmRCxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUUsVUFBVSxHQUFHLElBQUlYLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDNUNTLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsWUFBYTtJQUM1QyxDQUFFLENBQUM7SUFFSCxNQUFNQyxRQUFRLEdBQUdsQixLQUFLLENBQUNtQixPQUFPLENBQUVULFlBQVksQ0FBQ1UsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVWLFlBQVksQ0FBQ1UsS0FBSyxHQUFHLENBQUMsRUFBRVQsaUJBQWlCLEdBQUcsQ0FBRSxDQUFDO0lBRTFHLE1BQU1VLE9BQU8sR0FBRyxJQUFJakIsSUFBSSxDQUFFYyxRQUFRLEVBQUU7TUFDbENJLFNBQVMsRUFBRSxHQUFHO01BQ2RDLE1BQU0sRUFBRSxJQUFJckIsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FBQztNQUNoQ1ksTUFBTSxFQUFFQSxNQUFNLENBQUNHLFlBQVksQ0FBRSxTQUFVO0lBQ3pDLENBQUUsQ0FBQztJQUVILE1BQU1PLFVBQVUsR0FBRyxJQUFJcEIsSUFBSSxDQUFFYyxRQUFRLEVBQUU7TUFDckNKLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsWUFBYTtJQUM1QyxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNRLFFBQVEsQ0FBRUQsVUFBVyxDQUFDO0lBQzNCLElBQUksQ0FBQ0MsUUFBUSxDQUFFVCxVQUFXLENBQUM7SUFDM0IsSUFBSSxDQUFDUyxRQUFRLENBQUVKLE9BQVEsQ0FBQztJQUV4QixJQUFLZCxZQUFZLEVBQUc7TUFDbEIsSUFBSSxDQUFDa0IsUUFBUSxDQUFFLElBQUl4QixNQUFNLENBQUU7UUFBRXlCLE1BQU0sRUFBRSxDQUFDO1FBQUVDLElBQUksRUFBRTtNQUFNLENBQUUsQ0FBRSxDQUFDO0lBQzNEOztJQUVBO0lBQ0EsTUFBTUMsV0FBVyxHQUFHQSxDQUFBLEtBQU07TUFDeEIsTUFBTUMsS0FBSyxHQUFHakIsUUFBUSxDQUFDa0IsUUFBUSxDQUFDLENBQUM7TUFDakNULE9BQU8sQ0FBQ00sSUFBSSxHQUFHRSxLQUFLO01BQ3BCYixVQUFVLENBQUNXLElBQUksR0FBR0UsS0FBSztNQUN2QkwsVUFBVSxDQUFDRyxJQUFJLEdBQUdFLEtBQUs7SUFDekIsQ0FBQztJQUNEakIsUUFBUSxDQUFDbUIscUJBQXFCLENBQUNDLElBQUksQ0FBRUosV0FBWSxDQUFDO0lBQ2xEaEIsUUFBUSxDQUFDcUIsY0FBYyxDQUFDRCxJQUFJLENBQUVKLFdBQVksQ0FBQztJQUUzQyxNQUFNTSxXQUFXLEdBQUdBLENBQUEsS0FBTTtNQUN4QixNQUFNQyxNQUFNLEdBQUdwQyxLQUFLLENBQUNxQyxNQUFNLENBQUUsQ0FBQyxFQUFFdkIsU0FBUyxFQUFFLENBQUMsRUFBRUgsWUFBWSxDQUFDeUIsTUFBTSxFQUFFdkIsUUFBUSxDQUFDeUIsY0FBYyxDQUFDQyxHQUFHLENBQUMsQ0FBRSxDQUFDO01BQ2xHakIsT0FBTyxDQUFDa0IsT0FBTyxHQUFHZixVQUFVLENBQUNlLE9BQU8sR0FBR3ZCLFVBQVUsQ0FBQ3VCLE9BQU8sR0FBS0osTUFBTSxHQUFHLENBQUc7TUFDMUUsSUFBS0EsTUFBTSxHQUFHLENBQUMsRUFBRztRQUNoQm5CLFVBQVUsQ0FBQ3dCLE9BQU8sQ0FBRSxDQUFDLEVBQUU5QixZQUFZLENBQUN5QixNQUFNLEdBQUdBLE1BQU0sRUFBRXpCLFlBQVksQ0FBQ1UsS0FBSyxFQUFFZSxNQUFPLENBQUM7UUFDakZkLE9BQU8sQ0FBQ29CLENBQUMsR0FBRy9CLFlBQVksQ0FBQ3lCLE1BQU0sR0FBR0EsTUFBTTtRQUN4Q1gsVUFBVSxDQUFDaUIsQ0FBQyxHQUFHL0IsWUFBWSxDQUFDeUIsTUFBTTtNQUNwQztJQUNGLENBQUM7SUFDRHZCLFFBQVEsQ0FBQ3lCLGNBQWMsQ0FBQ0wsSUFBSSxDQUFFRSxXQUFZLENBQUM7RUFDN0M7QUFDRjtBQUVBNUIsUUFBUSxDQUFDb0MsUUFBUSxDQUFFLGNBQWMsRUFBRWxDLFlBQWEsQ0FBQztBQUVqRCxlQUFlQSxZQUFZIn0=