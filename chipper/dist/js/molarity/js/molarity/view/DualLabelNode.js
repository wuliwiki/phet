// Copyright 2013-2022, University of Colorado Boulder

/**
 * A label that is switchable between 2 representations: qualitative and quantitative.
 * When property valueVisible is true, the quantitative label is displayed; otherwise the qualitative label is displayed.
 * X-coordinate of the origin is adjusted to be in the center, to simplify layout.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import molarity from '../../molarity.js';

// constants
const DEBUG_BOUNDS = false;
class DualLabelNode extends Node {
  /**
   * @param {string} quantitativeValue
   * @param {string} qualitativeValue
   * @param {Property.<boolean>} isQuantitativeProperty
   * @param {Font} font
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(quantitativeValue, qualitativeValue, isQuantitativeProperty, font, tandem, options) {
    super();
    const quantitativeText = new Text(quantitativeValue, {
      font: font,
      tandem: tandem.createTandem('quantitativeText')
    });
    this.addChild(quantitativeText);
    const qualitativeText = new Text(qualitativeValue, {
      font: font,
      center: quantitativeText.center,
      tandem: tandem.createTandem('qualitativeText')
    });
    this.addChild(qualitativeText);

    // add an invisible rectangle so that bounds don't change
    const boundsNode = new Rectangle(this.left, this.top, this.width, this.height);
    if (DEBUG_BOUNDS) {
      boundsNode.stroke = 'red';
    }
    this.addChild(boundsNode);

    // switch between qualitative and quantitative
    isQuantitativeProperty.link(isQuantitative => {
      quantitativeText.setVisible(isQuantitative);
      qualitativeText.setVisible(!isQuantitative);
    });
    this.mutate(options);
  }
}
molarity.register('DualLabelNode', DualLabelNode);
export default DualLabelNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsIm1vbGFyaXR5IiwiREVCVUdfQk9VTkRTIiwiRHVhbExhYmVsTm9kZSIsImNvbnN0cnVjdG9yIiwicXVhbnRpdGF0aXZlVmFsdWUiLCJxdWFsaXRhdGl2ZVZhbHVlIiwiaXNRdWFudGl0YXRpdmVQcm9wZXJ0eSIsImZvbnQiLCJ0YW5kZW0iLCJvcHRpb25zIiwicXVhbnRpdGF0aXZlVGV4dCIsImNyZWF0ZVRhbmRlbSIsImFkZENoaWxkIiwicXVhbGl0YXRpdmVUZXh0IiwiY2VudGVyIiwiYm91bmRzTm9kZSIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZSIsImxpbmsiLCJpc1F1YW50aXRhdGl2ZSIsInNldFZpc2libGUiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkR1YWxMYWJlbE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBsYWJlbCB0aGF0IGlzIHN3aXRjaGFibGUgYmV0d2VlbiAyIHJlcHJlc2VudGF0aW9uczogcXVhbGl0YXRpdmUgYW5kIHF1YW50aXRhdGl2ZS5cclxuICogV2hlbiBwcm9wZXJ0eSB2YWx1ZVZpc2libGUgaXMgdHJ1ZSwgdGhlIHF1YW50aXRhdGl2ZSBsYWJlbCBpcyBkaXNwbGF5ZWQ7IG90aGVyd2lzZSB0aGUgcXVhbGl0YXRpdmUgbGFiZWwgaXMgZGlzcGxheWVkLlxyXG4gKiBYLWNvb3JkaW5hdGUgb2YgdGhlIG9yaWdpbiBpcyBhZGp1c3RlZCB0byBiZSBpbiB0aGUgY2VudGVyLCB0byBzaW1wbGlmeSBsYXlvdXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG1vbGFyaXR5IGZyb20gJy4uLy4uL21vbGFyaXR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUJVR19CT1VORFMgPSBmYWxzZTtcclxuXHJcbmNsYXNzIER1YWxMYWJlbE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdGF0aXZlVmFsdWVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbGl0YXRpdmVWYWx1ZVxyXG4gICAqIEBwYXJhbSB7UHJvcGVydHkuPGJvb2xlYW4+fSBpc1F1YW50aXRhdGl2ZVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtGb250fSBmb250XHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggcXVhbnRpdGF0aXZlVmFsdWUsIHF1YWxpdGF0aXZlVmFsdWUsIGlzUXVhbnRpdGF0aXZlUHJvcGVydHksIGZvbnQsIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IHF1YW50aXRhdGl2ZVRleHQgPSBuZXcgVGV4dCggcXVhbnRpdGF0aXZlVmFsdWUsIHtcclxuICAgICAgZm9udDogZm9udCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncXVhbnRpdGF0aXZlVGV4dCcgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcXVhbnRpdGF0aXZlVGV4dCApO1xyXG5cclxuICAgIGNvbnN0IHF1YWxpdGF0aXZlVGV4dCA9IG5ldyBUZXh0KCBxdWFsaXRhdGl2ZVZhbHVlLCB7XHJcbiAgICAgIGZvbnQ6IGZvbnQsXHJcbiAgICAgIGNlbnRlcjogcXVhbnRpdGF0aXZlVGV4dC5jZW50ZXIsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3F1YWxpdGF0aXZlVGV4dCcgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcXVhbGl0YXRpdmVUZXh0ICk7XHJcblxyXG4gICAgLy8gYWRkIGFuIGludmlzaWJsZSByZWN0YW5nbGUgc28gdGhhdCBib3VuZHMgZG9uJ3QgY2hhbmdlXHJcbiAgICBjb25zdCBib3VuZHNOb2RlID0gbmV3IFJlY3RhbmdsZSggdGhpcy5sZWZ0LCB0aGlzLnRvcCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKTtcclxuICAgIGlmICggREVCVUdfQk9VTkRTICkge1xyXG4gICAgICBib3VuZHNOb2RlLnN0cm9rZSA9ICdyZWQnO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hZGRDaGlsZCggYm91bmRzTm9kZSApO1xyXG5cclxuICAgIC8vIHN3aXRjaCBiZXR3ZWVuIHF1YWxpdGF0aXZlIGFuZCBxdWFudGl0YXRpdmVcclxuICAgIGlzUXVhbnRpdGF0aXZlUHJvcGVydHkubGluayggaXNRdWFudGl0YXRpdmUgPT4ge1xyXG4gICAgICBxdWFudGl0YXRpdmVUZXh0LnNldFZpc2libGUoIGlzUXVhbnRpdGF0aXZlICk7XHJcbiAgICAgIHF1YWxpdGF0aXZlVGV4dC5zZXRWaXNpYmxlKCAhaXNRdWFudGl0YXRpdmUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxubW9sYXJpdHkucmVnaXN0ZXIoICdEdWFsTGFiZWxOb2RlJywgRHVhbExhYmVsTm9kZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHVhbExhYmVsTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLElBQUksRUFBRUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3pFLE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7O0FBRXhDO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLEtBQUs7QUFFMUIsTUFBTUMsYUFBYSxTQUFTTCxJQUFJLENBQUM7RUFDL0I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFTSxXQUFXQSxDQUFFQyxpQkFBaUIsRUFBRUMsZ0JBQWdCLEVBQUVDLHNCQUFzQixFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0lBRWhHLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSVgsSUFBSSxDQUFFSyxpQkFBaUIsRUFBRTtNQUNwREcsSUFBSSxFQUFFQSxJQUFJO01BQ1ZDLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsa0JBQW1CO0lBQ2xELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFRixnQkFBaUIsQ0FBQztJQUVqQyxNQUFNRyxlQUFlLEdBQUcsSUFBSWQsSUFBSSxDQUFFTSxnQkFBZ0IsRUFBRTtNQUNsREUsSUFBSSxFQUFFQSxJQUFJO01BQ1ZPLE1BQU0sRUFBRUosZ0JBQWdCLENBQUNJLE1BQU07TUFDL0JOLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsaUJBQWtCO0lBQ2pELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0MsUUFBUSxDQUFFQyxlQUFnQixDQUFDOztJQUVoQztJQUNBLE1BQU1FLFVBQVUsR0FBRyxJQUFJakIsU0FBUyxDQUFFLElBQUksQ0FBQ2tCLElBQUksRUFBRSxJQUFJLENBQUNDLEdBQUcsRUFBRSxJQUFJLENBQUNDLEtBQUssRUFBRSxJQUFJLENBQUNDLE1BQU8sQ0FBQztJQUNoRixJQUFLbEIsWUFBWSxFQUFHO01BQ2xCYyxVQUFVLENBQUNLLE1BQU0sR0FBRyxLQUFLO0lBQzNCO0lBQ0EsSUFBSSxDQUFDUixRQUFRLENBQUVHLFVBQVcsQ0FBQzs7SUFFM0I7SUFDQVQsc0JBQXNCLENBQUNlLElBQUksQ0FBRUMsY0FBYyxJQUFJO01BQzdDWixnQkFBZ0IsQ0FBQ2EsVUFBVSxDQUFFRCxjQUFlLENBQUM7TUFDN0NULGVBQWUsQ0FBQ1UsVUFBVSxDQUFFLENBQUNELGNBQWUsQ0FBQztJQUMvQyxDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNFLE1BQU0sQ0FBRWYsT0FBUSxDQUFDO0VBQ3hCO0FBQ0Y7QUFFQVQsUUFBUSxDQUFDeUIsUUFBUSxDQUFFLGVBQWUsRUFBRXZCLGFBQWMsQ0FBQztBQUVuRCxlQUFlQSxhQUFhIn0=