// Copyright 2013-2021, University of Colorado Boulder

/**
 * This class encapsulates the beaker image, including "points of interest" in that image.
 * The image was built around the 2D projection of a 3D cylinder.
 * Methods are provided to access the points of interest, allowing client code to construct
 * a shape that looks like solution inside the beaker cylinder.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Image } from '../../../../scenery/js/imports.js';
import beaker_png from '../../../images/beaker_png.js';
import molarity from '../../molarity.js';

// points of interest in the image file
const CYLINDER_UPPER_LEFT = new Vector2(98, 192);
const CYLINDER_LOWER_RIGHT = new Vector2(526, 644);
const CYLINDER_END_BACKGROUND = new Vector2(210, 166);
const CYLINDER_END_FOREGROUND = new Vector2(210, 218);
class BeakerImageNode extends Image {
  /**
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(tandem, options) {
    options = options || {};
    assert && assert(!options.tandem, 'tandem is passed via constructor parameter');
    options.tandem = tandem;
    super(beaker_png, options);
  }

  // @public Gets the cylinder dimensions.
  getCylinderSize() {
    const pUpperLeft = this.localToParentPoint(CYLINDER_UPPER_LEFT);
    const pLowerRight = this.localToParentPoint(CYLINDER_LOWER_RIGHT);
    return new Dimension2(pLowerRight.x - pUpperLeft.x, pLowerRight.y - pUpperLeft.y);
  }

  // @public Gets the offset of the cylinder from the upper-left corner of the image.
  getCylinderOffset() {
    return this.localToParentPoint(CYLINDER_UPPER_LEFT);
  }

  // @public Gets the 2D height of the cylinder's end cap.
  getCylinderEndHeight() {
    return this.localToParentPoint(CYLINDER_END_FOREGROUND).y - this.localToParentPoint(CYLINDER_END_BACKGROUND).y;
  }
}
molarity.register('BeakerImageNode', BeakerImageNode);
export default BeakerImageNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVmVjdG9yMiIsIkltYWdlIiwiYmVha2VyX3BuZyIsIm1vbGFyaXR5IiwiQ1lMSU5ERVJfVVBQRVJfTEVGVCIsIkNZTElOREVSX0xPV0VSX1JJR0hUIiwiQ1lMSU5ERVJfRU5EX0JBQ0tHUk9VTkQiLCJDWUxJTkRFUl9FTkRfRk9SRUdST1VORCIsIkJlYWtlckltYWdlTm9kZSIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwib3B0aW9ucyIsImFzc2VydCIsImdldEN5bGluZGVyU2l6ZSIsInBVcHBlckxlZnQiLCJsb2NhbFRvUGFyZW50UG9pbnQiLCJwTG93ZXJSaWdodCIsIngiLCJ5IiwiZ2V0Q3lsaW5kZXJPZmZzZXQiLCJnZXRDeWxpbmRlckVuZEhlaWdodCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmVha2VySW1hZ2VOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgZW5jYXBzdWxhdGVzIHRoZSBiZWFrZXIgaW1hZ2UsIGluY2x1ZGluZyBcInBvaW50cyBvZiBpbnRlcmVzdFwiIGluIHRoYXQgaW1hZ2UuXHJcbiAqIFRoZSBpbWFnZSB3YXMgYnVpbHQgYXJvdW5kIHRoZSAyRCBwcm9qZWN0aW9uIG9mIGEgM0QgY3lsaW5kZXIuXHJcbiAqIE1ldGhvZHMgYXJlIHByb3ZpZGVkIHRvIGFjY2VzcyB0aGUgcG9pbnRzIG9mIGludGVyZXN0LCBhbGxvd2luZyBjbGllbnQgY29kZSB0byBjb25zdHJ1Y3RcclxuICogYSBzaGFwZSB0aGF0IGxvb2tzIGxpa2Ugc29sdXRpb24gaW5zaWRlIHRoZSBiZWFrZXIgY3lsaW5kZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERpbWVuc2lvbjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0RpbWVuc2lvbjIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJlYWtlcl9wbmcgZnJvbSAnLi4vLi4vLi4vaW1hZ2VzL2JlYWtlcl9wbmcuanMnO1xyXG5pbXBvcnQgbW9sYXJpdHkgZnJvbSAnLi4vLi4vbW9sYXJpdHkuanMnO1xyXG5cclxuLy8gcG9pbnRzIG9mIGludGVyZXN0IGluIHRoZSBpbWFnZSBmaWxlXHJcbmNvbnN0IENZTElOREVSX1VQUEVSX0xFRlQgPSBuZXcgVmVjdG9yMiggOTgsIDE5MiApO1xyXG5jb25zdCBDWUxJTkRFUl9MT1dFUl9SSUdIVCA9IG5ldyBWZWN0b3IyKCA1MjYsIDY0NCApO1xyXG5jb25zdCBDWUxJTkRFUl9FTkRfQkFDS0dST1VORCA9IG5ldyBWZWN0b3IyKCAyMTAsIDE2NiApO1xyXG5jb25zdCBDWUxJTkRFUl9FTkRfRk9SRUdST1VORCA9IG5ldyBWZWN0b3IyKCAyMTAsIDIxOCApO1xyXG5cclxuY2xhc3MgQmVha2VySW1hZ2VOb2RlIGV4dGVuZHMgSW1hZ2Uge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLnRhbmRlbSwgJ3RhbmRlbSBpcyBwYXNzZWQgdmlhIGNvbnN0cnVjdG9yIHBhcmFtZXRlcicgKTtcclxuICAgIG9wdGlvbnMudGFuZGVtID0gdGFuZGVtO1xyXG5cclxuICAgIHN1cGVyKCBiZWFrZXJfcG5nLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljIEdldHMgdGhlIGN5bGluZGVyIGRpbWVuc2lvbnMuXHJcbiAgZ2V0Q3lsaW5kZXJTaXplKCkge1xyXG4gICAgY29uc3QgcFVwcGVyTGVmdCA9IHRoaXMubG9jYWxUb1BhcmVudFBvaW50KCBDWUxJTkRFUl9VUFBFUl9MRUZUICk7XHJcbiAgICBjb25zdCBwTG93ZXJSaWdodCA9IHRoaXMubG9jYWxUb1BhcmVudFBvaW50KCBDWUxJTkRFUl9MT1dFUl9SSUdIVCApO1xyXG4gICAgcmV0dXJuIG5ldyBEaW1lbnNpb24yKCBwTG93ZXJSaWdodC54IC0gcFVwcGVyTGVmdC54LCBwTG93ZXJSaWdodC55IC0gcFVwcGVyTGVmdC55ICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljIEdldHMgdGhlIG9mZnNldCBvZiB0aGUgY3lsaW5kZXIgZnJvbSB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGltYWdlLlxyXG4gIGdldEN5bGluZGVyT2Zmc2V0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxUb1BhcmVudFBvaW50KCBDWUxJTkRFUl9VUFBFUl9MRUZUICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljIEdldHMgdGhlIDJEIGhlaWdodCBvZiB0aGUgY3lsaW5kZXIncyBlbmQgY2FwLlxyXG4gIGdldEN5bGluZGVyRW5kSGVpZ2h0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxUb1BhcmVudFBvaW50KCBDWUxJTkRFUl9FTkRfRk9SRUdST1VORCApLnkgLSB0aGlzLmxvY2FsVG9QYXJlbnRQb2ludCggQ1lMSU5ERVJfRU5EX0JBQ0tHUk9VTkQgKS55O1xyXG4gIH1cclxufVxyXG5cclxubW9sYXJpdHkucmVnaXN0ZXIoICdCZWFrZXJJbWFnZU5vZGUnLCBCZWFrZXJJbWFnZU5vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgQmVha2VySW1hZ2VOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLG1DQUFtQztBQUN6RCxPQUFPQyxVQUFVLE1BQU0sK0JBQStCO0FBQ3RELE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7O0FBRXhDO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSUosT0FBTyxDQUFFLEVBQUUsRUFBRSxHQUFJLENBQUM7QUFDbEQsTUFBTUssb0JBQW9CLEdBQUcsSUFBSUwsT0FBTyxDQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7QUFDcEQsTUFBTU0sdUJBQXVCLEdBQUcsSUFBSU4sT0FBTyxDQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7QUFDdkQsTUFBTU8sdUJBQXVCLEdBQUcsSUFBSVAsT0FBTyxDQUFFLEdBQUcsRUFBRSxHQUFJLENBQUM7QUFFdkQsTUFBTVEsZUFBZSxTQUFTUCxLQUFLLENBQUM7RUFDbEM7QUFDRjtBQUNBO0FBQ0E7RUFDRVEsV0FBV0EsQ0FBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUc7SUFFN0JBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUN2QkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ0QsT0FBTyxDQUFDRCxNQUFNLEVBQUUsNENBQTZDLENBQUM7SUFDakZDLE9BQU8sQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNO0lBRXZCLEtBQUssQ0FBRVIsVUFBVSxFQUFFUyxPQUFRLENBQUM7RUFDOUI7O0VBRUE7RUFDQUUsZUFBZUEsQ0FBQSxFQUFHO0lBQ2hCLE1BQU1DLFVBQVUsR0FBRyxJQUFJLENBQUNDLGtCQUFrQixDQUFFWCxtQkFBb0IsQ0FBQztJQUNqRSxNQUFNWSxXQUFXLEdBQUcsSUFBSSxDQUFDRCxrQkFBa0IsQ0FBRVYsb0JBQXFCLENBQUM7SUFDbkUsT0FBTyxJQUFJTixVQUFVLENBQUVpQixXQUFXLENBQUNDLENBQUMsR0FBR0gsVUFBVSxDQUFDRyxDQUFDLEVBQUVELFdBQVcsQ0FBQ0UsQ0FBQyxHQUFHSixVQUFVLENBQUNJLENBQUUsQ0FBQztFQUNyRjs7RUFFQTtFQUNBQyxpQkFBaUJBLENBQUEsRUFBRztJQUNsQixPQUFPLElBQUksQ0FBQ0osa0JBQWtCLENBQUVYLG1CQUFvQixDQUFDO0VBQ3ZEOztFQUVBO0VBQ0FnQixvQkFBb0JBLENBQUEsRUFBRztJQUNyQixPQUFPLElBQUksQ0FBQ0wsa0JBQWtCLENBQUVSLHVCQUF3QixDQUFDLENBQUNXLENBQUMsR0FBRyxJQUFJLENBQUNILGtCQUFrQixDQUFFVCx1QkFBd0IsQ0FBQyxDQUFDWSxDQUFDO0VBQ3BIO0FBQ0Y7QUFFQWYsUUFBUSxDQUFDa0IsUUFBUSxDQUFFLGlCQUFpQixFQUFFYixlQUFnQixDQUFDO0FBQ3ZELGVBQWVBLGVBQWUifQ==