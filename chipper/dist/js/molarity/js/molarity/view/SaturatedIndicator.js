// Copyright 2013-2022, University of Colorado Boulder

/**
 * Indicator that the solution is saturated.
 * This consists of 'Saturated!' on a translucent background.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import molarity from '../../molarity.js';
import MolarityStrings from '../../MolarityStrings.js';
const saturatedString = MolarityStrings.saturated;
class SaturatedIndicator extends Node {
  /**
   * @param {MacroSolution} solution
   * @param {Tandem} tandem
   */
  constructor(solution, tandem) {
    super({
      tandem: tandem
    });
    const textNode = new Text(saturatedString, {
      font: new PhetFont(22),
      maxWidth: 200,
      tandem: tandem.createTandem('text')
    });

    // translucent light-gray background, so this shows up on all solution colors
    const backgroundNode = new Rectangle(0, 0, 1.2 * textNode.width, 1.2 * textNode.height, 8, 8, {
      fill: 'rgba( 240, 240, 240, 0.6 )',
      tandem: tandem.createTandem('backgroundNode')
    });

    // rendering order
    this.addChild(backgroundNode);
    this.addChild(textNode);

    // layout
    textNode.center = backgroundNode.center;

    // make this node visible when the solution is saturated
    solution.precipitateAmountProperty.link(() => {
      this.visible = solution.isSaturated();
    });
  }
}
molarity.register('SaturatedIndicator', SaturatedIndicator);
export default SaturatedIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk5vZGUiLCJSZWN0YW5nbGUiLCJUZXh0IiwibW9sYXJpdHkiLCJNb2xhcml0eVN0cmluZ3MiLCJzYXR1cmF0ZWRTdHJpbmciLCJzYXR1cmF0ZWQiLCJTYXR1cmF0ZWRJbmRpY2F0b3IiLCJjb25zdHJ1Y3RvciIsInNvbHV0aW9uIiwidGFuZGVtIiwidGV4dE5vZGUiLCJmb250IiwibWF4V2lkdGgiLCJjcmVhdGVUYW5kZW0iLCJiYWNrZ3JvdW5kTm9kZSIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbCIsImFkZENoaWxkIiwiY2VudGVyIiwicHJlY2lwaXRhdGVBbW91bnRQcm9wZXJ0eSIsImxpbmsiLCJ2aXNpYmxlIiwiaXNTYXR1cmF0ZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNhdHVyYXRlZEluZGljYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbmRpY2F0b3IgdGhhdCB0aGUgc29sdXRpb24gaXMgc2F0dXJhdGVkLlxyXG4gKiBUaGlzIGNvbnNpc3RzIG9mICdTYXR1cmF0ZWQhJyBvbiBhIHRyYW5zbHVjZW50IGJhY2tncm91bmQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFJlY3RhbmdsZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtb2xhcml0eSBmcm9tICcuLi8uLi9tb2xhcml0eS5qcyc7XHJcbmltcG9ydCBNb2xhcml0eVN0cmluZ3MgZnJvbSAnLi4vLi4vTW9sYXJpdHlTdHJpbmdzLmpzJztcclxuXHJcbmNvbnN0IHNhdHVyYXRlZFN0cmluZyA9IE1vbGFyaXR5U3RyaW5ncy5zYXR1cmF0ZWQ7XHJcblxyXG5jbGFzcyBTYXR1cmF0ZWRJbmRpY2F0b3IgZXh0ZW5kcyBOb2RlIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge01hY3JvU29sdXRpb259IHNvbHV0aW9uXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBzb2x1dGlvbiwgdGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCB7IHRhbmRlbTogdGFuZGVtIH0gKTtcclxuXHJcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IG5ldyBUZXh0KCBzYXR1cmF0ZWRTdHJpbmcsIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAyMiApLFxyXG4gICAgICBtYXhXaWR0aDogMjAwLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd0ZXh0JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdHJhbnNsdWNlbnQgbGlnaHQtZ3JheSBiYWNrZ3JvdW5kLCBzbyB0aGlzIHNob3dzIHVwIG9uIGFsbCBzb2x1dGlvbiBjb2xvcnNcclxuICAgIGNvbnN0IGJhY2tncm91bmROb2RlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMS4yICogdGV4dE5vZGUud2lkdGgsIDEuMiAqIHRleHROb2RlLmhlaWdodCwgOCwgOCwge1xyXG4gICAgICBmaWxsOiAncmdiYSggMjQwLCAyNDAsIDI0MCwgMC42ICknLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdiYWNrZ3JvdW5kTm9kZScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHJlbmRlcmluZyBvcmRlclxyXG4gICAgdGhpcy5hZGRDaGlsZCggYmFja2dyb3VuZE5vZGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHRleHROb2RlICk7XHJcblxyXG4gICAgLy8gbGF5b3V0XHJcbiAgICB0ZXh0Tm9kZS5jZW50ZXIgPSBiYWNrZ3JvdW5kTm9kZS5jZW50ZXI7XHJcblxyXG4gICAgLy8gbWFrZSB0aGlzIG5vZGUgdmlzaWJsZSB3aGVuIHRoZSBzb2x1dGlvbiBpcyBzYXR1cmF0ZWRcclxuICAgIHNvbHV0aW9uLnByZWNpcGl0YXRlQW1vdW50UHJvcGVydHkubGluayggKCkgPT4ge1xyXG4gICAgICB0aGlzLnZpc2libGUgPSBzb2x1dGlvbi5pc1NhdHVyYXRlZCgpO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxubW9sYXJpdHkucmVnaXN0ZXIoICdTYXR1cmF0ZWRJbmRpY2F0b3InLCBTYXR1cmF0ZWRJbmRpY2F0b3IgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNhdHVyYXRlZEluZGljYXRvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3pFLE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFDeEMsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUV0RCxNQUFNQyxlQUFlLEdBQUdELGVBQWUsQ0FBQ0UsU0FBUztBQUVqRCxNQUFNQyxrQkFBa0IsU0FBU1AsSUFBSSxDQUFDO0VBQ3BDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VRLFdBQVdBLENBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFHO0lBRTlCLEtBQUssQ0FBRTtNQUFFQSxNQUFNLEVBQUVBO0lBQU8sQ0FBRSxDQUFDO0lBRTNCLE1BQU1DLFFBQVEsR0FBRyxJQUFJVCxJQUFJLENBQUVHLGVBQWUsRUFBRTtNQUMxQ08sSUFBSSxFQUFFLElBQUliLFFBQVEsQ0FBRSxFQUFHLENBQUM7TUFDeEJjLFFBQVEsRUFBRSxHQUFHO01BQ2JILE1BQU0sRUFBRUEsTUFBTSxDQUFDSSxZQUFZLENBQUUsTUFBTztJQUN0QyxDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxjQUFjLEdBQUcsSUFBSWQsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHVSxRQUFRLENBQUNLLEtBQUssRUFBRSxHQUFHLEdBQUdMLFFBQVEsQ0FBQ00sTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7TUFDN0ZDLElBQUksRUFBRSw0QkFBNEI7TUFDbENSLE1BQU0sRUFBRUEsTUFBTSxDQUFDSSxZQUFZLENBQUUsZ0JBQWlCO0lBQ2hELENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0ssUUFBUSxDQUFFSixjQUFlLENBQUM7SUFDL0IsSUFBSSxDQUFDSSxRQUFRLENBQUVSLFFBQVMsQ0FBQzs7SUFFekI7SUFDQUEsUUFBUSxDQUFDUyxNQUFNLEdBQUdMLGNBQWMsQ0FBQ0ssTUFBTTs7SUFFdkM7SUFDQVgsUUFBUSxDQUFDWSx5QkFBeUIsQ0FBQ0MsSUFBSSxDQUFFLE1BQU07TUFDN0MsSUFBSSxDQUFDQyxPQUFPLEdBQUdkLFFBQVEsQ0FBQ2UsV0FBVyxDQUFDLENBQUM7SUFDdkMsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBckIsUUFBUSxDQUFDc0IsUUFBUSxDQUFFLG9CQUFvQixFQUFFbEIsa0JBQW1CLENBQUM7QUFFN0QsZUFBZUEsa0JBQWtCIn0=