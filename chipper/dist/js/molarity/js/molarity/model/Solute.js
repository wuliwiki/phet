// Copyright 2013-2021, University of Colorado Boulder

/**
 * Model of a solute, an immutable data structure.
 * This model is immutable in the sense that you should not change any of its fields after construction,
 * since they do not provide change notification. If you do change any field values, you will hose yourself.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import ReferenceIO from '../../../../tandem/js/types/ReferenceIO.js';
import molarity from '../../molarity.js';
class Solute extends PhetioObject {
  /**
   * @param {string} name - title case
   * @param {string} formula
   * @param {number} saturatedConcentration M (moles/L)
   * @param {Color} minColor solution color for smallest non-zero concentration
   * @param {Color} maxColor solution color for saturated concentration
   * @param {string} lowercaseName - for interactive description
   * @param {StringCasingPair} colorStringPair - lowercase/captialized color strings
   * @param {Object} [options]
   */
  constructor(name, formula, saturatedConcentration, minColor, maxColor, lowercaseName, colorStringPair, options) {
    options = merge({
      particleColor: maxColor,
      // the solute's color as a particle
      phetioType: Solute.SoluteIO,
      phetioState: false // because SoluteIO extends ReferenceIO
    }, options);
    super(options);

    // @public
    this.name = name;
    this.formula = formula;
    this.saturatedConcentration = saturatedConcentration;
    this.minColor = minColor;
    this.maxColor = maxColor;
    this.lowercaseName = lowercaseName;
    this.colorStringPair = colorStringPair;
    this.particleColor = options.particleColor;
  }
}
molarity.register('Solute', Solute);
Solute.SoluteIO = new IOType('SoluteIO', {
  valueType: Solute,
  documentation: 'The solute for the sim',
  supertype: ReferenceIO(IOType.ObjectIO)
});
export default Solute;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlBoZXRpb09iamVjdCIsIklPVHlwZSIsIlJlZmVyZW5jZUlPIiwibW9sYXJpdHkiLCJTb2x1dGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmb3JtdWxhIiwic2F0dXJhdGVkQ29uY2VudHJhdGlvbiIsIm1pbkNvbG9yIiwibWF4Q29sb3IiLCJsb3dlcmNhc2VOYW1lIiwiY29sb3JTdHJpbmdQYWlyIiwib3B0aW9ucyIsInBhcnRpY2xlQ29sb3IiLCJwaGV0aW9UeXBlIiwiU29sdXRlSU8iLCJwaGV0aW9TdGF0ZSIsInJlZ2lzdGVyIiwidmFsdWVUeXBlIiwiZG9jdW1lbnRhdGlvbiIsInN1cGVydHlwZSIsIk9iamVjdElPIl0sInNvdXJjZXMiOlsiU29sdXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIG9mIGEgc29sdXRlLCBhbiBpbW11dGFibGUgZGF0YSBzdHJ1Y3R1cmUuXHJcbiAqIFRoaXMgbW9kZWwgaXMgaW1tdXRhYmxlIGluIHRoZSBzZW5zZSB0aGF0IHlvdSBzaG91bGQgbm90IGNoYW5nZSBhbnkgb2YgaXRzIGZpZWxkcyBhZnRlciBjb25zdHJ1Y3Rpb24sXHJcbiAqIHNpbmNlIHRoZXkgZG8gbm90IHByb3ZpZGUgY2hhbmdlIG5vdGlmaWNhdGlvbi4gSWYgeW91IGRvIGNoYW5nZSBhbnkgZmllbGQgdmFsdWVzLCB5b3Ugd2lsbCBob3NlIHlvdXJzZWxmLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9JT1R5cGUuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1JlZmVyZW5jZUlPLmpzJztcclxuaW1wb3J0IG1vbGFyaXR5IGZyb20gJy4uLy4uL21vbGFyaXR5LmpzJztcclxuXHJcbmNsYXNzIFNvbHV0ZSBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aXRsZSBjYXNlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm11bGFcclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2F0dXJhdGVkQ29uY2VudHJhdGlvbiBNIChtb2xlcy9MKVxyXG4gICAqIEBwYXJhbSB7Q29sb3J9IG1pbkNvbG9yIHNvbHV0aW9uIGNvbG9yIGZvciBzbWFsbGVzdCBub24temVybyBjb25jZW50cmF0aW9uXHJcbiAgICogQHBhcmFtIHtDb2xvcn0gbWF4Q29sb3Igc29sdXRpb24gY29sb3IgZm9yIHNhdHVyYXRlZCBjb25jZW50cmF0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvd2VyY2FzZU5hbWUgLSBmb3IgaW50ZXJhY3RpdmUgZGVzY3JpcHRpb25cclxuICAgKiBAcGFyYW0ge1N0cmluZ0Nhc2luZ1BhaXJ9IGNvbG9yU3RyaW5nUGFpciAtIGxvd2VyY2FzZS9jYXB0aWFsaXplZCBjb2xvciBzdHJpbmdzXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBuYW1lLCBmb3JtdWxhLCBzYXR1cmF0ZWRDb25jZW50cmF0aW9uLCBtaW5Db2xvciwgbWF4Q29sb3IsIGxvd2VyY2FzZU5hbWUsIGNvbG9yU3RyaW5nUGFpciwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcclxuICAgICAgcGFydGljbGVDb2xvcjogbWF4Q29sb3IsIC8vIHRoZSBzb2x1dGUncyBjb2xvciBhcyBhIHBhcnRpY2xlXHJcbiAgICAgIHBoZXRpb1R5cGU6IFNvbHV0ZS5Tb2x1dGVJTyxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlIC8vIGJlY2F1c2UgU29sdXRlSU8gZXh0ZW5kcyBSZWZlcmVuY2VJT1xyXG4gICAgfSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHB1YmxpY1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuZm9ybXVsYSA9IGZvcm11bGE7XHJcbiAgICB0aGlzLnNhdHVyYXRlZENvbmNlbnRyYXRpb24gPSBzYXR1cmF0ZWRDb25jZW50cmF0aW9uO1xyXG4gICAgdGhpcy5taW5Db2xvciA9IG1pbkNvbG9yO1xyXG4gICAgdGhpcy5tYXhDb2xvciA9IG1heENvbG9yO1xyXG4gICAgdGhpcy5sb3dlcmNhc2VOYW1lID0gbG93ZXJjYXNlTmFtZTtcclxuICAgIHRoaXMuY29sb3JTdHJpbmdQYWlyID0gY29sb3JTdHJpbmdQYWlyO1xyXG4gICAgdGhpcy5wYXJ0aWNsZUNvbG9yID0gb3B0aW9ucy5wYXJ0aWNsZUNvbG9yO1xyXG4gIH1cclxufVxyXG5cclxubW9sYXJpdHkucmVnaXN0ZXIoICdTb2x1dGUnLCBTb2x1dGUgKTtcclxuXHJcblNvbHV0ZS5Tb2x1dGVJTyA9IG5ldyBJT1R5cGUoICdTb2x1dGVJTycsIHtcclxuICB2YWx1ZVR5cGU6IFNvbHV0ZSxcclxuICBkb2N1bWVudGF0aW9uOiAnVGhlIHNvbHV0ZSBmb3IgdGhlIHNpbScsXHJcbiAgc3VwZXJ0eXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPIClcclxufSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU29sdXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxZQUFZLE1BQU0sdUNBQXVDO0FBQ2hFLE9BQU9DLE1BQU0sTUFBTSx1Q0FBdUM7QUFDMUQsT0FBT0MsV0FBVyxNQUFNLDRDQUE0QztBQUNwRSxPQUFPQyxRQUFRLE1BQU0sbUJBQW1CO0FBRXhDLE1BQU1DLE1BQU0sU0FBU0osWUFBWSxDQUFDO0VBQ2hDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VLLFdBQVdBLENBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxzQkFBc0IsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsZUFBZSxFQUFFQyxPQUFPLEVBQUc7SUFFaEhBLE9BQU8sR0FBR2QsS0FBSyxDQUFFO01BQ2ZlLGFBQWEsRUFBRUosUUFBUTtNQUFFO01BQ3pCSyxVQUFVLEVBQUVYLE1BQU0sQ0FBQ1ksUUFBUTtNQUMzQkMsV0FBVyxFQUFFLEtBQUssQ0FBQztJQUNyQixDQUFDLEVBQUVKLE9BQVEsQ0FBQztJQUVaLEtBQUssQ0FBRUEsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ1AsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0Msc0JBQXNCLEdBQUdBLHNCQUFzQjtJQUNwRCxJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLGFBQWEsR0FBR0EsYUFBYTtJQUNsQyxJQUFJLENBQUNDLGVBQWUsR0FBR0EsZUFBZTtJQUN0QyxJQUFJLENBQUNFLGFBQWEsR0FBR0QsT0FBTyxDQUFDQyxhQUFhO0VBQzVDO0FBQ0Y7QUFFQVgsUUFBUSxDQUFDZSxRQUFRLENBQUUsUUFBUSxFQUFFZCxNQUFPLENBQUM7QUFFckNBLE1BQU0sQ0FBQ1ksUUFBUSxHQUFHLElBQUlmLE1BQU0sQ0FBRSxVQUFVLEVBQUU7RUFDeENrQixTQUFTLEVBQUVmLE1BQU07RUFDakJnQixhQUFhLEVBQUUsd0JBQXdCO0VBQ3ZDQyxTQUFTLEVBQUVuQixXQUFXLENBQUVELE1BQU0sQ0FBQ3FCLFFBQVM7QUFDMUMsQ0FBRSxDQUFDO0FBRUgsZUFBZWxCLE1BQU0ifQ==