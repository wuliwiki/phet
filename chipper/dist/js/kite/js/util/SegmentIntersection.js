// Copyright 2017-2022, University of Colorado Boulder

/**
 * An intersection between two different segments.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Utils from '../../../dot/js/Utils.js';
import { kite } from '../imports.js';
export default class SegmentIntersection {
  /**
   * @param point - The location of the intersection
   * @param aT - The parametric value for the first segment at the location of the intersection
   * @param bT - The parametric value for the second segment at the location of the intersection
   */
  constructor(point, aT, bT) {
    assert && assert(aT >= -1e-10 && aT <= 1 + 1e-10, 'aT out of range');
    assert && assert(bT >= -1e-10 && bT <= 1 + 1e-10, 'bT out of range');
    this.point = point;

    // Clamped in case it's slightly out-of-range
    this.aT = Utils.clamp(aT, 0, 1);
    this.bT = Utils.clamp(bT, 0, 1);
  }

  /**
   * Returns the intersection with a and b swapped.
   */
  getSwapped() {
    return new SegmentIntersection(this.point, this.bT, this.aT);
  }
}
kite.register('SegmentIntersection', SegmentIntersection);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsImtpdGUiLCJTZWdtZW50SW50ZXJzZWN0aW9uIiwiY29uc3RydWN0b3IiLCJwb2ludCIsImFUIiwiYlQiLCJhc3NlcnQiLCJjbGFtcCIsImdldFN3YXBwZWQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNlZ21lbnRJbnRlcnNlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gaW50ZXJzZWN0aW9uIGJldHdlZW4gdHdvIGRpZmZlcmVudCBzZWdtZW50cy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IGtpdGUgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRJbnRlcnNlY3Rpb24ge1xyXG5cclxuICBwdWJsaWMgcG9pbnQ6IFZlY3RvcjI7XHJcbiAgcHVibGljIGFUOiBudW1iZXI7XHJcbiAgcHVibGljIGJUOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwb2ludCAtIFRoZSBsb2NhdGlvbiBvZiB0aGUgaW50ZXJzZWN0aW9uXHJcbiAgICogQHBhcmFtIGFUIC0gVGhlIHBhcmFtZXRyaWMgdmFsdWUgZm9yIHRoZSBmaXJzdCBzZWdtZW50IGF0IHRoZSBsb2NhdGlvbiBvZiB0aGUgaW50ZXJzZWN0aW9uXHJcbiAgICogQHBhcmFtIGJUIC0gVGhlIHBhcmFtZXRyaWMgdmFsdWUgZm9yIHRoZSBzZWNvbmQgc2VnbWVudCBhdCB0aGUgbG9jYXRpb24gb2YgdGhlIGludGVyc2VjdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcG9pbnQ6IFZlY3RvcjIsIGFUOiBudW1iZXIsIGJUOiBudW1iZXIgKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBhVCA+PSAtMWUtMTAgJiYgYVQgPD0gMSArIDFlLTEwLCAnYVQgb3V0IG9mIHJhbmdlJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggYlQgPj0gLTFlLTEwICYmIGJUIDw9IDEgKyAxZS0xMCwgJ2JUIG91dCBvZiByYW5nZScgKTtcclxuXHJcbiAgICB0aGlzLnBvaW50ID0gcG9pbnQ7XHJcblxyXG4gICAgLy8gQ2xhbXBlZCBpbiBjYXNlIGl0J3Mgc2xpZ2h0bHkgb3V0LW9mLXJhbmdlXHJcbiAgICB0aGlzLmFUID0gVXRpbHMuY2xhbXAoIGFULCAwLCAxICk7XHJcbiAgICB0aGlzLmJUID0gVXRpbHMuY2xhbXAoIGJULCAwLCAxICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gd2l0aCBhIGFuZCBiIHN3YXBwZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFN3YXBwZWQoKTogU2VnbWVudEludGVyc2VjdGlvbiB7XHJcbiAgICByZXR1cm4gbmV3IFNlZ21lbnRJbnRlcnNlY3Rpb24oIHRoaXMucG9pbnQsIHRoaXMuYlQsIHRoaXMuYVQgKTtcclxuICB9XHJcbn1cclxuXHJcbmtpdGUucmVnaXN0ZXIoICdTZWdtZW50SW50ZXJzZWN0aW9uJywgU2VnbWVudEludGVyc2VjdGlvbiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDBCQUEwQjtBQUU1QyxTQUFTQyxJQUFJLFFBQVEsZUFBZTtBQUVwQyxlQUFlLE1BQU1DLG1CQUFtQixDQUFDO0VBTXZDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsS0FBYyxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRztJQUMzREMsTUFBTSxJQUFJQSxNQUFNLENBQUVGLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSUEsRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsaUJBQWtCLENBQUM7SUFDdEVFLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUlBLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLGlCQUFrQixDQUFDO0lBRXRFLElBQUksQ0FBQ0YsS0FBSyxHQUFHQSxLQUFLOztJQUVsQjtJQUNBLElBQUksQ0FBQ0MsRUFBRSxHQUFHTCxLQUFLLENBQUNRLEtBQUssQ0FBRUgsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFDakMsSUFBSSxDQUFDQyxFQUFFLEdBQUdOLEtBQUssQ0FBQ1EsS0FBSyxDQUFFRixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztFQUNuQzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0csVUFBVUEsQ0FBQSxFQUF3QjtJQUN2QyxPQUFPLElBQUlQLG1CQUFtQixDQUFFLElBQUksQ0FBQ0UsS0FBSyxFQUFFLElBQUksQ0FBQ0UsRUFBRSxFQUFFLElBQUksQ0FBQ0QsRUFBRyxDQUFDO0VBQ2hFO0FBQ0Y7QUFFQUosSUFBSSxDQUFDUyxRQUFRLENBQUUscUJBQXFCLEVBQUVSLG1CQUFvQixDQUFDIn0=