// Copyright 2016-2023, University of Colorado Boulder

/**
 * Query parameters supported by this simulation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import logGlobal from '../../../phet-core/js/logGlobal.js';
import beersLawLab from '../beersLawLab.js';
import BLLConstants from './BLLConstants.js';
export const BeakerUnitsValues = ['liters', 'milliliters'];
export const ConcentrationMeterUnitsValues = ['molesPerLiter', 'percent'];
const BLLQueryParameters = QueryStringMachine.getAll({
  // Whether the volume of the solution (in L) is visible at the surface of the solution in the beaker.
  // For external use, see https://github.com/phetsims/beers-law-lab/issues/161
  showSolutionVolume: {
    type: 'flag',
    public: true
  },
  // Whether the solute amount (in grams) dissolved in solution is visible on the Concentration screen
  // For external use, see https://github.com/phetsims/beers-law-lab/issues/148
  showSoluteAmount: {
    type: 'flag',
    public: true
  },
  // Units for beaker ticks
  // For external use, see https://github.com/phetsims/beers-law-lab/issues/150
  beakerUnits: {
    type: 'string',
    validValues: BeakerUnitsValues,
    defaultValue: 'liters',
    public: true
  },
  // Units on the concentration meter
  // For external use, see https://github.com/phetsims/beers-law-lab/issues/149
  concentrationMeterUnits: {
    type: 'string',
    validValues: ConcentrationMeterUnitsValues,
    defaultValue: 'molesPerLiter',
    public: true
  },
  // Snap interval for the cuvette in centimeters, or 0 for no snap
  // For external use, see https://github.com/phetsims/phet-io/issues/568
  cuvetteSnapInterval: {
    type: 'number',
    defaultValue: 0.1,
    // cm
    isValidValue: value => BLLConstants.CUVETTE_SNAP_INTERVAL_RANGE.contains(value),
    public: true
  }
});
beersLawLab.register('BLLQueryParameters', BLLQueryParameters);

// Log query parameters
logGlobal('phet.chipper.queryParameters');
logGlobal('phet.preloads.phetio.queryParameters');
logGlobal('phet.beersLawLab.BLLQueryParameters');
export default BLLQueryParameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dHbG9iYWwiLCJiZWVyc0xhd0xhYiIsIkJMTENvbnN0YW50cyIsIkJlYWtlclVuaXRzVmFsdWVzIiwiQ29uY2VudHJhdGlvbk1ldGVyVW5pdHNWYWx1ZXMiLCJCTExRdWVyeVBhcmFtZXRlcnMiLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJnZXRBbGwiLCJzaG93U29sdXRpb25Wb2x1bWUiLCJ0eXBlIiwicHVibGljIiwic2hvd1NvbHV0ZUFtb3VudCIsImJlYWtlclVuaXRzIiwidmFsaWRWYWx1ZXMiLCJkZWZhdWx0VmFsdWUiLCJjb25jZW50cmF0aW9uTWV0ZXJVbml0cyIsImN1dmV0dGVTbmFwSW50ZXJ2YWwiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsIkNVVkVUVEVfU05BUF9JTlRFUlZBTF9SQU5HRSIsImNvbnRhaW5zIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCTExRdWVyeVBhcmFtZXRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUXVlcnkgcGFyYW1ldGVycyBzdXBwb3J0ZWQgYnkgdGhpcyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBsb2dHbG9iYWwgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2xvZ0dsb2JhbC5qcyc7XHJcbmltcG9ydCBiZWVyc0xhd0xhYiBmcm9tICcuLi9iZWVyc0xhd0xhYi5qcyc7XHJcbmltcG9ydCBCTExDb25zdGFudHMgZnJvbSAnLi9CTExDb25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJlYWtlclVuaXRzVmFsdWVzID0gWyAnbGl0ZXJzJywgJ21pbGxpbGl0ZXJzJyBdIGFzIGNvbnN0O1xyXG5leHBvcnQgdHlwZSBCZWFrZXJVbml0cyA9ICggdHlwZW9mIEJlYWtlclVuaXRzVmFsdWVzIClbbnVtYmVyXTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25jZW50cmF0aW9uTWV0ZXJVbml0c1ZhbHVlcyA9IFsgJ21vbGVzUGVyTGl0ZXInLCAncGVyY2VudCcgXSBhcyBjb25zdDtcclxuZXhwb3J0IHR5cGUgQ29uY2VudHJhdGlvbk1ldGVyVW5pdHMgPSAoIHR5cGVvZiBDb25jZW50cmF0aW9uTWV0ZXJVbml0c1ZhbHVlcyApW251bWJlcl07XHJcblxyXG5jb25zdCBCTExRdWVyeVBhcmFtZXRlcnMgPSBRdWVyeVN0cmluZ01hY2hpbmUuZ2V0QWxsKCB7XHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIHZvbHVtZSBvZiB0aGUgc29sdXRpb24gKGluIEwpIGlzIHZpc2libGUgYXQgdGhlIHN1cmZhY2Ugb2YgdGhlIHNvbHV0aW9uIGluIHRoZSBiZWFrZXIuXHJcbiAgLy8gRm9yIGV4dGVybmFsIHVzZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9iZWVycy1sYXctbGFiL2lzc3Vlcy8xNjFcclxuICBzaG93U29sdXRpb25Wb2x1bWU6IHtcclxuICAgIHR5cGU6ICdmbGFnJyxcclxuICAgIHB1YmxpYzogdHJ1ZVxyXG4gIH0sXHJcblxyXG4gIC8vIFdoZXRoZXIgdGhlIHNvbHV0ZSBhbW91bnQgKGluIGdyYW1zKSBkaXNzb2x2ZWQgaW4gc29sdXRpb24gaXMgdmlzaWJsZSBvbiB0aGUgQ29uY2VudHJhdGlvbiBzY3JlZW5cclxuICAvLyBGb3IgZXh0ZXJuYWwgdXNlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JlZXJzLWxhdy1sYWIvaXNzdWVzLzE0OFxyXG4gIHNob3dTb2x1dGVBbW91bnQ6IHtcclxuICAgIHR5cGU6ICdmbGFnJyxcclxuICAgIHB1YmxpYzogdHJ1ZVxyXG4gIH0sXHJcblxyXG4gIC8vIFVuaXRzIGZvciBiZWFrZXIgdGlja3NcclxuICAvLyBGb3IgZXh0ZXJuYWwgdXNlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JlZXJzLWxhdy1sYWIvaXNzdWVzLzE1MFxyXG4gIGJlYWtlclVuaXRzOiB7XHJcbiAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgIHZhbGlkVmFsdWVzOiBCZWFrZXJVbml0c1ZhbHVlcyxcclxuICAgIGRlZmF1bHRWYWx1ZTogJ2xpdGVycycsXHJcbiAgICBwdWJsaWM6IHRydWVcclxuICB9LFxyXG5cclxuICAvLyBVbml0cyBvbiB0aGUgY29uY2VudHJhdGlvbiBtZXRlclxyXG4gIC8vIEZvciBleHRlcm5hbCB1c2UsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvYmVlcnMtbGF3LWxhYi9pc3N1ZXMvMTQ5XHJcbiAgY29uY2VudHJhdGlvbk1ldGVyVW5pdHM6IHtcclxuICAgIHR5cGU6ICdzdHJpbmcnLFxyXG4gICAgdmFsaWRWYWx1ZXM6IENvbmNlbnRyYXRpb25NZXRlclVuaXRzVmFsdWVzLFxyXG4gICAgZGVmYXVsdFZhbHVlOiAnbW9sZXNQZXJMaXRlcicsXHJcbiAgICBwdWJsaWM6IHRydWVcclxuICB9LFxyXG5cclxuICAvLyBTbmFwIGludGVydmFsIGZvciB0aGUgY3V2ZXR0ZSBpbiBjZW50aW1ldGVycywgb3IgMCBmb3Igbm8gc25hcFxyXG4gIC8vIEZvciBleHRlcm5hbCB1c2UsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGhldC1pby9pc3N1ZXMvNTY4XHJcbiAgY3V2ZXR0ZVNuYXBJbnRlcnZhbDoge1xyXG4gICAgdHlwZTogJ251bWJlcicsXHJcbiAgICBkZWZhdWx0VmFsdWU6IDAuMSwgLy8gY21cclxuICAgIGlzVmFsaWRWYWx1ZTogdmFsdWUgPT4gQkxMQ29uc3RhbnRzLkNVVkVUVEVfU05BUF9JTlRFUlZBTF9SQU5HRS5jb250YWlucyggdmFsdWUgKSxcclxuICAgIHB1YmxpYzogdHJ1ZVxyXG4gIH1cclxufSApO1xyXG5cclxuYmVlcnNMYXdMYWIucmVnaXN0ZXIoICdCTExRdWVyeVBhcmFtZXRlcnMnLCBCTExRdWVyeVBhcmFtZXRlcnMgKTtcclxuXHJcbi8vIExvZyBxdWVyeSBwYXJhbWV0ZXJzXHJcbmxvZ0dsb2JhbCggJ3BoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMnICk7XHJcbmxvZ0dsb2JhbCggJ3BoZXQucHJlbG9hZHMucGhldGlvLnF1ZXJ5UGFyYW1ldGVycycgKTtcclxubG9nR2xvYmFsKCAncGhldC5iZWVyc0xhd0xhYi5CTExRdWVyeVBhcmFtZXRlcnMnICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCTExRdWVyeVBhcmFtZXRlcnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxvQ0FBb0M7QUFDMUQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQUMzQyxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRTVDLE9BQU8sTUFBTUMsaUJBQWlCLEdBQUcsQ0FBRSxRQUFRLEVBQUUsYUFBYSxDQUFXO0FBR3JFLE9BQU8sTUFBTUMsNkJBQTZCLEdBQUcsQ0FBRSxlQUFlLEVBQUUsU0FBUyxDQUFXO0FBR3BGLE1BQU1DLGtCQUFrQixHQUFHQyxrQkFBa0IsQ0FBQ0MsTUFBTSxDQUFFO0VBRXBEO0VBQ0E7RUFDQUMsa0JBQWtCLEVBQUU7SUFDbEJDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRTtFQUNWLENBQUM7RUFFRDtFQUNBO0VBQ0FDLGdCQUFnQixFQUFFO0lBQ2hCRixJQUFJLEVBQUUsTUFBTTtJQUNaQyxNQUFNLEVBQUU7RUFDVixDQUFDO0VBRUQ7RUFDQTtFQUNBRSxXQUFXLEVBQUU7SUFDWEgsSUFBSSxFQUFFLFFBQVE7SUFDZEksV0FBVyxFQUFFVixpQkFBaUI7SUFDOUJXLFlBQVksRUFBRSxRQUFRO0lBQ3RCSixNQUFNLEVBQUU7RUFDVixDQUFDO0VBRUQ7RUFDQTtFQUNBSyx1QkFBdUIsRUFBRTtJQUN2Qk4sSUFBSSxFQUFFLFFBQVE7SUFDZEksV0FBVyxFQUFFVCw2QkFBNkI7SUFDMUNVLFlBQVksRUFBRSxlQUFlO0lBQzdCSixNQUFNLEVBQUU7RUFDVixDQUFDO0VBRUQ7RUFDQTtFQUNBTSxtQkFBbUIsRUFBRTtJQUNuQlAsSUFBSSxFQUFFLFFBQVE7SUFDZEssWUFBWSxFQUFFLEdBQUc7SUFBRTtJQUNuQkcsWUFBWSxFQUFFQyxLQUFLLElBQUloQixZQUFZLENBQUNpQiwyQkFBMkIsQ0FBQ0MsUUFBUSxDQUFFRixLQUFNLENBQUM7SUFDakZSLE1BQU0sRUFBRTtFQUNWO0FBQ0YsQ0FBRSxDQUFDO0FBRUhULFdBQVcsQ0FBQ29CLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRWhCLGtCQUFtQixDQUFDOztBQUVoRTtBQUNBTCxTQUFTLENBQUUsOEJBQStCLENBQUM7QUFDM0NBLFNBQVMsQ0FBRSxzQ0FBdUMsQ0FBQztBQUNuREEsU0FBUyxDQUFFLHFDQUFzQyxDQUFDO0FBRWxELGVBQWVLLGtCQUFrQiJ9