// Copyright 2013-2023, University of Colorado Boulder

/**
 * WavelengthPanel is the panel that contains controls related to wavelength of the light.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Multilink from '../../../../axon/js/Multilink.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import NumberDisplay from '../../../../scenery-phet/js/NumberDisplay.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import WavelengthNumberControl from '../../../../scenery-phet/js/WavelengthNumberControl.js';
import { HBox, HStrut, Node, Text, VBox } from '../../../../scenery/js/imports.js';
import AquaRadioButtonGroup from '../../../../sun/js/AquaRadioButtonGroup.js';
import Panel from '../../../../sun/js/Panel.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import StringIO from '../../../../tandem/js/types/StringIO.js';
import beersLawLab from '../../beersLawLab.js';
import BeersLawLabStrings from '../../BeersLawLabStrings.js';
import BLLConstants from '../../common/BLLConstants.js';
import LightMode from '../model/LightMode.js';

// constants
const SLIDER_TRACK_SIZE = new Dimension2(150, 30);
export default class WavelengthPanel extends Panel {
  constructor(solutionProperty, light, providedOptions) {
    const options = optionize()({
      // PanelOptions
      xMargin: 20,
      yMargin: 15,
      fill: '#F0F0F0',
      stroke: 'gray',
      lineWidth: 1
    }, providedOptions);
    const labelTextTandem = options.tandem.createTandem('labelText');
    const stringProperty = new DerivedProperty([BeersLawLabStrings.pattern['0labelStringProperty'], BeersLawLabStrings.wavelengthStringProperty], (pattern, wavelengthString) => StringUtils.format(pattern, wavelengthString), {
      tandem: labelTextTandem.createTandem(Text.STRING_PROPERTY_TANDEM_NAME),
      phetioValueType: StringIO
    });
    const labelText = new Text(stringProperty, {
      font: new PhetFont(20),
      fill: 'black',
      tandem: labelTextTandem
    });
    const numberDisplay = new NumberDisplay(light.wavelengthProperty, light.wavelengthProperty.range, {
      xMargin: 7,
      yMargin: 3,
      tandem: options.tandem.createTandem('numberDisplay')
    });

    // Whenever one of the strings used to format the NumberDisplay changes, call setNumberFormatter with a
    // new formatting function.
    Multilink.multilink([BeersLawLabStrings.pattern['0value']['1unitsStringProperty'], BeersLawLabStrings.units.nmStringProperty], (pattern, nmString) => numberDisplay.setNumberFormatter(wavelength => StringUtils.format(pattern, Utils.toFixed(wavelength, 0), nmString)));
    function createRadioButtonLabel(text, radioButtonTandem) {
      return new Text(text, {
        font: new PhetFont(18),
        fill: 'black',
        tandem: radioButtonTandem.createTandem('labelText')
      });
    }

    // radio button descriptions
    const radioButtonItems = [{
      value: LightMode.PRESET,
      createNode: tandem => createRadioButtonLabel(BeersLawLabStrings.presetStringProperty, tandem),
      tandemName: 'presetWavelengthRadioButton'
    }, {
      value: LightMode.VARIABLE,
      createNode: tandem => createRadioButtonLabel(BeersLawLabStrings.variableStringProperty, tandem),
      tandemName: 'variableWavelengthRadioButton'
    }];

    // radio button group
    const radioButtonGroup = new AquaRadioButtonGroup(light.modeProperty, radioButtonItems, {
      radioButtonOptions: {
        radius: BLLConstants.RADIO_BUTTON_RADIUS
      },
      orientation: 'horizontal',
      spacing: 15,
      touchAreaYDilation: 8,
      maxWidth: 250,
      tandem: options.tandem.createTandem('radioButtonGroup')
    });
    const wavelengthNumberControlTandem = options.tandem.createTandem('wavelengthNumberControl');
    const wavelengthNumberControl = new WavelengthNumberControl(light.wavelengthProperty, {
      titleNodeOptions: {
        tandem: Tandem.OPT_OUT // because our title is not part of WavelengthNumberControl
      },

      visibleProperty: new DerivedProperty([light.modeProperty], mode => mode === LightMode.VARIABLE, {
        tandem: wavelengthNumberControlTandem.createTandem('visibleProperty'),
        phetioValueType: BooleanIO
      }),
      spectrumSliderTrackOptions: {
        size: SLIDER_TRACK_SIZE
      },
      spectrumSliderThumbOptions: {
        width: 35,
        height: 45,
        cursorHeight: SLIDER_TRACK_SIZE.height
      },
      arrowButtonOptions: {
        scale: 1,
        touchAreaXDilation: 5,
        touchAreaYDilation: 10
      },
      layoutFunction: (titleNode, numberDisplay, slider, decrementButton, incrementButton) => {
        assert && assert(decrementButton && incrementButton);
        return new HBox({
          align: 'top',
          spacing: -10,
          resize: false,
          // prevent slider from causing a resize when thumb is at min or max
          children: [decrementButton, slider, incrementButton]
        });
      },
      tandem: wavelengthNumberControlTandem
    });

    // rendering order
    const vBox = new VBox({
      spacing: 24,
      align: 'left',
      children: [new HBox({
        spacing: 10,
        children: [labelText, numberDisplay],
        maxWidth: 250
      }), radioButtonGroup, wavelengthNumberControl]
    });

    // add a horizontal strut to prevent width changes
    const content = new Node({
      children: [new HStrut(vBox.width), vBox]
    });
    super(content, options);
    this.addLinkedElement(light.wavelengthProperty, {
      tandem: options.tandem.createTandem(light.wavelengthProperty.tandem.name)
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
beersLawLab.register('WavelengthPanel', WavelengthPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJNdWx0aWxpbmsiLCJEaW1lbnNpb24yIiwiVXRpbHMiLCJvcHRpb25pemUiLCJTdHJpbmdVdGlscyIsIk51bWJlckRpc3BsYXkiLCJQaGV0Rm9udCIsIldhdmVsZW5ndGhOdW1iZXJDb250cm9sIiwiSEJveCIsIkhTdHJ1dCIsIk5vZGUiLCJUZXh0IiwiVkJveCIsIkFxdWFSYWRpb0J1dHRvbkdyb3VwIiwiUGFuZWwiLCJUYW5kZW0iLCJCb29sZWFuSU8iLCJTdHJpbmdJTyIsImJlZXJzTGF3TGFiIiwiQmVlcnNMYXdMYWJTdHJpbmdzIiwiQkxMQ29uc3RhbnRzIiwiTGlnaHRNb2RlIiwiU0xJREVSX1RSQUNLX1NJWkUiLCJXYXZlbGVuZ3RoUGFuZWwiLCJjb25zdHJ1Y3RvciIsInNvbHV0aW9uUHJvcGVydHkiLCJsaWdodCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJsYWJlbFRleHRUYW5kZW0iLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJzdHJpbmdQcm9wZXJ0eSIsInBhdHRlcm4iLCJ3YXZlbGVuZ3RoU3RyaW5nUHJvcGVydHkiLCJ3YXZlbGVuZ3RoU3RyaW5nIiwiZm9ybWF0IiwiU1RSSU5HX1BST1BFUlRZX1RBTkRFTV9OQU1FIiwicGhldGlvVmFsdWVUeXBlIiwibGFiZWxUZXh0IiwiZm9udCIsIm51bWJlckRpc3BsYXkiLCJ3YXZlbGVuZ3RoUHJvcGVydHkiLCJyYW5nZSIsIm11bHRpbGluayIsInVuaXRzIiwibm1TdHJpbmdQcm9wZXJ0eSIsIm5tU3RyaW5nIiwic2V0TnVtYmVyRm9ybWF0dGVyIiwid2F2ZWxlbmd0aCIsInRvRml4ZWQiLCJjcmVhdGVSYWRpb0J1dHRvbkxhYmVsIiwidGV4dCIsInJhZGlvQnV0dG9uVGFuZGVtIiwicmFkaW9CdXR0b25JdGVtcyIsInZhbHVlIiwiUFJFU0VUIiwiY3JlYXRlTm9kZSIsInByZXNldFN0cmluZ1Byb3BlcnR5IiwidGFuZGVtTmFtZSIsIlZBUklBQkxFIiwidmFyaWFibGVTdHJpbmdQcm9wZXJ0eSIsInJhZGlvQnV0dG9uR3JvdXAiLCJtb2RlUHJvcGVydHkiLCJyYWRpb0J1dHRvbk9wdGlvbnMiLCJyYWRpdXMiLCJSQURJT19CVVRUT05fUkFESVVTIiwib3JpZW50YXRpb24iLCJzcGFjaW5nIiwidG91Y2hBcmVhWURpbGF0aW9uIiwibWF4V2lkdGgiLCJ3YXZlbGVuZ3RoTnVtYmVyQ29udHJvbFRhbmRlbSIsIndhdmVsZW5ndGhOdW1iZXJDb250cm9sIiwidGl0bGVOb2RlT3B0aW9ucyIsIk9QVF9PVVQiLCJ2aXNpYmxlUHJvcGVydHkiLCJtb2RlIiwic3BlY3RydW1TbGlkZXJUcmFja09wdGlvbnMiLCJzaXplIiwic3BlY3RydW1TbGlkZXJUaHVtYk9wdGlvbnMiLCJ3aWR0aCIsImhlaWdodCIsImN1cnNvckhlaWdodCIsImFycm93QnV0dG9uT3B0aW9ucyIsInNjYWxlIiwidG91Y2hBcmVhWERpbGF0aW9uIiwibGF5b3V0RnVuY3Rpb24iLCJ0aXRsZU5vZGUiLCJzbGlkZXIiLCJkZWNyZW1lbnRCdXR0b24iLCJpbmNyZW1lbnRCdXR0b24iLCJhc3NlcnQiLCJhbGlnbiIsInJlc2l6ZSIsImNoaWxkcmVuIiwidkJveCIsImNvbnRlbnQiLCJhZGRMaW5rZWRFbGVtZW50IiwibmFtZSIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIldhdmVsZW5ndGhQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlbGVuZ3RoUGFuZWwgaXMgdGhlIHBhbmVsIHRoYXQgY29udGFpbnMgY29udHJvbHMgcmVsYXRlZCB0byB3YXZlbGVuZ3RoIG9mIHRoZSBsaWdodC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBOdW1iZXJEaXNwbGF5IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9OdW1iZXJEaXNwbGF5LmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBXYXZlbGVuZ3RoTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvV2F2ZWxlbmd0aE51bWJlckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBIU3RydXQsIE5vZGUsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQXF1YVJhZGlvQnV0dG9uR3JvdXAsIHsgQXF1YVJhZGlvQnV0dG9uR3JvdXBJdGVtIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0FxdWFSYWRpb0J1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IFBhbmVsLCB7IFBhbmVsT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBCb29sZWFuSU8gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0Jvb2xlYW5JTy5qcyc7XHJcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvU3RyaW5nSU8uanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgQmVlcnNMYXdMYWJTdHJpbmdzIGZyb20gJy4uLy4uL0JlZXJzTGF3TGFiU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBCTExDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0JMTENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBCZWVyc0xhd1NvbHV0aW9uIGZyb20gJy4uL21vZGVsL0JlZXJzTGF3U29sdXRpb24uanMnO1xyXG5pbXBvcnQgTGlnaHQgZnJvbSAnLi4vbW9kZWwvTGlnaHQuanMnO1xyXG5pbXBvcnQgTGlnaHRNb2RlIGZyb20gJy4uL21vZGVsL0xpZ2h0TW9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgU0xJREVSX1RSQUNLX1NJWkUgPSBuZXcgRGltZW5zaW9uMiggMTUwLCAzMCApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFdhdmVsZW5ndGhQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8UGFuZWxPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlbGVuZ3RoUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc29sdXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8QmVlcnNMYXdTb2x1dGlvbj4sIGxpZ2h0OiBMaWdodCwgcHJvdmlkZWRPcHRpb25zOiBXYXZlbGVuZ3RoUGFuZWxPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V2F2ZWxlbmd0aFBhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhbmVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUGFuZWxPcHRpb25zXHJcbiAgICAgIHhNYXJnaW46IDIwLFxyXG4gICAgICB5TWFyZ2luOiAxNSxcclxuICAgICAgZmlsbDogJyNGMEYwRjAnLFxyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgbGluZVdpZHRoOiAxXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbFRleHRUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdsYWJlbFRleHQnICk7XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KFxyXG4gICAgICBbIEJlZXJzTGF3TGFiU3RyaW5ncy5wYXR0ZXJuWyAnMGxhYmVsU3RyaW5nUHJvcGVydHknIF0sIEJlZXJzTGF3TGFiU3RyaW5ncy53YXZlbGVuZ3RoU3RyaW5nUHJvcGVydHkgXSxcclxuICAgICAgKCBwYXR0ZXJuLCB3YXZlbGVuZ3RoU3RyaW5nICkgPT4gU3RyaW5nVXRpbHMuZm9ybWF0KCBwYXR0ZXJuLCB3YXZlbGVuZ3RoU3RyaW5nICksIHtcclxuICAgICAgICB0YW5kZW06IGxhYmVsVGV4dFRhbmRlbS5jcmVhdGVUYW5kZW0oIFRleHQuU1RSSU5HX1BST1BFUlRZX1RBTkRFTV9OQU1FICksXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBTdHJpbmdJT1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gbmV3IFRleHQoIHN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSxcclxuICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgdGFuZGVtOiBsYWJlbFRleHRUYW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBudW1iZXJEaXNwbGF5ID0gbmV3IE51bWJlckRpc3BsYXkoIGxpZ2h0LndhdmVsZW5ndGhQcm9wZXJ0eSwgbGlnaHQud2F2ZWxlbmd0aFByb3BlcnR5LnJhbmdlLCB7XHJcbiAgICAgIHhNYXJnaW46IDcsXHJcbiAgICAgIHlNYXJnaW46IDMsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnbnVtYmVyRGlzcGxheScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFdoZW5ldmVyIG9uZSBvZiB0aGUgc3RyaW5ncyB1c2VkIHRvIGZvcm1hdCB0aGUgTnVtYmVyRGlzcGxheSBjaGFuZ2VzLCBjYWxsIHNldE51bWJlckZvcm1hdHRlciB3aXRoIGFcclxuICAgIC8vIG5ldyBmb3JtYXR0aW5nIGZ1bmN0aW9uLlxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayhcclxuICAgICAgWyBCZWVyc0xhd0xhYlN0cmluZ3MucGF0dGVyblsgJzB2YWx1ZScgXVsgJzF1bml0c1N0cmluZ1Byb3BlcnR5JyBdLCBCZWVyc0xhd0xhYlN0cmluZ3MudW5pdHMubm1TdHJpbmdQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHBhdHRlcm4sIG5tU3RyaW5nICkgPT4gbnVtYmVyRGlzcGxheS5zZXROdW1iZXJGb3JtYXR0ZXIoIHdhdmVsZW5ndGggPT4gU3RyaW5nVXRpbHMuZm9ybWF0KCBwYXR0ZXJuLCBVdGlscy50b0ZpeGVkKCB3YXZlbGVuZ3RoLCAwICksIG5tU3RyaW5nICkgKVxyXG4gICAgKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVSYWRpb0J1dHRvbkxhYmVsKCB0ZXh0OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCByYWRpb0J1dHRvblRhbmRlbTogVGFuZGVtICk6IE5vZGUge1xyXG4gICAgICByZXR1cm4gbmV3IFRleHQoIHRleHQsIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDE4ICksXHJcbiAgICAgICAgZmlsbDogJ2JsYWNrJyxcclxuICAgICAgICB0YW5kZW06IHJhZGlvQnV0dG9uVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmFkaW8gYnV0dG9uIGRlc2NyaXB0aW9uc1xyXG4gICAgY29uc3QgcmFkaW9CdXR0b25JdGVtczogQXF1YVJhZGlvQnV0dG9uR3JvdXBJdGVtPExpZ2h0TW9kZT5bXSA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHZhbHVlOiBMaWdodE1vZGUuUFJFU0VULFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiBjcmVhdGVSYWRpb0J1dHRvbkxhYmVsKCBCZWVyc0xhd0xhYlN0cmluZ3MucHJlc2V0U3RyaW5nUHJvcGVydHksIHRhbmRlbSApLFxyXG4gICAgICAgIHRhbmRlbU5hbWU6ICdwcmVzZXRXYXZlbGVuZ3RoUmFkaW9CdXR0b24nXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogTGlnaHRNb2RlLlZBUklBQkxFLFxyXG4gICAgICAgIGNyZWF0ZU5vZGU6IHRhbmRlbSA9PiBjcmVhdGVSYWRpb0J1dHRvbkxhYmVsKCBCZWVyc0xhd0xhYlN0cmluZ3MudmFyaWFibGVTdHJpbmdQcm9wZXJ0eSwgdGFuZGVtICksXHJcbiAgICAgICAgdGFuZGVtTmFtZTogJ3ZhcmlhYmxlV2F2ZWxlbmd0aFJhZGlvQnV0dG9uJ1xyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIHJhZGlvIGJ1dHRvbiBncm91cFxyXG4gICAgY29uc3QgcmFkaW9CdXR0b25Hcm91cCA9IG5ldyBBcXVhUmFkaW9CdXR0b25Hcm91cCggbGlnaHQubW9kZVByb3BlcnR5LCByYWRpb0J1dHRvbkl0ZW1zLCB7XHJcbiAgICAgIHJhZGlvQnV0dG9uT3B0aW9uczoge1xyXG4gICAgICAgIHJhZGl1czogQkxMQ29uc3RhbnRzLlJBRElPX0JVVFRPTl9SQURJVVNcclxuICAgICAgfSxcclxuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgc3BhY2luZzogMTUsXHJcbiAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogOCxcclxuICAgICAgbWF4V2lkdGg6IDI1MCxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdyYWRpb0J1dHRvbkdyb3VwJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgd2F2ZWxlbmd0aE51bWJlckNvbnRyb2xUYW5kZW0gPSBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd3YXZlbGVuZ3RoTnVtYmVyQ29udHJvbCcgKTtcclxuICAgIGNvbnN0IHdhdmVsZW5ndGhOdW1iZXJDb250cm9sID0gbmV3IFdhdmVsZW5ndGhOdW1iZXJDb250cm9sKCBsaWdodC53YXZlbGVuZ3RoUHJvcGVydHksIHtcclxuICAgICAgdGl0bGVOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVQgLy8gYmVjYXVzZSBvdXIgdGl0bGUgaXMgbm90IHBhcnQgb2YgV2F2ZWxlbmd0aE51bWJlckNvbnRyb2xcclxuICAgICAgfSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIGxpZ2h0Lm1vZGVQcm9wZXJ0eSBdLCBtb2RlID0+ICggbW9kZSA9PT0gTGlnaHRNb2RlLlZBUklBQkxFICksIHtcclxuICAgICAgICB0YW5kZW06IHdhdmVsZW5ndGhOdW1iZXJDb250cm9sVGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Zpc2libGVQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IEJvb2xlYW5JT1xyXG4gICAgICB9ICksXHJcbiAgICAgIHNwZWN0cnVtU2xpZGVyVHJhY2tPcHRpb25zOiB7XHJcbiAgICAgICAgc2l6ZTogU0xJREVSX1RSQUNLX1NJWkVcclxuICAgICAgfSxcclxuICAgICAgc3BlY3RydW1TbGlkZXJUaHVtYk9wdGlvbnM6IHtcclxuICAgICAgICB3aWR0aDogMzUsXHJcbiAgICAgICAgaGVpZ2h0OiA0NSxcclxuICAgICAgICBjdXJzb3JIZWlnaHQ6IFNMSURFUl9UUkFDS19TSVpFLmhlaWdodFxyXG4gICAgICB9LFxyXG4gICAgICBhcnJvd0J1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBzY2FsZTogMSxcclxuICAgICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDUsXHJcbiAgICAgICAgdG91Y2hBcmVhWURpbGF0aW9uOiAxMFxyXG4gICAgICB9LFxyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogKCB0aXRsZU5vZGUsIG51bWJlckRpc3BsYXksIHNsaWRlciwgZGVjcmVtZW50QnV0dG9uLCBpbmNyZW1lbnRCdXR0b24gKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZGVjcmVtZW50QnV0dG9uICYmIGluY3JlbWVudEJ1dHRvbiApO1xyXG4gICAgICAgIHJldHVybiBuZXcgSEJveCgge1xyXG4gICAgICAgICAgYWxpZ246ICd0b3AnLFxyXG4gICAgICAgICAgc3BhY2luZzogLTEwLFxyXG4gICAgICAgICAgcmVzaXplOiBmYWxzZSwgLy8gcHJldmVudCBzbGlkZXIgZnJvbSBjYXVzaW5nIGEgcmVzaXplIHdoZW4gdGh1bWIgaXMgYXQgbWluIG9yIG1heFxyXG4gICAgICAgICAgY2hpbGRyZW46IFsgZGVjcmVtZW50QnV0dG9uISwgc2xpZGVyLCBpbmNyZW1lbnRCdXR0b24hIF1cclxuICAgICAgICB9ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbmRlbTogd2F2ZWxlbmd0aE51bWJlckNvbnRyb2xUYW5kZW1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyByZW5kZXJpbmcgb3JkZXJcclxuICAgIGNvbnN0IHZCb3ggPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiAyNCxcclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgSEJveCgge1xyXG4gICAgICAgICAgc3BhY2luZzogMTAsXHJcbiAgICAgICAgICBjaGlsZHJlbjogWyBsYWJlbFRleHQsIG51bWJlckRpc3BsYXkgXSxcclxuICAgICAgICAgIG1heFdpZHRoOiAyNTBcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgcmFkaW9CdXR0b25Hcm91cCxcclxuICAgICAgICB3YXZlbGVuZ3RoTnVtYmVyQ29udHJvbFxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYWRkIGEgaG9yaXpvbnRhbCBzdHJ1dCB0byBwcmV2ZW50IHdpZHRoIGNoYW5nZXNcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyBuZXcgSFN0cnV0KCB2Qm94LndpZHRoICksIHZCb3ggXVxyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBjb250ZW50LCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBsaWdodC53YXZlbGVuZ3RoUHJvcGVydHksIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oIGxpZ2h0LndhdmVsZW5ndGhQcm9wZXJ0eS50YW5kZW0ubmFtZSApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuYmVlcnNMYXdMYWIucmVnaXN0ZXIoICdXYXZlbGVuZ3RoUGFuZWwnLCBXYXZlbGVuZ3RoUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxTQUFTLE1BQU0sa0NBQWtDO0FBR3hELE9BQU9DLFVBQVUsTUFBTSxrQ0FBa0M7QUFDekQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLGFBQWEsTUFBTSw4Q0FBOEM7QUFDeEUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyx1QkFBdUIsTUFBTSx3REFBd0Q7QUFDNUYsU0FBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBMEJDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUMxRyxPQUFPQyxvQkFBb0IsTUFBb0MsNENBQTRDO0FBQzNHLE9BQU9DLEtBQUssTUFBd0IsNkJBQTZCO0FBQ2pFLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsU0FBUyxNQUFNLDBDQUEwQztBQUNoRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBQzVELE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7QUFHdkQsT0FBT0MsU0FBUyxNQUFNLHVCQUF1Qjs7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