// Copyright 2013-2022, University of Colorado Boulder

/**
 * ConcentrationTransform manages the transformation between how concentration values are stored in
 * the model, and how they are presented in the view.
 *
 * In the model, concentration is stored in moles per liter (M) for all solutions.
 * In the view, the concentration units will vary by solution, such that the
 * concentration can be displayed as integral values (no decimals, no scientific notation.)
 * This class specifies the units to be used for displaying the concentration in
 * the view (eg, M, mM, uM) and handles the conversion between model and view units.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import beersLawLab from '../../beersLawLab.js';
import BeersLawLabStrings from '../../BeersLawLabStrings.js';
export default class ConcentrationTransform {
  // specific transforms
  static mM = new ConcentrationTransform(1000, BeersLawLabStrings.units.mMStringProperty);
  static uM = new ConcentrationTransform(1000000, BeersLawLabStrings.units.uMStringProperty);

  /**
   * @param scale scale factor used to convert model units (Moles, M) to view units
   * @param unitsStringProperty
   */
  constructor(scale, unitsStringProperty) {
    this.scale = scale;
    this.unitsStringProperty = unitsStringProperty;
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }

  /**
   * Converts from model (M) to view (solution specific).
   */
  modelToView(modelConcentration) {
    return modelConcentration * this.scale;
  }

  /**
   * Converts from view (solution specific) to model (M).
   */
  viewToModel(viewConcentration) {
    return viewConcentration / this.scale;
  }
}
beersLawLab.register('ConcentrationTransform', ConcentrationTransform);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiZWVyc0xhd0xhYiIsIkJlZXJzTGF3TGFiU3RyaW5ncyIsIkNvbmNlbnRyYXRpb25UcmFuc2Zvcm0iLCJtTSIsInVuaXRzIiwibU1TdHJpbmdQcm9wZXJ0eSIsInVNIiwidU1TdHJpbmdQcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwic2NhbGUiLCJ1bml0c1N0cmluZ1Byb3BlcnR5IiwiZGlzcG9zZSIsImFzc2VydCIsIm1vZGVsVG9WaWV3IiwibW9kZWxDb25jZW50cmF0aW9uIiwidmlld1RvTW9kZWwiLCJ2aWV3Q29uY2VudHJhdGlvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29uY2VudHJhdGlvblRyYW5zZm9ybS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb25jZW50cmF0aW9uVHJhbnNmb3JtIG1hbmFnZXMgdGhlIHRyYW5zZm9ybWF0aW9uIGJldHdlZW4gaG93IGNvbmNlbnRyYXRpb24gdmFsdWVzIGFyZSBzdG9yZWQgaW5cclxuICogdGhlIG1vZGVsLCBhbmQgaG93IHRoZXkgYXJlIHByZXNlbnRlZCBpbiB0aGUgdmlldy5cclxuICpcclxuICogSW4gdGhlIG1vZGVsLCBjb25jZW50cmF0aW9uIGlzIHN0b3JlZCBpbiBtb2xlcyBwZXIgbGl0ZXIgKE0pIGZvciBhbGwgc29sdXRpb25zLlxyXG4gKiBJbiB0aGUgdmlldywgdGhlIGNvbmNlbnRyYXRpb24gdW5pdHMgd2lsbCB2YXJ5IGJ5IHNvbHV0aW9uLCBzdWNoIHRoYXQgdGhlXHJcbiAqIGNvbmNlbnRyYXRpb24gY2FuIGJlIGRpc3BsYXllZCBhcyBpbnRlZ3JhbCB2YWx1ZXMgKG5vIGRlY2ltYWxzLCBubyBzY2llbnRpZmljIG5vdGF0aW9uLilcclxuICogVGhpcyBjbGFzcyBzcGVjaWZpZXMgdGhlIHVuaXRzIHRvIGJlIHVzZWQgZm9yIGRpc3BsYXlpbmcgdGhlIGNvbmNlbnRyYXRpb24gaW5cclxuICogdGhlIHZpZXcgKGVnLCBNLCBtTSwgdU0pIGFuZCBoYW5kbGVzIHRoZSBjb252ZXJzaW9uIGJldHdlZW4gbW9kZWwgYW5kIHZpZXcgdW5pdHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgQmVlcnNMYXdMYWJTdHJpbmdzIGZyb20gJy4uLy4uL0JlZXJzTGF3TGFiU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25jZW50cmF0aW9uVHJhbnNmb3JtIHtcclxuXHJcbiAgLy8gc3BlY2lmaWMgdHJhbnNmb3Jtc1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgbU0gPSBuZXcgQ29uY2VudHJhdGlvblRyYW5zZm9ybSggMTAwMCwgQmVlcnNMYXdMYWJTdHJpbmdzLnVuaXRzLm1NU3RyaW5nUHJvcGVydHkgKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHVNID0gbmV3IENvbmNlbnRyYXRpb25UcmFuc2Zvcm0oIDEwMDAwMDAsIEJlZXJzTGF3TGFiU3RyaW5ncy51bml0cy51TVN0cmluZ1Byb3BlcnR5ICk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBzY2FsZSBzY2FsZSBmYWN0b3IgdXNlZCB0byBjb252ZXJ0IG1vZGVsIHVuaXRzIChNb2xlcywgTSkgdG8gdmlldyB1bml0c1xyXG4gICAqIEBwYXJhbSB1bml0c1N0cmluZ1Byb3BlcnR5XHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwdWJsaWMgcmVhZG9ubHkgc2NhbGU6IG51bWJlciwgcHVibGljIHJlYWRvbmx5IHVuaXRzU3RyaW5nUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4gKSB7fVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgZnJvbSBtb2RlbCAoTSkgdG8gdmlldyAoc29sdXRpb24gc3BlY2lmaWMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBtb2RlbFRvVmlldyggbW9kZWxDb25jZW50cmF0aW9uOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBtb2RlbENvbmNlbnRyYXRpb24gKiB0aGlzLnNjYWxlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgZnJvbSB2aWV3IChzb2x1dGlvbiBzcGVjaWZpYykgdG8gbW9kZWwgKE0pLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB2aWV3VG9Nb2RlbCggdmlld0NvbmNlbnRyYXRpb246IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHZpZXdDb25jZW50cmF0aW9uIC8gdGhpcy5zY2FsZTtcclxuICB9XHJcbn1cclxuXHJcbmJlZXJzTGF3TGFiLnJlZ2lzdGVyKCAnQ29uY2VudHJhdGlvblRyYW5zZm9ybScsIENvbmNlbnRyYXRpb25UcmFuc2Zvcm0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUU1RCxlQUFlLE1BQU1DLHNCQUFzQixDQUFDO0VBRTFDO0VBQ0EsT0FBdUJDLEVBQUUsR0FBRyxJQUFJRCxzQkFBc0IsQ0FBRSxJQUFJLEVBQUVELGtCQUFrQixDQUFDRyxLQUFLLENBQUNDLGdCQUFpQixDQUFDO0VBQ3pHLE9BQXVCQyxFQUFFLEdBQUcsSUFBSUosc0JBQXNCLENBQUUsT0FBTyxFQUFFRCxrQkFBa0IsQ0FBQ0csS0FBSyxDQUFDRyxnQkFBaUIsQ0FBQzs7RUFFNUc7QUFDRjtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBa0JDLEtBQWEsRUFBa0JDLG1CQUE4QyxFQUFHO0lBQUEsS0FBaEZELEtBQWEsR0FBYkEsS0FBYTtJQUFBLEtBQWtCQyxtQkFBOEMsR0FBOUNBLG1CQUE4QztFQUFJO0VBRTlHQyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsa0JBQTBCLEVBQVc7SUFDdkQsT0FBT0Esa0JBQWtCLEdBQUcsSUFBSSxDQUFDTCxLQUFLO0VBQ3hDOztFQUVBO0FBQ0Y7QUFDQTtFQUNTTSxXQUFXQSxDQUFFQyxpQkFBeUIsRUFBVztJQUN0RCxPQUFPQSxpQkFBaUIsR0FBRyxJQUFJLENBQUNQLEtBQUs7RUFDdkM7QUFDRjtBQUVBVCxXQUFXLENBQUNpQixRQUFRLENBQUUsd0JBQXdCLEVBQUVmLHNCQUF1QixDQUFDIn0=