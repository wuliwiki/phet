// Copyright 2013-2022, University of Colorado Boulder

/**
 * Light is the model of a simple light.
 * Origin is at the center of the lens.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import VisibleColor from '../../../../scenery-phet/js/VisibleColor.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import beersLawLab from '../../beersLawLab.js';
import LightMode from './LightMode.js';
export default class Light extends PhetioObject {
  constructor(solutionProperty, providedOptions) {
    const options = optionize()({
      position: Vector2.ZERO,
      // cm
      lensDiameter: 0.45,
      // cm
      isOn: false,
      phetioState: false
    }, providedOptions);
    super(options);
    this.position = options.position;
    this.lensDiameter = options.lensDiameter;
    this.isOnProperty = new BooleanProperty(options.isOn, {
      tandem: options.tandem.createTandem('isOnProperty')
    });
    this.wavelengthProperty = new NumberProperty(solutionProperty.value.molarAbsorptivityData.lambdaMax /*nm*/, {
      units: 'nm',
      range: new Range(VisibleColor.MIN_WAVELENGTH, VisibleColor.MAX_WAVELENGTH),
      tandem: options.tandem.createTandem('wavelengthProperty'),
      phetioReadOnly: true
    });
    this.modeProperty = new EnumerationProperty(LightMode.PRESET, {
      tandem: options.tandem.createTandem('modeProperty')
    });

    // when the solution changes, set the light to the solution's lambdaMax wavelength
    solutionProperty.link(solution => {
      this.wavelengthProperty.value = solution.molarAbsorptivityData.lambdaMax;
    });
    this.modeProperty.link(mode => {
      // 'Preset' sets the light to the current solution's lambdaMax wavelength.
      if (mode === LightMode.PRESET) {
        this.wavelengthProperty.value = solutionProperty.value.molarAbsorptivityData.lambdaMax;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.isOnProperty.reset();
    this.wavelengthProperty.reset();
    this.modeProperty.reset();
  }
  getMinY() {
    return this.position.y - this.lensDiameter / 2;
  }
  getMaxY() {
    return this.position.y + this.lensDiameter / 2;
  }
}
beersLawLab.register('Light', Light);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,