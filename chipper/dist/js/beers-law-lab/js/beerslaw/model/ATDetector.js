// Copyright 2013-2023, University of Colorado Boulder

/**
 * ATDetector is the detector for absorbance (A) and percent transmittance (%T) of light passing through
 * a solution in a cuvette.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import beersLawLab from '../../beersLawLab.js';
import BLLMovable from '../../common/model/BLLMovable.js';
import ATDetectorMode from './ATDetectorMode.js';
export default class ATDetector extends PhetioObject {
  constructor(light, cuvette, solutionInCuvette, providedOptions) {
    const options = optionize()({
      bodyPosition: Vector2.ZERO,
      probePosition: Vector2.ZERO,
      probeDragBounds: Bounds2.EVERYTHING,
      phetioState: false
    }, providedOptions);
    super(options);
    this.light = light;
    this.body = new BLLMovable({
      position: options.bodyPosition,
      tandem: options.tandem.createTandem('body')
    });
    this.probe = new Probe({
      sensorDiameter: 0.57,
      position: options.probePosition,
      dragBounds: options.probeDragBounds,
      tandem: options.tandem.createTandem('probe')
    });
    this.modeProperty = new EnumerationProperty(ATDetectorMode.TRANSMITTANCE, {
      tandem: options.tandem.createTandem('modeProperty')
    });
    const pathLengthProperty = new DerivedProperty([this.light.isOnProperty, this.probe.positionProperty, cuvette.widthProperty], (lightIsOn, probePosition, cuvetteWidth) => lightIsOn && this.isProbeInBeam() ? Math.min(Math.max(0, probePosition.x - cuvette.position.x), cuvetteWidth) : null, {
      units: 'cm',
      tandem: options.tandem.createTandem('pathLengthProperty'),
      phetioValueType: NullableIO(NumberIO),
      phetioDocumentation: 'The distance that the light beam passes through the solution before hitting the probe. ' + 'null if the light is off or the probe is not in the beam.'
    });
    this.absorbanceProperty = new DerivedProperty([pathLengthProperty, solutionInCuvette.absorbanceProperty], (pathLength, solutionInCuvetteAbsorbance) => pathLength === null ? null : solutionInCuvette.getAbsorbanceAt(pathLength), {
      tandem: options.tandem.createTandem('absorbanceProperty'),
      phetioValueType: NullableIO(NumberIO),
      phetioDocumentation: 'Absorbance at the position of the probe, null if the probe is not in the light beam'
    });
    this.transmittanceProperty = new DerivedProperty([pathLengthProperty, solutionInCuvette.transmittanceProperty], (pathLength, solutionInCuvetteTransmittance) => pathLength === null ? null : solutionInCuvette.getTransmittanceAt(pathLength), {
      tandem: options.tandem.createTandem('transmittanceProperty'),
      phetioValueType: NullableIO(NumberIO),
      phetioDocumentation: 'Transmittance at the position of the probe, null if the probe is not in the light beam'
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.body.reset();
    this.probe.reset();
    this.modeProperty.reset();
  }

  /**
   * Is the probe in some segment of the beam?
   */
  isProbeInBeam() {
    return this.light.isOnProperty.value && this.probe.getMinY() < this.light.getMinY() && this.probe.getMaxY() > this.light.getMaxY() && this.probe.positionProperty.value.x > this.light.position.x;
  }
}

/**
 * Probe is the probe part of the detector, whose position indicates where the measurement is being made.
 */

class Probe extends BLLMovable {
  constructor(providedOptions) {
    const options = optionize()({
      // ProbeSelfOptions
      sensorDiameter: 1,
      // BLLMovableOptions
      positionPhetioReadOnly: false
    }, providedOptions);
    super(options);
    this.sensorDiameter = options.sensorDiameter;
  }
  getMinY() {
    return this.positionProperty.value.y - this.sensorDiameter / 2;
  }
  getMaxY() {
    return this.positionProperty.value.y + this.sensorDiameter / 2;
  }
}
beersLawLab.register('ATDetector', ATDetector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJFbnVtZXJhdGlvblByb3BlcnR5IiwiQm91bmRzMiIsIlZlY3RvcjIiLCJvcHRpb25pemUiLCJQaGV0aW9PYmplY3QiLCJOdWxsYWJsZUlPIiwiTnVtYmVySU8iLCJiZWVyc0xhd0xhYiIsIkJMTE1vdmFibGUiLCJBVERldGVjdG9yTW9kZSIsIkFURGV0ZWN0b3IiLCJjb25zdHJ1Y3RvciIsImxpZ2h0IiwiY3V2ZXR0ZSIsInNvbHV0aW9uSW5DdXZldHRlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJvZHlQb3NpdGlvbiIsIlpFUk8iLCJwcm9iZVBvc2l0aW9uIiwicHJvYmVEcmFnQm91bmRzIiwiRVZFUllUSElORyIsInBoZXRpb1N0YXRlIiwiYm9keSIsInBvc2l0aW9uIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicHJvYmUiLCJQcm9iZSIsInNlbnNvckRpYW1ldGVyIiwiZHJhZ0JvdW5kcyIsIm1vZGVQcm9wZXJ0eSIsIlRSQU5TTUlUVEFOQ0UiLCJwYXRoTGVuZ3RoUHJvcGVydHkiLCJpc09uUHJvcGVydHkiLCJwb3NpdGlvblByb3BlcnR5Iiwid2lkdGhQcm9wZXJ0eSIsImxpZ2h0SXNPbiIsImN1dmV0dGVXaWR0aCIsImlzUHJvYmVJbkJlYW0iLCJNYXRoIiwibWluIiwibWF4IiwieCIsInVuaXRzIiwicGhldGlvVmFsdWVUeXBlIiwicGhldGlvRG9jdW1lbnRhdGlvbiIsImFic29yYmFuY2VQcm9wZXJ0eSIsInBhdGhMZW5ndGgiLCJzb2x1dGlvbkluQ3V2ZXR0ZUFic29yYmFuY2UiLCJnZXRBYnNvcmJhbmNlQXQiLCJ0cmFuc21pdHRhbmNlUHJvcGVydHkiLCJzb2x1dGlvbkluQ3V2ZXR0ZVRyYW5zbWl0dGFuY2UiLCJnZXRUcmFuc21pdHRhbmNlQXQiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVzZXQiLCJ2YWx1ZSIsImdldE1pblkiLCJnZXRNYXhZIiwicG9zaXRpb25QaGV0aW9SZWFkT25seSIsInkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFURGV0ZWN0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQVREZXRlY3RvciBpcyB0aGUgZGV0ZWN0b3IgZm9yIGFic29yYmFuY2UgKEEpIGFuZCBwZXJjZW50IHRyYW5zbWl0dGFuY2UgKCVUKSBvZiBsaWdodCBwYXNzaW5nIHRocm91Z2hcclxuICogYSBzb2x1dGlvbiBpbiBhIGN1dmV0dGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgTnVsbGFibGVJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVsbGFibGVJTy5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgQkxMTW92YWJsZSwgeyBCTExNb3ZhYmxlT3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9CTExNb3ZhYmxlLmpzJztcclxuaW1wb3J0IFNvbHV0aW9uSW5DdXZldHRlIGZyb20gJy4vU29sdXRpb25JbkN1dmV0dGUuanMnO1xyXG5pbXBvcnQgQVREZXRlY3Rvck1vZGUgZnJvbSAnLi9BVERldGVjdG9yTW9kZS5qcyc7XHJcbmltcG9ydCBDdXZldHRlIGZyb20gJy4vQ3V2ZXR0ZS5qcyc7XHJcbmltcG9ydCBMaWdodCBmcm9tICcuL0xpZ2h0LmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgYm9keVBvc2l0aW9uPzogVmVjdG9yMjtcclxuICBwcm9iZVBvc2l0aW9uPzogVmVjdG9yMjtcclxuICBwcm9iZURyYWdCb3VuZHM/OiBCb3VuZHMyO1xyXG59O1xyXG5cclxudHlwZSBBVERldGVjdG9yT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFURGV0ZWN0b3IgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxpZ2h0OiBMaWdodDtcclxuICBwdWJsaWMgcmVhZG9ubHkgYm9keTogQkxMTW92YWJsZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvYmU6IFByb2JlO1xyXG4gIHB1YmxpYyByZWFkb25seSBtb2RlUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8QVREZXRlY3Rvck1vZGU+O1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYWJzb3JiYW5jZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdHJhbnNtaXR0YW5jZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsaWdodDogTGlnaHQsIGN1dmV0dGU6IEN1dmV0dGUsIHNvbHV0aW9uSW5DdXZldHRlOiBTb2x1dGlvbkluQ3V2ZXR0ZSwgcHJvdmlkZWRPcHRpb25zOiBBVERldGVjdG9yT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEFURGV0ZWN0b3JPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG4gICAgICBib2R5UG9zaXRpb246IFZlY3RvcjIuWkVSTyxcclxuICAgICAgcHJvYmVQb3NpdGlvbjogVmVjdG9yMi5aRVJPLFxyXG4gICAgICBwcm9iZURyYWdCb3VuZHM6IEJvdW5kczIuRVZFUllUSElORyxcclxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubGlnaHQgPSBsaWdodDtcclxuXHJcbiAgICB0aGlzLmJvZHkgPSBuZXcgQkxMTW92YWJsZSgge1xyXG4gICAgICBwb3NpdGlvbjogb3B0aW9ucy5ib2R5UG9zaXRpb24sXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnYm9keScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMucHJvYmUgPSBuZXcgUHJvYmUoIHtcclxuICAgICAgc2Vuc29yRGlhbWV0ZXI6IDAuNTcsXHJcbiAgICAgIHBvc2l0aW9uOiBvcHRpb25zLnByb2JlUG9zaXRpb24sXHJcbiAgICAgIGRyYWdCb3VuZHM6IG9wdGlvbnMucHJvYmVEcmFnQm91bmRzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2JlJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5tb2RlUHJvcGVydHkgPSBuZXcgRW51bWVyYXRpb25Qcm9wZXJ0eSggQVREZXRlY3Rvck1vZGUuVFJBTlNNSVRUQU5DRSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21vZGVQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IHBhdGhMZW5ndGhQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgdGhpcy5saWdodC5pc09uUHJvcGVydHksIHRoaXMucHJvYmUucG9zaXRpb25Qcm9wZXJ0eSwgY3V2ZXR0ZS53aWR0aFByb3BlcnR5IF0sXHJcbiAgICAgICggbGlnaHRJc09uLCBwcm9iZVBvc2l0aW9uLCBjdXZldHRlV2lkdGggKSA9PlxyXG4gICAgICAgICggbGlnaHRJc09uICYmIHRoaXMuaXNQcm9iZUluQmVhbSgpICkgPyBNYXRoLm1pbiggTWF0aC5tYXgoIDAsIHByb2JlUG9zaXRpb24ueCAtIGN1dmV0dGUucG9zaXRpb24ueCApLCBjdXZldHRlV2lkdGggKSA6IG51bGwsIHtcclxuICAgICAgICB1bml0czogJ2NtJyxcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BhdGhMZW5ndGhQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RoZSBkaXN0YW5jZSB0aGF0IHRoZSBsaWdodCBiZWFtIHBhc3NlcyB0aHJvdWdoIHRoZSBzb2x1dGlvbiBiZWZvcmUgaGl0dGluZyB0aGUgcHJvYmUuICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdudWxsIGlmIHRoZSBsaWdodCBpcyBvZmYgb3IgdGhlIHByb2JlIGlzIG5vdCBpbiB0aGUgYmVhbS4nXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmFic29yYmFuY2VQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgcGF0aExlbmd0aFByb3BlcnR5LCBzb2x1dGlvbkluQ3V2ZXR0ZS5hYnNvcmJhbmNlUHJvcGVydHkgXSxcclxuICAgICAgKCBwYXRoTGVuZ3RoLCBzb2x1dGlvbkluQ3V2ZXR0ZUFic29yYmFuY2UgKSA9PlxyXG4gICAgICAgICggcGF0aExlbmd0aCA9PT0gbnVsbCApID8gbnVsbCA6IHNvbHV0aW9uSW5DdXZldHRlLmdldEFic29yYmFuY2VBdCggcGF0aExlbmd0aCApLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdhYnNvcmJhbmNlUHJvcGVydHknICksXHJcbiAgICAgICAgcGhldGlvVmFsdWVUeXBlOiBOdWxsYWJsZUlPKCBOdW1iZXJJTyApLFxyXG4gICAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdBYnNvcmJhbmNlIGF0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJvYmUsIG51bGwgaWYgdGhlIHByb2JlIGlzIG5vdCBpbiB0aGUgbGlnaHQgYmVhbSdcclxuICAgICAgfSApO1xyXG5cclxuICAgIHRoaXMudHJhbnNtaXR0YW5jZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyBwYXRoTGVuZ3RoUHJvcGVydHksIHNvbHV0aW9uSW5DdXZldHRlLnRyYW5zbWl0dGFuY2VQcm9wZXJ0eSBdLFxyXG4gICAgICAoIHBhdGhMZW5ndGgsIHNvbHV0aW9uSW5DdXZldHRlVHJhbnNtaXR0YW5jZSApID0+XHJcbiAgICAgICAgKCBwYXRoTGVuZ3RoID09PSBudWxsICkgPyBudWxsIDogc29sdXRpb25JbkN1dmV0dGUuZ2V0VHJhbnNtaXR0YW5jZUF0KCBwYXRoTGVuZ3RoICksIHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3RyYW5zbWl0dGFuY2VQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9WYWx1ZVR5cGU6IE51bGxhYmxlSU8oIE51bWJlcklPICksXHJcbiAgICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogJ1RyYW5zbWl0dGFuY2UgYXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwcm9iZSwgbnVsbCBpZiB0aGUgcHJvYmUgaXMgbm90IGluIHRoZSBsaWdodCBiZWFtJ1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5ib2R5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnByb2JlLnJlc2V0KCk7XHJcbiAgICB0aGlzLm1vZGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXMgdGhlIHByb2JlIGluIHNvbWUgc2VnbWVudCBvZiB0aGUgYmVhbT9cclxuICAgKi9cclxuICBwdWJsaWMgaXNQcm9iZUluQmVhbSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmxpZ2h0LmlzT25Qcm9wZXJ0eS52YWx1ZSAmJlxyXG4gICAgICAgICAgICggdGhpcy5wcm9iZS5nZXRNaW5ZKCkgPCB0aGlzLmxpZ2h0LmdldE1pblkoKSApICYmXHJcbiAgICAgICAgICAgKCB0aGlzLnByb2JlLmdldE1heFkoKSA+IHRoaXMubGlnaHQuZ2V0TWF4WSgpICkgJiZcclxuICAgICAgICAgICAoIHRoaXMucHJvYmUucG9zaXRpb25Qcm9wZXJ0eS52YWx1ZS54ID4gdGhpcy5saWdodC5wb3NpdGlvbi54ICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUHJvYmUgaXMgdGhlIHByb2JlIHBhcnQgb2YgdGhlIGRldGVjdG9yLCB3aG9zZSBwb3NpdGlvbiBpbmRpY2F0ZXMgd2hlcmUgdGhlIG1lYXN1cmVtZW50IGlzIGJlaW5nIG1hZGUuXHJcbiAqL1xyXG50eXBlIFByb2JlU2VsZk9wdGlvbnMgPSB7XHJcbiAgc2Vuc29yRGlhbWV0ZXI/OiBudW1iZXI7IC8vIGluIGNtXHJcbn07XHJcbnR5cGUgUHJvYmVPcHRpb25zID0gUHJvYmVTZWxmT3B0aW9ucyAmIEJMTE1vdmFibGVPcHRpb25zO1xyXG5cclxuY2xhc3MgUHJvYmUgZXh0ZW5kcyBCTExNb3ZhYmxlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzZW5zb3JEaWFtZXRlcjogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogUHJvYmVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UHJvYmVPcHRpb25zLCBQcm9iZVNlbGZPcHRpb25zLCBCTExNb3ZhYmxlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gUHJvYmVTZWxmT3B0aW9uc1xyXG4gICAgICBzZW5zb3JEaWFtZXRlcjogMSxcclxuXHJcbiAgICAgIC8vIEJMTE1vdmFibGVPcHRpb25zXHJcbiAgICAgIHBvc2l0aW9uUGhldGlvUmVhZE9ubHk6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuc2Vuc29yRGlhbWV0ZXIgPSBvcHRpb25zLnNlbnNvckRpYW1ldGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE1pblkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uUHJvcGVydHkudmFsdWUueSAtICggdGhpcy5zZW5zb3JEaWFtZXRlciAvIDIgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNYXhZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvblByb3BlcnR5LnZhbHVlLnkgKyAoIHRoaXMuc2Vuc29yRGlhbWV0ZXIgLyAyICk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ0FURGV0ZWN0b3InLCBBVERldGVjdG9yICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHdDQUF3QztBQUNwRSxPQUFPQyxtQkFBbUIsTUFBTSw0Q0FBNEM7QUFFNUUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsWUFBWSxNQUErQix1Q0FBdUM7QUFDekYsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsVUFBVSxNQUE2QixrQ0FBa0M7QUFFaEYsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQVloRCxlQUFlLE1BQU1DLFVBQVUsU0FBU04sWUFBWSxDQUFDO0VBVTVDTyxXQUFXQSxDQUFFQyxLQUFZLEVBQUVDLE9BQWdCLEVBQUVDLGlCQUFvQyxFQUFFQyxlQUFrQyxFQUFHO0lBRTdILE1BQU1DLE9BQU8sR0FBR2IsU0FBUyxDQUFzRCxDQUFDLENBQUU7TUFDaEZjLFlBQVksRUFBRWYsT0FBTyxDQUFDZ0IsSUFBSTtNQUMxQkMsYUFBYSxFQUFFakIsT0FBTyxDQUFDZ0IsSUFBSTtNQUMzQkUsZUFBZSxFQUFFbkIsT0FBTyxDQUFDb0IsVUFBVTtNQUNuQ0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxF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