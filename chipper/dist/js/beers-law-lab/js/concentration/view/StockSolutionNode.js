// Copyright 2013-2023, University of Colorado Boulder

/**
 * Stock solution coming out of the dropper.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Rectangle } from '../../../../scenery/js/imports.js';
import beersLawLab from '../../beersLawLab.js';
import ConcentrationSolution from '../model/ConcentrationSolution.js';
export default class StockSolutionNode extends Rectangle {
  constructor(solvent, soluteProperty, dropper, beaker, tipWidth, modelViewTransform) {
    super(0, 0, 0, 0, {
      lineWidth: 1
    });

    // shape and position
    const updateShapeAndPosition = () => {
      // path
      if (dropper.isDispensingProperty.value && !dropper.isEmptyProperty.value) {
        this.setRect(-tipWidth / 2, 0, tipWidth, beaker.position.y - dropper.position.y);
      } else {
        this.setRect(0, 0, 0, 0);
      }

      // move this node to the dropper's position
      this.translation = modelViewTransform.modelToViewPosition(dropper.position);
    };
    dropper.isDispensingProperty.link(updateShapeAndPosition);
    dropper.isEmptyProperty.link(updateShapeAndPosition);

    // set color to match solute
    soluteProperty.link(solute => {
      const color = ConcentrationSolution.createColor(solvent, solute, solute.stockSolutionConcentration);
      this.fill = color;
      this.stroke = color.darkerColor();
    });

    // hide this node when the dropper is invisible
    dropper.visibleProperty.link(visible => {
      this.setVisible(visible);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
beersLawLab.register('StockSolutionNode', StockSolutionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5nbGUiLCJiZWVyc0xhd0xhYiIsIkNvbmNlbnRyYXRpb25Tb2x1dGlvbiIsIlN0b2NrU29sdXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJzb2x2ZW50Iiwic29sdXRlUHJvcGVydHkiLCJkcm9wcGVyIiwiYmVha2VyIiwidGlwV2lkdGgiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJsaW5lV2lkdGgiLCJ1cGRhdGVTaGFwZUFuZFBvc2l0aW9uIiwiaXNEaXNwZW5zaW5nUHJvcGVydHkiLCJ2YWx1ZSIsImlzRW1wdHlQcm9wZXJ0eSIsInNldFJlY3QiLCJwb3NpdGlvbiIsInkiLCJ0cmFuc2xhdGlvbiIsIm1vZGVsVG9WaWV3UG9zaXRpb24iLCJsaW5rIiwic29sdXRlIiwiY29sb3IiLCJjcmVhdGVDb2xvciIsInN0b2NrU29sdXRpb25Db25jZW50cmF0aW9uIiwiZmlsbCIsInN0cm9rZSIsImRhcmtlckNvbG9yIiwidmlzaWJsZVByb3BlcnR5IiwidmlzaWJsZSIsInNldFZpc2libGUiLCJkaXNwb3NlIiwiYXNzZXJ0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTdG9ja1NvbHV0aW9uTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdG9jayBzb2x1dGlvbiBjb21pbmcgb3V0IG9mIHRoZSBkcm9wcGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgU29sdXRlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Tb2x1dGUuanMnO1xyXG5pbXBvcnQgU29sdmVudCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU29sdmVudC5qcyc7XHJcbmltcG9ydCBCZWFrZXIgZnJvbSAnLi4vbW9kZWwvQmVha2VyLmpzJztcclxuaW1wb3J0IENvbmNlbnRyYXRpb25Tb2x1dGlvbiBmcm9tICcuLi9tb2RlbC9Db25jZW50cmF0aW9uU29sdXRpb24uanMnO1xyXG5pbXBvcnQgRHJvcHBlciBmcm9tICcuLi9tb2RlbC9Ecm9wcGVyLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b2NrU29sdXRpb25Ob2RlIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzb2x2ZW50OiBTb2x2ZW50LCBzb2x1dGVQcm9wZXJ0eTogUHJvcGVydHk8U29sdXRlPiwgZHJvcHBlcjogRHJvcHBlciwgYmVha2VyOiBCZWFrZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXBXaWR0aDogbnVtYmVyLCBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIgKSB7XHJcblxyXG4gICAgc3VwZXIoIDAsIDAsIDAsIDAsIHsgbGluZVdpZHRoOiAxIH0gKTtcclxuXHJcbiAgICAvLyBzaGFwZSBhbmQgcG9zaXRpb25cclxuICAgIGNvbnN0IHVwZGF0ZVNoYXBlQW5kUG9zaXRpb24gPSAoKSA9PiB7XHJcblxyXG4gICAgICAvLyBwYXRoXHJcbiAgICAgIGlmICggZHJvcHBlci5pc0Rpc3BlbnNpbmdQcm9wZXJ0eS52YWx1ZSAmJiAhZHJvcHBlci5pc0VtcHR5UHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSZWN0KCAtdGlwV2lkdGggLyAyLCAwLCB0aXBXaWR0aCwgYmVha2VyLnBvc2l0aW9uLnkgLSBkcm9wcGVyLnBvc2l0aW9uLnkgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnNldFJlY3QoIDAsIDAsIDAsIDAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gbW92ZSB0aGlzIG5vZGUgdG8gdGhlIGRyb3BwZXIncyBwb3NpdGlvblxyXG4gICAgICB0aGlzLnRyYW5zbGF0aW9uID0gbW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3UG9zaXRpb24oIGRyb3BwZXIucG9zaXRpb24gKTtcclxuICAgIH07XHJcbiAgICBkcm9wcGVyLmlzRGlzcGVuc2luZ1Byb3BlcnR5LmxpbmsoIHVwZGF0ZVNoYXBlQW5kUG9zaXRpb24gKTtcclxuICAgIGRyb3BwZXIuaXNFbXB0eVByb3BlcnR5LmxpbmsoIHVwZGF0ZVNoYXBlQW5kUG9zaXRpb24gKTtcclxuXHJcbiAgICAvLyBzZXQgY29sb3IgdG8gbWF0Y2ggc29sdXRlXHJcbiAgICBzb2x1dGVQcm9wZXJ0eS5saW5rKCBzb2x1dGUgPT4ge1xyXG4gICAgICBjb25zdCBjb2xvciA9IENvbmNlbnRyYXRpb25Tb2x1dGlvbi5jcmVhdGVDb2xvciggc29sdmVudCwgc29sdXRlLCBzb2x1dGUuc3RvY2tTb2x1dGlvbkNvbmNlbnRyYXRpb24gKTtcclxuICAgICAgdGhpcy5maWxsID0gY29sb3I7XHJcbiAgICAgIHRoaXMuc3Ryb2tlID0gY29sb3IuZGFya2VyQ29sb3IoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBoaWRlIHRoaXMgbm9kZSB3aGVuIHRoZSBkcm9wcGVyIGlzIGludmlzaWJsZVxyXG4gICAgZHJvcHBlci52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0VmlzaWJsZSggdmlzaWJsZSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmJlZXJzTGF3TGFiLnJlZ2lzdGVyKCAnU3RvY2tTb2x1dGlvbk5vZGUnLCBTdG9ja1NvbHV0aW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxTQUFTLFFBQVEsbUNBQW1DO0FBQzdELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFJOUMsT0FBT0MscUJBQXFCLE1BQU0sbUNBQW1DO0FBR3JFLGVBQWUsTUFBTUMsaUJBQWlCLFNBQVNILFNBQVMsQ0FBQztFQUVoREksV0FBV0EsQ0FBRUMsT0FBZ0IsRUFBRUMsY0FBZ0MsRUFBRUMsT0FBZ0IsRUFBRUMsTUFBYyxFQUNwRkMsUUFBZ0IsRUFBRUMsa0JBQXVDLEVBQUc7SUFFOUUsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUFFQyxTQUFTLEVBQUU7SUFBRSxDQUFFLENBQUM7O0lBRXJDO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUdBLENBQUEsS0FBTTtNQUVuQztNQUNBLElBQUtMLE9BQU8sQ0FBQ00sb0JBQW9CLENBQUNDLEtBQUssSUFBSSxDQUFDUCxPQUFPLENBQUNRLGVBQWUsQ0FBQ0QsS0FBSyxFQUFHO1FBQzFFLElBQUksQ0FBQ0UsT0FBTyxDQUFFLENBQUNQLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFQSxRQUFRLEVBQUVELE1BQU0sQ0FBQ1MsUUFBUSxDQUFDQyxDQUFDLEdBQUdYLE9BQU8sQ0FBQ1UsUUFBUSxDQUFDQyxDQUFFLENBQUM7TUFDcEYsQ0FBQyxNQUNJO1FBQ0gsSUFBSSxDQUFDRixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDO01BQzVCOztNQUVBO01BQ0EsSUFBSSxDQUFDRyxXQUFXLEdBQUdULGtCQUFrQixDQUFDVSxtQkFBbUIsQ0FBRWIsT0FBTyxDQUFDVSxRQUFTLENBQUM7SUFDL0UsQ0FBQztJQUNEVixPQUFPLENBQUNNLG9CQUFvQixDQUFDUSxJQUFJLENBQUVULHNCQUF1QixDQUFDO0lBQzNETCxPQUFPLENBQUNRLGVBQWUsQ0FBQ00sSUFBSSxDQUFFVCxzQkFBdUIsQ0FBQzs7SUFFdEQ7SUFDQU4sY0FBYyxDQUFDZSxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUM3QixNQUFNQyxLQUFLLEdBQUdyQixxQkFBcUIsQ0FBQ3NCLFdBQVcsQ0FBRW5CLE9BQU8sRUFBRWlCLE1BQU0sRUFBRUEsTUFBTSxDQUFDRywwQkFBMkIsQ0FBQztNQUNyRyxJQUFJLENBQUNDLElBQUksR0FBR0gsS0FBSztNQUNqQixJQUFJLENBQUNJLE1BQU0sR0FBR0osS0FBSyxDQUFDSyxXQUFXLENBQUMsQ0FBQztJQUNuQyxDQUFFLENBQUM7O0lBRUg7SUFDQXJCLE9BQU8sQ0FBQ3NCLGVBQWUsQ0FBQ1IsSUFBSSxDQUFFUyxPQUFPLElBQUk7TUFDdkMsSUFBSSxDQUFDQyxVQUFVLENBQUVELE9BQVEsQ0FBQztJQUM1QixDQUFFLENBQUM7RUFDTDtFQUVnQkUsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUEvQixXQUFXLENBQUNpQyxRQUFRLENBQUUsbUJBQW1CLEVBQUUvQixpQkFBa0IsQ0FBQyJ9