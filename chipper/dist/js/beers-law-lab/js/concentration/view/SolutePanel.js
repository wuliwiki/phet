// Copyright 2013-2023, University of Colorado Boulder

/**
 * Control panel for selecting the solute and changing its form (solid or solution).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import beersLawLab from '../../beersLawLab.js';
import SoluteControl from './SoluteControl.js';
import SoluteFormRadioButtonGroup from './SoluteFormRadioButtonGroup.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class SolutePanel extends Panel {
  constructor(solutes, currentSoluteProperty, soluteFormProperty, shaker, dropper, soluteListParent, providedOptions) {
    const options = optionize()({
      xMargin: 15,
      yMargin: 15,
      fill: '#F0F0F0',
      stroke: 'gray',
      lineWidth: 1,
      maxWidth: 480
    }, providedOptions);

    // solute combo box
    const soluteComboBox = new SoluteControl(currentSoluteProperty, solutes, soluteListParent, {
      comboBoxOptions: {
        tandem: options.tandem.createTandem('soluteComboBox')
      }
    });

    // radio buttons for solid vs solution
    const soluteFormRadioButtonGroup = new SoluteFormRadioButtonGroup(soluteFormProperty, {
      tandem: options.tandem.createTandem('soluteFormRadioButtonGroup')
    });
    const contentNode = new VBox({
      align: 'left',
      spacing: 15,
      children: [soluteComboBox, soluteFormRadioButtonGroup]
    });
    super(contentNode, options);
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
beersLawLab.register('SolutePanel', SolutePanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWQm94IiwiUGFuZWwiLCJiZWVyc0xhd0xhYiIsIlNvbHV0ZUNvbnRyb2wiLCJTb2x1dGVGb3JtUmFkaW9CdXR0b25Hcm91cCIsIm9wdGlvbml6ZSIsIlNvbHV0ZVBhbmVsIiwiY29uc3RydWN0b3IiLCJzb2x1dGVzIiwiY3VycmVudFNvbHV0ZVByb3BlcnR5Iiwic29sdXRlRm9ybVByb3BlcnR5Iiwic2hha2VyIiwiZHJvcHBlciIsInNvbHV0ZUxpc3RQYXJlbnQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwieE1hcmdpbiIsInlNYXJnaW4iLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwibWF4V2lkdGgiLCJzb2x1dGVDb21ib0JveCIsImNvbWJvQm94T3B0aW9ucyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInNvbHV0ZUZvcm1SYWRpb0J1dHRvbkdyb3VwIiwiY29udGVudE5vZGUiLCJhbGlnbiIsInNwYWNpbmciLCJjaGlsZHJlbiIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNvbHV0ZVBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgcGFuZWwgZm9yIHNlbGVjdGluZyB0aGUgc29sdXRlIGFuZCBjaGFuZ2luZyBpdHMgZm9ybSAoc29saWQgb3Igc29sdXRpb24pLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCwgeyBQYW5lbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgU29sdXRlIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Tb2x1dGUuanMnO1xyXG5pbXBvcnQgRHJvcHBlciBmcm9tICcuLi9tb2RlbC9Ecm9wcGVyLmpzJztcclxuaW1wb3J0IFNoYWtlciBmcm9tICcuLi9tb2RlbC9TaGFrZXIuanMnO1xyXG5pbXBvcnQgU29sdXRlQ29udHJvbCBmcm9tICcuL1NvbHV0ZUNvbnRyb2wuanMnO1xyXG5pbXBvcnQgU29sdXRlRm9ybVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi9Tb2x1dGVGb3JtUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCBTb2x1dGVGb3JtIGZyb20gJy4uL21vZGVsL1NvbHV0ZUZvcm0uanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBTb2x1dGVQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQYW5lbE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvbHV0ZVBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNvbHV0ZXM6IFNvbHV0ZVtdLCBjdXJyZW50U29sdXRlUHJvcGVydHk6IFByb3BlcnR5PFNvbHV0ZT4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzb2x1dGVGb3JtUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8U29sdXRlRm9ybT4sIHNoYWtlcjogU2hha2VyLCBkcm9wcGVyOiBEcm9wcGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc29sdXRlTGlzdFBhcmVudDogTm9kZSwgcHJvdmlkZWRPcHRpb25zOiBTb2x1dGVQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTb2x1dGVQYW5lbE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYW5lbE9wdGlvbnM+KCkoIHtcclxuICAgICAgeE1hcmdpbjogMTUsXHJcbiAgICAgIHlNYXJnaW46IDE1LFxyXG4gICAgICBmaWxsOiAnI0YwRjBGMCcsXHJcbiAgICAgIHN0cm9rZTogJ2dyYXknLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgIG1heFdpZHRoOiA0ODBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHNvbHV0ZSBjb21ibyBib3hcclxuICAgIGNvbnN0IHNvbHV0ZUNvbWJvQm94ID0gbmV3IFNvbHV0ZUNvbnRyb2woIGN1cnJlbnRTb2x1dGVQcm9wZXJ0eSwgc29sdXRlcywgc29sdXRlTGlzdFBhcmVudCwge1xyXG4gICAgICBjb21ib0JveE9wdGlvbnM6IHtcclxuICAgICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NvbHV0ZUNvbWJvQm94JyApXHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyByYWRpbyBidXR0b25zIGZvciBzb2xpZCB2cyBzb2x1dGlvblxyXG4gICAgY29uc3Qgc29sdXRlRm9ybVJhZGlvQnV0dG9uR3JvdXAgPSBuZXcgU29sdXRlRm9ybVJhZGlvQnV0dG9uR3JvdXAoIHNvbHV0ZUZvcm1Qcm9wZXJ0eSwge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3NvbHV0ZUZvcm1SYWRpb0J1dHRvbkdyb3VwJyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgY29udGVudE5vZGUgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiAxNSxcclxuICAgICAgY2hpbGRyZW46IFsgc29sdXRlQ29tYm9Cb3gsIHNvbHV0ZUZvcm1SYWRpb0J1dHRvbkdyb3VwIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudE5vZGUsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ1NvbHV0ZVBhbmVsJywgU29sdXRlUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBZUEsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxLQUFLLE1BQXdCLDZCQUE2QjtBQUNqRSxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBSTlDLE9BQU9DLGFBQWEsTUFBTSxvQkFBb0I7QUFDOUMsT0FBT0MsMEJBQTBCLE1BQU0saUNBQWlDO0FBR3hFLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBT25GLGVBQWUsTUFBTUMsV0FBVyxTQUFTTCxLQUFLLENBQUM7RUFFdENNLFdBQVdBLENBQUVDLE9BQWlCLEVBQUVDLHFCQUF1QyxFQUMxREMsa0JBQW1ELEVBQUVDLE1BQWMsRUFBRUMsT0FBZ0IsRUFDckZDLGdCQUFzQixFQUFFQyxlQUFtQyxFQUFHO0lBRWhGLE1BQU1DLE9BQU8sR0FBR1YsU0FBUyxDQUFnRCxDQUFDLENBQUU7TUFDMUVXLE9BQU8sRUFBRSxFQUFFO01BQ1hDLE9BQU8sRUFBRSxFQUFFO01BQ1hDLElBQUksRUFBRSxTQUFTO01BQ2ZDLE1BQU0sRUFBRSxNQUFNO01BQ2RDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLFFBQVEsRUFBRTtJQUNaLENBQUMsRUFBRVAsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxNQUFNUSxjQUFjLEdBQUcsSUFBSW5CLGFBQWEsQ0FBRU0scUJBQXFCLEVBQUVELE9BQU8sRUFBRUssZ0JBQWdCLEVBQUU7TUFDMUZVLGVBQWUsRUFBRTtRQUNmQyxNQUFNLEVBQUVULE9BQU8sQ0FBQ1MsTUFBTSxDQUFDQyxZQUFZLENBQUUsZ0JBQWlCO01BQ3hEO0lBQ0YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsMEJBQTBCLEdBQUcsSUFBSXRCLDBCQUEwQixDQUFFTSxrQkFBa0IsRUFBRTtNQUNyRmMsTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLDRCQUE2QjtJQUNwRSxDQUFFLENBQUM7SUFFSCxNQUFNRSxXQUFXLEdBQUcsSUFBSTNCLElBQUksQ0FBRTtNQUM1QjRCLEtBQUssRUFBRSxNQUFNO01BQ2JDLE9BQU8sRUFBRSxFQUFFO01BQ1hDLFFBQVEsRUFBRSxDQUFFUixjQUFjLEVBQUVJLDBCQUEwQjtJQUN4RCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVDLFdBQVcsRUFBRVosT0FBUSxDQUFDO0VBQy9CO0VBRWdCZ0IsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUE3QixXQUFXLENBQUMrQixRQUFRLENBQUUsYUFBYSxFQUFFM0IsV0FBWSxDQUFDIn0=