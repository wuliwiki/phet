// Copyright 2013-2022, University of Colorado Boulder

/**
 * Solution that appears in the beaker.
 * Origin is at bottom center of beaker.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../../../dot/js/Utils.js';
import { Rectangle } from '../../../../scenery/js/imports.js';
import beersLawLab from '../../beersLawLab.js';
import BLLConstants from '../../common/BLLConstants.js';

// constants
const MIN_NONZERO_HEIGHT = 5; // minimum height for a solution with non-zero volume, set by visual inspection

export default class SolutionNode extends Rectangle {
  constructor(solution, beaker, modelViewTransform) {
    super(0, 0, 1, 1, {
      lineWidth: BLLConstants.SOLUTION_LINE_WIDTH
    });

    // Update the color of the solution, accounting for saturation.
    solution.colorProperty.link(color => {
      this.fill = color;
      this.stroke = color.darkerColor();
    });

    // Updates the amount of stuff in the beaker, based on solution volume.
    const viewPosition = modelViewTransform.modelToViewPosition(beaker.position);
    const viewWidth = modelViewTransform.modelToViewDeltaX(beaker.size.width);
    solution.volumeProperty.link(volume => {
      // determine dimensions in model coordinates
      let solutionHeight = Utils.linear(0, beaker.volume, 0, beaker.size.height, volume); // volume -> height
      if (volume > 0 && solutionHeight < MIN_NONZERO_HEIGHT) {
        // constrain non-zero volume to minimum height, so that the solution is visible to the user and detectable by the concentration probe
        solutionHeight = MIN_NONZERO_HEIGHT;
      }

      // convert to view coordinates and create shape
      const viewHeight = modelViewTransform.modelToViewDeltaY(solutionHeight);
      this.setRect(viewPosition.x - viewWidth / 2, viewPosition.y - viewHeight, viewWidth, viewHeight);
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
beersLawLab.register('SolutionNode', SolutionNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlJlY3RhbmdsZSIsImJlZXJzTGF3TGFiIiwiQkxMQ29uc3RhbnRzIiwiTUlOX05PTlpFUk9fSEVJR0hUIiwiU29sdXRpb25Ob2RlIiwiY29uc3RydWN0b3IiLCJzb2x1dGlvbiIsImJlYWtlciIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImxpbmVXaWR0aCIsIlNPTFVUSU9OX0xJTkVfV0lEVEgiLCJjb2xvclByb3BlcnR5IiwibGluayIsImNvbG9yIiwiZmlsbCIsInN0cm9rZSIsImRhcmtlckNvbG9yIiwidmlld1Bvc2l0aW9uIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsInBvc2l0aW9uIiwidmlld1dpZHRoIiwibW9kZWxUb1ZpZXdEZWx0YVgiLCJzaXplIiwid2lkdGgiLCJ2b2x1bWVQcm9wZXJ0eSIsInZvbHVtZSIsInNvbHV0aW9uSGVpZ2h0IiwibGluZWFyIiwiaGVpZ2h0Iiwidmlld0hlaWdodCIsIm1vZGVsVG9WaWV3RGVsdGFZIiwic2V0UmVjdCIsIngiLCJ5IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU29sdXRpb25Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNvbHV0aW9uIHRoYXQgYXBwZWFycyBpbiB0aGUgYmVha2VyLlxyXG4gKiBPcmlnaW4gaXMgYXQgYm90dG9tIGNlbnRlciBvZiBiZWFrZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJlZXJzTGF3TGFiIGZyb20gJy4uLy4uL2JlZXJzTGF3TGFiLmpzJztcclxuaW1wb3J0IEJlYWtlciBmcm9tICcuLi9tb2RlbC9CZWFrZXIuanMnO1xyXG5pbXBvcnQgQ29uY2VudHJhdGlvblNvbHV0aW9uIGZyb20gJy4uL21vZGVsL0NvbmNlbnRyYXRpb25Tb2x1dGlvbi5qcyc7XHJcbmltcG9ydCBCTExDb25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL0JMTENvbnN0YW50cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTUlOX05PTlpFUk9fSEVJR0hUID0gNTsgLy8gbWluaW11bSBoZWlnaHQgZm9yIGEgc29sdXRpb24gd2l0aCBub24temVybyB2b2x1bWUsIHNldCBieSB2aXN1YWwgaW5zcGVjdGlvblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29sdXRpb25Ob2RlIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzb2x1dGlvbjogQ29uY2VudHJhdGlvblNvbHV0aW9uLCBiZWFrZXI6IEJlYWtlciwgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yICkge1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCAxLCAxLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogQkxMQ29uc3RhbnRzLlNPTFVUSU9OX0xJTkVfV0lEVEhcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGNvbG9yIG9mIHRoZSBzb2x1dGlvbiwgYWNjb3VudGluZyBmb3Igc2F0dXJhdGlvbi5cclxuICAgIHNvbHV0aW9uLmNvbG9yUHJvcGVydHkubGluayggY29sb3IgPT4ge1xyXG4gICAgICB0aGlzLmZpbGwgPSBjb2xvcjtcclxuICAgICAgdGhpcy5zdHJva2UgPSBjb2xvci5kYXJrZXJDb2xvcigpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFVwZGF0ZXMgdGhlIGFtb3VudCBvZiBzdHVmZiBpbiB0aGUgYmVha2VyLCBiYXNlZCBvbiBzb2x1dGlvbiB2b2x1bWUuXHJcbiAgICBjb25zdCB2aWV3UG9zaXRpb24gPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggYmVha2VyLnBvc2l0aW9uICk7XHJcbiAgICBjb25zdCB2aWV3V2lkdGggPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVgoIGJlYWtlci5zaXplLndpZHRoICk7XHJcbiAgICBzb2x1dGlvbi52b2x1bWVQcm9wZXJ0eS5saW5rKCB2b2x1bWUgPT4ge1xyXG5cclxuICAgICAgLy8gZGV0ZXJtaW5lIGRpbWVuc2lvbnMgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgICAgbGV0IHNvbHV0aW9uSGVpZ2h0ID0gVXRpbHMubGluZWFyKCAwLCBiZWFrZXIudm9sdW1lLCAwLCBiZWFrZXIuc2l6ZS5oZWlnaHQsIHZvbHVtZSApOyAvLyB2b2x1bWUgLT4gaGVpZ2h0XHJcbiAgICAgIGlmICggdm9sdW1lID4gMCAmJiBzb2x1dGlvbkhlaWdodCA8IE1JTl9OT05aRVJPX0hFSUdIVCApIHtcclxuICAgICAgICAvLyBjb25zdHJhaW4gbm9uLXplcm8gdm9sdW1lIHRvIG1pbmltdW0gaGVpZ2h0LCBzbyB0aGF0IHRoZSBzb2x1dGlvbiBpcyB2aXNpYmxlIHRvIHRoZSB1c2VyIGFuZCBkZXRlY3RhYmxlIGJ5IHRoZSBjb25jZW50cmF0aW9uIHByb2JlXHJcbiAgICAgICAgc29sdXRpb25IZWlnaHQgPSBNSU5fTk9OWkVST19IRUlHSFQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNvbnZlcnQgdG8gdmlldyBjb29yZGluYXRlcyBhbmQgY3JlYXRlIHNoYXBlXHJcbiAgICAgIGNvbnN0IHZpZXdIZWlnaHQgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdEZWx0YVkoIHNvbHV0aW9uSGVpZ2h0ICk7XHJcbiAgICAgIHRoaXMuc2V0UmVjdCggdmlld1Bvc2l0aW9uLnggLSAoIHZpZXdXaWR0aCAvIDIgKSwgdmlld1Bvc2l0aW9uLnkgLSB2aWV3SGVpZ2h0LCB2aWV3V2lkdGgsIHZpZXdIZWlnaHQgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ1NvbHV0aW9uTm9kZScsIFNvbHV0aW9uTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSw2QkFBNkI7QUFFL0MsU0FBU0MsU0FBUyxRQUFRLG1DQUFtQztBQUM3RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBRzlDLE9BQU9DLFlBQVksTUFBTSw4QkFBOEI7O0FBRXZEO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0FBRTlCLGVBQWUsTUFBTUMsWUFBWSxTQUFTSixTQUFTLENBQUM7RUFFM0NLLFdBQVdBLENBQUVDLFFBQStCLEVBQUVDLE1BQWMsRUFBRUMsa0JBQXVDLEVBQUc7SUFFN0csS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUNqQkMsU0FBUyxFQUFFUCxZQUFZLENBQUNRO0lBQzFCLENBQUUsQ0FBQzs7SUFFSDtJQUNBSixRQUFRLENBQUNLLGFBQWEsQ0FBQ0MsSUFBSSxDQUFFQyxLQUFLLElBQUk7TUFDcEMsSUFBSSxDQUFDQyxJQUFJLEdBQUdELEtBQUs7TUFDakIsSUFBSSxDQUFDRSxNQUFNLEdBQUdGLEtBQUssQ0FBQ0csV0FBVyxDQUFDLENBQUM7SUFDbkMsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsWUFBWSxHQUFHVCxrQkFBa0IsQ0FBQ1UsbUJBQW1CLENBQUVYLE1BQU0sQ0FBQ1ksUUFBUyxDQUFDO0lBQzlFLE1BQU1DLFNBQVMsR0FBR1osa0JBQWtCLENBQUNhLGlCQUFpQixDQUFFZCxNQUFNLENBQUNlLElBQUksQ0FBQ0MsS0FBTSxDQUFDO0lBQzNFakIsUUFBUSxDQUFDa0IsY0FBYyxDQUFDWixJQUFJLENBQUVhLE1BQU0sSUFBSTtNQUV0QztNQUNBLElBQUlDLGNBQWMsR0FBRzNCLEtBQUssQ0FBQzRCLE1BQU0sQ0FBRSxDQUFDLEVBQUVwQixNQUFNLENBQUNrQixNQUFNLEVBQUUsQ0FBQyxFQUFFbEIsTUFBTSxDQUFDZSxJQUFJLENBQUNNLE1BQU0sRUFBRUgsTUFBTyxDQUFDLENBQUMsQ0FBQztNQUN0RixJQUFLQSxNQUFNLEdBQUcsQ0FBQyxJQUFJQyxjQUFjLEdBQUd2QixrQkFBa0IsRUFBRztRQUN2RDtRQUNBdUIsY0FBYyxHQUFHdkIsa0JBQWtCO01BQ3JDOztNQUVBO01BQ0EsTUFBTTBCLFVBQVUsR0FBR3JCLGtCQUFrQixDQUFDc0IsaUJBQWlCLENBQUVKLGNBQWUsQ0FBQztNQUN6RSxJQUFJLENBQUNLLE9BQU8sQ0FBRWQsWUFBWSxDQUFDZSxDQUFDLEdBQUtaLFNBQVMsR0FBRyxDQUFHLEVBQUVILFlBQVksQ0FBQ2dCLENBQUMsR0FBR0osVUFBVSxFQUFFVCxTQUFTLEVBQUVTLFVBQVcsQ0FBQztJQUN4RyxDQUFFLENBQUM7RUFDTDtFQUVnQkssT0FBT0EsQ0FBQSxFQUFTO0lBQzlCQyxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7SUFDekYsS0FBSyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFqQyxXQUFXLENBQUNtQyxRQUFRLENBQUUsY0FBYyxFQUFFaEMsWUFBYSxDQUFDIn0=