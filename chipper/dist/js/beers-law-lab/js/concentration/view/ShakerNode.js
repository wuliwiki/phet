// Copyright 2013-2022, University of Colorado Boulder

/**
 * Shaker that contains a solute in solid form.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Circle, DragListener, Image, Node, RichText } from '../../../../scenery/js/imports.js';
import shaker_png from '../../../images/shaker_png.js';
import beersLawLab from '../../beersLawLab.js';
// constants
const DEBUG_ORIGIN = false;
export default class ShakerNode extends Node {
  constructor(shaker, soluteLabelStringProperty, modelViewTransform, providedOptions) {
    const options = optionize()({
      // Performance optimization so Scenery won't fit blocks around this.
      // See https://github.com/phetsims/beers-law-lab/issues/113
      preventFit: true,
      visibleProperty: shaker.visibleProperty,
      cursor: 'pointer',
      phetioInputEnabledPropertyInstrumented: true
    }, providedOptions);
    super(options);

    // shaker image
    const imageNode = new Image(shaker_png);
    imageNode.setScaleMagnitude(0.75);

    // label
    const labelText = new RichText(soluteLabelStringProperty, {
      font: new PhetFont({
        size: 22,
        weight: 'bold'
      }),
      fill: 'black',
      maxWidth: 0.5 * imageNode.width,
      // constrain width for i18n
      tandem: options.tandem.createTandem('labelText')
    });

    // common parent, to simplify rotation and label alignment.
    const parentNode = new Node({
      children: [imageNode, labelText]
    });
    this.addChild(parentNode);
    parentNode.rotate(shaker.orientation - Math.PI); // assumes that shaker points to the left in the image file

    // Manually adjust these values until the origin is in the middle hole of the shaker.
    parentNode.translate(-12, -imageNode.height / 2);

    // origin
    if (DEBUG_ORIGIN) {
      this.addChild(new Circle({
        radius: 3,
        fill: 'red'
      }));
    }

    // sync position with model
    shaker.positionProperty.link(position => {
      this.translation = modelViewTransform.modelToViewPosition(position);
    });

    // Center the label on the shaker.
    labelText.boundsProperty.link(() => {
      const capWidth = 0.3 * imageNode.width; // multiplier is dependent on image file
      labelText.centerX = capWidth + (imageNode.width - capWidth) / 2;
      labelText.centerY = imageNode.centerY;
    });

    // drag listener
    this.addInputListener(new DragListener({
      positionProperty: shaker.positionProperty,
      dragBoundsProperty: new Property(shaker.dragBounds),
      transform: modelViewTransform,
      tandem: options.tandem.createTandem('dragListener')
    }));
    this.addLinkedElement(shaker, {
      tandem: options.tandem.createTandem('shaker')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
}
beersLawLab.register('ShakerNode', ShakerNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsIlBoZXRGb250IiwiQ2lyY2xlIiwiRHJhZ0xpc3RlbmVyIiwiSW1hZ2UiLCJOb2RlIiwiUmljaFRleHQiLCJzaGFrZXJfcG5nIiwiYmVlcnNMYXdMYWIiLCJERUJVR19PUklHSU4iLCJTaGFrZXJOb2RlIiwiY29uc3RydWN0b3IiLCJzaGFrZXIiLCJzb2x1dGVMYWJlbFN0cmluZ1Byb3BlcnR5IiwibW9kZWxWaWV3VHJhbnNmb3JtIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInByZXZlbnRGaXQiLCJ2aXNpYmxlUHJvcGVydHkiLCJjdXJzb3IiLCJwaGV0aW9JbnB1dEVuYWJsZWRQcm9wZXJ0eUluc3RydW1lbnRlZCIsImltYWdlTm9kZSIsInNldFNjYWxlTWFnbml0dWRlIiwibGFiZWxUZXh0IiwiZm9udCIsInNpemUiLCJ3ZWlnaHQiLCJmaWxsIiwibWF4V2lkdGgiLCJ3aWR0aCIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBhcmVudE5vZGUiLCJjaGlsZHJlbiIsImFkZENoaWxkIiwicm90YXRlIiwib3JpZW50YXRpb24iLCJNYXRoIiwiUEkiLCJ0cmFuc2xhdGUiLCJoZWlnaHQiLCJyYWRpdXMiLCJwb3NpdGlvblByb3BlcnR5IiwibGluayIsInBvc2l0aW9uIiwidHJhbnNsYXRpb24iLCJtb2RlbFRvVmlld1Bvc2l0aW9uIiwiYm91bmRzUHJvcGVydHkiLCJjYXBXaWR0aCIsImNlbnRlclgiLCJjZW50ZXJZIiwiYWRkSW5wdXRMaXN0ZW5lciIsImRyYWdCb3VuZHNQcm9wZXJ0eSIsImRyYWdCb3VuZHMiLCJ0cmFuc2Zvcm0iLCJhZGRMaW5rZWRFbGVtZW50IiwiZGlzcG9zZSIsImFzc2VydCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2hha2VyTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaGFrZXIgdGhhdCBjb250YWlucyBhIHNvbHV0ZSBpbiBzb2xpZCBmb3JtLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBEcmFnTGlzdGVuZXIsIEltYWdlLCBOb2RlLCBOb2RlT3B0aW9ucywgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgc2hha2VyX3BuZyBmcm9tICcuLi8uLi8uLi9pbWFnZXMvc2hha2VyX3BuZy5qcyc7XHJcbmltcG9ydCBiZWVyc0xhd0xhYiBmcm9tICcuLi8uLi9iZWVyc0xhd0xhYi5qcyc7XHJcbmltcG9ydCBTaGFrZXIgZnJvbSAnLi4vbW9kZWwvU2hha2VyLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUJVR19PUklHSU4gPSBmYWxzZTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxudHlwZSBTaGFrZXJOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja1JlcXVpcmVkPE5vZGVPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFrZXJOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc2hha2VyOiBTaGFrZXIsIHNvbHV0ZUxhYmVsU3RyaW5nUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIsIHByb3ZpZGVkT3B0aW9uczogU2hha2VyTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTaGFrZXJOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gU2NlbmVyeSB3b24ndCBmaXQgYmxvY2tzIGFyb3VuZCB0aGlzLlxyXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2JlZXJzLWxhdy1sYWIvaXNzdWVzLzExM1xyXG4gICAgICBwcmV2ZW50Rml0OiB0cnVlLFxyXG5cclxuICAgICAgdmlzaWJsZVByb3BlcnR5OiBzaGFrZXIudmlzaWJsZVByb3BlcnR5LFxyXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgICAgcGhldGlvSW5wdXRFbmFibGVkUHJvcGVydHlJbnN0cnVtZW50ZWQ6IHRydWVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc2hha2VyIGltYWdlXHJcbiAgICBjb25zdCBpbWFnZU5vZGUgPSBuZXcgSW1hZ2UoIHNoYWtlcl9wbmcgKTtcclxuICAgIGltYWdlTm9kZS5zZXRTY2FsZU1hZ25pdHVkZSggMC43NSApO1xyXG5cclxuICAgIC8vIGxhYmVsXHJcbiAgICBjb25zdCBsYWJlbFRleHQgPSBuZXcgUmljaFRleHQoIHNvbHV0ZUxhYmVsU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDIyLCB3ZWlnaHQ6ICdib2xkJyB9ICksXHJcbiAgICAgIGZpbGw6ICdibGFjaycsXHJcbiAgICAgIG1heFdpZHRoOiAwLjUgKiBpbWFnZU5vZGUud2lkdGgsIC8vIGNvbnN0cmFpbiB3aWR0aCBmb3IgaTE4blxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGNvbW1vbiBwYXJlbnQsIHRvIHNpbXBsaWZ5IHJvdGF0aW9uIGFuZCBsYWJlbCBhbGlnbm1lbnQuXHJcbiAgICBjb25zdCBwYXJlbnROb2RlID0gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgaW1hZ2VOb2RlLCBsYWJlbFRleHQgXSB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBwYXJlbnROb2RlICk7XHJcbiAgICBwYXJlbnROb2RlLnJvdGF0ZSggc2hha2VyLm9yaWVudGF0aW9uIC0gTWF0aC5QSSApOyAvLyBhc3N1bWVzIHRoYXQgc2hha2VyIHBvaW50cyB0byB0aGUgbGVmdCBpbiB0aGUgaW1hZ2UgZmlsZVxyXG5cclxuICAgIC8vIE1hbnVhbGx5IGFkanVzdCB0aGVzZSB2YWx1ZXMgdW50aWwgdGhlIG9yaWdpbiBpcyBpbiB0aGUgbWlkZGxlIGhvbGUgb2YgdGhlIHNoYWtlci5cclxuICAgIHBhcmVudE5vZGUudHJhbnNsYXRlKCAtMTIsIC1pbWFnZU5vZGUuaGVpZ2h0IC8gMiApO1xyXG5cclxuICAgIC8vIG9yaWdpblxyXG4gICAgaWYgKCBERUJVR19PUklHSU4gKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBDaXJjbGUoIHsgcmFkaXVzOiAzLCBmaWxsOiAncmVkJyB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzeW5jIHBvc2l0aW9uIHdpdGggbW9kZWxcclxuICAgIHNoYWtlci5wb3NpdGlvblByb3BlcnR5LmxpbmsoIHBvc2l0aW9uID0+IHtcclxuICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IG1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBwb3NpdGlvbiApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENlbnRlciB0aGUgbGFiZWwgb24gdGhlIHNoYWtlci5cclxuICAgIGxhYmVsVGV4dC5ib3VuZHNQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhcFdpZHRoID0gMC4zICogaW1hZ2VOb2RlLndpZHRoOyAvLyBtdWx0aXBsaWVyIGlzIGRlcGVuZGVudCBvbiBpbWFnZSBmaWxlXHJcbiAgICAgIGxhYmVsVGV4dC5jZW50ZXJYID0gY2FwV2lkdGggKyAoIGltYWdlTm9kZS53aWR0aCAtIGNhcFdpZHRoICkgLyAyO1xyXG4gICAgICBsYWJlbFRleHQuY2VudGVyWSA9IGltYWdlTm9kZS5jZW50ZXJZO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGRyYWcgbGlzdGVuZXJcclxuICAgIHRoaXMuYWRkSW5wdXRMaXN0ZW5lciggbmV3IERyYWdMaXN0ZW5lcigge1xyXG4gICAgICBwb3NpdGlvblByb3BlcnR5OiBzaGFrZXIucG9zaXRpb25Qcm9wZXJ0eSxcclxuICAgICAgZHJhZ0JvdW5kc1Byb3BlcnR5OiBuZXcgUHJvcGVydHkoIHNoYWtlci5kcmFnQm91bmRzICksXHJcbiAgICAgIHRyYW5zZm9ybTogbW9kZWxWaWV3VHJhbnNmb3JtLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2RyYWdMaXN0ZW5lcicgKVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBzaGFrZXIsIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdzaGFrZXInIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdkaXNwb3NlIGlzIG5vdCBzdXBwb3J0ZWQsIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0nICk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ1NoYWtlck5vZGUnLCBTaGFrZXJOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxpQ0FBaUM7QUFFdEQsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFHbkYsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQWVDLFFBQVEsUUFBUSxtQ0FBbUM7QUFDNUcsT0FBT0MsVUFBVSxNQUFNLCtCQUErQjtBQUN0RCxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBRzlDO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLEtBQUs7QUFNMUIsZUFBZSxNQUFNQyxVQUFVLFNBQVNMLElBQUksQ0FBQztFQUVwQ00sV0FBV0EsQ0FBRUMsTUFBYyxFQUFFQyx5QkFBb0QsRUFDcEVDLGtCQUF1QyxFQUFFQyxlQUFrQyxFQUFHO0lBRWhHLE1BQU1DLE9BQU8sR0FBR2hCLFNBQVMsQ0FBOEMsQ0FBQyxDQUFFO01BRXhFO01BQ0E7TUFDQWlCLFVBQVUsRUFBRSxJQUFJO01BRWhCQyxlQUFlLEVBQUVOLE1BQU0sQ0FBQ00sZUFBZTtNQUN2Q0MsTUFBTSxFQUFFLFNBQVM7TUFDakJDLHNDQUFzQyxFQUFFO0lBQzFDLENBQUMsRUFB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