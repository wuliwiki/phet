// Copyright 2013-2022, University of Colorado Boulder

/**
 * Faucet model, used for input and output faucets.
 * This model assumes that the pipe enters the faucet from the left.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import beersLawLab from '../../beersLawLab.js';
export default class Faucet {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      position: Vector2.ZERO,
      pipeMinX: -100,
      spoutWidth: 45,
      maxFlowRate: 0.25
    }, providedOptions);
    assert && assert(options.pipeMinX < options.position.x); // pipe enters the faucet from the left

    this.position = options.position;
    this.pipeMinX = options.pipeMinX;
    this.spoutWidth = options.spoutWidth;
    this.maxFlowRate = options.maxFlowRate;
    this.flowRateProperty = new NumberProperty(0, {
      range: new Range(0, options.maxFlowRate),
      units: 'L/s',
      tandem: options.tandem.createTandem('flowRateProperty'),
      phetioReadOnly: true
    });
    this.enabledProperty = new BooleanProperty(true);

    // when disabled, turn off the faucet.
    this.enabledProperty.link(enabled => {
      if (!enabled) {
        this.flowRateProperty.value = 0;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.flowRateProperty.reset();
    this.enabledProperty.reset();
  }
}
beersLawLab.register('Faucet', Faucet);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiVmVjdG9yMiIsIm9wdGlvbml6ZSIsImJlZXJzTGF3TGFiIiwiRmF1Y2V0IiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicG9zaXRpb24iLCJaRVJPIiwicGlwZU1pblgiLCJzcG91dFdpZHRoIiwibWF4Rmxvd1JhdGUiLCJhc3NlcnQiLCJ4IiwiZmxvd1JhdGVQcm9wZXJ0eSIsInJhbmdlIiwidW5pdHMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9SZWFkT25seSIsImVuYWJsZWRQcm9wZXJ0eSIsImxpbmsiLCJlbmFibGVkIiwidmFsdWUiLCJkaXNwb3NlIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkZhdWNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGYXVjZXQgbW9kZWwsIHVzZWQgZm9yIGlucHV0IGFuZCBvdXRwdXQgZmF1Y2V0cy5cclxuICogVGhpcyBtb2RlbCBhc3N1bWVzIHRoYXQgdGhlIHBpcGUgZW50ZXJzIHRoZSBmYXVjZXQgZnJvbSB0aGUgbGVmdC5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IGJlZXJzTGF3TGFiIGZyb20gJy4uLy4uL2JlZXJzTGF3TGFiLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcG9zaXRpb24/OiBWZWN0b3IyOyAvLyBjZW50ZXIgb2Ygb3V0cHV0IHBpcGUsIGNtXHJcbiAgcGlwZU1pblg/OiBudW1iZXI7IC8vIHgtY29vcmRpbmF0ZSBvZiB3aGVyZSB0aGUgcGlwZSBzdGFydHMsIGNtXHJcbiAgc3BvdXRXaWR0aD86IG51bWJlcjsgLy8gY21cclxuICBtYXhGbG93UmF0ZT86IG51bWJlcjsgLy8gTC9zXHJcbn07XHJcblxyXG50eXBlIEZhdWNldE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGYXVjZXQge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb246IFZlY3RvcjI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHBpcGVNaW5YOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHNwb3V0V2lkdGg6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4Rmxvd1JhdGU6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgZmxvd1JhdGVQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IGVuYWJsZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBGYXVjZXRPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RmF1Y2V0T3B0aW9ucywgU2VsZk9wdGlvbnMsIFBoZXRpb09iamVjdE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHBvc2l0aW9uOiBWZWN0b3IyLlpFUk8sXHJcbiAgICAgIHBpcGVNaW5YOiAtMTAwLFxyXG4gICAgICBzcG91dFdpZHRoOiA0NSxcclxuICAgICAgbWF4Rmxvd1JhdGU6IDAuMjVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMucGlwZU1pblggPCBvcHRpb25zLnBvc2l0aW9uLnggKTsgLy8gcGlwZSBlbnRlcnMgdGhlIGZhdWNldCBmcm9tIHRoZSBsZWZ0XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XHJcbiAgICB0aGlzLnBpcGVNaW5YID0gb3B0aW9ucy5waXBlTWluWDtcclxuICAgIHRoaXMuc3BvdXRXaWR0aCA9IG9wdGlvbnMuc3BvdXRXaWR0aDtcclxuICAgIHRoaXMubWF4Rmxvd1JhdGUgPSBvcHRpb25zLm1heEZsb3dSYXRlO1xyXG5cclxuICAgIHRoaXMuZmxvd1JhdGVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCwge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAwLCBvcHRpb25zLm1heEZsb3dSYXRlICksXHJcbiAgICAgIHVuaXRzOiAnTC9zJyxcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdmbG93UmF0ZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuZW5hYmxlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG5cclxuICAgIC8vIHdoZW4gZGlzYWJsZWQsIHR1cm4gb2ZmIHRoZSBmYXVjZXQuXHJcbiAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eS5saW5rKCBlbmFibGVkID0+IHtcclxuICAgICAgaWYgKCAhZW5hYmxlZCApIHtcclxuICAgICAgICB0aGlzLmZsb3dSYXRlUHJvcGVydHkudmFsdWUgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5mbG93UmF0ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuYmVlcnNMYXdMYWIucmVnaXN0ZXIoICdGYXVjZXQnLCBGYXVjZXQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFFbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0QsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQVc5QyxlQUFlLE1BQU1DLE1BQU0sQ0FBQztFQVNuQkMsV0FBV0EsQ0FBRUMsZUFBOEIsRUFBRztJQUVuRCxNQUFNQyxPQUFPLEdBQUdMLFNBQVMsQ0FBa0QsQ0FBQyxDQUFFO01BRTVFO01BQ0FNLFFBQVEsRUFBRVAsT0FBTyxDQUFDUSxJQUFJO01BQ3RCQyxRQUFRLEVBQUUsQ0FBQyxHQUFHO01BQ2RDLFVBQVUsRUFBRSxFQUFFO01BQ2RDLFdBQVcsRUFBRTtJQUNmLENBQUMsRUFBRU4sZUFBZ0IsQ0FBQztJQUVwQk8sTUFBTSxJQUFJQSxNQUFNLENBQUVOLE9BQU8sQ0FBQ0csUUFBUSxHQUFHSCxPQUFPLENBQUNDLFFBQVEsQ0FBQ00sQ0FBRSxDQUFDLENBQUMsQ0FBQzs7SUFFM0QsSUFBSSxDQUFDTixRQUFRLEdBQUdELE9BQU8sQ0FBQ0MsUUFBUTtJQUNoQyxJQUFJLENBQUNFLFFBQVEsR0FBR0gsT0FBTyxDQUFDRyxRQUFRO0lBQ2hDLElBQUksQ0FBQ0MsVUFBVSxHQUFHSixPQUFPLENBQUNJLFVBQVU7SUFDcEMsSUFBSSxDQUFDQyxXQUFXLEdBQUdMLE9BQU8sQ0FBQ0ssV0FBVztJQUV0QyxJQUFJLENBQUNHLGdCQUFnQixHQUFHLElBQUloQixjQUFjLENBQUUsQ0FBQyxFQUFFO01BQzdDaUIsS0FBSyxFQUFFLElBQUloQixLQUFLLENBQUUsQ0FBQyxFQUFFTyxPQUFPLENBQUNLLFdBQVksQ0FBQztNQUMxQ0ssS0FBSyxFQUFFLEtBQUs7TUFDWkMsTUFBTSxFQUFFWCxPQUFPLENBQUNXLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLGtCQUFtQixDQUFDO01BQ3pEQyxjQUFjLEVBQUU7SUFDbEIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSXZCLGVBQWUsQ0FBRSxJQUFLLENBQUM7O0lBRWxEO0lBQ0EsSUFBSSxDQUFDdUIsZUFBZSxDQUFDQyxJQUFJLENBQUVDLE9BQU8sSUFBSTtNQUNwQyxJQUFLLENBQUNBLE9BQU8sRUFBRztRQUNkLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNTLEtBQUssR0FBRyxDQUFDO01BQ2pDO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7RUFFT0MsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCWixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOERBQStELENBQUM7RUFDM0Y7RUFFT2EsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CLElBQUksQ0FBQ1gsZ0JBQWdCLENBQUNXLEtBQUssQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQ0wsZUFBZSxDQUFDSyxLQUFLLENBQUMsQ0FBQztFQUM5QjtBQUNGO0FBRUF2QixXQUFXLENBQUN3QixRQUFRLENBQUUsUUFBUSxFQUFFdkIsTUFBTyxDQUFDIn0=