// Copyright 2013-2023, University of Colorado Boulder

/**
 * Solution model for the 'Concentration' screen.
 * This screen has a single solution that is mutated by changing the solute, solute amount, and volume.
 * Concentration is derived via M=mol/L.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import optionize from '../../../../phet-core/js/optionize.js';
import BooleanIO from '../../../../tandem/js/types/BooleanIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import beersLawLab from '../../beersLawLab.js';
import Fluid from '../../common/model/Fluid.js';
import Solvent from '../../common/model/Solvent.js';
export default class ConcentrationSolution extends Fluid {
  // total solute, dissolved and precipitate, in mol
  // L

  // for deferring update of precipitateAmount until we've changed both volume and soluteAmount
  // see https://github.com/phetsims/concentration/issues/1
  // mol
  // M
  // solute dissolved in solution, in grams
  // [0,100]
  constructor(soluteProperty, soluteAmountRange, volumeRange, providedOptions) {
    const options = optionize()({
      phetioDocumentation: 'The solution in the beaker'
    }, providedOptions);
    const solvent = Solvent.WATER;
    super(ConcentrationSolution.createColor(solvent, soluteProperty.value, 0));
    this.solvent = solvent;
    this.soluteProperty = soluteProperty;
    this.soluteMolesProperty = new NumberProperty(soluteAmountRange.defaultValue, {
      units: 'mol',
      range: soluteAmountRange,
      tandem: options.tandem.createTandem('soluteMolesProperty')
    });
    this.volumeProperty = new NumberProperty(volumeRange.defaultValue, {
      units: 'L',
      range: volumeRange,
      tandem: options.tandem.createTandem('volumeProperty')
    });
    this.updatePrecipitateAmount = true;
    this.precipitateMolesProperty = new DerivedProperty([this.soluteProperty, this.soluteMolesProperty, this.volumeProperty], (solute, soluteMoles, volume) => {
      if (this.updatePrecipitateAmount) {
        return Math.max(0, soluteMoles - volume * this.getSaturatedConcentration());
      } else {
        return this.precipitateMolesProperty.value;
      }
    }, {
      tandem: options.tandem.createTandem('precipitateMolesProperty'),
      units: 'mol',
      phetioValueType: NumberIO
    });
    this.concentrationProperty = new DerivedProperty([this.soluteProperty, this.soluteMolesProperty, this.volumeProperty], (solute, soluteMoles, volume) => {
      return volume > 0 ? Math.min(this.getSaturatedConcentration(), soluteMoles / volume) : 0;
    }, {
      tandem: options.tandem.createTandem('concentrationProperty'),
      units: 'mol/L',
      phetioValueType: NumberIO
    });
    this.isSaturatedProperty = new DerivedProperty([this.soluteProperty, this.soluteMolesProperty, this.volumeProperty], (solute, soluteMoles, volume) => {
      return volume > 0 && soluteMoles / volume > solute.getSaturatedConcentration();
    }, {
      tandem: options.tandem.createTandem('isSaturatedProperty'),
      phetioValueType: BooleanIO
    });
    this.soluteGramsProperty = new DerivedProperty([this.soluteProperty, this.soluteMolesProperty, this.precipitateMolesProperty], (solute, soluteMoles, precipitateMoles) => {
      // Use Math.max to prevent a negative value during intermediate states.
      // See https://github.com/phetsims/beers-law-lab/issues/253
      const soluteGrams = solute.molarMass * Math.max(0, soluteMoles - precipitateMoles);
      assert && assert(soluteGrams >= 0, `invalid soluteGrams: ${soluteGrams}`);
      return soluteGrams;
    }, {
      tandem: options.tandem.createTandem('soluteGramsProperty'),
      units: 'g',
      phetioValueType: NumberIO
    });
    this.percentConcentrationProperty = new DerivedProperty([this.volumeProperty, this.soluteGramsProperty], (volume, soluteGrams) => {
      let percentConcentration = 0;
      if (volume > 0) {
        const solventGrams = volume * this.solvent.density;
        percentConcentration = 100 * (soluteGrams / (soluteGrams + solventGrams));
      }
      assert && assert(percentConcentration >= 0 && percentConcentration <= 100, `percentConcentration out of range: ${percentConcentration}`);
      return percentConcentration;
    }, {
      tandem: options.tandem.createTandem('percentConcentrationProperty'),
      phetioValueType: NumberIO,
      units: '%',
      phetioDocumentation: 'Calculated as a mass percent.'
    });

    // derive the solution color
    const updateColor = () => {
      this.colorProperty.value = ConcentrationSolution.createColor(this.solvent, this.soluteProperty.value, this.concentrationProperty.value);
    };
    this.soluteProperty.lazyLink(updateColor);
    this.concentrationProperty.link(updateColor); // link to force update of color
  }

  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    super.reset();
    this.soluteMolesProperty.reset();
    this.volumeProperty.reset();
  }
  getSaturatedConcentration() {
    return this.soluteProperty.value.getSaturatedConcentration();
  }
  getNumberOfPrecipitateParticles() {
    let numberOfParticles = Utils.roundSymmetric(this.soluteProperty.value.particlesPerMole * this.precipitateMolesProperty.value);
    if (numberOfParticles === 0 && this.precipitateMolesProperty.value > 0) {
      numberOfParticles = 1;
    }
    return numberOfParticles;
  }

  /**
   * Creates a color that corresponds to the solution's concentration.
   */
  static createColor(solvent, solute, concentration) {
    let color = solvent.colorProperty.value;
    if (concentration > 0) {
      color = solute.colorScheme.concentrationToColor(concentration);
    }
    return color;
  }
}
beersLawLab.register('ConcentrationSolution', ConcentrationSolution);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,