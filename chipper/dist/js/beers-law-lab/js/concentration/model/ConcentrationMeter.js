// Copyright 2013-2023, University of Colorado Boulder

/**
 * ConcentrationMeter is the model of the concentration meter in the 'Concentration' screen.
 *
 * NOTE: Determining when the probe is in one of the various fluids is handled in the view,
 * where testing node intersections simplifies the process. Otherwise we'd need to
 * model the shapes of the various fluids, an unnecessary complication.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import NullableIO from '../../../../tandem/js/types/NullableIO.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import beersLawLab from '../../beersLawLab.js';
import BLLMovable from '../../common/model/BLLMovable.js';
export default class ConcentrationMeter extends PhetioObject {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      bodyPosition: Vector2.ZERO,
      bodyDragBounds: Bounds2.EVERYTHING,
      probePosition: Vector2.ZERO,
      probeDragBounds: Bounds2.EVERYTHING,
      // PhetioObjectOptions
      phetioState: false
    }, providedOptions);
    super(options);
    this.valueProperty = new Property(null, {
      units: 'mol/L',
      tandem: options.tandem.createTandem('valueProperty'),
      phetioValueType: NullableIO(NumberIO),
      phetioReadOnly: true,
      phetioDocumentation: 'mol/L or % concentration, depending on the concentrationMeterUnits query parameter. ' + 'null if the meter is not reading a value'
    });
    this.bodyPosition = options.bodyPosition;
    this.probe = new BLLMovable({
      position: options.probePosition,
      positionPhetioReadOnly: false,
      dragBounds: options.probeDragBounds,
      tandem: options.tandem.createTandem('probe')
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
    super.dispose();
  }
  reset() {
    this.valueProperty.reset();
    this.probe.reset();
  }
}
beersLawLab.register('ConcentrationMeter', ConcentrationMeter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkJvdW5kczIiLCJWZWN0b3IyIiwib3B0aW9uaXplIiwiUGhldGlvT2JqZWN0IiwiTnVsbGFibGVJTyIsIk51bWJlcklPIiwiYmVlcnNMYXdMYWIiLCJCTExNb3ZhYmxlIiwiQ29uY2VudHJhdGlvbk1ldGVyIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYm9keVBvc2l0aW9uIiwiWkVSTyIsImJvZHlEcmFnQm91bmRzIiwiRVZFUllUSElORyIsInByb2JlUG9zaXRpb24iLCJwcm9iZURyYWdCb3VuZHMiLCJwaGV0aW9TdGF0ZSIsInZhbHVlUHJvcGVydHkiLCJ1bml0cyIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInByb2JlIiwicG9zaXRpb24iLCJwb3NpdGlvblBoZXRpb1JlYWRPbmx5IiwiZHJhZ0JvdW5kcyIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29uY2VudHJhdGlvbk1ldGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbmNlbnRyYXRpb25NZXRlciBpcyB0aGUgbW9kZWwgb2YgdGhlIGNvbmNlbnRyYXRpb24gbWV0ZXIgaW4gdGhlICdDb25jZW50cmF0aW9uJyBzY3JlZW4uXHJcbiAqXHJcbiAqIE5PVEU6IERldGVybWluaW5nIHdoZW4gdGhlIHByb2JlIGlzIGluIG9uZSBvZiB0aGUgdmFyaW91cyBmbHVpZHMgaXMgaGFuZGxlZCBpbiB0aGUgdmlldyxcclxuICogd2hlcmUgdGVzdGluZyBub2RlIGludGVyc2VjdGlvbnMgc2ltcGxpZmllcyB0aGUgcHJvY2Vzcy4gT3RoZXJ3aXNlIHdlJ2QgbmVlZCB0b1xyXG4gKiBtb2RlbCB0aGUgc2hhcGVzIG9mIHRoZSB2YXJpb3VzIGZsdWlkcywgYW4gdW5uZWNlc3NhcnkgY29tcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XHJcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgTnVsbGFibGVJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVsbGFibGVJTy5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvTnVtYmVySU8uanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgQkxMTW92YWJsZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQkxMTW92YWJsZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGJvZHlQb3NpdGlvbj86IFZlY3RvcjI7XHJcbiAgYm9keURyYWdCb3VuZHM/OiBCb3VuZHMyO1xyXG4gIHByb2JlUG9zaXRpb24/OiBWZWN0b3IyO1xyXG4gIHByb2JlRHJhZ0JvdW5kcz86IEJvdW5kczI7XHJcbn07XHJcblxyXG50eXBlIENvbmNlbnRyYXRpb25NZXRlck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25jZW50cmF0aW9uTWV0ZXIgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgYm9keVBvc2l0aW9uOiBWZWN0b3IyO1xyXG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZVByb3BlcnR5OiBQcm9wZXJ0eTxudW1iZXIgfCBudWxsPjtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvYmU6IEJMTE1vdmFibGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zOiBDb25jZW50cmF0aW9uTWV0ZXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Q29uY2VudHJhdGlvbk1ldGVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBoZXRpb09iamVjdE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGJvZHlQb3NpdGlvbjogVmVjdG9yMi5aRVJPLFxyXG4gICAgICBib2R5RHJhZ0JvdW5kczogQm91bmRzMi5FVkVSWVRISU5HLFxyXG4gICAgICBwcm9iZVBvc2l0aW9uOiBWZWN0b3IyLlpFUk8sXHJcbiAgICAgIHByb2JlRHJhZ0JvdW5kczogQm91bmRzMi5FVkVSWVRISU5HLFxyXG5cclxuICAgICAgLy8gUGhldGlvT2JqZWN0T3B0aW9uc1xyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy52YWx1ZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5PG51bWJlciB8IG51bGw+KCBudWxsLCB7XHJcbiAgICAgIHVuaXRzOiAnbW9sL0wnLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZhbHVlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogTnVsbGFibGVJTyggTnVtYmVySU8gKSxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHRydWUsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdtb2wvTCBvciAlIGNvbmNlbnRyYXRpb24sIGRlcGVuZGluZyBvbiB0aGUgY29uY2VudHJhdGlvbk1ldGVyVW5pdHMgcXVlcnkgcGFyYW1ldGVyLiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bGwgaWYgdGhlIG1ldGVyIGlzIG5vdCByZWFkaW5nIGEgdmFsdWUnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5ib2R5UG9zaXRpb24gPSBvcHRpb25zLmJvZHlQb3NpdGlvbjtcclxuXHJcbiAgICB0aGlzLnByb2JlID0gbmV3IEJMTE1vdmFibGUoIHtcclxuICAgICAgcG9zaXRpb246IG9wdGlvbnMucHJvYmVQb3NpdGlvbixcclxuICAgICAgcG9zaXRpb25QaGV0aW9SZWFkT25seTogZmFsc2UsXHJcbiAgICAgIGRyYWdCb3VuZHM6IG9wdGlvbnMucHJvYmVEcmFnQm91bmRzLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2JlJyApXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy52YWx1ZVByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLnByb2JlLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ0NvbmNlbnRyYXRpb25NZXRlcicsIENvbmNlbnRyYXRpb25NZXRlciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxpQ0FBaUM7QUFDdEQsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsWUFBWSxNQUErQix1Q0FBdUM7QUFDekYsT0FBT0MsVUFBVSxNQUFNLDJDQUEyQztBQUNsRSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQVd6RCxlQUFlLE1BQU1DLGtCQUFrQixTQUFTTCxZQUFZLENBQUM7RUFNcERNLFdBQVdBLENBQUVDLGVBQTBDLEVBQUc7SUFFL0QsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQThELENBQUMsQ0FBRTtNQUV4RjtNQUNBVSxZQUFZLEVBQUVYLE9BQU8sQ0FBQ1ksSUFBSTtNQUMxQkMsY0FBYyxFQUFFZCxPQUFPLENBQUNlLFVBQVU7TUFDbENDLGFBQWEsRUFBRWYsT0FBTyxDQUFDWSxJQUFJO01BQzNCSSxlQUFlLEVBQUVqQixPQUFPLENBQUNlLFVBQVU7TUFFbkM7TUFDQUcsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxFQUFFUixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ1EsYUFBYSxHQUFHLElBQUlwQixRQUFRLENBQWlCLElBQUksRUFBRTtNQUN0RHFCLEtBQUssRUFBRSxPQUFPO01BQ2RDLE1BQU0sRUFBRVYsT0FBTyxDQUFDVSxNQUFNLENBQUNDLFlBQVksQ0FBRSxlQUFnQixDQUFDO01BQ3REQyxlQUFlLEVBQUVuQixVQUFVLENBQUVDLFFBQVMsQ0FBQztNQUN2Q21CLGNBQWMsRUFBRSxJQUFJO01BQ3BCQyxtQkFBbUIsRUFBRSxzRkFBc0YsR0FDdEY7SUFDdkIsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDYixZQUFZLEdBQUdELE9BQU8sQ0FBQ0MsWUFBWTtJQUV4QyxJQUFJLENBQUNjLEtBQUssR0FBRyxJQUFJbkIsVUFBVSxDQUFFO01BQzNCb0IsUUFBUSxFQUFFaEIsT0FBTyxDQUFDSyxhQUFhO01BQy9CWSxzQkFBc0IsRUFBRSxLQUFLO01BQzdCQyxVQUFVLEVBQUVsQixPQUFPLENBQUNNLGVBQWU7TUFDbkNJLE1BQU0sRUFBRVYsT0FBTyxDQUFDVSxNQUFNLENBQUNDLFlBQVksQ0FBRSxPQUFRO0lBQy9DLENBQUUsQ0FBQztFQUNMO0VBRWdCUSxPQUFPQSxDQUFBLEVBQVM7SUFDOUJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztJQUN6RixLQUFLLENBQUNELE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0VBRU9FLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNiLGFBQWEsQ0FBQ2EsS0FBSyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDTixLQUFLLENBQUNNLEtBQUssQ0FBQyxDQUFDO0VBQ3BCO0FBQ0Y7QUFFQTFCLFdBQVcsQ0FBQzJCLFFBQVEsQ0FBRSxvQkFBb0IsRUFBRXpCLGtCQUFtQixDQUFDIn0=