// Copyright 2013-2023, University of Colorado Boulder

/**
 * SoluteParticle is the model for all solute particles. This includes particles coming out of the shaker, and
 * precipitate particles on the bottom of the beaker.
 *
 * Note that this was formerly a base class, with ShakerParticle and PrecipitateParticle subclasses. Due to problems
 * with IOTypes in https://github.com/phetsims/beers-law-lab/issues/265, we decided to collapse the hierarchy into
 * a single class.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import Vector2Property from '../../../../dot/js/Vector2Property.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetioObject from '../../../../tandem/js/PhetioObject.js';
import beersLawLab from '../../beersLawLab.js';
import Solute from '../../common/model/Solute.js';
import IOType from '../../../../tandem/js/types/IOType.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
export default class SoluteParticle extends PhetioObject {
  // Precompute these things, to improve the performance of ParticlesNode.
  // cosine of orientation
  // sine of orientation
  // fillStyle for rendering with Canvas
  // strokeStyle for rendering with Canvas
  /**
   * @param solute
   * @param position position of the particle in the beaker's coordinate frame
   * @param orientation in radians
   * @param [providedOptions]
   */
  constructor(solute, position, orientation, providedOptions) {
    const options = optionize()({
      // SelfOptions
      velocity: Vector2.ZERO,
      acceleration: Vector2.ZERO,
      // PhetioObjectOptions
      phetioType: SoluteParticle.SoluteParticleIO,
      phetioDynamicElement: true
    }, providedOptions);
    super(options);
    this.solute = solute;
    this.color = solute.particleColor;
    this.size = solute.particleSize;
    this.positionProperty = new Vector2Property(position);
    this.orientation = orientation;
    this.velocity = options.velocity;
    this.acceleration = options.acceleration;
    this.cos = Math.cos(orientation);
    this.sin = Math.sin(orientation);
    this.fillStyle = this.color.getCanvasStyle();
    this.strokeStyle = this.color.darkerColor().getCanvasStyle();
  }
  toStateObject() {
    return {
      solute: Solute.SoluteIO.toStateObject(this.solute),
      position: this.positionProperty.value.toStateObject(),
      orientation: this.orientation,
      velocity: Vector2.Vector2IO.toStateObject(this.velocity),
      acceleration: Vector2.Vector2IO.toStateObject(this.acceleration)
    };
  }
  static stateObjectToCreateElementArguments(stateObject) {
    return [Solute.SoluteIO.fromStateObject(stateObject.solute), Vector2.Vector2IO.fromStateObject(stateObject.position), stateObject.orientation, Vector2.Vector2IO.fromStateObject(stateObject.velocity), Vector2.Vector2IO.fromStateObject(stateObject.acceleration)];
  }
  static SoluteParticleIO = new IOType('SoluteParticleIO', {
    valueType: SoluteParticle,
    stateSchema: {
      solute: Solute.SoluteIO,
      position: Vector2.Vector2IO,
      orientation: NumberIO,
      velocity: Vector2.Vector2IO,
      acceleration: Vector2.Vector2IO
    },
    toStateObject: soluteParticle => soluteParticle.toStateObject(),
    stateObjectToCreateElementArguments: stateObject => SoluteParticle.stateObjectToCreateElementArguments(stateObject)
  });
}
beersLawLab.register('SoluteParticle', SoluteParticle);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,