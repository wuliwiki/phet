// Copyright 2013-2022, University of Colorado Boulder

/**
 * Evaporator determines the rate at which solvent is evaporated from the solution in the beaker.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import optionize from '../../../../phet-core/js/optionize.js';
import beersLawLab from '../../beersLawLab.js';
export default class Evaporator {
  constructor(solution, providedOptions) {
    const options = optionize()({
      // SelfOptions
      maxEvaporationRate: 0.25
    }, providedOptions);
    this.maxEvaporationRate = options.maxEvaporationRate;
    this.evaporationRateProperty = new NumberProperty(0, {
      range: new Range(0, options.maxEvaporationRate),
      units: 'L/s',
      tandem: options.tandem.createTandem('evaporationRateProperty'),
      phetioReadOnly: true // this is controlled by the model
    });

    this.enabledProperty = new BooleanProperty(true, {
      tandem: options.tandem.createTandem('enabledProperty'),
      phetioReadOnly: true // this is controlled by the model
    });

    // disable when the volume gets to zero
    solution.volumeProperty.link(volume => {
      this.enabledProperty.value = volume > 0;
    });

    // when disabled, set the rate to zero
    this.enabledProperty.link(enabled => {
      if (!enabled) {
        this.evaporationRateProperty.value = 0;
      }
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
  reset() {
    this.evaporationRateProperty.reset();
    this.enabledProperty.reset();
  }
}
beersLawLab.register('Evaporator', Evaporator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwib3B0aW9uaXplIiwiYmVlcnNMYXdMYWIiLCJFdmFwb3JhdG9yIiwiY29uc3RydWN0b3IiLCJzb2x1dGlvbiIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJtYXhFdmFwb3JhdGlvblJhdGUiLCJldmFwb3JhdGlvblJhdGVQcm9wZXJ0eSIsInJhbmdlIiwidW5pdHMiLCJ0YW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9SZWFkT25seSIsImVuYWJsZWRQcm9wZXJ0eSIsInZvbHVtZVByb3BlcnR5IiwibGluayIsInZvbHVtZSIsInZhbHVlIiwiZW5hYmxlZCIsImRpc3Bvc2UiLCJhc3NlcnQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXZhcG9yYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFdmFwb3JhdG9yIGRldGVybWluZXMgdGhlIHJhdGUgYXQgd2hpY2ggc29sdmVudCBpcyBldmFwb3JhdGVkIGZyb20gdGhlIHNvbHV0aW9uIGluIHRoZSBiZWFrZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBOdW1iZXJQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL051bWJlclByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFBpY2tSZXF1aXJlZCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja1JlcXVpcmVkLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgYmVlcnNMYXdMYWIgZnJvbSAnLi4vLi4vYmVlcnNMYXdMYWIuanMnO1xyXG5pbXBvcnQgQ29uY2VudHJhdGlvblNvbHV0aW9uIGZyb20gJy4vQ29uY2VudHJhdGlvblNvbHV0aW9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgbWF4RXZhcG9yYXRpb25SYXRlPzogbnVtYmVyOyAvLyBML3NcclxufTtcclxuXHJcbnR5cGUgRXZhcG9yYXRvck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxQaGV0aW9PYmplY3RPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmFwb3JhdG9yIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1heEV2YXBvcmF0aW9uUmF0ZTogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBldmFwb3JhdGlvblJhdGVQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IGVuYWJsZWRQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc29sdXRpb246IENvbmNlbnRyYXRpb25Tb2x1dGlvbiwgcHJvdmlkZWRPcHRpb25zOiBFdmFwb3JhdG9yT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEV2YXBvcmF0b3JPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgbWF4RXZhcG9yYXRpb25SYXRlOiAwLjI1XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLm1heEV2YXBvcmF0aW9uUmF0ZSA9IG9wdGlvbnMubWF4RXZhcG9yYXRpb25SYXRlO1xyXG5cclxuICAgIHRoaXMuZXZhcG9yYXRpb25SYXRlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMCwgb3B0aW9ucy5tYXhFdmFwb3JhdGlvblJhdGUgKSxcclxuICAgICAgdW5pdHM6ICdML3MnLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2V2YXBvcmF0aW9uUmF0ZVByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSAvLyB0aGlzIGlzIGNvbnRyb2xsZWQgYnkgdGhlIG1vZGVsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5lbmFibGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnZW5hYmxlZFByb3BlcnR5JyApLFxyXG4gICAgICBwaGV0aW9SZWFkT25seTogdHJ1ZSAvLyB0aGlzIGlzIGNvbnRyb2xsZWQgYnkgdGhlIG1vZGVsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gZGlzYWJsZSB3aGVuIHRoZSB2b2x1bWUgZ2V0cyB0byB6ZXJvXHJcbiAgICBzb2x1dGlvbi52b2x1bWVQcm9wZXJ0eS5saW5rKCB2b2x1bWUgPT4ge1xyXG4gICAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eS52YWx1ZSA9ICggdm9sdW1lID4gMCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIHdoZW4gZGlzYWJsZWQsIHNldCB0aGUgcmF0ZSB0byB6ZXJvXHJcbiAgICB0aGlzLmVuYWJsZWRQcm9wZXJ0eS5saW5rKCBlbmFibGVkID0+IHtcclxuICAgICAgaWYgKCAhZW5hYmxlZCApIHtcclxuICAgICAgICB0aGlzLmV2YXBvcmF0aW9uUmF0ZVByb3BlcnR5LnZhbHVlID0gMDtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxzZSwgJ2Rpc3Bvc2UgaXMgbm90IHN1cHBvcnRlZCwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbScgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZXZhcG9yYXRpb25SYXRlUHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMuZW5hYmxlZFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5iZWVyc0xhd0xhYi5yZWdpc3RlciggJ0V2YXBvcmF0b3InLCBFdmFwb3JhdG9yICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSx3Q0FBd0M7QUFDcEUsT0FBT0MsY0FBYyxNQUFNLHVDQUF1QztBQUVsRSxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0QsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQVM5QyxlQUFlLE1BQU1DLFVBQVUsQ0FBQztFQU12QkMsV0FBV0EsQ0FBRUMsUUFBK0IsRUFBRUMsZUFBa0MsRUFBRztJQUV4RixNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBc0QsQ0FBQyxDQUFFO01BRWhGO01BQ0FPLGtCQUFrQixFQUFFO0lBQ3RCLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixJQUFJLENBQUNFLGtCQUFrQixHQUFHRCxPQUFPLENBQUNDLGtCQUFrQjtJQUVwRCxJQUFJLENBQUNDLHVCQUF1QixHQUFHLElBQUlWLGNBQWMsQ0FBRSxDQUFDLEVBQUU7TUFDcERXLEtBQUssRUFBRSxJQUFJVixLQUFLLENBQUUsQ0FBQyxFQUFFTyxPQUFPLENBQUNDLGtCQUFtQixDQUFDO01BQ2pERyxLQUFLLEVBQUUsS0FBSztNQUNaQyxNQUFNLEVBQUVMLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDQyxZQUFZLENBQUUseUJBQTBCLENBQUM7TUFDaEVDLGNBQWMsRUFBRSxJQUFJLENBQUM7SUFDdkIsQ0FBRSxDQUFDOztJQUVILElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUlqQixlQUFlLENBQUUsSUFBSSxFQUFFO01BQ2hEYyxNQUFNLEVBQUVMLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDQyxZQUFZLENBQUUsaUJBQWtCLENBQUM7TUFDeERDLGNBQWMsRUFBRSxJQUFJLENBQUM7SUFDdkIsQ0FBRSxDQUFDOztJQUVIO0lBQ0FULFFBQVEsQ0FBQ1csY0FBYyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSTtNQUN0QyxJQUFJLENBQUNILGVBQWUsQ0FBQ0ksS0FBSyxHQUFLRCxNQUFNLEdBQUcsQ0FBRztJQUM3QyxDQUFFLENBQUM7O0lBRUg7SUFDQSxJQUFJLENBQUNILGVBQWUsQ0FBQ0UsSUFBSSxDQUFFRyxPQUFPLElBQUk7TUFDcEMsSUFBSyxDQUFDQSxPQUFPLEVBQUc7UUFDZCxJQUFJLENBQUNYLHVCQUF1QixDQUFDVSxLQUFLLEdBQUcsQ0FBQztNQUN4QztJQUNGLENBQUUsQ0FBQztFQUNMO0VBRU9FLE9BQU9BLENBQUEsRUFBUztJQUNyQkMsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDhEQUErRCxDQUFDO0VBQzNGO0VBRU9DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNkLHVCQUF1QixDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNSLGVBQWUsQ0FBQ1EsS0FBSyxDQUFDLENBQUM7RUFDOUI7QUFDRjtBQUVBckIsV0FBVyxDQUFDc0IsUUFBUSxDQUFFLFlBQVksRUFBRXJCLFVBQVcsQ0FBQyJ9