// Copyright 2022-2023, University of Colorado Boulder

/**
 * SoluteParticles is the base class for a system of solute particles. It delegates most of its responsibilities
 * to a PhetioGroup, and hides that PhetioGroup from the rest of the sim.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import beersLawLab from '../../beersLawLab.js';
import dotRandom from '../../../../dot/js/dotRandom.js';
import SoluteParticleGroup from './SoluteParticleGroup.js';
export default class SoluteParticles {
  constructor(soluteProperty, providedOptions) {
    this.soluteProperty = soluteProperty;
    this.particleGroup = new SoluteParticleGroup({
      tandem: providedOptions.tandem.createTandem('particleGroup'),
      phetioDocumentation: providedOptions.particleGroupDocumentation
    });
  }
  dispose() {
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }

  /**
   * Gets a reference to the array of particles. Do not modify this array!
   */
  getParticlesReference() {
    return this.particleGroup.getArray();
  }

  /**
   * Gets the number of particles that are in the PhetioGroup.
   */
  get numberOfParticles() {
    return this.particleGroup.count;
  }

  /**
   * Creates a particle.
   */
  createParticle(solute, position, orientation, velocity, acceleration) {
    this.particleGroup.createNextElement(solute, position, orientation, velocity, acceleration);
  }

  /**
   * Disposes of a particle.
   */
  disposeParticle(particle) {
    this.particleGroup.disposeElement(particle);
  }

  /**
   * Disposes the last particle that was created.
   */
  disposeLastParticle() {
    this.disposeParticle(this.particleGroup.getLastElement());
  }

  /**
   * Adds a listener that is notified when a particle is created.
   */
  addParticleCreatedListener(listener) {
    this.particleGroup.elementCreatedEmitter.addListener(listener);
  }

  /**
   * Adds a listener that is notified when a particle is disposed.
   */
  addParticleDisposedListener(listener) {
    this.particleGroup.elementDisposedEmitter.addListener(listener);
  }

  /**
   * Removes all particles from the precipitate.
   */
  removeAllParticles() {
    this.particleGroup.clear();
  }

  /**
   * Gets the size of all particles in the system. Particles are square.
   */
  getParticleSize() {
    return this.soluteProperty.value.particleSize;
  }

  /**
   * Gets the Canvas fillStyle for all particles in the system.
   */
  getFillStyle() {
    return this.soluteProperty.value.fillStyle;
  }

  /**
   * Gets the Canvas strokeStyle for all particles in the system.
   */
  getStrokeStyle() {
    return this.soluteProperty.value.strokeStyle;
  }

  /**
   * Gets a random orientation for a particle, in radians.
   */
  static getRandomOrientation() {
    return dotRandom.nextDouble() * 2 * Math.PI;
  }
}
beersLawLab.register('SoluteParticles', SoluteParticles);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,