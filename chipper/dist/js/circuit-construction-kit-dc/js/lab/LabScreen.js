// Copyright 2017-2023, University of Colorado Boulder

/**
 * The "Lab" Screen for the Circuit Construction Kit: DC simulation.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import CCKCConstants from '../../../circuit-construction-kit-common/js/CCKCConstants.js';
import CCKCColors from '../../../circuit-construction-kit-common/js/view/CCKCColors.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import labScreenIcon_png from '../../images/labScreenIcon_png.js';
import circuitConstructionKitDc from '../circuitConstructionKitDc.js';
import CircuitConstructionKitDcStrings from '../CircuitConstructionKitDcStrings.js';
import LabModel from './model/LabModel.js';
import LabScreenView from './view/LabScreenView.js';
const labStringProperty = CircuitConstructionKitDcStrings.screen.labStringProperty;
class LabScreen extends Screen {
  constructor(tandem, providedOptions) {
    super(() => new LabModel(tandem.createTandem('model'), providedOptions), model => new LabScreenView(model, tandem.createTandem('view'), {
      circuitElementToolboxOptions: {
        carouselScale: CCKCConstants.DC_CAROUSEL_SCALE
      }
    }), {
      name: labStringProperty,
      backgroundColorProperty: CCKCColors.screenBackgroundColorProperty,
      homeScreenIcon: new ScreenIcon(new Image(labScreenIcon_png), {
        fill: CCKCColors.screenBackgroundColorProperty,
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem,
      maxDT: CCKCConstants.MAX_DT
    });
  }
}
circuitConstructionKitDc.register('LabScreen', LabScreen);
export default LabScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQ0tDQ29uc3RhbnRzIiwiQ0NLQ0NvbG9ycyIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImxhYlNjcmVlbkljb25fcG5nIiwiY2lyY3VpdENvbnN0cnVjdGlvbktpdERjIiwiQ2lyY3VpdENvbnN0cnVjdGlvbktpdERjU3RyaW5ncyIsIkxhYk1vZGVsIiwiTGFiU2NyZWVuVmlldyIsImxhYlN0cmluZ1Byb3BlcnR5Iiwic2NyZWVuIiwiTGFiU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJwcm92aWRlZE9wdGlvbnMiLCJjcmVhdGVUYW5kZW0iLCJtb2RlbCIsImNpcmN1aXRFbGVtZW50VG9vbGJveE9wdGlvbnMiLCJjYXJvdXNlbFNjYWxlIiwiRENfQ0FST1VTRUxfU0NBTEUiLCJuYW1lIiwiYmFja2dyb3VuZENvbG9yUHJvcGVydHkiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwiZmlsbCIsIm1heEljb25XaWR0aFByb3BvcnRpb24iLCJtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbiIsIm1heERUIiwiTUFYX0RUIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMYWJTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIFwiTGFiXCIgU2NyZWVuIGZvciB0aGUgQ2lyY3VpdCBDb25zdHJ1Y3Rpb24gS2l0OiBEQyBzaW11bGF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBDQ0tDQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vanMvQ0NLQ0NvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDQ0tDQ29sb3JzIGZyb20gJy4uLy4uLy4uL2NpcmN1aXQtY29uc3RydWN0aW9uLWtpdC1jb21tb24vanMvdmlldy9DQ0tDQ29sb3JzLmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgbGFiU2NyZWVuSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2xhYlNjcmVlbkljb25fcG5nLmpzJztcclxuaW1wb3J0IGNpcmN1aXRDb25zdHJ1Y3Rpb25LaXREYyBmcm9tICcuLi9jaXJjdWl0Q29uc3RydWN0aW9uS2l0RGMuanMnO1xyXG5pbXBvcnQgQ2lyY3VpdENvbnN0cnVjdGlvbktpdERjU3RyaW5ncyBmcm9tICcuLi9DaXJjdWl0Q29uc3RydWN0aW9uS2l0RGNTdHJpbmdzLmpzJztcclxuaW1wb3J0IExhYk1vZGVsIGZyb20gJy4vbW9kZWwvTGFiTW9kZWwuanMnO1xyXG5pbXBvcnQgTGFiU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvTGFiU2NyZWVuVmlldy5qcyc7XHJcblxyXG5jb25zdCBsYWJTdHJpbmdQcm9wZXJ0eSA9IENpcmN1aXRDb25zdHJ1Y3Rpb25LaXREY1N0cmluZ3Muc2NyZWVuLmxhYlN0cmluZ1Byb3BlcnR5O1xyXG5cclxuZXhwb3J0IHR5cGUgTGFiU2NyZWVuT3B0aW9ucyA9IHtcclxuICBzaG93Tm9uY29udGFjdEFtbWV0ZXJzOiBib29sZWFuO1xyXG59O1xyXG5cclxuY2xhc3MgTGFiU2NyZWVuIGV4dGVuZHMgU2NyZWVuPExhYk1vZGVsLCBMYWJTY3JlZW5WaWV3PiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0sIHByb3ZpZGVkT3B0aW9uczogTGFiU2NyZWVuT3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IExhYk1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICksIHByb3ZpZGVkT3B0aW9ucyApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgTGFiU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApLCB7XHJcbiAgICAgICAgY2lyY3VpdEVsZW1lbnRUb29sYm94T3B0aW9uczogeyBjYXJvdXNlbFNjYWxlOiBDQ0tDQ29uc3RhbnRzLkRDX0NBUk9VU0VMX1NDQUxFIH1cclxuICAgICAgfSApLCB7XHJcbiAgICAgICAgbmFtZTogbGFiU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IENDS0NDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIGxhYlNjcmVlbkljb25fcG5nICksIHtcclxuICAgICAgICAgIGZpbGw6IENDS0NDb2xvcnMuc2NyZWVuQmFja2dyb3VuZENvbG9yUHJvcGVydHksXHJcbiAgICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgICAgbWF4RFQ6IENDS0NDb25zdGFudHMuTUFYX0RUXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5jaXJjdWl0Q29uc3RydWN0aW9uS2l0RGMucmVnaXN0ZXIoICdMYWJTY3JlZW4nLCBMYWJTY3JlZW4gKTtcclxuZXhwb3J0IGRlZmF1bHQgTGFiU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxhQUFhLE1BQU0sOERBQThEO0FBQ3hGLE9BQU9DLFVBQVUsTUFBTSxnRUFBZ0U7QUFDdkYsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFFdEQsT0FBT0MsaUJBQWlCLE1BQU0sbUNBQW1DO0FBQ2pFLE9BQU9DLHdCQUF3QixNQUFNLGdDQUFnQztBQUNyRSxPQUFPQywrQkFBK0IsTUFBTSx1Q0FBdUM7QUFDbkYsT0FBT0MsUUFBUSxNQUFNLHFCQUFxQjtBQUMxQyxPQUFPQyxhQUFhLE1BQU0seUJBQXlCO0FBRW5ELE1BQU1DLGlCQUFpQixHQUFHSCwrQkFBK0IsQ0FBQ0ksTUFBTSxDQUFDRCxpQkFBaUI7QUFNbEYsTUFBTUUsU0FBUyxTQUFTVixNQUFNLENBQTBCO0VBRS9DVyxXQUFXQSxDQUFFQyxNQUFjLEVBQUVDLGVBQWlDLEVBQUc7SUFFdEUsS0FBSyxDQUNILE1BQU0sSUFBSVAsUUFBUSxDQUFFTSxNQUFNLENBQUNFLFlBQVksQ0FBRSxPQUFRLENBQUMsRUFBRUQsZUFBZ0IsQ0FBQyxFQUNyRUUsS0FBSyxJQUFJLElBQUlSLGFBQWEsQ0FBRVEsS0FBSyxFQUFFSCxNQUFNLENBQUNFLFlBQVksQ0FBRSxNQUFPLENBQUMsRUFBRTtNQUNoRUUsNEJBQTRCLEVBQUU7UUFBRUMsYUFBYSxFQUFFbkIsYUFBYSxDQUFDb0I7TUFBa0I7SUFDakYsQ0FBRSxDQUFDLEVBQUU7TUFDSEMsSUFBSSxFQUFFWCxpQkFBaUI7TUFDdkJZLHVCQUF1QixFQUFFckIsVUFBVSxDQUFDc0IsNkJBQTZCO01BQ2pFQyxjQUFjLEVBQUUsSUFBSXJCLFVBQVUsQ0FBRSxJQUFJQyxLQUFLLENBQUVDLGlCQUFrQixDQUFDLEVBQUU7UUFDOURvQixJQUFJLEVBQUV4QixVQUFVLENBQUNzQiw2QkFBNkI7UUFDOUNHLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIYixNQUFNLEVBQUVBLE1BQU07TUFDZGMsS0FBSyxFQUFFNUIsYUFBYSxDQUFDNkI7SUFDdkIsQ0FDRixDQUFDO0VBQ0g7QUFDRjtBQUVBdkIsd0JBQXdCLENBQUN3QixRQUFRLENBQUUsV0FBVyxFQUFFbEIsU0FBVSxDQUFDO0FBQzNELGVBQWVBLFNBQVMifQ==