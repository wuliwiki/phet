// Copyright 2017-2023, University of Colorado Boulder

/**
 * The view for the Intro screen.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import CCKCConstants from '../../../../circuit-construction-kit-common/js/CCKCConstants.js';
import CCKCScreenView from '../../../../circuit-construction-kit-common/js/view/CCKCScreenView.js';
import CircuitElementToolFactory from '../../../../circuit-construction-kit-common/js/view/CircuitElementToolFactory.js';
import circuitConstructionKitDc from '../../circuitConstructionKitDc.js';
class IntroScreenView extends CCKCScreenView {
  constructor(model, tandem) {
    const circuitElementToolFactory = new CircuitElementToolFactory(model.circuit, model.showLabelsProperty, model.viewTypeProperty, point => this.circuitNode.globalToLocalPoint(point), tandem.createTandem('circuitElementToolbox').createTandem('carousel').createTandem('circuitElementTools'));

    // Tool nodes that appear on every screen. Pagination for the carousel, each page should begin with wire node
    const circuitElementToolItems = [
    // This page is duplicated in the Lab Screen View
    {
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode1'
    }, {
      createNode: tandem => circuitElementToolFactory.createRightBatteryToolNode(tandem),
      tandemName: 'batteryToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createLightBulbToolNode(tandem),
      tandemName: 'lightBulbToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createResistorToolNode(tandem),
      tandemName: 'resistorToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createSwitchToolNode(tandem),
      tandemName: 'switchToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode2'
    }, {
      createNode: tandem => circuitElementToolFactory.createFuseToolNode(tandem),
      tandemName: 'fuseToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createDollarBillToolNode(tandem),
      tandemName: 'dollarBillToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createPaperClipToolNode(tandem),
      tandemName: 'paperClipToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createCoinToolNode(tandem),
      tandemName: 'coinToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createWireToolNode(tandem),
      tandemName: 'wireToolNode3'
    }, {
      createNode: tandem => circuitElementToolFactory.createEraserToolNode(tandem),
      tandemName: 'eraserToolNode'
    }, {
      createNode: tandem => circuitElementToolFactory.createPencilToolNode(tandem),
      tandemName: 'pencilToolNode'
    }];
    super(model, circuitElementToolItems, tandem, {
      showAdvancedControls: false,
      circuitElementToolboxOptions: {
        carouselScale: CCKCConstants.DC_CAROUSEL_SCALE
      }
    });
  }
}
circuitConstructionKitDc.register('IntroScreenView', IntroScreenView);
export default IntroScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,