// Copyright 2018-2023, University of Colorado Boulder

/**
 * ElapsedTimeNode shows the elapsed time in a game status bar (FiniteStatusBar).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import SimpleClockIcon from '../../scenery-phet/js/SimpleClockIcon.js';
import { HBox, Text } from '../../scenery/js/imports.js';
import GameTimer from './GameTimer.js';
import StatusBar from '../../scenery-phet/js/StatusBar.js';
import vegas from './vegas.js';
import optionize from '../../phet-core/js/optionize.js';
export default class ElapsedTimeNode extends HBox {
  constructor(elapsedTimeProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      clockIconRadius: 15,
      font: StatusBar.DEFAULT_FONT,
      textFill: 'black',
      // HBoxOptions
      spacing: 8
    }, providedOptions);
    const clockIcon = new SimpleClockIcon(options.clockIconRadius);
    const timeValue = new Text('', {
      font: options.font,
      fill: options.textFill
    });
    options.children = [clockIcon, timeValue];
    super(options);

    // Update the time display.
    const elapsedTimeListener = elapsedTime => {
      timeValue.string = GameTimer.formatTime(elapsedTime);
    };
    elapsedTimeProperty.link(elapsedTimeListener);
    this.disposeElapsedTimeNode = () => {
      if (elapsedTimeProperty.hasListener(elapsedTimeListener)) {
        elapsedTimeProperty.unlink(elapsedTimeListener);
      }
    };
  }
  dispose() {
    this.disposeElapsedTimeNode();
    super.dispose();
  }
}
vegas.register('ElapsedTimeNode', ElapsedTimeNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW1wbGVDbG9ja0ljb24iLCJIQm94IiwiVGV4dCIsIkdhbWVUaW1lciIsIlN0YXR1c0JhciIsInZlZ2FzIiwib3B0aW9uaXplIiwiRWxhcHNlZFRpbWVOb2RlIiwiY29uc3RydWN0b3IiLCJlbGFwc2VkVGltZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImNsb2NrSWNvblJhZGl1cyIsImZvbnQiLCJERUZBVUxUX0ZPTlQiLCJ0ZXh0RmlsbCIsInNwYWNpbmciLCJjbG9ja0ljb24iLCJ0aW1lVmFsdWUiLCJmaWxsIiwiY2hpbGRyZW4iLCJlbGFwc2VkVGltZUxpc3RlbmVyIiwiZWxhcHNlZFRpbWUiLCJzdHJpbmciLCJmb3JtYXRUaW1lIiwibGluayIsImRpc3Bvc2VFbGFwc2VkVGltZU5vZGUiLCJoYXNMaXN0ZW5lciIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVsYXBzZWRUaW1lTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFbGFwc2VkVGltZU5vZGUgc2hvd3MgdGhlIGVsYXBzZWQgdGltZSBpbiBhIGdhbWUgc3RhdHVzIGJhciAoRmluaXRlU3RhdHVzQmFyKS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU2ltcGxlQ2xvY2tJY29uIGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9TaW1wbGVDbG9ja0ljb24uanMnO1xyXG5pbXBvcnQgeyBGb250LCBIQm94LCBIQm94T3B0aW9ucywgVENvbG9yLCBUZXh0IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEdhbWVUaW1lciBmcm9tICcuL0dhbWVUaW1lci5qcyc7XHJcbmltcG9ydCBTdGF0dXNCYXIgZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1N0YXR1c0Jhci5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuL3ZlZ2FzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGNsb2NrSWNvblJhZGl1cz86IG51bWJlcjtcclxuICBmb250PzogRm9udDtcclxuICB0ZXh0RmlsbD86IFRDb2xvcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEVsYXBzZWRUaW1lTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8SEJveE9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxhcHNlZFRpbWVOb2RlIGV4dGVuZHMgSEJveCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUVsYXBzZWRUaW1lTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBlbGFwc2VkVGltZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LCBwcm92aWRlZE9wdGlvbnM/OiBFbGFwc2VkVGltZU5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RWxhcHNlZFRpbWVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEhCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBjbG9ja0ljb25SYWRpdXM6IDE1LFxyXG4gICAgICBmb250OiBTdGF0dXNCYXIuREVGQVVMVF9GT05ULFxyXG4gICAgICB0ZXh0RmlsbDogJ2JsYWNrJyxcclxuXHJcbiAgICAgIC8vIEhCb3hPcHRpb25zXHJcbiAgICAgIHNwYWNpbmc6IDhcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGNvbnN0IGNsb2NrSWNvbiA9IG5ldyBTaW1wbGVDbG9ja0ljb24oIG9wdGlvbnMuY2xvY2tJY29uUmFkaXVzICk7XHJcblxyXG4gICAgY29uc3QgdGltZVZhbHVlID0gbmV3IFRleHQoICcnLCB7XHJcbiAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgZmlsbDogb3B0aW9ucy50ZXh0RmlsbFxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGNsb2NrSWNvbiwgdGltZVZhbHVlIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHRpbWUgZGlzcGxheS5cclxuICAgIGNvbnN0IGVsYXBzZWRUaW1lTGlzdGVuZXIgPSAoIGVsYXBzZWRUaW1lOiBudW1iZXIgKSA9PiB7XHJcbiAgICAgIHRpbWVWYWx1ZS5zdHJpbmcgPSBHYW1lVGltZXIuZm9ybWF0VGltZSggZWxhcHNlZFRpbWUgKTtcclxuICAgIH07XHJcbiAgICBlbGFwc2VkVGltZVByb3BlcnR5LmxpbmsoIGVsYXBzZWRUaW1lTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VFbGFwc2VkVGltZU5vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGlmICggZWxhcHNlZFRpbWVQcm9wZXJ0eS5oYXNMaXN0ZW5lciggZWxhcHNlZFRpbWVMaXN0ZW5lciApICkge1xyXG4gICAgICAgIGVsYXBzZWRUaW1lUHJvcGVydHkudW5saW5rKCBlbGFwc2VkVGltZUxpc3RlbmVyICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUVsYXBzZWRUaW1lTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudmVnYXMucmVnaXN0ZXIoICdFbGFwc2VkVGltZU5vZGUnLCBFbGFwc2VkVGltZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLDBDQUEwQztBQUN0RSxTQUFlQyxJQUFJLEVBQXVCQyxJQUFJLFFBQVEsNkJBQTZCO0FBQ25GLE9BQU9DLFNBQVMsTUFBTSxnQkFBZ0I7QUFDdEMsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxLQUFLLE1BQU0sWUFBWTtBQUM5QixPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBWXZELGVBQWUsTUFBTUMsZUFBZSxTQUFTTixJQUFJLENBQUM7RUFJekNPLFdBQVdBLENBQUVDLG1CQUE4QyxFQUFFQyxlQUF3QyxFQUFHO0lBRTdHLE1BQU1DLE9BQU8sR0FBR0wsU0FBUyxDQUFtRCxDQUFDLENBQUU7TUFFN0U7TUFDQU0sZUFBZSxFQUFFLEVBQUU7TUFDbkJDLElBQUksRUFBRVQsU0FBUyxDQUFDVSxZQUFZO01BQzVCQyxRQUFRLEVBQUUsT0FBTztNQUVqQjtNQUNBQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVOLGVBQWdCLENBQUM7SUFFcEIsTUFBTU8sU0FBUyxHQUFHLElBQUlqQixlQUFlLENBQUVXLE9BQU8sQ0FBQ0MsZUFBZ0IsQ0FBQztJQUVoRSxNQUFNTSxTQUFTLEdBQUcsSUFBSWhCLElBQUksQ0FBRSxFQUFFLEVBQUU7TUFDOUJXLElBQUksRUFBRUYsT0FBTyxDQUFDRSxJQUFJO01BQ2xCTSxJQUFJLEVBQUVSLE9BQU8sQ0FBQ0k7SUFDaEIsQ0FBRSxDQUFDO0lBRUhKLE9BQU8sQ0FBQ1MsUUFBUSxHQUFHLENBQUVILFNBQVMsRUFBRUMsU0FBUyxDQUFFO0lBRTNDLEtBQUssQ0FBRVAsT0FBUSxDQUFDOztJQUVoQjtJQUNBLE1BQU1VLG1CQUFtQixHQUFLQyxXQUFtQixJQUFNO01BQ3JESixTQUFTLENBQUNLLE1BQU0sR0FBR3BCLFNBQVMsQ0FBQ3FCLFVBQVUsQ0FBRUYsV0FBWSxDQUFDO0lBQ3hELENBQUM7SUFDRGIsbUJBQW1CLENBQUNnQixJQUFJLENBQUVKLG1CQUFvQixDQUFDO0lBRS9DLElBQUksQ0FBQ0ssc0JBQXNCLEdBQUcsTUFBTTtNQUNsQyxJQUFLakIsbUJBQW1CLENBQUNrQixXQUFXLENBQUVOLG1CQUFvQixDQUFDLEVBQUc7UUFDNURaLG1CQUFtQixDQUFDbUIsTUFBTSxDQUFFUCxtQkFBb0IsQ0FBQztNQUNuRDtJQUNGLENBQUM7RUFDSDtFQUVnQlEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0gsc0JBQXNCLENBQUMsQ0FBQztJQUM3QixLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQXhCLEtBQUssQ0FBQ3lCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXZCLGVBQWdCLENBQUMifQ==