// Copyright 2018-2022, University of Colorado Boulder

/**
 * Display a score as 'Score: * * * *', where '*' are stars, which may be fully or partially filled in.
 * See specification in https://github.com/phetsims/vegas/issues/59.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { HBox, Text } from '../../scenery/js/imports.js';
import ScoreDisplayStars from './ScoreDisplayStars.js';
import StatusBar from '../../scenery-phet/js/StatusBar.js';
import vegas from './vegas.js';
import VegasStrings from './VegasStrings.js';
import optionize from '../../phet-core/js/optionize.js';
export default class ScoreDisplayLabeledStars extends HBox {
  constructor(scoreProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      font: StatusBar.DEFAULT_FONT,
      textFill: 'black',
      spacing: 5
    }, providedOptions);
    const textNode = new Text(VegasStrings.scoreStringProperty, {
      font: options.font,
      fill: options.textFill
    });
    const scoreDisplay = new ScoreDisplayStars(scoreProperty, options);
    options.children = [textNode, scoreDisplay];
    super(options);
    this.disposeScoreDisplayLabeledStars = () => {
      textNode.dispose();
      scoreDisplay.dispose();
    };
  }
  dispose() {
    this.disposeScoreDisplayLabeledStars();
    super.dispose();
  }
}
vegas.register('ScoreDisplayLabeledStars', ScoreDisplayLabeledStars);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIQm94IiwiVGV4dCIsIlNjb3JlRGlzcGxheVN0YXJzIiwiU3RhdHVzQmFyIiwidmVnYXMiLCJWZWdhc1N0cmluZ3MiLCJvcHRpb25pemUiLCJTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMiLCJjb25zdHJ1Y3RvciIsInNjb3JlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZm9udCIsIkRFRkFVTFRfRk9OVCIsInRleHRGaWxsIiwic3BhY2luZyIsInRleHROb2RlIiwic2NvcmVTdHJpbmdQcm9wZXJ0eSIsImZpbGwiLCJzY29yZURpc3BsYXkiLCJjaGlsZHJlbiIsImRpc3Bvc2VTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheSBhIHNjb3JlIGFzICdTY29yZTogKiAqICogKicsIHdoZXJlICcqJyBhcmUgc3RhcnMsIHdoaWNoIG1heSBiZSBmdWxseSBvciBwYXJ0aWFsbHkgZmlsbGVkIGluLlxyXG4gKiBTZWUgc3BlY2lmaWNhdGlvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVnYXMvaXNzdWVzLzU5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEZvbnQsIEhCb3gsIEhCb3hPcHRpb25zLCBUQ29sb3IsIFRleHQgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgU2NvcmVEaXNwbGF5U3RhcnMsIHsgU2NvcmVEaXNwbGF5U3RhcnNPcHRpb25zIH0gZnJvbSAnLi9TY29yZURpc3BsYXlTdGFycy5qcyc7XHJcbmltcG9ydCBTdGF0dXNCYXIgZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1N0YXR1c0Jhci5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuL3ZlZ2FzLmpzJztcclxuaW1wb3J0IFZlZ2FzU3RyaW5ncyBmcm9tICcuL1ZlZ2FzU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBmb250PzogRm9udDtcclxuICB0ZXh0RmlsbD86IFRDb2xvcjtcclxuICBzcGFjaW5nPzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU2NvcmVEaXNwbGF5TGFiZWxlZFN0YXJzT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU2NvcmVEaXNwbGF5U3RhcnNPcHRpb25zICYgU3RyaWN0T21pdDxIQm94T3B0aW9ucywgJ2NoaWxkcmVuJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMgZXh0ZW5kcyBIQm94IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlU2NvcmVEaXNwbGF5TGFiZWxlZFN0YXJzOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjb3JlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFNjb3JlRGlzcGxheUxhYmVsZWRTdGFyc09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxTY29yZURpc3BsYXlMYWJlbGVkU3RhcnNPcHRpb25zLCBTZWxmT3B0aW9ucywgSEJveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIGZvbnQ6IFN0YXR1c0Jhci5ERUZBVUxUX0ZPTlQsXHJcbiAgICAgIHRleHRGaWxsOiAnYmxhY2snLFxyXG4gICAgICBzcGFjaW5nOiA1XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IG5ldyBUZXh0KCBWZWdhc1N0cmluZ3Muc2NvcmVTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnQsXHJcbiAgICAgIGZpbGw6IG9wdGlvbnMudGV4dEZpbGxcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBzY29yZURpc3BsYXkgPSBuZXcgU2NvcmVEaXNwbGF5U3RhcnMoIHNjb3JlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyB0ZXh0Tm9kZSwgc2NvcmVEaXNwbGF5IF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMgPSAoKSA9PiB7XHJcbiAgICAgIHRleHROb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgc2NvcmVEaXNwbGF5LmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVNjb3JlRGlzcGxheUxhYmVsZWRTdGFycygpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudmVnYXMucmVnaXN0ZXIoICdTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMnLCBTY29yZURpc3BsYXlMYWJlbGVkU3RhcnMgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFlQSxJQUFJLEVBQXVCQyxJQUFJLFFBQVEsNkJBQTZCO0FBQ25GLE9BQU9DLGlCQUFpQixNQUFvQyx3QkFBd0I7QUFDcEYsT0FBT0MsU0FBUyxNQUFNLG9DQUFvQztBQUMxRCxPQUFPQyxLQUFLLE1BQU0sWUFBWTtBQUM5QixPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFZdkQsZUFBZSxNQUFNQyx3QkFBd0IsU0FBU1AsSUFBSSxDQUFDO0VBSWxEUSxXQUFXQSxDQUFFQyxhQUF3QyxFQUFFQyxlQUFpRCxFQUFHO0lBRWhILE1BQU1DLE9BQU8sR0FBR0wsU0FBUyxDQUE0RCxDQUFDLENBQUU7TUFFdEY7TUFDQU0sSUFBSSxFQUFFVCxTQUFTLENBQUNVLFlBQVk7TUFDNUJDLFFBQVEsRUFBRSxPQUFPO01BQ2pCQyxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQUVMLGVBQWdCLENBQUM7SUFFcEIsTUFBTU0sUUFBUSxHQUFHLElBQUlmLElBQUksQ0FBRUksWUFBWSxDQUFDWSxtQkFBbUIsRUFBRTtNQUMzREwsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBQUk7TUFDbEJNLElBQUksRUFBRVAsT0FBTyxDQUFDRztJQUNoQixDQUFFLENBQUM7SUFFSCxNQUFNSyxZQUFZLEdBQUcsSUFBSWpCLGlCQUFpQixDQUFFTyxhQUFhLEVBQUVFLE9BQVEsQ0FBQztJQUVwRUEsT0FBTyxDQUFDUyxRQUFRLEdBQUcsQ0FBRUosUUFBUSxFQUFFRyxZQUFZLENBQUU7SUFFN0MsS0FBSyxDQUFFUixPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDVSwrQkFBK0IsR0FBRyxNQUFNO01BQzNDTCxRQUFRLENBQUNNLE9BQU8sQ0FBQyxDQUFDO01BQ2xCSCxZQUFZLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0QsK0JBQStCLENBQUMsQ0FBQztJQUN0QyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWxCLEtBQUssQ0FBQ21CLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWhCLHdCQUF5QixDQUFDIn0=