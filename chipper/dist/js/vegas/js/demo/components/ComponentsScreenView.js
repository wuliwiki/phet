// Copyright 2022, University of Colorado Boulder

/**
 * ComponentsScreenView demonstrates various vegas UI components.
 * Demos are selected from a combo box, and are instantiated on demand.
 * Use the 'component' query parameter to set the initial selection of the combo box.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import vegasQueryParameters from '../../vegasQueryParameters.js';
import vegas from '../../vegas.js';
import optionize from '../../../../phet-core/js/optionize.js';
import DemosScreenView from '../../../../sun/js/demo/DemosScreenView.js';
import demoGameInfoDialog from './demoGameInfoDialog.js';
import demoLevelSelectionButton from './demoLevelSelectionButton.js';
import demoLevelSelectionButtonGroup from './demoLevelSelectionButtonGroup.js';
import demoRewardNode from './demoRewardNode.js';
import demoScoreDisplays from './demoScoreDisplays.js';
import demoLevelCompletedNode from './demoLevelCompletedNode.js';
import demoAllLevelsCompletedNode from './demoAllLevelsCompletedNode.js';
export default class ComponentsScreenView extends DemosScreenView {
  constructor(providedOptions) {
    const options = optionize()({
      selectedDemoLabel: vegasQueryParameters.component
    }, providedOptions);

    // To add a demo, add an entry here of type SunDemo.
    const demos = [{
      label: 'AllLevelsCompletedNode',
      createNode: demoAllLevelsCompletedNode
    }, {
      label: 'GameInfoDialog',
      createNode: demoGameInfoDialog
    }, {
      label: 'LevelCompletedNode',
      createNode: demoLevelCompletedNode
    }, {
      label: 'LevelSelectionButton',
      createNode: demoLevelSelectionButton
    }, {
      label: 'LevelSelectionButtonGroup',
      createNode: demoLevelSelectionButtonGroup
    }, {
      label: 'RewardNode',
      createNode: demoRewardNode
    }, {
      label: 'ScoreDisplays',
      createNode: demoScoreDisplays
    }];
    super(demos, options);
  }
}
vegas.register('ComponentsScreenView', ComponentsScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZWdhc1F1ZXJ5UGFyYW1ldGVycyIsInZlZ2FzIiwib3B0aW9uaXplIiwiRGVtb3NTY3JlZW5WaWV3IiwiZGVtb0dhbWVJbmZvRGlhbG9nIiwiZGVtb0xldmVsU2VsZWN0aW9uQnV0dG9uIiwiZGVtb0xldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAiLCJkZW1vUmV3YXJkTm9kZSIsImRlbW9TY29yZURpc3BsYXlzIiwiZGVtb0xldmVsQ29tcGxldGVkTm9kZSIsImRlbW9BbGxMZXZlbHNDb21wbGV0ZWROb2RlIiwiQ29tcG9uZW50c1NjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzZWxlY3RlZERlbW9MYWJlbCIsImNvbXBvbmVudCIsImRlbW9zIiwibGFiZWwiLCJjcmVhdGVOb2RlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb21wb25lbnRzU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29tcG9uZW50c1NjcmVlblZpZXcgZGVtb25zdHJhdGVzIHZhcmlvdXMgdmVnYXMgVUkgY29tcG9uZW50cy5cclxuICogRGVtb3MgYXJlIHNlbGVjdGVkIGZyb20gYSBjb21ibyBib3gsIGFuZCBhcmUgaW5zdGFudGlhdGVkIG9uIGRlbWFuZC5cclxuICogVXNlIHRoZSAnY29tcG9uZW50JyBxdWVyeSBwYXJhbWV0ZXIgdG8gc2V0IHRoZSBpbml0aWFsIHNlbGVjdGlvbiBvZiB0aGUgY29tYm8gYm94LlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCB2ZWdhc1F1ZXJ5UGFyYW1ldGVycyBmcm9tICcuLi8uLi92ZWdhc1F1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuLi8uLi92ZWdhcy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgRGVtb3NTY3JlZW5WaWV3LCB7IERlbW9zU2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvZGVtby9EZW1vc1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgZGVtb0dhbWVJbmZvRGlhbG9nIGZyb20gJy4vZGVtb0dhbWVJbmZvRGlhbG9nLmpzJztcclxuaW1wb3J0IGRlbW9MZXZlbFNlbGVjdGlvbkJ1dHRvbiBmcm9tICcuL2RlbW9MZXZlbFNlbGVjdGlvbkJ1dHRvbi5qcyc7XHJcbmltcG9ydCBkZW1vTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCBmcm9tICcuL2RlbW9MZXZlbFNlbGVjdGlvbkJ1dHRvbkdyb3VwLmpzJztcclxuaW1wb3J0IGRlbW9SZXdhcmROb2RlIGZyb20gJy4vZGVtb1Jld2FyZE5vZGUuanMnO1xyXG5pbXBvcnQgZGVtb1Njb3JlRGlzcGxheXMgZnJvbSAnLi9kZW1vU2NvcmVEaXNwbGF5cy5qcyc7XHJcbmltcG9ydCBkZW1vTGV2ZWxDb21wbGV0ZWROb2RlIGZyb20gJy4vZGVtb0xldmVsQ29tcGxldGVkTm9kZS5qcyc7XHJcbmltcG9ydCBkZW1vQWxsTGV2ZWxzQ29tcGxldGVkTm9kZSBmcm9tICcuL2RlbW9BbGxMZXZlbHNDb21wbGV0ZWROb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIENvbXBvbmVudHNTY3JlZW5WaWV3T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgRGVtb3NTY3JlZW5WaWV3T3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudHNTY3JlZW5WaWV3IGV4dGVuZHMgRGVtb3NTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBDb21wb25lbnRzU2NyZWVuVmlld09wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxDb21wb25lbnRzU2NyZWVuVmlld09wdGlvbnMsIFNlbGZPcHRpb25zLCBEZW1vc1NjcmVlblZpZXdPcHRpb25zPigpKCB7XHJcbiAgICAgIHNlbGVjdGVkRGVtb0xhYmVsOiB2ZWdhc1F1ZXJ5UGFyYW1ldGVycy5jb21wb25lbnRcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIFRvIGFkZCBhIGRlbW8sIGFkZCBhbiBlbnRyeSBoZXJlIG9mIHR5cGUgU3VuRGVtby5cclxuICAgIGNvbnN0IGRlbW9zID0gW1xyXG4gICAgICB7IGxhYmVsOiAnQWxsTGV2ZWxzQ29tcGxldGVkTm9kZScsIGNyZWF0ZU5vZGU6IGRlbW9BbGxMZXZlbHNDb21wbGV0ZWROb2RlIH0sXHJcbiAgICAgIHsgbGFiZWw6ICdHYW1lSW5mb0RpYWxvZycsIGNyZWF0ZU5vZGU6IGRlbW9HYW1lSW5mb0RpYWxvZyB9LFxyXG4gICAgICB7IGxhYmVsOiAnTGV2ZWxDb21wbGV0ZWROb2RlJywgY3JlYXRlTm9kZTogZGVtb0xldmVsQ29tcGxldGVkTm9kZSB9LFxyXG4gICAgICB7IGxhYmVsOiAnTGV2ZWxTZWxlY3Rpb25CdXR0b24nLCBjcmVhdGVOb2RlOiBkZW1vTGV2ZWxTZWxlY3Rpb25CdXR0b24gfSxcclxuICAgICAgeyBsYWJlbDogJ0xldmVsU2VsZWN0aW9uQnV0dG9uR3JvdXAnLCBjcmVhdGVOb2RlOiBkZW1vTGV2ZWxTZWxlY3Rpb25CdXR0b25Hcm91cCB9LFxyXG4gICAgICB7IGxhYmVsOiAnUmV3YXJkTm9kZScsIGNyZWF0ZU5vZGU6IGRlbW9SZXdhcmROb2RlIH0sXHJcbiAgICAgIHsgbGFiZWw6ICdTY29yZURpc3BsYXlzJywgY3JlYXRlTm9kZTogZGVtb1Njb3JlRGlzcGxheXMgfVxyXG4gICAgXTtcclxuXHJcbiAgICBzdXBlciggZGVtb3MsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlZ2FzLnJlZ2lzdGVyKCAnQ29tcG9uZW50c1NjcmVlblZpZXcnLCBDb21wb25lbnRzU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLEtBQUssTUFBTSxnQkFBZ0I7QUFDbEMsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MsZUFBZSxNQUFrQyw0Q0FBNEM7QUFDcEcsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLHdCQUF3QixNQUFNLCtCQUErQjtBQUNwRSxPQUFPQyw2QkFBNkIsTUFBTSxvQ0FBb0M7QUFDOUUsT0FBT0MsY0FBYyxNQUFNLHFCQUFxQjtBQUNoRCxPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFDdEQsT0FBT0Msc0JBQXNCLE1BQU0sNkJBQTZCO0FBQ2hFLE9BQU9DLDBCQUEwQixNQUFNLGlDQUFpQztBQUt4RSxlQUFlLE1BQU1DLG9CQUFvQixTQUFTUixlQUFlLENBQUM7RUFFekRTLFdBQVdBLENBQUVDLGVBQTZDLEVBQUc7SUFFbEUsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQW1FLENBQUMsQ0FBRTtNQUM3RmEsaUJBQWlCLEVBQUVmLG9CQUFvQixDQUFDZ0I7SUFDMUMsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLEtBQUssR0FBRyxDQUNaO01BQUVDLEtBQUssRUFBRSx3QkFBd0I7TUFBRUMsVUFBVSxFQUFFVDtJQUEyQixDQUFDLEVBQzNFO01BQUVRLEtBQUssRUFBRSxnQkFBZ0I7TUFBRUMsVUFBVSxFQUFFZjtJQUFtQixDQUFDLEVBQzNEO01BQUVjLEtBQUssRUFBRSxvQkFBb0I7TUFBRUMsVUFBVSxFQUFFVjtJQUF1QixDQUFDLEVBQ25FO01BQUVTLEtBQUssRUFBRSxzQkFBc0I7TUFBRUMsVUFBVSxFQUFFZDtJQUF5QixDQUFDLEVBQ3ZFO01BQUVhLEtBQUssRUFBRSwyQkFBMkI7TUFBRUMsVUFBVSxFQUFFYjtJQUE4QixDQUFDLEVBQ2pGO01BQUVZLEtBQUssRUFBRSxZQUFZO01BQUVDLFVBQVUsRUFBRVo7SUFBZSxDQUFDLEVBQ25EO01BQUVXLEtBQUssRUFBRSxlQUFlO01BQUVDLFVBQVUsRUFBRVg7SUFBa0IsQ0FBQyxDQUMxRDtJQUVELEtBQUssQ0FBRVMsS0FBSyxFQUFFSCxPQUFRLENBQUM7RUFDekI7QUFDRjtBQUVBYixLQUFLLENBQUNtQixRQUFRLENBQUUsc0JBQXNCLEVBQUVULG9CQUFxQixDQUFDIn0=