// Copyright 2018-2022, University of Colorado Boulder

/**
 * Demonstrates UI components that typically appear in a game level that has a finite number of challenges.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import NumberProperty from '../../../axon/js/NumberProperty.js';
import Range from '../../../dot/js/Range.js';
import Utils from '../../../dot/js/Utils.js';
import ScreenView from '../../../joist/js/ScreenView.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import { HBox, Text, VBox } from '../../../scenery/js/imports.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import Checkbox from '../../../sun/js/Checkbox.js';
import HSlider from '../../../sun/js/HSlider.js';
import Tandem from '../../../tandem/js/Tandem.js';
import FiniteStatusBar from '../FiniteStatusBar.js';
import LevelCompletedNode from '../LevelCompletedNode.js';
import vegas from '../vegas.js';

// constants
const PERFECT_SCORE = 10;
const NUMBER_OF_CHALLENGES = 10;
const DEFAULT_FONT = new PhetFont(20);
export default class FiniteChallengesScreenView extends ScreenView {
  constructor() {
    super({
      tandem: Tandem.OPT_OUT
    });

    // 1-based
    const levelProperty = new NumberProperty(1, {
      numberType: 'Integer',
      range: new Range(1, 5)
    });
    const challengeIndexProperty = new NumberProperty(0, {
      numberType: 'Integer',
      range: new Range(0, NUMBER_OF_CHALLENGES - 1)
    });
    const numberOfChallengesProperty = new NumberProperty(NUMBER_OF_CHALLENGES, {
      numberType: 'Integer',
      range: new Range(1, NUMBER_OF_CHALLENGES)
    });
    const scoreProperty = new NumberProperty(0, {
      numberType: 'Integer',
      range: new Range(0, PERFECT_SCORE)
    });
    const elapsedTimeProperty = new NumberProperty(0, {
      range: new Range(0, 1000)
    });
    const timerEnabledProperty = new BooleanProperty(true);

    // status bar across the top
    const statusBar = new FiniteStatusBar(this.layoutBounds, this.visibleBoundsProperty, scoreProperty, {
      barFill: 'pink',
      font: new PhetFont(20),
      levelProperty: levelProperty,
      challengeIndexProperty: challengeIndexProperty,
      numberOfChallengesProperty: numberOfChallengesProperty,
      elapsedTimeProperty: elapsedTimeProperty,
      timerEnabledProperty: timerEnabledProperty,
      startOverButtonOptions: {
        listener: () => {
          console.log('Start Over');
        }
      }
    });

    // Controls for changing Properties
    const levelSlider = new HBox({
      children: [new Text('Level: ', {
        font: DEFAULT_FONT
      }), new HSlider(levelProperty, levelProperty.range, {
        constrainValue: value => Utils.roundSymmetric(value)
      })]
    });
    const challengeIndexSlider = new HBox({
      children: [new Text('Challenge: ', {
        font: DEFAULT_FONT
      }), new HSlider(challengeIndexProperty, challengeIndexProperty.range, {
        constrainValue: value => Utils.roundSymmetric(value)
      })]
    });
    const numberOfChallengesSlider = new HBox({
      children: [new Text('Number of challenges: ', {
        font: DEFAULT_FONT
      }), new HSlider(numberOfChallengesProperty, numberOfChallengesProperty.range, {
        constrainValue: value => Utils.roundSymmetric(value)
      })]
    });
    const scoreSlider = new HBox({
      children: [new Text('Score: ', {
        font: DEFAULT_FONT
      }), new HSlider(scoreProperty, scoreProperty.range, {
        constrainValue: value => Utils.roundSymmetric(value)
      })]
    });
    const elapsedTimeSlider = new HBox({
      children: [new Text('Elapsed time: ', {
        font: DEFAULT_FONT
      }), new HSlider(elapsedTimeProperty, elapsedTimeProperty.range, {
        constrainValue: value => Utils.roundSymmetric(value)
      })]
    });
    const timerEnabledCheckbox = new Checkbox(timerEnabledProperty, new Text('Timer enabled', {
      font: DEFAULT_FONT
    }));
    const levelCompletedNode = new LevelCompletedNode(levelProperty.get(),
    // level
    scoreProperty.value,
    // score
    PERFECT_SCORE,
    // maxScore
    4,
    // numberOfStars
    true,
    // timerEnabled
    77,
    // elapsedTime
    74,
    // bestTimeAtThisLevel
    true,
    // isNewBestTime
    () => {
      levelCompletedNode.visible = false;
    },
    // Continue button callback
    {
      center: this.layoutBounds.center,
      visible: false
    });

    // button to show LevelCompletedNode
    const levelCompletedButton = new RectangularPushButton({
      content: new Text('show LevelCompletedNode', {
        font: new PhetFont(20)
      }),
      centerX: this.layoutBounds.centerX,
      bottom: this.layoutBounds.bottom - 20,
      enabledProperty: new DerivedProperty([levelCompletedNode.visibleProperty], visible => !visible),
      listener: () => {
        levelCompletedNode.visible = true;
      }
    });

    // Lay out all controls
    const controls = new VBox({
      align: 'right',
      spacing: 25,
      center: this.layoutBounds.center,
      children: [levelSlider, challengeIndexSlider, numberOfChallengesSlider, scoreSlider, elapsedTimeSlider, timerEnabledCheckbox, levelCompletedButton]
    });
    this.children = [statusBar, controls, levelCompletedNode];
  }
}
vegas.register('FiniteChallengesScreenView', FiniteChallengesScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlJhbmdlIiwiVXRpbHMiLCJTY3JlZW5WaWV3IiwiUGhldEZvbnQiLCJIQm94IiwiVGV4dCIsIlZCb3giLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJDaGVja2JveCIsIkhTbGlkZXIiLCJUYW5kZW0iLCJGaW5pdGVTdGF0dXNCYXIiLCJMZXZlbENvbXBsZXRlZE5vZGUiLCJ2ZWdhcyIsIlBFUkZFQ1RfU0NPUkUiLCJOVU1CRVJfT0ZfQ0hBTExFTkdFUyIsIkRFRkFVTFRfRk9OVCIsIkZpbml0ZUNoYWxsZW5nZXNTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJPUFRfT1VUIiwibGV2ZWxQcm9wZXJ0eSIsIm51bWJlclR5cGUiLCJyYW5nZSIsImNoYWxsZW5nZUluZGV4UHJvcGVydHkiLCJudW1iZXJPZkNoYWxsZW5nZXNQcm9wZXJ0eSIsInNjb3JlUHJvcGVydHkiLCJlbGFwc2VkVGltZVByb3BlcnR5IiwidGltZXJFbmFibGVkUHJvcGVydHkiLCJzdGF0dXNCYXIiLCJsYXlvdXRCb3VuZHMiLCJ2aXNpYmxlQm91bmRzUHJvcGVydHkiLCJiYXJGaWxsIiwiZm9udCIsInN0YXJ0T3ZlckJ1dHRvbk9wdGlvbnMiLCJsaXN0ZW5lciIsImNvbnNvbGUiLCJsb2ciLCJsZXZlbFNsaWRlciIsImNoaWxkcmVuIiwiY29uc3RyYWluVmFsdWUiLCJ2YWx1ZSIsInJvdW5kU3ltbWV0cmljIiwiY2hhbGxlbmdlSW5kZXhTbGlkZXIiLCJudW1iZXJPZkNoYWxsZW5nZXNTbGlkZXIiLCJzY29yZVNsaWRlciIsImVsYXBzZWRUaW1lU2xpZGVyIiwidGltZXJFbmFibGVkQ2hlY2tib3giLCJsZXZlbENvbXBsZXRlZE5vZGUiLCJnZXQiLCJ2aXNpYmxlIiwiY2VudGVyIiwibGV2ZWxDb21wbGV0ZWRCdXR0b24iLCJjb250ZW50IiwiY2VudGVyWCIsImJvdHRvbSIsImVuYWJsZWRQcm9wZXJ0eSIsInZpc2libGVQcm9wZXJ0eSIsImNvbnRyb2xzIiwiYWxpZ24iLCJzcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGaW5pdGVDaGFsbGVuZ2VzU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW1vbnN0cmF0ZXMgVUkgY29tcG9uZW50cyB0aGF0IHR5cGljYWxseSBhcHBlYXIgaW4gYSBnYW1lIGxldmVsIHRoYXQgaGFzIGEgZmluaXRlIG51bWJlciBvZiBjaGFsbGVuZ2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XHJcbmltcG9ydCBTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgSEJveCwgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBIU2xpZGVyIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9IU2xpZGVyLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEZpbml0ZVN0YXR1c0JhciBmcm9tICcuLi9GaW5pdGVTdGF0dXNCYXIuanMnO1xyXG5pbXBvcnQgTGV2ZWxDb21wbGV0ZWROb2RlIGZyb20gJy4uL0xldmVsQ29tcGxldGVkTm9kZS5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuLi92ZWdhcy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgUEVSRkVDVF9TQ09SRSA9IDEwO1xyXG5jb25zdCBOVU1CRVJfT0ZfQ0hBTExFTkdFUyA9IDEwO1xyXG5jb25zdCBERUZBVUxUX0ZPTlQgPSBuZXcgUGhldEZvbnQoIDIwICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaW5pdGVDaGFsbGVuZ2VzU2NyZWVuVmlldyBleHRlbmRzIFNjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIDEtYmFzZWRcclxuICAgIGNvbnN0IGxldmVsUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDEsIHtcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAxLCA1IClcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IGNoYWxsZW5nZUluZGV4UHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgbnVtYmVyVHlwZTogJ0ludGVnZXInLFxyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAwLCBOVU1CRVJfT0ZfQ0hBTExFTkdFUyAtIDEgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgbnVtYmVyT2ZDaGFsbGVuZ2VzUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIE5VTUJFUl9PRl9DSEFMTEVOR0VTLCB7XHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJyxcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggMSwgTlVNQkVSX09GX0NIQUxMRU5HRVMgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgc2NvcmVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAsIFBFUkZFQ1RfU0NPUkUgKVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgZWxhcHNlZFRpbWVQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggMCwge1xyXG4gICAgICByYW5nZTogbmV3IFJhbmdlKCAwLCAxMDAwIClcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHRpbWVyRW5hYmxlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggdHJ1ZSApO1xyXG5cclxuICAgIC8vIHN0YXR1cyBiYXIgYWNyb3NzIHRoZSB0b3BcclxuICAgIGNvbnN0IHN0YXR1c0JhciA9IG5ldyBGaW5pdGVTdGF0dXNCYXIoIHRoaXMubGF5b3V0Qm91bmRzLCB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eSwgc2NvcmVQcm9wZXJ0eSwge1xyXG4gICAgICBiYXJGaWxsOiAncGluaycsXHJcbiAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSxcclxuICAgICAgbGV2ZWxQcm9wZXJ0eTogbGV2ZWxQcm9wZXJ0eSxcclxuICAgICAgY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eTogY2hhbGxlbmdlSW5kZXhQcm9wZXJ0eSxcclxuICAgICAgbnVtYmVyT2ZDaGFsbGVuZ2VzUHJvcGVydHk6IG51bWJlck9mQ2hhbGxlbmdlc1Byb3BlcnR5LFxyXG4gICAgICBlbGFwc2VkVGltZVByb3BlcnR5OiBlbGFwc2VkVGltZVByb3BlcnR5LFxyXG4gICAgICB0aW1lckVuYWJsZWRQcm9wZXJ0eTogdGltZXJFbmFibGVkUHJvcGVydHksXHJcbiAgICAgIHN0YXJ0T3ZlckJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICBsaXN0ZW5lcjogKCkgPT4geyBjb25zb2xlLmxvZyggJ1N0YXJ0IE92ZXInICk7IH1cclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENvbnRyb2xzIGZvciBjaGFuZ2luZyBQcm9wZXJ0aWVzXHJcbiAgICBjb25zdCBsZXZlbFNsaWRlciA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFRleHQoICdMZXZlbDogJywgeyBmb250OiBERUZBVUxUX0ZPTlQgfSApLFxyXG4gICAgICAgIG5ldyBIU2xpZGVyKCBsZXZlbFByb3BlcnR5LCBsZXZlbFByb3BlcnR5LnJhbmdlLCB7XHJcbiAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRTeW1tZXRyaWMoIHZhbHVlIClcclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNoYWxsZW5nZUluZGV4U2xpZGVyID0gbmV3IEhCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVGV4dCggJ0NoYWxsZW5nZTogJywgeyBmb250OiBERUZBVUxUX0ZPTlQgfSApLFxyXG4gICAgICAgIG5ldyBIU2xpZGVyKCBjaGFsbGVuZ2VJbmRleFByb3BlcnR5LCBjaGFsbGVuZ2VJbmRleFByb3BlcnR5LnJhbmdlLCB7XHJcbiAgICAgICAgICBjb25zdHJhaW5WYWx1ZTogdmFsdWUgPT4gVXRpbHMucm91bmRTeW1tZXRyaWMoIHZhbHVlIClcclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IG51bWJlck9mQ2hhbGxlbmdlc1NsaWRlciA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFRleHQoICdOdW1iZXIgb2YgY2hhbGxlbmdlczogJywgeyBmb250OiBERUZBVUxUX0ZPTlQgfSApLFxyXG4gICAgICAgIG5ldyBIU2xpZGVyKCBudW1iZXJPZkNoYWxsZW5nZXNQcm9wZXJ0eSwgbnVtYmVyT2ZDaGFsbGVuZ2VzUHJvcGVydHkucmFuZ2UsIHtcclxuICAgICAgICAgIGNvbnN0cmFpblZhbHVlOiB2YWx1ZSA9PiBVdGlscy5yb3VuZFN5bW1ldHJpYyggdmFsdWUgKVxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgc2NvcmVTbGlkZXIgPSBuZXcgSEJveCgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5ldyBUZXh0KCAnU2NvcmU6ICcsIHsgZm9udDogREVGQVVMVF9GT05UIH0gKSxcclxuICAgICAgICBuZXcgSFNsaWRlciggc2NvcmVQcm9wZXJ0eSwgc2NvcmVQcm9wZXJ0eS5yYW5nZSwge1xyXG4gICAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IFV0aWxzLnJvdW5kU3ltbWV0cmljKCB2YWx1ZSApXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBlbGFwc2VkVGltZVNsaWRlciA9IG5ldyBIQm94KCB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFRleHQoICdFbGFwc2VkIHRpbWU6ICcsIHsgZm9udDogREVGQVVMVF9GT05UIH0gKSxcclxuICAgICAgICBuZXcgSFNsaWRlciggZWxhcHNlZFRpbWVQcm9wZXJ0eSwgZWxhcHNlZFRpbWVQcm9wZXJ0eS5yYW5nZSwge1xyXG4gICAgICAgICAgY29uc3RyYWluVmFsdWU6IHZhbHVlID0+IFV0aWxzLnJvdW5kU3ltbWV0cmljKCB2YWx1ZSApXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCB0aW1lckVuYWJsZWRDaGVja2JveCA9IG5ldyBDaGVja2JveCggdGltZXJFbmFibGVkUHJvcGVydHksIG5ldyBUZXh0KCAnVGltZXIgZW5hYmxlZCcsIHsgZm9udDogREVGQVVMVF9GT05UIH0gKSApO1xyXG5cclxuICAgIGNvbnN0IGxldmVsQ29tcGxldGVkTm9kZSA9IG5ldyBMZXZlbENvbXBsZXRlZE5vZGUoXHJcbiAgICAgIGxldmVsUHJvcGVydHkuZ2V0KCksIC8vIGxldmVsXHJcbiAgICAgIHNjb3JlUHJvcGVydHkudmFsdWUsIC8vIHNjb3JlXHJcbiAgICAgIFBFUkZFQ1RfU0NPUkUsIC8vIG1heFNjb3JlXHJcbiAgICAgIDQsIC8vIG51bWJlck9mU3RhcnNcclxuICAgICAgdHJ1ZSwgLy8gdGltZXJFbmFibGVkXHJcbiAgICAgIDc3LCAvLyBlbGFwc2VkVGltZVxyXG4gICAgICA3NCwgLy8gYmVzdFRpbWVBdFRoaXNMZXZlbFxyXG4gICAgICB0cnVlLCAvLyBpc05ld0Jlc3RUaW1lXHJcbiAgICAgICgpID0+IHsgbGV2ZWxDb21wbGV0ZWROb2RlLnZpc2libGUgPSBmYWxzZTsgfSwgLy8gQ29udGludWUgYnV0dG9uIGNhbGxiYWNrXHJcbiAgICAgIHtcclxuICAgICAgICBjZW50ZXI6IHRoaXMubGF5b3V0Qm91bmRzLmNlbnRlcixcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIGJ1dHRvbiB0byBzaG93IExldmVsQ29tcGxldGVkTm9kZVxyXG4gICAgY29uc3QgbGV2ZWxDb21wbGV0ZWRCdXR0b24gPSBuZXcgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uKCB7XHJcbiAgICAgIGNvbnRlbnQ6IG5ldyBUZXh0KCAnc2hvdyBMZXZlbENvbXBsZXRlZE5vZGUnLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICksXHJcbiAgICAgIGNlbnRlclg6IHRoaXMubGF5b3V0Qm91bmRzLmNlbnRlclgsXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMuYm90dG9tIC0gMjAsXHJcbiAgICAgIGVuYWJsZWRQcm9wZXJ0eTogbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBsZXZlbENvbXBsZXRlZE5vZGUudmlzaWJsZVByb3BlcnR5IF0sIHZpc2libGUgPT4gIXZpc2libGUgKSxcclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBsZXZlbENvbXBsZXRlZE5vZGUudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBMYXkgb3V0IGFsbCBjb250cm9sc1xyXG4gICAgY29uc3QgY29udHJvbHMgPSBuZXcgVkJveCgge1xyXG4gICAgICBhbGlnbjogJ3JpZ2h0JyxcclxuICAgICAgc3BhY2luZzogMjUsXHJcbiAgICAgIGNlbnRlcjogdGhpcy5sYXlvdXRCb3VuZHMuY2VudGVyLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGxldmVsU2xpZGVyLFxyXG4gICAgICAgIGNoYWxsZW5nZUluZGV4U2xpZGVyLFxyXG4gICAgICAgIG51bWJlck9mQ2hhbGxlbmdlc1NsaWRlcixcclxuICAgICAgICBzY29yZVNsaWRlcixcclxuICAgICAgICBlbGFwc2VkVGltZVNsaWRlcixcclxuICAgICAgICB0aW1lckVuYWJsZWRDaGVja2JveCxcclxuICAgICAgICBsZXZlbENvbXBsZXRlZEJ1dHRvblxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5jaGlsZHJlbiA9IFsgc3RhdHVzQmFyLCBjb250cm9scywgbGV2ZWxDb21wbGV0ZWROb2RlIF07XHJcbiAgfVxyXG59XHJcblxyXG52ZWdhcy5yZWdpc3RlciggJ0Zpbml0ZUNoYWxsZW5nZXNTY3JlZW5WaWV3JywgRmluaXRlQ2hhbGxlbmdlc1NjcmVlblZpZXcgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLGVBQWUsTUFBTSxxQ0FBcUM7QUFDakUsT0FBT0MsY0FBYyxNQUFNLG9DQUFvQztBQUMvRCxPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLE9BQU9DLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxRQUFRLE1BQU0sc0NBQXNDO0FBQzNELFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ2pFLE9BQU9DLHFCQUFxQixNQUFNLGtEQUFrRDtBQUNwRixPQUFPQyxRQUFRLE1BQU0sNkJBQTZCO0FBQ2xELE9BQU9DLE9BQU8sTUFBTSw0QkFBNEI7QUFDaEQsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxLQUFLLE1BQU0sYUFBYTs7QUFFL0I7QUFDQSxNQUFNQyxhQUFhLEdBQUcsRUFBRTtBQUN4QixNQUFNQyxvQkFBb0IsR0FBRyxFQUFFO0FBQy9CLE1BQU1DLFlBQVksR0FBRyxJQUFJYixRQUFRLENBQUUsRUFBRyxDQUFDO0FBRXZDLGVBQWUsTUFBTWMsMEJBQTBCLFNBQVNmLFVBQVUsQ0FBQztFQUUxRGdCLFdBQVdBLENBQUEsRUFBRztJQUVuQixLQUFLLENBQUU7TUFDTEMsTUFBTSxFQUFFVCxNQUFNLENBQUNVO0lBQ2pCLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLGFBQWEsR0FBRyxJQUFJdEIsY0FBYyxDQUFFLENBQUMsRUFBRTtNQUMzQ3VCLFVBQVUsRUFB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