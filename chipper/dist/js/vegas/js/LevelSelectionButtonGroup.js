// Copyright 2022-2023, University of Colorado Boulder

/**
 * LevelSelectionButtonGroup is a group of related LevelSelectionButtons, used in games.
 *
 * Responsibilities include:
 * - Instantiation of the buttons, based on an 'items' array that describes the buttons.
 * - Setting an effective uniform size for the button icons.
 * - Layout of the buttons, see details below.
 * - Support for the gameLevels query parameter, via LevelSelectionButtonGroupOptions.gameLevels.
 *
 * Layout:
 * - The default layout is a single row of buttons, customizable via LevelSelectionButtonGroupOptions.flowBoxOptions.
 * - To create multiple rows of buttons, see example MultiRowButtonGroup in demoLevelSelectionButtonGroup.ts.
 * - To create a custom layout, see example XButtonGroup in demoLevelSelectionButtonGroup.ts.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { AlignBox, AlignGroup, FlowBox, Node } from '../../scenery/js/imports.js';
import LevelSelectionButton from './LevelSelectionButton.js';
import Tandem from '../../tandem/js/Tandem.js';
import vegas from './vegas.js';

// Describes one LevelSelectionButton

export default class LevelSelectionButtonGroup extends Node {
  // Buttons, ordered by increasing level number.
  // Note that level numbering starts from 1, to match the gameLevels query parameter.

  /**
   * @param items - descriptions of the LevelSelectionButtons, ordered by increasing level number
   * @param [providedOptions]
   */
  constructor(items, providedOptions) {
    assert && assert(items.length > 0, 'at least one item must be specified');
    const options = optionize()({
      // The default layout is a single row of buttons.
      flowBoxOptions: {
        orientation: 'horizontal',
        spacing: 10
      },
      // @ts-expect-error This default is provided for JavaScript simulations.
      tandem: Tandem.REQUIRED
    }, providedOptions);

    // All icons will have the same effective size.
    const alignBoxOptions = {
      group: new AlignGroup()
    };

    // Create the LevelSelectionButton instances.
    const buttons = items.map((item, index) => {
      let tandem = Tandem.OPT_OUT;
      if (options.tandem.supplied) {
        const tandemName = item.tandemName || `level${index + 1}Button`;
        tandem = options.tandem.createTandem(tandemName);
      }
      return new LevelSelectionButton(new AlignBox(item.icon, alignBoxOptions), item.scoreProperty, combineOptions({
        tandem: tandem
      }, options.levelSelectionButtonOptions, item.options));
    });

    // Hide buttons for levels that are not included in gameLevels.
    // All buttons must be instantiated so that the PhET-iO API is not changed conditionally.
    if (options.gameLevels) {
      assert && assert(options.gameLevels.length > 0, 'at least 1 gameLevel must be visible');
      assert && assert(_.every(options.gameLevels, gameLevel => Number.isInteger(gameLevel) && gameLevel > 0), 'gameLevels must be positive integers');
      buttons.forEach((button, index) => {
        button.visible = options.gameLevels.includes(index + 1);
      });
    }
    let layoutNode;
    if (options.createLayoutNode) {
      layoutNode = options.createLayoutNode(buttons);
    } else {
      // The default layout is a FlowBox, customizable via options.flowBoxOptions.
      layoutNode = new FlowBox(combineOptions({
        children: buttons
      }, options.flowBoxOptions));
    }
    options.children = [layoutNode];
    super(options);
    this.buttons = buttons;
  }

  /**
   * Sets the focus to the button associated with a specified level number. If your simulation supports keyboard
   * traversal, you'll typically need to call this when returning to the UI that show the LevelSelectionButtonGroup,
   * for example, when the 'Back' or 'Start Over' button is pressed in a game.
   * @param level - numbered starting from 1, to comply with gameLevels query parameter
   */
  focusLevelSelectionButton(level) {
    assert && assert(Number.isInteger(level) && level > 0 && level <= this.buttons.length, `invalid level: ${level}`);
    this.buttons[level - 1].focus();
  }
}
vegas.register('LevelSelectionButtonGroup', LevelSelectionButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,