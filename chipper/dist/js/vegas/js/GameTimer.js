// Copyright 2013-2022, University of Colorado Boulder

/**
 * Game timer, keeps track of the elapsed time in the game using "wall clock" time. The frame rate of this clock is
 * sufficient for displaying a game timer in "seconds", but not for driving smooth animation.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import NumberProperty from '../../axon/js/NumberProperty.js';
import stepTimer from '../../axon/js/stepTimer.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import vegas from './vegas.js';
import VegasStrings from './VegasStrings.js';
export default class GameTimer {
  // whether the timer is running

  // seconds since the timer was started

  // see Timer.setInterval and clearInterval

  constructor() {
    this.isRunningProperty = new BooleanProperty(false);
    this.elapsedTimeProperty = new NumberProperty(0);
    this.intervalId = null;
  }
  reset() {
    this.isRunningProperty.reset();
    this.elapsedTimeProperty.reset();
  }

  /**
   * Starts the timer. This is a no-op if the timer is already running.
   */
  start() {
    if (!this.isRunningProperty.value) {
      this.elapsedTimeProperty.value = 0;
      this.intervalId = stepTimer.setInterval(() => {
        this.elapsedTimeProperty.value = this.elapsedTimeProperty.value + 1;
      }, 1000); // fire once per second
      this.isRunningProperty.value = true;
    }
  }

  /**
   * Stops the timer. This is a no-op if the timer is already stopped.
   */
  stop() {
    if (this.isRunningProperty.value) {
      stepTimer.clearInterval(this.intervalId);
      this.intervalId = null;
      this.isRunningProperty.value = false;
    }
  }

  /**
   * Convenience function for restarting the timer.
   */
  restart() {
    this.stop();
    this.start();
  }

  /**
   * Formats a value representing seconds into H:MM:SS (localized).
   */
  static formatTime(time) {
    const hours = Math.floor(time / 3600);
    const minutes = Math.floor((time - hours * 3600) / 60);
    const seconds = Math.floor(time - hours * 3600 - minutes * 60);
    const minutesString = minutes > 9 || hours === 0 ? minutes : `0${minutes}`;
    const secondsString = seconds > 9 ? seconds : `0${seconds}`;
    if (hours > 0) {
      return StringUtils.format(VegasStrings.pattern['0hours']['1minutes']['2secondsStringProperty'].value, hours, minutesString, secondsString);
    } else {
      return StringUtils.format(VegasStrings.pattern['0minutes']['1secondsStringProperty'].value, minutesString, secondsString);
    }
  }
}
vegas.register('GameTimer', GameTimer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsInN0ZXBUaW1lciIsIlN0cmluZ1V0aWxzIiwidmVnYXMiLCJWZWdhc1N0cmluZ3MiLCJHYW1lVGltZXIiLCJjb25zdHJ1Y3RvciIsImlzUnVubmluZ1Byb3BlcnR5IiwiZWxhcHNlZFRpbWVQcm9wZXJ0eSIsImludGVydmFsSWQiLCJyZXNldCIsInN0YXJ0IiwidmFsdWUiLCJzZXRJbnRlcnZhbCIsInN0b3AiLCJjbGVhckludGVydmFsIiwicmVzdGFydCIsImZvcm1hdFRpbWUiLCJ0aW1lIiwiaG91cnMiLCJNYXRoIiwiZmxvb3IiLCJtaW51dGVzIiwic2Vjb25kcyIsIm1pbnV0ZXNTdHJpbmciLCJzZWNvbmRzU3RyaW5nIiwiZm9ybWF0IiwicGF0dGVybiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiR2FtZVRpbWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdhbWUgdGltZXIsIGtlZXBzIHRyYWNrIG9mIHRoZSBlbGFwc2VkIHRpbWUgaW4gdGhlIGdhbWUgdXNpbmcgXCJ3YWxsIGNsb2NrXCIgdGltZS4gVGhlIGZyYW1lIHJhdGUgb2YgdGhpcyBjbG9jayBpc1xyXG4gKiBzdWZmaWNpZW50IGZvciBkaXNwbGF5aW5nIGEgZ2FtZSB0aW1lciBpbiBcInNlY29uZHNcIiwgYnV0IG5vdCBmb3IgZHJpdmluZyBzbW9vdGggYW5pbWF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHN0ZXBUaW1lciBmcm9tICcuLi8uLi9heG9uL2pzL3N0ZXBUaW1lci5qcyc7XHJcbmltcG9ydCB7IFRpbWVyTGlzdGVuZXIgfSBmcm9tICcuLi8uLi9heG9uL2pzL1RpbWVyLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuL3ZlZ2FzLmpzJztcclxuaW1wb3J0IFZlZ2FzU3RyaW5ncyBmcm9tICcuL1ZlZ2FzU3RyaW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lVGltZXIge1xyXG5cclxuICAvLyB3aGV0aGVyIHRoZSB0aW1lciBpcyBydW5uaW5nXHJcbiAgcHVibGljIHJlYWRvbmx5IGlzUnVubmluZ1Byb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gc2Vjb25kcyBzaW5jZSB0aGUgdGltZXIgd2FzIHN0YXJ0ZWRcclxuICBwdWJsaWMgcmVhZG9ubHkgZWxhcHNlZFRpbWVQcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPjtcclxuXHJcbiAgLy8gc2VlIFRpbWVyLnNldEludGVydmFsIGFuZCBjbGVhckludGVydmFsXHJcbiAgcHJpdmF0ZSBpbnRlcnZhbElkOiBUaW1lckxpc3RlbmVyIHwgbnVsbDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcbiAgICB0aGlzLmVsYXBzZWRUaW1lUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAgKTtcclxuICAgIHRoaXMuaW50ZXJ2YWxJZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmVsYXBzZWRUaW1lUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgdGltZXIuIFRoaXMgaXMgYSBuby1vcCBpZiB0aGUgdGltZXIgaXMgYWxyZWFkeSBydW5uaW5nLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGFydCgpOiB2b2lkIHtcclxuICAgIGlmICggIXRoaXMuaXNSdW5uaW5nUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eS52YWx1ZSA9IDA7XHJcbiAgICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHN0ZXBUaW1lci5zZXRJbnRlcnZhbCggKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZWxhcHNlZFRpbWVQcm9wZXJ0eS52YWx1ZSArIDE7XHJcbiAgICAgIH0sIDEwMDAgKTsgLy8gZmlyZSBvbmNlIHBlciBzZWNvbmRcclxuICAgICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eS52YWx1ZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wcyB0aGUgdGltZXIuIFRoaXMgaXMgYSBuby1vcCBpZiB0aGUgdGltZXIgaXMgYWxyZWFkeSBzdG9wcGVkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG4gICAgaWYgKCB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICBzdGVwVGltZXIuY2xlYXJJbnRlcnZhbCggdGhpcy5pbnRlcnZhbElkISApO1xyXG4gICAgICB0aGlzLmludGVydmFsSWQgPSBudWxsO1xyXG4gICAgICB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgcmVzdGFydGluZyB0aGUgdGltZXIuXHJcbiAgICovXHJcbiAgcHVibGljIHJlc3RhcnQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0b3AoKTtcclxuICAgIHRoaXMuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvcm1hdHMgYSB2YWx1ZSByZXByZXNlbnRpbmcgc2Vjb25kcyBpbnRvIEg6TU06U1MgKGxvY2FsaXplZCkuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBmb3JtYXRUaW1lKCB0aW1lOiBudW1iZXIgKTogc3RyaW5nIHtcclxuXHJcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoIHRpbWUgLyAzNjAwICk7XHJcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vciggKCB0aW1lIC0gKCBob3VycyAqIDM2MDAgKSApIC8gNjAgKTtcclxuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCB0aW1lIC0gKCBob3VycyAqIDM2MDAgKSAtICggbWludXRlcyAqIDYwICkgKTtcclxuXHJcbiAgICBjb25zdCBtaW51dGVzU3RyaW5nID0gKCBtaW51dGVzID4gOSB8fCBob3VycyA9PT0gMCApID8gbWludXRlcyA6ICggYDAke21pbnV0ZXN9YCApO1xyXG4gICAgY29uc3Qgc2Vjb25kc1N0cmluZyA9ICggc2Vjb25kcyA+IDkgKSA/IHNlY29uZHMgOiAoIGAwJHtzZWNvbmRzfWAgKTtcclxuXHJcbiAgICBpZiAoIGhvdXJzID4gMCApIHtcclxuICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZvcm1hdCggVmVnYXNTdHJpbmdzLnBhdHRlcm5bICcwaG91cnMnIF1bICcxbWludXRlcycgXVsgJzJzZWNvbmRzU3RyaW5nUHJvcGVydHknIF0udmFsdWUsXHJcbiAgICAgICAgaG91cnMsIG1pbnV0ZXNTdHJpbmcsIHNlY29uZHNTdHJpbmcgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gU3RyaW5nVXRpbHMuZm9ybWF0KCBWZWdhc1N0cmluZ3MucGF0dGVyblsgJzBtaW51dGVzJyBdWyAnMXNlY29uZHNTdHJpbmdQcm9wZXJ0eScgXS52YWx1ZSxcclxuICAgICAgICBtaW51dGVzU3RyaW5nLCBzZWNvbmRzU3RyaW5nICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG52ZWdhcy5yZWdpc3RlciggJ0dhbWVUaW1lcicsIEdhbWVUaW1lciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxrQ0FBa0M7QUFDOUQsT0FBT0MsY0FBYyxNQUFNLGlDQUFpQztBQUU1RCxPQUFPQyxTQUFTLE1BQU0sNEJBQTRCO0FBRWxELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQUU1QyxlQUFlLE1BQU1DLFNBQVMsQ0FBQztFQUU3Qjs7RUFHQTs7RUFHQTs7RUFHT0MsV0FBV0EsQ0FBQSxFQUFHO0lBQ25CLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSVIsZUFBZSxDQUFFLEtBQU0sQ0FBQztJQUNyRCxJQUFJLENBQUNTLG1CQUFtQixHQUFHLElBQUlSLGNBQWMsQ0FBRSxDQUFFLENBQUM7SUFDbEQsSUFBSSxDQUFDUyxVQUFVLEdBQUcsSUFBSTtFQUN4QjtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDSCxpQkFBaUIsQ0FBQ0csS0FBSyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDRixtQkFBbUIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDbEM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFLLENBQUMsSUFBSSxDQUFDSixpQkFBaUIsQ0FBQ0ssS0FBSyxFQUFHO01BQ25DLElBQUksQ0FBQ0osbUJBQW1CLENBQUNJLEtBQUssR0FBRyxDQUFDO01BQ2xDLElBQUksQ0FBQ0gsVUFBVSxHQUFHUixTQUFTLENBQUNZLFdBQVcsQ0FBRSxNQUFNO1FBQzdDLElBQUksQ0FBQ0wsbUJBQW1CLENBQUNJLEtBQUssR0FBRyxJQUFJLENBQUNKLG1CQUFtQixDQUFDSSxLQUFLLEdBQUcsQ0FBQztNQUNyRSxDQUFDLEVBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQztNQUNYLElBQUksQ0FBQ0wsaUJBQWlCLENBQUNLLEtBQUssR0FBRyxJQUFJO0lBQ3JDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NFLElBQUlBLENBQUEsRUFBUztJQUNsQixJQUFLLElBQUksQ0FBQ1AsaUJBQWlCLENBQUNLLEtBQUssRUFBRztNQUNsQ1gsU0FBUyxDQUFDYyxhQUFhLENBQUUsSUFBSSxDQUFDTixVQUFZLENBQUM7TUFDM0MsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSTtNQUN0QixJQUFJLENBQUNGLGlCQUFpQixDQUFDSyxLQUFLLEdBQUcsS0FBSztJQUN0QztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSSxPQUFPQSxDQUFBLEVBQVM7SUFDckIsSUFBSSxDQUFDRixJQUFJLENBQUMsQ0FBQztJQUNYLElBQUksQ0FBQ0gsS0FBSyxDQUFDLENBQUM7RUFDZDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxPQUFjTSxVQUFVQSxDQUFFQyxJQUFZLEVBQVc7SUFFL0MsTUFBTUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBRUgsSUFBSSxHQUFHLElBQUssQ0FBQztJQUN2QyxNQUFNSSxPQUFPLEdBQUdGLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUVILElBQUksR0FBS0MsS0FBSyxHQUFHLElBQU0sSUFBSyxFQUFHLENBQUM7SUFDOUQsTUFBTUksT0FBTyxHQUFHSCxJQUFJLENBQUNDLEtBQUssQ0FBRUgsSUFBSSxHQUFLQyxLQUFLLEdBQUcsSUFBTSxHQUFLRyxPQUFPLEdBQUcsRUFBSyxDQUFDO0lBRXhFLE1BQU1FLGFBQWEsR0FBS0YsT0FBTyxHQUFHLENBQUMsSUFBSUgsS0FBSyxLQUFLLENBQUMsR0FBS0csT0FBTyxHQUFNLElBQUdBLE9BQVEsRUFBRztJQUNsRixNQUFNRyxhQUFhLEdBQUtGLE9BQU8sR0FBRyxDQUFDLEdBQUtBLE9BQU8sR0FBTSxJQUFHQSxPQUFRLEVBQUc7SUFFbkUsSUFBS0osS0FBSyxHQUFHLENBQUMsRUFBRztNQUNmLE9BQU9qQixXQUFXLENBQUN3QixNQUFNLENBQUV0QixZQUFZLENBQUN1QixPQUFPLENBQUUsUUFBUSxDQUFFLENBQUUsVUFBVSxDQUFFLENBQUUsd0JBQXdCLENBQUUsQ0FBQ2YsS0FBSyxFQUN6R08sS0FBSyxFQUFFSyxhQUFhLEVBQUVDLGFBQWMsQ0FBQztJQUN6QyxDQUFDLE1BQ0k7TUFDSCxPQUFPdkIsV0FBVyxDQUFDd0IsTUFBTSxDQUFFdEIsWUFBWSxDQUFDdUIsT0FBTyxDQUFFLFVBQVUsQ0FBRSxDQUFFLHdCQUF3QixDQUFFLENBQUNmLEtBQUssRUFDN0ZZLGFBQWEsRUFBRUMsYUFBYyxDQUFDO0lBQ2xDO0VBQ0Y7QUFDRjtBQUVBdEIsS0FBSyxDQUFDeUIsUUFBUSxDQUFFLFdBQVcsRUFBRXZCLFNBQVUsQ0FBQyJ9