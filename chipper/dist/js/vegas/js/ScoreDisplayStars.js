// Copyright 2013-2022, University of Colorado Boulder

/**
 * Display a score as '* * * *', where '*' are stars, which may be fully or partially filled in.
 * See specification in https://github.com/phetsims/vegas/issues/59.
 *
 * @author John Blanco
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrea Lin
 */

import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import StarNode from '../../scenery-phet/js/StarNode.js';
import { HBox } from '../../scenery/js/imports.js';
import vegas from './vegas.js';
export default class ScoreDisplayStars extends HBox {
  constructor(scoreProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      numberOfStars: 1,
      perfectScore: 1,
      starNodeOptions: {
        starShapeOptions: {
          outerRadius: 10,
          innerRadius: 5
        },
        filledLineWidth: 1.5,
        emptyLineWidth: 1.5
      },
      // HBoxOptions
      spacing: 3
    }, providedOptions);
    const numberOfStars = options.numberOfStars;
    const perfectScore = options.perfectScore;
    super(options);

    // Update visibility of filled and half-filled stars based on score.
    const scorePropertyListener = score => {
      assert && assert(score <= perfectScore, `Score ${score} exceeds perfect score ${perfectScore}`);
      const children = [];
      const proportion = score / perfectScore;
      const numFilledStars = Math.floor(proportion * numberOfStars);
      for (let i = 0; i < numFilledStars; i++) {
        children.push(new StarNode(combineOptions({
          value: 1
        }, options.starNodeOptions)));
      }
      const remainder = proportion * numberOfStars - numFilledStars;
      if (remainder > 1E-6) {
        children.push(new StarNode(combineOptions({
          value: remainder
        }, options.starNodeOptions)));
      }
      const numEmptyStars = numberOfStars - children.length;
      for (let i = 0; i < numEmptyStars; i++) {
        children.push(new StarNode(combineOptions({
          value: 0
        }, options.starNodeOptions)));
      }
      this.children = children;
    };
    scoreProperty.link(scorePropertyListener);
    this.disposeScoreDisplayStars = function () {
      scoreProperty.unlink(scorePropertyListener);
    };
  }
  dispose() {
    this.disposeScoreDisplayStars();
    super.dispose();
  }
}
vegas.register('ScoreDisplayStars', ScoreDisplayStars);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIlN0YXJOb2RlIiwiSEJveCIsInZlZ2FzIiwiU2NvcmVEaXNwbGF5U3RhcnMiLCJjb25zdHJ1Y3RvciIsInNjb3JlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibnVtYmVyT2ZTdGFycyIsInBlcmZlY3RTY29yZSIsInN0YXJOb2RlT3B0aW9ucyIsInN0YXJTaGFwZU9wdGlvbnMiLCJvdXRlclJhZGl1cyIsImlubmVyUmFkaXVzIiwiZmlsbGVkTGluZVdpZHRoIiwiZW1wdHlMaW5lV2lkdGgiLCJzcGFjaW5nIiwic2NvcmVQcm9wZXJ0eUxpc3RlbmVyIiwic2NvcmUiLCJhc3NlcnQiLCJjaGlsZHJlbiIsInByb3BvcnRpb24iLCJudW1GaWxsZWRTdGFycyIsIk1hdGgiLCJmbG9vciIsImkiLCJwdXNoIiwidmFsdWUiLCJyZW1haW5kZXIiLCJudW1FbXB0eVN0YXJzIiwibGVuZ3RoIiwibGluayIsImRpc3Bvc2VTY29yZURpc3BsYXlTdGFycyIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNjb3JlRGlzcGxheVN0YXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXkgYSBzY29yZSBhcyAnKiAqICogKicsIHdoZXJlICcqJyBhcmUgc3RhcnMsIHdoaWNoIG1heSBiZSBmdWxseSBvciBwYXJ0aWFsbHkgZmlsbGVkIGluLlxyXG4gKiBTZWUgc3BlY2lmaWNhdGlvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVnYXMvaXNzdWVzLzU5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQW5kcmVhIExpblxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBTdGFyTm9kZSwgeyBTdGFyTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvU3Rhck5vZGUuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBIQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB2ZWdhcyBmcm9tICcuL3ZlZ2FzLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgbnVtYmVyT2ZTdGFycz86IG51bWJlcjtcclxuICBwZXJmZWN0U2NvcmU/OiBudW1iZXI7XHJcbiAgc3Rhck5vZGVPcHRpb25zPzogU3Rhck5vZGVPcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU2NvcmVEaXNwbGF5U3RhcnNPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PEhCb3hPcHRpb25zLCAnY2hpbGRyZW4nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjb3JlRGlzcGxheVN0YXJzIGV4dGVuZHMgSEJveCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVNjb3JlRGlzcGxheVN0YXJzOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjb3JlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFNjb3JlRGlzcGxheVN0YXJzT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNjb3JlRGlzcGxheVN0YXJzT3B0aW9ucywgU2VsZk9wdGlvbnMsIEhCb3hPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBudW1iZXJPZlN0YXJzOiAxLFxyXG4gICAgICBwZXJmZWN0U2NvcmU6IDEsXHJcbiAgICAgIHN0YXJOb2RlT3B0aW9uczoge1xyXG4gICAgICAgIHN0YXJTaGFwZU9wdGlvbnM6IHtcclxuICAgICAgICAgIG91dGVyUmFkaXVzOiAxMCxcclxuICAgICAgICAgIGlubmVyUmFkaXVzOiA1XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaWxsZWRMaW5lV2lkdGg6IDEuNSxcclxuICAgICAgICBlbXB0eUxpbmVXaWR0aDogMS41XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBIQm94T3B0aW9uc1xyXG4gICAgICBzcGFjaW5nOiAzXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBudW1iZXJPZlN0YXJzID0gb3B0aW9ucy5udW1iZXJPZlN0YXJzO1xyXG4gICAgY29uc3QgcGVyZmVjdFNjb3JlID0gb3B0aW9ucy5wZXJmZWN0U2NvcmU7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdmlzaWJpbGl0eSBvZiBmaWxsZWQgYW5kIGhhbGYtZmlsbGVkIHN0YXJzIGJhc2VkIG9uIHNjb3JlLlxyXG4gICAgY29uc3Qgc2NvcmVQcm9wZXJ0eUxpc3RlbmVyID0gKCBzY29yZTogbnVtYmVyICkgPT4ge1xyXG5cclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggc2NvcmUgPD0gcGVyZmVjdFNjb3JlLCBgU2NvcmUgJHtzY29yZX0gZXhjZWVkcyBwZXJmZWN0IHNjb3JlICR7cGVyZmVjdFNjb3JlfWAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XHJcblxyXG4gICAgICBjb25zdCBwcm9wb3J0aW9uID0gc2NvcmUgLyBwZXJmZWN0U2NvcmU7XHJcbiAgICAgIGNvbnN0IG51bUZpbGxlZFN0YXJzID0gTWF0aC5mbG9vciggcHJvcG9ydGlvbiAqIG51bWJlck9mU3RhcnMgKTtcclxuXHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IG51bUZpbGxlZFN0YXJzOyBpKysgKSB7XHJcbiAgICAgICAgY2hpbGRyZW4ucHVzaCggbmV3IFN0YXJOb2RlKCBjb21iaW5lT3B0aW9uczxTdGFyTm9kZU9wdGlvbnM+KCB7IHZhbHVlOiAxIH0sIG9wdGlvbnMuc3Rhck5vZGVPcHRpb25zICkgKSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZW1haW5kZXIgPSBwcm9wb3J0aW9uICogbnVtYmVyT2ZTdGFycyAtIG51bUZpbGxlZFN0YXJzO1xyXG4gICAgICBpZiAoIHJlbWFpbmRlciA+IDFFLTYgKSB7XHJcbiAgICAgICAgY2hpbGRyZW4ucHVzaCggbmV3IFN0YXJOb2RlKCBjb21iaW5lT3B0aW9uczxTdGFyTm9kZU9wdGlvbnM+KCB7IHZhbHVlOiByZW1haW5kZXIgfSwgb3B0aW9ucy5zdGFyTm9kZU9wdGlvbnMgKSApICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IG51bUVtcHR5U3RhcnMgPSBudW1iZXJPZlN0YXJzIC0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1FbXB0eVN0YXJzOyBpKysgKSB7XHJcbiAgICAgICAgY2hpbGRyZW4ucHVzaCggbmV3IFN0YXJOb2RlKCBjb21iaW5lT3B0aW9uczxTdGFyTm9kZU9wdGlvbnM+KCB7IHZhbHVlOiAwIH0sIG9wdGlvbnMuc3Rhck5vZGVPcHRpb25zICkgKSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICB9O1xyXG4gICAgc2NvcmVQcm9wZXJ0eS5saW5rKCBzY29yZVByb3BlcnR5TGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VTY29yZURpc3BsYXlTdGFycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzY29yZVByb3BlcnR5LnVubGluayggc2NvcmVQcm9wZXJ0eUxpc3RlbmVyICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTY29yZURpc3BsYXlTdGFycygpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudmVnYXMucmVnaXN0ZXIoICdTY29yZURpc3BsYXlTdGFycycsIFNjb3JlRGlzcGxheVN0YXJzICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLFNBQVMsSUFBSUMsY0FBYyxRQUFRLGlDQUFpQztBQUUzRSxPQUFPQyxRQUFRLE1BQTJCLG1DQUFtQztBQUM3RSxTQUFTQyxJQUFJLFFBQXFCLDZCQUE2QjtBQUMvRCxPQUFPQyxLQUFLLE1BQU0sWUFBWTtBQVU5QixlQUFlLE1BQU1DLGlCQUFpQixTQUFTRixJQUFJLENBQUM7RUFJM0NHLFdBQVdBLENBQUVDLGFBQXdDLEVBQUVDLGVBQTBDLEVBQUc7SUFFekcsTUFBTUMsT0FBTyxHQUFHVCxTQUFTLENBQXFELENBQUMsQ0FBRTtNQUUvRTtNQUNBVSxhQUFhLEVBQUUsQ0FBQztNQUNoQkMsWUFBWSxFQUFFLENBQUM7TUFDZkMsZUFBZSxFQUFFO1FBQ2ZDLGdCQUFnQixFQUFFO1VBQ2hCQyxXQUFXLEVBQUUsRUFBRTtVQUNmQyxXQUFXLEVBQUU7UUFDZixDQUFDO1FBQ0RDLGVBQWUsRUFBRSxHQUFHO1FBQ3BCQyxjQUFjLEVBQUU7TUFDbEIsQ0FBQztNQUVEO01BQ0FDLE9BQU8sRUFBRTtJQUNYLENBQUMsRUFBRVYsZUFBZ0IsQ0FBQztJQUVwQixNQUFNRSxhQUFhLEdBQUdELE9BQU8sQ0FBQ0MsYUFBYTtJQUMzQyxNQUFNQyxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0UsWUFBWTtJQUV6QyxLQUFLLENBQUVGLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQSxNQUFNVSxxQkFBcUIsR0FBS0MsS0FBYSxJQUFNO01BRWpEQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsS0FBSyxJQUFJVCxZQUFZLEVBQUcsU0FBUVMsS0FBTSwwQkFBeUJULFlBQWEsRUFBRSxDQUFDO01BRWpHLE1BQU1XLFFBQVEsR0FBRyxFQUFFO01BRW5CLE1BQU1DLFVBQVUsR0FBR0gsS0FBSyxHQUFHVCxZQUFZO01BQ3ZDLE1BQU1hLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUVILFVBQVUsR0FBR2IsYUFBYyxDQUFDO01BRS9ELEtBQU0sSUFBSWlCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsY0FBYyxFQUFFRyxDQUFDLEVBQUUsRUFBRztRQUN6Q0wsUUFBUSxDQUFDTSxJQUFJLENBQUUsSUFBSTFCLFFBQVEsQ0FBRUQsY0FBYyxDQUFtQjtVQUFFNEIsS0FBSyxFQUFFO1FBQUUsQ0FBQyxFQUFFcEIsT0FBTyxDQUFDRyxlQUFnQixDQUFFLENBQUUsQ0FBQztNQUMzRztNQUVBLE1BQU1rQixTQUFTLEdBQUdQLFVBQVUsR0FBR2IsYUFBYSxHQUFHYyxjQUFjO01BQzdELElBQUtNLFNBQVMsR0FBRyxJQUFJLEVBQUc7UUFDdEJSLFFBQVEsQ0FBQ00sSUFBSSxDQUFFLElBQUkxQixRQUFRLENBQUVELGNBQWMsQ0FBbUI7VUFBRTRCLEtBQUssRUFBRUM7UUFBVSxDQUFDLEVBQUVyQixPQUFPLENBQUNHLGVBQWdCLENBQUUsQ0FBRSxDQUFDO01BQ25IO01BRUEsTUFBTW1CLGFBQWEsR0FBR3JCLGFBQWEsR0FBR1ksUUFBUSxDQUFDVSxNQUFNO01BQ3JELEtBQU0sSUFBSUwsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSSxhQUFhLEVBQUVKLENBQUMsRUFBRSxFQUFHO1FBQ3hDTCxRQUFRLENBQUNNLElBQUksQ0FBRSxJQUFJMUIsUUFBUSxDQUFFRCxjQUFjLENBQW1CO1VBQUU0QixLQUFLLEVBQUU7UUFBRSxDQUFDLEVBQUVwQixPQUFPLENBQUNHLGVBQWdCLENBQUUsQ0FBRSxDQUFDO01BQzNHO01BRUEsSUFBSSxDQUFDVSxRQUFRLEdBQUdBLFFBQVE7SUFDMUIsQ0FBQztJQUNEZixhQUFhLENBQUMwQixJQUFJLENBQUVkLHFCQUFzQixDQUFDO0lBRTNDLElBQUksQ0FBQ2Usd0JBQXdCLEdBQUcsWUFBVztNQUN6QzNCLGFBQWEsQ0FBQzRCLE1BQU0sQ0FBRWhCLHFCQUFzQixDQUFDO0lBQy9DLENBQUM7RUFDSDtFQUVnQmlCLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLHdCQUF3QixDQUFDLENBQUM7SUFDL0IsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQyxLQUFLLENBQUNpQyxRQUFRLENBQUUsbUJBQW1CLEVBQUVoQyxpQkFBa0IsQ0FBQyJ9