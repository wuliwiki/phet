// Copyright 2018-2022, University of Colorado Boulder

/**
 * Display a score as 'N *', where N is a number and '*' is a star.
 * If N is 0, it is hidden and the star is grayed out.
 * See specification in https://github.com/phetsims/vegas/issues/59.
 *
 * @author Andrea Lin
 */

import Utils from '../../dot/js/Utils.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import StarNode from '../../scenery-phet/js/StarNode.js';
import StatusBar from '../../scenery-phet/js/StatusBar.js';
import { HBox, Text } from '../../scenery/js/imports.js';
import vegas from './vegas.js';
export default class ScoreDisplayNumberAndStar extends HBox {
  constructor(scoreProperty, providedOptions) {
    const options = optionize()({
      // SelfOptions
      font: StatusBar.DEFAULT_FONT,
      textFill: 'black',
      scoreDecimalPlaces: 0,
      starNodeOptions: {
        starShapeOptions: {
          outerRadius: 10,
          innerRadius: 5
        },
        filledLineWidth: 1.5,
        emptyLineWidth: 1.5
      },
      // HBoxOptions
      spacing: 5
    }, providedOptions);
    super(options);

    // Update number displayed based on score.
    const scorePropertyListener = score => {
      const children = [];
      if (score === 0) {
        children.push(new StarNode(combineOptions({
          value: 0
        }, options.starNodeOptions)));
      } else {
        children.push(new Text(Utils.toFixed(score, options.scoreDecimalPlaces), {
          font: options.font,
          fill: options.textFill
        }));
        children.push(new StarNode(combineOptions({
          value: 1
        }, options.starNodeOptions)));
      }
      this.children = children;
    };
    scoreProperty.link(scorePropertyListener);
    this.disposeScoreDisplayNumberAndStar = function () {
      scoreProperty.unlink(scorePropertyListener);
    };
  }
  dispose() {
    this.disposeScoreDisplayNumberAndStar();
    super.dispose();
  }
}
vegas.register('ScoreDisplayNumberAndStar', ScoreDisplayNumberAndStar);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiU3Rhck5vZGUiLCJTdGF0dXNCYXIiLCJIQm94IiwiVGV4dCIsInZlZ2FzIiwiU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3RhciIsImNvbnN0cnVjdG9yIiwic2NvcmVQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJmb250IiwiREVGQVVMVF9GT05UIiwidGV4dEZpbGwiLCJzY29yZURlY2ltYWxQbGFjZXMiLCJzdGFyTm9kZU9wdGlvbnMiLCJzdGFyU2hhcGVPcHRpb25zIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsImZpbGxlZExpbmVXaWR0aCIsImVtcHR5TGluZVdpZHRoIiwic3BhY2luZyIsInNjb3JlUHJvcGVydHlMaXN0ZW5lciIsInNjb3JlIiwiY2hpbGRyZW4iLCJwdXNoIiwidmFsdWUiLCJ0b0ZpeGVkIiwiZmlsbCIsImxpbmsiLCJkaXNwb3NlU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3RhciIsInVubGluayIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheSBhIHNjb3JlIGFzICdOIConLCB3aGVyZSBOIGlzIGEgbnVtYmVyIGFuZCAnKicgaXMgYSBzdGFyLlxyXG4gKiBJZiBOIGlzIDAsIGl0IGlzIGhpZGRlbiBhbmQgdGhlIHN0YXIgaXMgZ3JheWVkIG91dC5cclxuICogU2VlIHNwZWNpZmljYXRpb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlZ2FzL2lzc3Vlcy81OS5cclxuICpcclxuICogQGF1dGhvciBBbmRyZWEgTGluXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBTdGFyTm9kZSwgeyBTdGFyTm9kZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvU3Rhck5vZGUuanMnO1xyXG5pbXBvcnQgU3RhdHVzQmFyIGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9TdGF0dXNCYXIuanMnO1xyXG5pbXBvcnQgeyBGb250LCBIQm94LCBIQm94T3B0aW9ucywgVENvbG9yLCBUZXh0IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHZlZ2FzIGZyb20gJy4vdmVnYXMuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBmb250PzogRm9udDtcclxuICB0ZXh0RmlsbD86IFRDb2xvcjtcclxuICBzY29yZURlY2ltYWxQbGFjZXM/OiBudW1iZXI7XHJcbiAgc3Rhck5vZGVPcHRpb25zPzogU3Rhck5vZGVPcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3Rhck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8SEJveE9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3RhciBleHRlbmRzIEhCb3gge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNjb3JlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFNjb3JlRGlzcGxheU51bWJlckFuZFN0YXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2NvcmVEaXNwbGF5TnVtYmVyQW5kU3Rhck9wdGlvbnMsIFNlbGZPcHRpb25zLCBIQm94T3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgZm9udDogU3RhdHVzQmFyLkRFRkFVTFRfRk9OVCxcclxuICAgICAgdGV4dEZpbGw6ICdibGFjaycsXHJcbiAgICAgIHNjb3JlRGVjaW1hbFBsYWNlczogMCxcclxuICAgICAgc3Rhck5vZGVPcHRpb25zOiB7XHJcbiAgICAgICAgc3RhclNoYXBlT3B0aW9uczoge1xyXG4gICAgICAgICAgb3V0ZXJSYWRpdXM6IDEwLFxyXG4gICAgICAgICAgaW5uZXJSYWRpdXM6IDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpbGxlZExpbmVXaWR0aDogMS41LFxyXG4gICAgICAgIGVtcHR5TGluZVdpZHRoOiAxLjVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIEhCb3hPcHRpb25zXHJcbiAgICAgIHNwYWNpbmc6IDVcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIG51bWJlciBkaXNwbGF5ZWQgYmFzZWQgb24gc2NvcmUuXHJcbiAgICBjb25zdCBzY29yZVByb3BlcnR5TGlzdGVuZXIgPSAoIHNjb3JlOiBudW1iZXIgKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XHJcblxyXG4gICAgICBpZiAoIHNjb3JlID09PSAwICkge1xyXG4gICAgICAgIGNoaWxkcmVuLnB1c2goIG5ldyBTdGFyTm9kZSggY29tYmluZU9wdGlvbnM8U3Rhck5vZGVPcHRpb25zPiggeyB2YWx1ZTogMCB9LCBvcHRpb25zLnN0YXJOb2RlT3B0aW9ucyApICkgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjaGlsZHJlbi5wdXNoKCBuZXcgVGV4dCggVXRpbHMudG9GaXhlZCggc2NvcmUsIG9wdGlvbnMuc2NvcmVEZWNpbWFsUGxhY2VzICksIHtcclxuICAgICAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgICAgIGZpbGw6IG9wdGlvbnMudGV4dEZpbGxcclxuICAgICAgICB9ICkgKTtcclxuICAgICAgICBjaGlsZHJlbi5wdXNoKCBuZXcgU3Rhck5vZGUoIGNvbWJpbmVPcHRpb25zPFN0YXJOb2RlT3B0aW9ucz4oIHsgdmFsdWU6IDEgfSwgb3B0aW9ucy5zdGFyTm9kZU9wdGlvbnMgKSApICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIH07XHJcbiAgICBzY29yZVByb3BlcnR5LmxpbmsoIHNjb3JlUHJvcGVydHlMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZVNjb3JlRGlzcGxheU51bWJlckFuZFN0YXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgc2NvcmVQcm9wZXJ0eS51bmxpbmsoIHNjb3JlUHJvcGVydHlMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3RhcigpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxudmVnYXMucmVnaXN0ZXIoICdTY29yZURpc3BsYXlOdW1iZXJBbmRTdGFyJywgU2NvcmVEaXNwbGF5TnVtYmVyQW5kU3RhciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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