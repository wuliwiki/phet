// Copyright 2021-2022, University of Colorado Boulder

/**
 * Gets the QueryStringMachine schema for the gameLevels query parameter.
 * Note that game levels are numbered starting from 1.
 *
 * History:
 * - The `gameLevels` query parameter was first proposed and discussed in https://github.com/phetsims/vegas/issues/86.
 * - The design of the gameLevels query parameter was solidified, and it was first implemented in Equality Explorer,
 *   see https://github.com/phetsims/equality-explorer/issues/165.
 * - When gameLevels was needed in Fourier, the schema was then copied from Fourier to Equality Explorer,
 *   see https://github.com/phetsims/fourier-making-waves/issues/145.
 * - During code review of Number Play in https://github.com/phetsims/number-play/issues/92, yet-another implementation
 *   was discovered. That motivated factoring out this function, to prevent further duplication and inconsistency.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import vegas from './vegas.js';
function getGameLevelsSchema(numberOfLevels) {
  // eslint-disable-line @typescript-eslint/explicit-module-boundary-types, explicit-method-return-type

  assert && assert(Number.isInteger(numberOfLevels) && numberOfLevels > 0, `numberOfLevels must be a positive integer: ${numberOfLevels}`);
  return {
    public: true,
    type: 'array',
    // each level number in the array
    elementSchema: {
      type: 'number',
      isValidValue: value => Number.isInteger(value) && value > 0 && value <= numberOfLevels
    },
    // [ 1, 2,...,numberOfLevels]
    defaultValue: Array.from({
      length: numberOfLevels
    }, (_, i) => i + 1),
    // validation for the array as a whole
    isValidValue: array => {
      return array === null ||
      // at least 1 level must be visible
      array.length > 0 &&
      // unique level numbers
      array.length === _.uniq(array).length &&
      // sorted by ascending level number
      _.every(array, (value, index, array) => index === 0 || array[index - 1] <= value);
    }
  };
}
vegas.register('getGameLevelsSchema', getGameLevelsSchema);
export default getGameLevelsSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZWdhcyIsImdldEdhbWVMZXZlbHNTY2hlbWEiLCJudW1iZXJPZkxldmVscyIsImFzc2VydCIsIk51bWJlciIsImlzSW50ZWdlciIsInB1YmxpYyIsInR5cGUiLCJlbGVtZW50U2NoZW1hIiwiaXNWYWxpZFZhbHVlIiwidmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJfIiwiaSIsImFycmF5IiwidW5pcSIsImV2ZXJ5IiwiaW5kZXgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImdldEdhbWVMZXZlbHNTY2hlbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgUXVlcnlTdHJpbmdNYWNoaW5lIHNjaGVtYSBmb3IgdGhlIGdhbWVMZXZlbHMgcXVlcnkgcGFyYW1ldGVyLlxyXG4gKiBOb3RlIHRoYXQgZ2FtZSBsZXZlbHMgYXJlIG51bWJlcmVkIHN0YXJ0aW5nIGZyb20gMS5cclxuICpcclxuICogSGlzdG9yeTpcclxuICogLSBUaGUgYGdhbWVMZXZlbHNgIHF1ZXJ5IHBhcmFtZXRlciB3YXMgZmlyc3QgcHJvcG9zZWQgYW5kIGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVnYXMvaXNzdWVzLzg2LlxyXG4gKiAtIFRoZSBkZXNpZ24gb2YgdGhlIGdhbWVMZXZlbHMgcXVlcnkgcGFyYW1ldGVyIHdhcyBzb2xpZGlmaWVkLCBhbmQgaXQgd2FzIGZpcnN0IGltcGxlbWVudGVkIGluIEVxdWFsaXR5IEV4cGxvcmVyLFxyXG4gKiAgIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvZXF1YWxpdHktZXhwbG9yZXIvaXNzdWVzLzE2NS5cclxuICogLSBXaGVuIGdhbWVMZXZlbHMgd2FzIG5lZWRlZCBpbiBGb3VyaWVyLCB0aGUgc2NoZW1hIHdhcyB0aGVuIGNvcGllZCBmcm9tIEZvdXJpZXIgdG8gRXF1YWxpdHkgRXhwbG9yZXIsXHJcbiAqICAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9mb3VyaWVyLW1ha2luZy13YXZlcy9pc3N1ZXMvMTQ1LlxyXG4gKiAtIER1cmluZyBjb2RlIHJldmlldyBvZiBOdW1iZXIgUGxheSBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbnVtYmVyLXBsYXkvaXNzdWVzLzkyLCB5ZXQtYW5vdGhlciBpbXBsZW1lbnRhdGlvblxyXG4gKiAgIHdhcyBkaXNjb3ZlcmVkLiBUaGF0IG1vdGl2YXRlZCBmYWN0b3Jpbmcgb3V0IHRoaXMgZnVuY3Rpb24sIHRvIHByZXZlbnQgZnVydGhlciBkdXBsaWNhdGlvbiBhbmQgaW5jb25zaXN0ZW5jeS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgdmVnYXMgZnJvbSAnLi92ZWdhcy5qcyc7XHJcblxyXG5mdW5jdGlvbiBnZXRHYW1lTGV2ZWxzU2NoZW1hKCBudW1iZXJPZkxldmVsczogbnVtYmVyICkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMsIGV4cGxpY2l0LW1ldGhvZC1yZXR1cm4tdHlwZVxyXG5cclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBOdW1iZXIuaXNJbnRlZ2VyKCBudW1iZXJPZkxldmVscyApICYmIG51bWJlck9mTGV2ZWxzID4gMCxcclxuICAgIGBudW1iZXJPZkxldmVscyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcjogJHtudW1iZXJPZkxldmVsc31gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwdWJsaWM6IHRydWUsXHJcbiAgICB0eXBlOiAnYXJyYXknLFxyXG5cclxuICAgIC8vIGVhY2ggbGV2ZWwgbnVtYmVyIGluIHRoZSBhcnJheVxyXG4gICAgZWxlbWVudFNjaGVtYToge1xyXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgaXNWYWxpZFZhbHVlOiAoIHZhbHVlOiBudW1iZXIgKSA9PiAoIE51bWJlci5pc0ludGVnZXIoIHZhbHVlICkgJiYgdmFsdWUgPiAwICYmIHZhbHVlIDw9IG51bWJlck9mTGV2ZWxzIClcclxuICAgIH0sXHJcblxyXG4gICAgLy8gWyAxLCAyLC4uLixudW1iZXJPZkxldmVsc11cclxuICAgIGRlZmF1bHRWYWx1ZTogQXJyYXkuZnJvbSggeyBsZW5ndGg6IG51bWJlck9mTGV2ZWxzIH0sICggXywgaSApID0+IGkgKyAxICksXHJcblxyXG4gICAgLy8gdmFsaWRhdGlvbiBmb3IgdGhlIGFycmF5IGFzIGEgd2hvbGVcclxuICAgIGlzVmFsaWRWYWx1ZTogKCBhcnJheTogbnVtYmVyW10gKSA9PiB7XHJcbiAgICAgIHJldHVybiAoIGFycmF5ID09PSBudWxsICkgfHwgKFxyXG4gICAgICAgIC8vIGF0IGxlYXN0IDEgbGV2ZWwgbXVzdCBiZSB2aXNpYmxlXHJcbiAgICAgICAgYXJyYXkubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIC8vIHVuaXF1ZSBsZXZlbCBudW1iZXJzXHJcbiAgICAgICAgYXJyYXkubGVuZ3RoID09PSBfLnVuaXEoIGFycmF5ICkubGVuZ3RoICYmXHJcbiAgICAgICAgLy8gc29ydGVkIGJ5IGFzY2VuZGluZyBsZXZlbCBudW1iZXJcclxuICAgICAgICBfLmV2ZXJ5KCBhcnJheSwgKCB2YWx1ZSwgaW5kZXgsIGFycmF5ICkgPT4gKCBpbmRleCA9PT0gMCB8fCBhcnJheVsgaW5kZXggLSAxIF0gPD0gdmFsdWUgKSApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBhcyBjb25zdDtcclxufVxyXG5cclxudmVnYXMucmVnaXN0ZXIoICdnZXRHYW1lTGV2ZWxzU2NoZW1hJywgZ2V0R2FtZUxldmVsc1NjaGVtYSApO1xyXG5leHBvcnQgZGVmYXVsdCBnZXRHYW1lTGV2ZWxzU2NoZW1hOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxZQUFZO0FBRTlCLFNBQVNDLG1CQUFtQkEsQ0FBRUMsY0FBc0IsRUFBRztFQUFFOztFQUV2REMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFFSCxjQUFlLENBQUMsSUFBSUEsY0FBYyxHQUFHLENBQUMsRUFDdkUsOENBQTZDQSxjQUFlLEVBQUUsQ0FBQztFQUVsRSxPQUFPO0lBQ0xJLE1BQU0sRUFBRSxJQUFJO0lBQ1pDLElBQUksRUFBRSxPQUFPO0lBRWI7SUFDQUMsYUFBYSxFQUFFO01BQ2JELElBQUksRUFBRSxRQUFRO01BQ2RFLFlBQVksRUFBSUMsS0FBYSxJQUFRTixNQUFNLENBQUNDLFNBQVMsQ0FBRUssS0FBTSxDQUFDLElBQUlBLEtBQUssR0FBRyxDQUFDLElBQUlBLEtBQUssSUFBSVI7SUFDMUYsQ0FBQztJQUVEO0lBQ0FTLFlBQVksRUFBRUMsS0FBSyxDQUFDQyxJQUFJLENBQUU7TUFBRUMsTUFBTSxFQUFFWjtJQUFlLENBQUMsRUFBRSxDQUFFYSxDQUFDLEVBQUVDLENBQUMsS0FBTUEsQ0FBQyxHQUFHLENBQUUsQ0FBQztJQUV6RTtJQUNBUCxZQUFZLEVBQUlRLEtBQWUsSUFBTTtNQUNuQyxPQUFTQSxLQUFLLEtBQUssSUFBSTtNQUNyQjtNQUNBQSxLQUFLLENBQUNILE1BQU0sR0FBRyxDQUFDO01BQ2hCO01BQ0FHLEtBQUssQ0FBQ0gsTUFBTSxLQUFLQyxDQUFDLENBQUNHLElBQUksQ0FBRUQsS0FBTSxDQUFDLENBQUNILE1BQU07TUFDdkM7TUFDQUMsQ0FBQyxDQUFDSSxLQUFLLENBQUVGLEtBQUssRUFBRSxDQUFFUCxLQUFLLEVBQUVVLEtBQUssRUFBRUgsS0FBSyxLQUFRRyxLQUFLLEtBQUssQ0FBQyxJQUFJSCxLQUFLLENBQUVHLEtBQUssR0FBRyxDQUFDLENBQUUsSUFBSVYsS0FBUSxDQUMzRjtJQUNIO0VBQ0YsQ0FBQztBQUNIO0FBRUFWLEtBQUssQ0FBQ3FCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRXBCLG1CQUFvQixDQUFDO0FBQzVELGVBQWVBLG1CQUFtQiJ9