// Copyright 2018-2022, University of Colorado Boulder

/**
 * AllLevelsCompletedNode is a pseudo-dialog shown when all game levels have been completed.
 *
 * @author Jonathan Olson
 */

import optionize from '../../phet-core/js/optionize.js';
import FaceNode from '../../scenery-phet/js/FaceNode.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import { Node, RichText, Text, VBox } from '../../scenery/js/imports.js';
import RectangularPushButton from '../../sun/js/buttons/RectangularPushButton.js';
import Panel from '../../sun/js/Panel.js';
import vegas from './vegas.js';
import VegasStrings from './VegasStrings.js';
export default class AllLevelsCompletedNode extends Node {
  /**
   * @param listener function that gets called when 'next' button is pressed
   * @param providedOptions
   */
  constructor(listener, providedOptions) {
    super();
    const options = optionize()({
      // SelfOptions
      faceDiameter: 160,
      maxTextWidth: 300
    }, providedOptions);

    // create the smiley face
    const faceNode = new FaceNode(options.faceDiameter);

    // create the dialog text
    const textMessage = new RichText(VegasStrings.youCompletedAllLevelsStringProperty, {
      font: new PhetFont(25),
      lineWrap: 300,
      maxWidth: options.maxTextWidth,
      maxHeight: 300
    });

    // create the button
    const button = new RectangularPushButton({
      content: new Text(VegasStrings.doneStringProperty, {
        font: new PhetFont(30),
        maxWidth: options.maxTextWidth
      }),
      listener: listener,
      baseColor: 'yellow'
    });

    // add the main background panel
    this.addChild(new Panel(new VBox({
      children: [faceNode, textMessage, button],
      spacing: 20
    }), {
      xMargin: 50,
      yMargin: 20
    }));
    this.mutate(options);
  }
}
vegas.register('AllLevelsCompletedNode', AllLevelsCompletedNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJGYWNlTm9kZSIsIlBoZXRGb250IiwiTm9kZSIsIlJpY2hUZXh0IiwiVGV4dCIsIlZCb3giLCJSZWN0YW5ndWxhclB1c2hCdXR0b24iLCJQYW5lbCIsInZlZ2FzIiwiVmVnYXNTdHJpbmdzIiwiQWxsTGV2ZWxzQ29tcGxldGVkTm9kZSIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXIiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZmFjZURpYW1ldGVyIiwibWF4VGV4dFdpZHRoIiwiZmFjZU5vZGUiLCJ0ZXh0TWVzc2FnZSIsInlvdUNvbXBsZXRlZEFsbExldmVsc1N0cmluZ1Byb3BlcnR5IiwiZm9udCIsImxpbmVXcmFwIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJidXR0b24iLCJjb250ZW50IiwiZG9uZVN0cmluZ1Byb3BlcnR5IiwiYmFzZUNvbG9yIiwiYWRkQ2hpbGQiLCJjaGlsZHJlbiIsInNwYWNpbmciLCJ4TWFyZ2luIiwieU1hcmdpbiIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQWxsTGV2ZWxzQ29tcGxldGVkTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbGxMZXZlbHNDb21wbGV0ZWROb2RlIGlzIGEgcHNldWRvLWRpYWxvZyBzaG93biB3aGVuIGFsbCBnYW1lIGxldmVscyBoYXZlIGJlZW4gY29tcGxldGVkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IEZhY2VOb2RlIGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9GYWNlTm9kZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgUmljaFRleHQsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQdXNoQnV0dG9uTGlzdGVuZXIgfSBmcm9tICcuLi8uLi9zdW4vanMvYnV0dG9ucy9QdXNoQnV0dG9uTW9kZWwuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIGZyb20gJy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBQYW5lbCBmcm9tICcuLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgdmVnYXMgZnJvbSAnLi92ZWdhcy5qcyc7XHJcbmltcG9ydCBWZWdhc1N0cmluZ3MgZnJvbSAnLi9WZWdhc1N0cmluZ3MuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gZGlhbWV0ZXIgb2YgdGhlIHNtaWxleSBmYWNlXHJcbiAgZmFjZURpYW1ldGVyPzogbnVtYmVyO1xyXG5cclxuICAvLyBDb250cm9scyB0aGUgd2lkdGggb2YgdGhlIG1haW4gbWVzc2FnZSBhbmQgdGhlIHRleHQgaW4gdGhlIGJ1dHRvblxyXG4gIG1heFRleHRXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEFsbExldmVsc0NvbXBsZXRlZE5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbExldmVsc0NvbXBsZXRlZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxpc3RlbmVyIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiAnbmV4dCcgYnV0dG9uIGlzIHByZXNzZWRcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsaXN0ZW5lcjogUHVzaEJ1dHRvbkxpc3RlbmVyLCBwcm92aWRlZE9wdGlvbnM/OiBBbGxMZXZlbHNDb21wbGV0ZWROb2RlT3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBbGxMZXZlbHNDb21wbGV0ZWROb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBmYWNlRGlhbWV0ZXI6IDE2MCxcclxuICAgICAgbWF4VGV4dFdpZHRoOiAzMDBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgc21pbGV5IGZhY2VcclxuICAgIGNvbnN0IGZhY2VOb2RlID0gbmV3IEZhY2VOb2RlKCBvcHRpb25zLmZhY2VEaWFtZXRlciApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgZGlhbG9nIHRleHRcclxuICAgIGNvbnN0IHRleHRNZXNzYWdlID0gbmV3IFJpY2hUZXh0KCBWZWdhc1N0cmluZ3MueW91Q29tcGxldGVkQWxsTGV2ZWxzU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCAyNSApLFxyXG4gICAgICBsaW5lV3JhcDogMzAwLFxyXG4gICAgICBtYXhXaWR0aDogb3B0aW9ucy5tYXhUZXh0V2lkdGgsXHJcbiAgICAgIG1heEhlaWdodDogMzAwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBidXR0b25cclxuICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBSZWN0YW5ndWxhclB1c2hCdXR0b24oIHtcclxuICAgICAgY29udGVudDogbmV3IFRleHQoIFZlZ2FzU3RyaW5ncy5kb25lU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIDMwICksXHJcbiAgICAgICAgbWF4V2lkdGg6IG9wdGlvbnMubWF4VGV4dFdpZHRoXHJcbiAgICAgIH0gKSxcclxuICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxyXG4gICAgICBiYXNlQ29sb3I6ICd5ZWxsb3cnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBtYWluIGJhY2tncm91bmQgcGFuZWxcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBQYW5lbChcclxuICAgICAgbmV3IFZCb3goIHsgY2hpbGRyZW46IFsgZmFjZU5vZGUsIHRleHRNZXNzYWdlLCBidXR0b24gXSwgc3BhY2luZzogMjAgfSApLFxyXG4gICAgICB7IHhNYXJnaW46IDUwLCB5TWFyZ2luOiAyMCB9XHJcbiAgICApICk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlZ2FzLnJlZ2lzdGVyKCAnQWxsTGV2ZWxzQ29tcGxldGVkTm9kZScsIEFsbExldmVsc0NvbXBsZXRlZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxtQ0FBbUM7QUFDeEQsU0FBU0MsSUFBSSxFQUFlQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLDZCQUE2QjtBQUVyRixPQUFPQyxxQkFBcUIsTUFBTSwrQ0FBK0M7QUFDakYsT0FBT0MsS0FBSyxNQUFNLHVCQUF1QjtBQUN6QyxPQUFPQyxLQUFLLE1BQU0sWUFBWTtBQUM5QixPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBYTVDLGVBQWUsTUFBTUMsc0JBQXNCLFNBQVNSLElBQUksQ0FBQztFQUV2RDtBQUNGO0FBQ0E7QUFDQTtFQUNTUyxXQUFXQSxDQUFFQyxRQUE0QixFQUFFQyxlQUErQyxFQUFHO0lBQ2xHLEtBQUssQ0FBQyxDQUFDO0lBRVAsTUFBTUMsT0FBTyxHQUFHZixTQUFTLENBQTBELENBQUMsQ0FBRTtNQUVwRjtNQUNBZ0IsWUFBWSxFQUFFLEdBQUc7TUFDakJDLFlBQVksRUFBRTtJQUNoQixDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUksUUFBUSxHQUFHLElBQUlqQixRQUFRLENBQUVjLE9BQU8sQ0FBQ0MsWUFBYSxDQUFDOztJQUVyRDtJQUNBLE1BQU1HLFdBQVcsR0FBRyxJQUFJZixRQUFRLENBQUVNLFlBQVksQ0FBQ1UsbUNBQW1DLEVBQUU7TUFDbEZDLElBQUksRUFBRSxJQUFJbkIsUUFBUSxDQUFFLEVBQUcsQ0FBQztNQUN4Qm9CLFFBQVEsRUFBRSxHQUFHO01BQ2JDLFFBQVEsRUFBRVIsT0FBTyxDQUFDRSxZQUFZO01BQzlCTyxTQUFTLEVBQUU7SUFDYixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxNQUFNLEdBQUcsSUFBSWxCLHFCQUFxQixDQUFFO01BQ3hDbUIsT0FBTyxFQUFFLElBQUlyQixJQUFJLENBQUVLLFlBQVksQ0FBQ2lCLGtCQUFrQixFQUFFO1FBQ2xETixJQUFJLEVBQUUsSUFBSW5CLFFBQVEsQ0FBRSxFQUFHLENBQUM7UUFDeEJxQixRQUFRLEVBQUVSLE9BQU8sQ0FBQ0U7TUFDcEIsQ0FBRSxDQUFDO01BQ0hKLFFBQVEsRUFBRUEsUUFBUTtNQUNsQmUsU0FBUyxFQUFFO0lBQ2IsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSXJCLEtBQUssQ0FDdEIsSUFBSUYsSUFBSSxDQUFFO01BQUV3QixRQUFRLEVBQUUsQ0FBRVosUUFBUSxFQUFFQyxXQUFXLEVBQUVNLE1BQU0sQ0FBRTtNQUFFTSxPQUFPLEVBQUU7SUFBRyxDQUFFLENBQUMsRUFDeEU7TUFBRUMsT0FBTyxFQUFFLEVBQUU7TUFBRUMsT0FBTyxFQUFFO0lBQUcsQ0FDN0IsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDQyxNQUFNLENBQUVuQixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBTixLQUFLLENBQUMwQixRQUFRLENBQUUsd0JBQXdCLEVBQUV4QixzQkFBdUIsQ0FBQyJ9