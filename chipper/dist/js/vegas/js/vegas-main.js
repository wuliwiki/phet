// Copyright 2014-2023, University of Colorado Boulder

/**
 * Main file for the vegas library demo.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Property from '../../axon/js/Property.js';
import Screen from '../../joist/js/Screen.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import Tandem from '../../tandem/js/Tandem.js';
import FiniteChallengesScreenView from './demo/FiniteChallengesScreenView.js';
import InfiniteChallengesScreenView from './demo/InfiniteChallengesScreenView.js';
import VegasStrings from './VegasStrings.js';
import ComponentsScreenView from './demo/components/ComponentsScreenView.js';
// constants
const vegasTitleStringProperty = VegasStrings.vegas.titleStringProperty;
const simOptions = {
  credits: {
    leadDesign: 'PhET'
  }
};
class VegasModel {
  reset() {/* nothing to do */}
}
function createEmptyModel() {
  return new VegasModel();
}
simLauncher.launch(() => {
  new Sim(vegasTitleStringProperty, [new Screen(createEmptyModel, () => new ComponentsScreenView(), {
    name: new Property('Components'),
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  }), new Screen(createEmptyModel, () => new FiniteChallengesScreenView(), {
    name: new Property('Finite Challenges'),
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  }), new Screen(createEmptyModel, () => new InfiniteChallengesScreenView(), {
    name: new Property('Infinite Challenges'),
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  })], simOptions).start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNpbSIsInNpbUxhdW5jaGVyIiwiVGFuZGVtIiwiRmluaXRlQ2hhbGxlbmdlc1NjcmVlblZpZXciLCJJbmZpbml0ZUNoYWxsZW5nZXNTY3JlZW5WaWV3IiwiVmVnYXNTdHJpbmdzIiwiQ29tcG9uZW50c1NjcmVlblZpZXciLCJ2ZWdhc1RpdGxlU3RyaW5nUHJvcGVydHkiLCJ2ZWdhcyIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJzaW1PcHRpb25zIiwiY3JlZGl0cyIsImxlYWREZXNpZ24iLCJWZWdhc01vZGVsIiwicmVzZXQiLCJjcmVhdGVFbXB0eU1vZGVsIiwibGF1bmNoIiwibmFtZSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwidGFuZGVtIiwiT1BUX09VVCIsInN0YXJ0Il0sInNvdXJjZXMiOlsidmVnYXMtbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYWluIGZpbGUgZm9yIHRoZSB2ZWdhcyBsaWJyYXJ5IGRlbW8uXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTaW0sIHsgU2ltT3B0aW9ucyB9IGZyb20gJy4uLy4uL2pvaXN0L2pzL1NpbS5qcyc7XHJcbmltcG9ydCBzaW1MYXVuY2hlciBmcm9tICcuLi8uLi9qb2lzdC9qcy9zaW1MYXVuY2hlci5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBGaW5pdGVDaGFsbGVuZ2VzU2NyZWVuVmlldyBmcm9tICcuL2RlbW8vRmluaXRlQ2hhbGxlbmdlc1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgSW5maW5pdGVDaGFsbGVuZ2VzU2NyZWVuVmlldyBmcm9tICcuL2RlbW8vSW5maW5pdGVDaGFsbGVuZ2VzU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBWZWdhc1N0cmluZ3MgZnJvbSAnLi9WZWdhc1N0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ29tcG9uZW50c1NjcmVlblZpZXcgZnJvbSAnLi9kZW1vL2NvbXBvbmVudHMvQ29tcG9uZW50c1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgVE1vZGVsIGZyb20gJy4uLy4uL2pvaXN0L2pzL1RNb2RlbC5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgdmVnYXNUaXRsZVN0cmluZ1Byb3BlcnR5ID0gVmVnYXNTdHJpbmdzLnZlZ2FzLnRpdGxlU3RyaW5nUHJvcGVydHk7XHJcblxyXG5jb25zdCBzaW1PcHRpb25zOiBTaW1PcHRpb25zID0ge1xyXG4gIGNyZWRpdHM6IHtcclxuICAgIGxlYWREZXNpZ246ICdQaEVUJ1xyXG4gIH1cclxufTtcclxuXHJcbmNsYXNzIFZlZ2FzTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHsgLyogbm90aGluZyB0byBkbyAqLyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5TW9kZWwoKTogVmVnYXNNb2RlbCB7XHJcbiAgcmV0dXJuIG5ldyBWZWdhc01vZGVsKCk7XHJcbn1cclxuXHJcbnNpbUxhdW5jaGVyLmxhdW5jaCggKCkgPT4ge1xyXG4gIG5ldyBTaW0oIHZlZ2FzVGl0bGVTdHJpbmdQcm9wZXJ0eSwgW1xyXG5cclxuICAgIG5ldyBTY3JlZW4oXHJcbiAgICAgIGNyZWF0ZUVtcHR5TW9kZWwsXHJcbiAgICAgICgpID0+IG5ldyBDb21wb25lbnRzU2NyZWVuVmlldygpLCB7XHJcbiAgICAgICAgbmFtZTogbmV3IFByb3BlcnR5KCAnQ29tcG9uZW50cycgKSxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCAnd2hpdGUnICksXHJcbiAgICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgICB9ICksXHJcblxyXG4gICAgbmV3IFNjcmVlbihcclxuICAgICAgY3JlYXRlRW1wdHlNb2RlbCxcclxuICAgICAgKCkgPT4gbmV3IEZpbml0ZUNoYWxsZW5nZXNTY3JlZW5WaWV3KCksIHtcclxuICAgICAgICBuYW1lOiBuZXcgUHJvcGVydHkoICdGaW5pdGUgQ2hhbGxlbmdlcycgKSxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCAnd2hpdGUnICksXHJcbiAgICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgICB9ICksXHJcblxyXG4gICAgbmV3IFNjcmVlbihcclxuICAgICAgY3JlYXRlRW1wdHlNb2RlbCxcclxuICAgICAgKCkgPT4gbmV3IEluZmluaXRlQ2hhbGxlbmdlc1NjcmVlblZpZXcoKSwge1xyXG4gICAgICAgIG5hbWU6IG5ldyBQcm9wZXJ0eSggJ0luZmluaXRlIENoYWxsZW5nZXMnICksXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3doaXRlJyApLFxyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfSApXHJcbiAgXSwgc2ltT3B0aW9ucyApLnN0YXJ0KCk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLDJCQUEyQjtBQUNoRCxPQUFPQyxNQUFNLE1BQU0sMEJBQTBCO0FBQzdDLE9BQU9DLEdBQUcsTUFBc0IsdUJBQXVCO0FBQ3ZELE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQywwQkFBMEIsTUFBTSxzQ0FBc0M7QUFDN0UsT0FBT0MsNEJBQTRCLE1BQU0sd0NBQXdDO0FBQ2pGLE9BQU9DLFlBQVksTUFBTSxtQkFBbUI7QUFDNUMsT0FBT0Msb0JBQW9CLE1BQU0sMkNBQTJDO0FBRzVFO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUdGLFlBQVksQ0FBQ0csS0FBSyxDQUFDQyxtQkFBbUI7QUFFdkUsTUFBTUMsVUFBc0IsR0FBRztFQUM3QkMsT0FBTyxFQUFFO0lBQ1BDLFVBQVUsRUFBRTtFQUNkO0FBQ0YsQ0FBQztBQUVELE1BQU1DLFVBQVUsQ0FBbUI7RUFDMUJDLEtBQUtBLENBQUEsRUFBUyxDQUFFO0FBQ3pCO0FBRUEsU0FBU0MsZ0JBQWdCQSxDQUFBLEVBQWU7RUFDdEMsT0FBTyxJQUFJRixVQUFVLENBQUMsQ0FBQztBQUN6QjtBQUVBWixXQUFXLENBQUNlLE1BQU0sQ0FBRSxNQUFNO0VBQ3hCLElBQUloQixHQUFHLENBQUVPLHdCQUF3QixFQUFFLENBRWpDLElBQUlSLE1BQU0sQ0FDUmdCLGdCQUFnQixFQUNoQixNQUFNLElBQUlULG9CQUFvQixDQUFDLENBQUMsRUFBRTtJQUNoQ1csSUFBSSxFQUFFLElBQUluQixRQUFRLENBQUUsWUFBYSxDQUFDO0lBQ2xDb0IsdUJBQXVCLEVBQUUsSUFBSXBCLFFBQVEsQ0FBRSxPQUFRLENBQUM7SUFDaERxQixNQUFNLEVBQUVqQixNQUFNLENBQUNrQjtFQUNqQixDQUFFLENBQUMsRUFFTCxJQUFJckIsTUFBTSxDQUNSZ0IsZ0JBQWdCLEVBQ2hCLE1BQU0sSUFBSVosMEJBQTBCLENBQUMsQ0FBQyxFQUFFO0lBQ3RDYyxJQUFJLEVBQUUsSUFBSW5CLFFBQVEsQ0FBRSxtQkFBb0IsQ0FBQztJQUN6Q29CLHVCQUF1QixFQUFFLElBQUlwQixRQUFRLENBQUUsT0FBUSxDQUFDO0lBQ2hEcUIsTUFBTSxFQUFFakIsTUFBTSxDQUFDa0I7RUFDakIsQ0FBRSxDQUFDLEVBRUwsSUFBSXJCLE1BQU0sQ0FDUmdCLGdCQUFnQixFQUNoQixNQUFNLElBQUlYLDRCQUE0QixDQUFDLENBQUMsRUFBRTtJQUN4Q2EsSUFBSSxFQUFFLElBQUluQixRQUFRLENBQUUscUJBQXNCLENBQUM7SUFDM0NvQix1QkFBdUIsRUFBRSxJQUFJcEIsUUFBUSxDQUFFLE9BQVEsQ0FBQztJQUNoRHFCLE1BQU0sRUFBRWpCLE1BQU0sQ0FBQ2tCO0VBQ2pCLENBQUUsQ0FBQyxDQUNOLEVBQUVWLFVBQVcsQ0FBQyxDQUFDVyxLQUFLLENBQUMsQ0FBQztBQUN6QixDQUFFLENBQUMifQ==