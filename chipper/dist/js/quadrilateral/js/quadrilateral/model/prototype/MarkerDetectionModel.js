// Copyright 2023, University of Colorado Boulder

/**
 * A model with Properties that indicate when certain markers are detected. This code is related to an application
 * of OpenCV where we detected colored squares (markers) to control the positions of vertices in this simulation.
 *
 * The prototype worked by creating a wrapper with the sim running in an iframe and using OpenCV (web) to detect
 * markers. The wrapper had access to the model and set these model Properties directly. As such, there are no
 * usages of them in simulation code. Those prototypes and more information can be found at
 * https://github.com/phetsims/quadrilateral/issues/20
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import quadrilateral from '../../../quadrilateral.js';
export default class MarkerDetectionModel {
  // A Property that indicates that all markers are observed by the camera to control this simulation. Part of
  // a prototype for using OpenCV as an input method for the simulation

  // Properties that indicate whether the OpenCV prototype detects an individual vertex. The tool must be able
  // to detect each vertex individually. The tool must be able to detect each marker individually for this to be
  // relevant.
  // A Property that controls whether Voicing responses will be enabled for when the OpenCV prototype changes in its
  // ability to see various markers.
  constructor(tandem) {
    this.allVertexMarkersDetectedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('allVertexMarkersDetectedProperty')
    });
    this.vertexAMarkerDetectedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('vertexAMarkerDetectedProperty')
    });
    this.vertexBMarkerDetectedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('vertexBMarkerDetectedProperty')
    });
    this.vertexCMarkerDetectedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('vertexCMarkerDetectedProperty')
    });
    this.vertexDMarkerDetectedProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('vertexDMarkerDetectedProperty')
    });
    this.markerResponsesEnabledProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('markerResponsesEnabledProperty')
    });
  }
}
quadrilateral.register('MarkerDetectionModel', MarkerDetectionModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJxdWFkcmlsYXRlcmFsIiwiTWFya2VyRGV0ZWN0aW9uTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImFsbFZlcnRleE1hcmtlcnNEZXRlY3RlZFByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwidmVydGV4QU1hcmtlckRldGVjdGVkUHJvcGVydHkiLCJ2ZXJ0ZXhCTWFya2VyRGV0ZWN0ZWRQcm9wZXJ0eSIsInZlcnRleENNYXJrZXJEZXRlY3RlZFByb3BlcnR5IiwidmVydGV4RE1hcmtlckRldGVjdGVkUHJvcGVydHkiLCJtYXJrZXJSZXNwb25zZXNFbmFibGVkUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1hcmtlckRldGVjdGlvbk1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG1vZGVsIHdpdGggUHJvcGVydGllcyB0aGF0IGluZGljYXRlIHdoZW4gY2VydGFpbiBtYXJrZXJzIGFyZSBkZXRlY3RlZC4gVGhpcyBjb2RlIGlzIHJlbGF0ZWQgdG8gYW4gYXBwbGljYXRpb25cclxuICogb2YgT3BlbkNWIHdoZXJlIHdlIGRldGVjdGVkIGNvbG9yZWQgc3F1YXJlcyAobWFya2VycykgdG8gY29udHJvbCB0aGUgcG9zaXRpb25zIG9mIHZlcnRpY2VzIGluIHRoaXMgc2ltdWxhdGlvbi5cclxuICpcclxuICogVGhlIHByb3RvdHlwZSB3b3JrZWQgYnkgY3JlYXRpbmcgYSB3cmFwcGVyIHdpdGggdGhlIHNpbSBydW5uaW5nIGluIGFuIGlmcmFtZSBhbmQgdXNpbmcgT3BlbkNWICh3ZWIpIHRvIGRldGVjdFxyXG4gKiBtYXJrZXJzLiBUaGUgd3JhcHBlciBoYWQgYWNjZXNzIHRvIHRoZSBtb2RlbCBhbmQgc2V0IHRoZXNlIG1vZGVsIFByb3BlcnRpZXMgZGlyZWN0bHkuIEFzIHN1Y2gsIHRoZXJlIGFyZSBub1xyXG4gKiB1c2FnZXMgb2YgdGhlbSBpbiBzaW11bGF0aW9uIGNvZGUuIFRob3NlIHByb3RvdHlwZXMgYW5kIG1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGF0XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9xdWFkcmlsYXRlcmFsL2lzc3Vlcy8yMFxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgcXVhZHJpbGF0ZXJhbCBmcm9tICcuLi8uLi8uLi9xdWFkcmlsYXRlcmFsLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtlckRldGVjdGlvbk1vZGVsIHtcclxuXHJcbiAgLy8gQSBQcm9wZXJ0eSB0aGF0IGluZGljYXRlcyB0aGF0IGFsbCBtYXJrZXJzIGFyZSBvYnNlcnZlZCBieSB0aGUgY2FtZXJhIHRvIGNvbnRyb2wgdGhpcyBzaW11bGF0aW9uLiBQYXJ0IG9mXHJcbiAgLy8gYSBwcm90b3R5cGUgZm9yIHVzaW5nIE9wZW5DViBhcyBhbiBpbnB1dCBtZXRob2QgZm9yIHRoZSBzaW11bGF0aW9uXHJcbiAgcHVibGljIGFsbFZlcnRleE1hcmtlcnNEZXRlY3RlZFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gUHJvcGVydGllcyB0aGF0IGluZGljYXRlIHdoZXRoZXIgdGhlIE9wZW5DViBwcm90b3R5cGUgZGV0ZWN0cyBhbiBpbmRpdmlkdWFsIHZlcnRleC4gVGhlIHRvb2wgbXVzdCBiZSBhYmxlXHJcbiAgLy8gdG8gZGV0ZWN0IGVhY2ggdmVydGV4IGluZGl2aWR1YWxseS4gVGhlIHRvb2wgbXVzdCBiZSBhYmxlIHRvIGRldGVjdCBlYWNoIG1hcmtlciBpbmRpdmlkdWFsbHkgZm9yIHRoaXMgdG8gYmVcclxuICAvLyByZWxldmFudC5cclxuICBwdWJsaWMgdmVydGV4QU1hcmtlckRldGVjdGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyB2ZXJ0ZXhCTWFya2VyRGV0ZWN0ZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHVibGljIHZlcnRleENNYXJrZXJEZXRlY3RlZFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuICBwdWJsaWMgdmVydGV4RE1hcmtlckRldGVjdGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBBIFByb3BlcnR5IHRoYXQgY29udHJvbHMgd2hldGhlciBWb2ljaW5nIHJlc3BvbnNlcyB3aWxsIGJlIGVuYWJsZWQgZm9yIHdoZW4gdGhlIE9wZW5DViBwcm90b3R5cGUgY2hhbmdlcyBpbiBpdHNcclxuICAvLyBhYmlsaXR5IHRvIHNlZSB2YXJpb3VzIG1hcmtlcnMuXHJcbiAgcHVibGljIHJlYWRvbmx5IG1hcmtlclJlc3BvbnNlc0VuYWJsZWRQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZGVtOiBUYW5kZW0gKSB7XHJcbiAgICB0aGlzLmFsbFZlcnRleE1hcmtlcnNEZXRlY3RlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYWxsVmVydGV4TWFya2Vyc0RldGVjdGVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMudmVydGV4QU1hcmtlckRldGVjdGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZXJ0ZXhBTWFya2VyRGV0ZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy52ZXJ0ZXhCTWFya2VyRGV0ZWN0ZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZlcnRleEJNYXJrZXJEZXRlY3RlZFByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLnZlcnRleENNYXJrZXJEZXRlY3RlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndmVydGV4Q01hcmtlckRldGVjdGVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMudmVydGV4RE1hcmtlckRldGVjdGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2ZXJ0ZXhETWFya2VyRGV0ZWN0ZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5tYXJrZXJSZXNwb25zZXNFbmFibGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBmYWxzZSwge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtYXJrZXJSZXNwb25zZXNFbmFibGVkUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnF1YWRyaWxhdGVyYWwucmVnaXN0ZXIoICdNYXJrZXJEZXRlY3Rpb25Nb2RlbCcsIE1hcmtlckRldGVjdGlvbk1vZGVsICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxlQUFlLE1BQU0sMkNBQTJDO0FBR3ZFLE9BQU9DLGFBQWEsTUFBTSwyQkFBMkI7QUFFckQsZUFBZSxNQUFNQyxvQkFBb0IsQ0FBQztFQUV4QztFQUNBOztFQUdBO0VBQ0E7RUFDQTtFQU1BO0VBQ0E7RUFHT0MsV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBQ25DLElBQUksQ0FBQ0MsZ0NBQWdDLEdBQUcsSUFBSUwsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUNsRUksTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxrQ0FBbUM7SUFDbEUsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyw2QkFBNkIsR0FBRyxJQUFJUCxlQUFlLENBQUUsS0FBSyxFQUFFO01BQy9ESSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLCtCQUFnQztJQUMvRCxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNFLDZCQUE2QixHQUFHLElBQUlSLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDL0RJLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsK0JBQWdDO0lBQy9ELENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ0csNkJBQTZCLEdBQUcsSUFBSVQsZUFBZSxDQUFFLEtBQUssRUFBRTtNQUMvREksTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSwrQkFBZ0M7SUFDL0QsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDSSw2QkFBNkIsR0FBRyxJQUFJVixlQUFlLENBQUUsS0FBSyxFQUFFO01BQy9ESSxNQUFNLEVBQUVBLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLCtCQUFnQztJQUMvRCxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNLLDhCQUE4QixHQUFHLElBQUlYLGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDaEVJLE1BQU0sRUFBRUEsTUFBTSxDQUFDRSxZQUFZLENBQUUsZ0NBQWlDO0lBQ2hFLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQUwsYUFBYSxDQUFDVyxRQUFRLENBQUUsc0JBQXNCLEVBQUVWLG9CQUFxQixDQUFDIn0=