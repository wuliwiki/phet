// Copyright 2023, University of Colorado Boulder

/**
 * Model component for options related to control from the tangible. These Properties are controlled by UI components
 * in the Preferences dialog.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import quadrilateral from '../../../quadrilateral.js';
import Range from '../../../../../dot/js/Range.js';
import QuadrilateralQueryParameters from '../../QuadrilateralQueryParameters.js';
export default class QuadrilateralTangibleOptionsModel {
  // How many values to save and use in the average for calculating new vertex positions. Higher value will reduce
  // noise but the sim will respond slower.
  smoothingLengthProperty = new NumberProperty(QuadrilateralQueryParameters.smoothingLength, {
    range: new Range(1, 10)
  });

  // How frequently we update the simulation from input from the tangible device. See the query parameter documentation.
  bluetoothUpdateIntervalProperty = new NumberProperty(QuadrilateralQueryParameters.bluetoothUpdateInterval, {
    range: new Range(0.01, 1)
  });

  // Controls the interval that vertex positions are constrained to when controlled from the tangible device.
  // Increasing this value helps reduce noise, but makes the motion more coarse.
  deviceGridSpacingProperty = new NumberProperty(QuadrilateralQueryParameters.deviceGridSpacing, {
    range: new Range(0.0125, 0.25)
  });
}
quadrilateral.register('QuadrilateralTangibleOptionsModel', QuadrilateralTangibleOptionsModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsInF1YWRyaWxhdGVyYWwiLCJSYW5nZSIsIlF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMiLCJRdWFkcmlsYXRlcmFsVGFuZ2libGVPcHRpb25zTW9kZWwiLCJzbW9vdGhpbmdMZW5ndGhQcm9wZXJ0eSIsInNtb290aGluZ0xlbmd0aCIsInJhbmdlIiwiYmx1ZXRvb3RoVXBkYXRlSW50ZXJ2YWxQcm9wZXJ0eSIsImJsdWV0b290aFVwZGF0ZUludGVydmFsIiwiZGV2aWNlR3JpZFNwYWNpbmdQcm9wZXJ0eSIsImRldmljZUdyaWRTcGFjaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJRdWFkcmlsYXRlcmFsVGFuZ2libGVPcHRpb25zTW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGNvbXBvbmVudCBmb3Igb3B0aW9ucyByZWxhdGVkIHRvIGNvbnRyb2wgZnJvbSB0aGUgdGFuZ2libGUuIFRoZXNlIFByb3BlcnRpZXMgYXJlIGNvbnRyb2xsZWQgYnkgVUkgY29tcG9uZW50c1xyXG4gKiBpbiB0aGUgUHJlZmVyZW5jZXMgZGlhbG9nLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBxdWFkcmlsYXRlcmFsIGZyb20gJy4uLy4uLy4uL3F1YWRyaWxhdGVyYWwuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vLi4vUXVhZHJpbGF0ZXJhbFF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWFkcmlsYXRlcmFsVGFuZ2libGVPcHRpb25zTW9kZWwge1xyXG5cclxuICAvLyBIb3cgbWFueSB2YWx1ZXMgdG8gc2F2ZSBhbmQgdXNlIGluIHRoZSBhdmVyYWdlIGZvciBjYWxjdWxhdGluZyBuZXcgdmVydGV4IHBvc2l0aW9ucy4gSGlnaGVyIHZhbHVlIHdpbGwgcmVkdWNlXHJcbiAgLy8gbm9pc2UgYnV0IHRoZSBzaW0gd2lsbCByZXNwb25kIHNsb3dlci5cclxuICBwdWJsaWMgcmVhZG9ubHkgc21vb3RoaW5nTGVuZ3RoUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMuc21vb3RoaW5nTGVuZ3RoLCB7XHJcbiAgICByYW5nZTogbmV3IFJhbmdlKCAxLCAxMCApXHJcbiAgfSApO1xyXG5cclxuICAvLyBIb3cgZnJlcXVlbnRseSB3ZSB1cGRhdGUgdGhlIHNpbXVsYXRpb24gZnJvbSBpbnB1dCBmcm9tIHRoZSB0YW5naWJsZSBkZXZpY2UuIFNlZSB0aGUgcXVlcnkgcGFyYW1ldGVyIGRvY3VtZW50YXRpb24uXHJcbiAgcHVibGljIHJlYWRvbmx5IGJsdWV0b290aFVwZGF0ZUludGVydmFsUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMuYmx1ZXRvb3RoVXBkYXRlSW50ZXJ2YWwsIHtcclxuICAgIHJhbmdlOiBuZXcgUmFuZ2UoIDAuMDEsIDEgKVxyXG4gIH0gKTtcclxuXHJcbiAgLy8gQ29udHJvbHMgdGhlIGludGVydmFsIHRoYXQgdmVydGV4IHBvc2l0aW9ucyBhcmUgY29uc3RyYWluZWQgdG8gd2hlbiBjb250cm9sbGVkIGZyb20gdGhlIHRhbmdpYmxlIGRldmljZS5cclxuICAvLyBJbmNyZWFzaW5nIHRoaXMgdmFsdWUgaGVscHMgcmVkdWNlIG5vaXNlLCBidXQgbWFrZXMgdGhlIG1vdGlvbiBtb3JlIGNvYXJzZS5cclxuICBwdWJsaWMgcmVhZG9ubHkgZGV2aWNlR3JpZFNwYWNpbmdQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggUXVhZHJpbGF0ZXJhbFF1ZXJ5UGFyYW1ldGVycy5kZXZpY2VHcmlkU3BhY2luZywge1xyXG4gICAgcmFuZ2U6IG5ldyBSYW5nZSggMC4wMTI1LCAwLjI1IClcclxuICB9ICk7XHJcbn1cclxuXHJcbnF1YWRyaWxhdGVyYWwucmVnaXN0ZXIoICdRdWFkcmlsYXRlcmFsVGFuZ2libGVPcHRpb25zTW9kZWwnLCBRdWFkcmlsYXRlcmFsVGFuZ2libGVPcHRpb25zTW9kZWwgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLDBDQUEwQztBQUNyRSxPQUFPQyxhQUFhLE1BQU0sMkJBQTJCO0FBQ3JELE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsNEJBQTRCLE1BQU0sdUNBQXVDO0FBRWhGLGVBQWUsTUFBTUMsaUNBQWlDLENBQUM7RUFFckQ7RUFDQTtFQUNnQkMsdUJBQXVCLEdBQUcsSUFBSUwsY0FBYyxDQUFFRyw0QkFBNEIsQ0FBQ0csZUFBZSxFQUFFO0lBQzFHQyxLQUFLLEVBQUUsSUFBSUwsS0FBSyxDQUFFLENBQUMsRUFBRSxFQUFHO0VBQzFCLENBQUUsQ0FBQzs7RUFFSDtFQUNnQk0sK0JBQStCLEdBQUcsSUFBSVIsY0FBYyxDQUFFRyw0QkFBNEIsQ0FBQ00sdUJBQXVCLEVBQUU7SUFDMUhGLEtBQUssRUFBRSxJQUFJTCxLQUFLLENBQUUsSUFBSSxFQUFFLENBQUU7RUFDNUIsQ0FBRSxDQUFDOztFQUVIO0VBQ0E7RUFDZ0JRLHlCQUF5QixHQUFHLElBQUlWLGNBQWMsQ0FBRUcsNEJBQTRCLENBQUNRLGlCQUFpQixFQUFFO0lBQzlHSixLQUFLLEVBQUUsSUFBSUwsS0FBSyxDQUFFLE1BQU0sRUFBRSxJQUFLO0VBQ2pDLENBQUUsQ0FBQztBQUNMO0FBRUFELGFBQWEsQ0FBQ1csUUFBUSxDQUFFLG1DQUFtQyxFQUFFUixpQ0FBa0MsQ0FBQyJ9