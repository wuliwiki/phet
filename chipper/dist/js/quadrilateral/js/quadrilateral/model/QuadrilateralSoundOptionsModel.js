// Copyright 2021-2023, University of Colorado Boulder

/**
 * A model for sound design options. These values can be changed by the user from preferences, and impact how sounds
 * behave.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import quadrilateral from '../../quadrilateral.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import EnumerationProperty from '../../../../axon/js/EnumerationProperty.js';
import EnumerationValue from '../../../../phet-core/js/EnumerationValue.js';
import Enumeration from '../../../../phet-core/js/Enumeration.js';
import QuadrilateralQueryParameters from '../QuadrilateralQueryParameters.js';

// Enumeration for the different sound designs available to the user.
class SoundDesign extends EnumerationValue {
  static TRACKS_UNIQUE = new SoundDesign();
  static TRACKS_LAYER = new SoundDesign();
  static enumeration = new Enumeration(SoundDesign);
}

// Maps a query parameter string to one of the SoundDesigns. I (JG) generally prefer EnumerationValue to string union
// types but this is unfortunate...
const queryParameterToSoundDesignMap = {
  shapeLayer: SoundDesign.TRACKS_LAYER,
  shapeUnique: SoundDesign.TRACKS_UNIQUE
};
const defaultSoundDesign = queryParameterToSoundDesignMap[QuadrilateralQueryParameters.soundDesign];
assert && assert(defaultSoundDesign, 'No sound design for provided query parameter');
export default class QuadrilateralSoundOptionsModel {
  // The selected sound design
  soundDesignProperty = new EnumerationProperty(defaultSoundDesign);

  // If true, the sounds will play forever. Available to the user and helpful for debugging.
  tracksPlayForeverProperty = new BooleanProperty(false);
}
quadrilateral.register('QuadrilateralSoundOptionsModel', QuadrilateralSoundOptionsModel);
export { SoundDesign };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxdWFkcmlsYXRlcmFsIiwiQm9vbGVhblByb3BlcnR5IiwiRW51bWVyYXRpb25Qcm9wZXJ0eSIsIkVudW1lcmF0aW9uVmFsdWUiLCJFbnVtZXJhdGlvbiIsIlF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMiLCJTb3VuZERlc2lnbiIsIlRSQUNLU19VTklRVUUiLCJUUkFDS1NfTEFZRVIiLCJlbnVtZXJhdGlvbiIsInF1ZXJ5UGFyYW1ldGVyVG9Tb3VuZERlc2lnbk1hcCIsInNoYXBlTGF5ZXIiLCJzaGFwZVVuaXF1ZSIsImRlZmF1bHRTb3VuZERlc2lnbiIsInNvdW5kRGVzaWduIiwiYXNzZXJ0IiwiUXVhZHJpbGF0ZXJhbFNvdW5kT3B0aW9uc01vZGVsIiwic291bmREZXNpZ25Qcm9wZXJ0eSIsInRyYWNrc1BsYXlGb3JldmVyUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlF1YWRyaWxhdGVyYWxTb3VuZE9wdGlvbnNNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIG1vZGVsIGZvciBzb3VuZCBkZXNpZ24gb3B0aW9ucy4gVGhlc2UgdmFsdWVzIGNhbiBiZSBjaGFuZ2VkIGJ5IHRoZSB1c2VyIGZyb20gcHJlZmVyZW5jZXMsIGFuZCBpbXBhY3QgaG93IHNvdW5kc1xyXG4gKiBiZWhhdmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBxdWFkcmlsYXRlcmFsIGZyb20gJy4uLy4uL3F1YWRyaWxhdGVyYWwuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vUXVhZHJpbGF0ZXJhbFF1ZXJ5UGFyYW1ldGVycy5qcyc7XHJcblxyXG4vLyBFbnVtZXJhdGlvbiBmb3IgdGhlIGRpZmZlcmVudCBzb3VuZCBkZXNpZ25zIGF2YWlsYWJsZSB0byB0aGUgdXNlci5cclxuY2xhc3MgU291bmREZXNpZ24gZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRSQUNLU19VTklRVUUgPSBuZXcgU291bmREZXNpZ24oKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRSQUNLU19MQVlFUiA9IG5ldyBTb3VuZERlc2lnbigpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBTb3VuZERlc2lnbiApO1xyXG59XHJcblxyXG4vLyBNYXBzIGEgcXVlcnkgcGFyYW1ldGVyIHN0cmluZyB0byBvbmUgb2YgdGhlIFNvdW5kRGVzaWducy4gSSAoSkcpIGdlbmVyYWxseSBwcmVmZXIgRW51bWVyYXRpb25WYWx1ZSB0byBzdHJpbmcgdW5pb25cclxuLy8gdHlwZXMgYnV0IHRoaXMgaXMgdW5mb3J0dW5hdGUuLi5cclxuY29uc3QgcXVlcnlQYXJhbWV0ZXJUb1NvdW5kRGVzaWduTWFwOiBSZWNvcmQ8c3RyaW5nLCBTb3VuZERlc2lnbj4gPSB7XHJcbiAgc2hhcGVMYXllcjogU291bmREZXNpZ24uVFJBQ0tTX0xBWUVSLFxyXG4gIHNoYXBlVW5pcXVlOiBTb3VuZERlc2lnbi5UUkFDS1NfVU5JUVVFXHJcbn07XHJcbmNvbnN0IGRlZmF1bHRTb3VuZERlc2lnbiA9IHF1ZXJ5UGFyYW1ldGVyVG9Tb3VuZERlc2lnbk1hcFsgUXVhZHJpbGF0ZXJhbFF1ZXJ5UGFyYW1ldGVycy5zb3VuZERlc2lnbiEgXSE7XHJcbmFzc2VydCAmJiBhc3NlcnQoIGRlZmF1bHRTb3VuZERlc2lnbiwgJ05vIHNvdW5kIGRlc2lnbiBmb3IgcHJvdmlkZWQgcXVlcnkgcGFyYW1ldGVyJyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVhZHJpbGF0ZXJhbFNvdW5kT3B0aW9uc01vZGVsIHtcclxuXHJcbiAgLy8gVGhlIHNlbGVjdGVkIHNvdW5kIGRlc2lnblxyXG4gIHB1YmxpYyBzb3VuZERlc2lnblByb3BlcnR5ID0gbmV3IEVudW1lcmF0aW9uUHJvcGVydHkoIGRlZmF1bHRTb3VuZERlc2lnbiApO1xyXG5cclxuICAvLyBJZiB0cnVlLCB0aGUgc291bmRzIHdpbGwgcGxheSBmb3JldmVyLiBBdmFpbGFibGUgdG8gdGhlIHVzZXIgYW5kIGhlbHBmdWwgZm9yIGRlYnVnZ2luZy5cclxuICBwdWJsaWMgdHJhY2tzUGxheUZvcmV2ZXJQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlICk7XHJcbn1cclxuXHJcbnF1YWRyaWxhdGVyYWwucmVnaXN0ZXIoICdRdWFkcmlsYXRlcmFsU291bmRPcHRpb25zTW9kZWwnLCBRdWFkcmlsYXRlcmFsU291bmRPcHRpb25zTW9kZWwgKTtcclxuZXhwb3J0IHsgU291bmREZXNpZ24gfTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsYUFBYSxNQUFNLHdCQUF3QjtBQUNsRCxPQUFPQyxlQUFlLE1BQU0sd0NBQXdDO0FBQ3BFLE9BQU9DLG1CQUFtQixNQUFNLDRDQUE0QztBQUM1RSxPQUFPQyxnQkFBZ0IsTUFBTSw4Q0FBOEM7QUFDM0UsT0FBT0MsV0FBVyxNQUFNLHlDQUF5QztBQUNqRSxPQUFPQyw0QkFBNEIsTUFBTSxvQ0FBb0M7O0FBRTdFO0FBQ0EsTUFBTUMsV0FBVyxTQUFTSCxnQkFBZ0IsQ0FBQztFQUN6QyxPQUF1QkksYUFBYSxHQUFHLElBQUlELFdBQVcsQ0FBQyxDQUFDO0VBQ3hELE9BQXVCRSxZQUFZLEdBQUcsSUFBSUYsV0FBVyxDQUFDLENBQUM7RUFFdkQsT0FBdUJHLFdBQVcsR0FBRyxJQUFJTCxXQUFXLENBQUVFLFdBQVksQ0FBQztBQUNyRTs7QUFFQTtBQUNBO0FBQ0EsTUFBTUksOEJBQTJELEdBQUc7RUFDbEVDLFVBQVUsRUFBRUwsV0FBVyxDQUFDRSxZQUFZO0VBQ3BDSSxXQUFXLEVBQUVOLFdBQVcsQ0FBQ0M7QUFDM0IsQ0FBQztBQUNELE1BQU1NLGtCQUFrQixHQUFHSCw4QkFBOEIsQ0FBRUwsNEJBQTRCLENBQUNTLFdBQVcsQ0FBSTtBQUN2R0MsTUFBTSxJQUFJQSxNQUFNLENBQUVGLGtCQUFrQixFQUFFLDhDQUErQyxDQUFDO0FBRXRGLGVBQWUsTUFBTUcsOEJBQThCLENBQUM7RUFFbEQ7RUFDT0MsbUJBQW1CLEdBQUcsSUFBSWYsbUJBQW1CLENBQUVXLGtCQUFtQixDQUFDOztFQUUxRTtFQUNPSyx5QkFBeUIsR0FBRyxJQUFJakIsZUFBZSxDQUFFLEtBQU0sQ0FBQztBQUNqRTtBQUVBRCxhQUFhLENBQUNtQixRQUFRLENBQUUsZ0NBQWdDLEVBQUVILDhCQUErQixDQUFDO0FBQzFGLFNBQVNWLFdBQVcifQ==