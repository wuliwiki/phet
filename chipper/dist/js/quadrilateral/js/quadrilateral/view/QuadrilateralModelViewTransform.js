// Copyright 2023, University of Colorado Boulder

/**
 * Transforms the model space to view space. The view space is a rectangular area within the ScreenView
 * and has predetermined dimensions. This transform is a rectangular, inverted mapping with the model origin
 * in the center of the view rectangle.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import quadrilateral from '../../quadrilateral.js';
import QuadrilateralConstants from '../../QuadrilateralConstants.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';

// dimensions of the view space, relative to ScreenView layoutBounds
const VIEW_DIMENSION = new Dimension2(790, 530);
export default class QuadrilateralModelViewTransform2 extends ModelViewTransform2 {
  constructor(modelBounds, layoutBounds) {
    super();

    // produce square bounds for the transform so that the transform is the same in both X and Y dimensions
    const minViewX = QuadrilateralConstants.SCREEN_VIEW_X_MARGIN;
    const maxViewX = minViewX + VIEW_DIMENSION.width;
    const maxViewY = layoutBounds.maxY - QuadrilateralConstants.SCREEN_VIEW_Y_MARGIN;
    const minViewY = maxViewY - VIEW_DIMENSION.height;
    const viewCenterX = (minViewX + maxViewX) / 2;
    const viewCenterY = (minViewY + maxViewY) / 2;

    // Height is used to produce square bounds for the transform because bounds are wider than they are tall. We need
    // square bounds so that scale for X and Y dimensions are the same.
    const availableViewHeight = maxViewY - minViewY;
    const availableModelHeight = modelBounds.height;
    const viewBoundsForTransform = new Bounds2(viewCenterX - availableViewHeight / 2, viewCenterY - availableViewHeight / 2, viewCenterX + availableViewHeight / 2, viewCenterY + availableViewHeight / 2);
    const modelBoundsForTransform = new Bounds2(-availableModelHeight / 2, -availableModelHeight / 2, availableModelHeight / 2, availableModelHeight / 2);
    this.setToRectangleInvertedYMapping(modelBoundsForTransform, viewBoundsForTransform);
  }
}
quadrilateral.register('QuadrilateralModelViewTransform2', QuadrilateralModelViewTransform2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2RlbFZpZXdUcmFuc2Zvcm0yIiwicXVhZHJpbGF0ZXJhbCIsIlF1YWRyaWxhdGVyYWxDb25zdGFudHMiLCJEaW1lbnNpb24yIiwiQm91bmRzMiIsIlZJRVdfRElNRU5TSU9OIiwiUXVhZHJpbGF0ZXJhbE1vZGVsVmlld1RyYW5zZm9ybTIiLCJjb25zdHJ1Y3RvciIsIm1vZGVsQm91bmRzIiwibGF5b3V0Qm91bmRzIiwibWluVmlld1giLCJTQ1JFRU5fVklFV19YX01BUkdJTiIsIm1heFZpZXdYIiwid2lkdGgiLCJtYXhWaWV3WSIsIm1heFkiLCJTQ1JFRU5fVklFV19ZX01BUkdJTiIsIm1pblZpZXdZIiwiaGVpZ2h0Iiwidmlld0NlbnRlclgiLCJ2aWV3Q2VudGVyWSIsImF2YWlsYWJsZVZpZXdIZWlnaHQiLCJhdmFpbGFibGVNb2RlbEhlaWdodCIsInZpZXdCb3VuZHNGb3JUcmFuc2Zvcm0iLCJtb2RlbEJvdW5kc0ZvclRyYW5zZm9ybSIsInNldFRvUmVjdGFuZ2xlSW52ZXJ0ZWRZTWFwcGluZyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUXVhZHJpbGF0ZXJhbE1vZGVsVmlld1RyYW5zZm9ybS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgbW9kZWwgc3BhY2UgdG8gdmlldyBzcGFjZS4gVGhlIHZpZXcgc3BhY2UgaXMgYSByZWN0YW5ndWxhciBhcmVhIHdpdGhpbiB0aGUgU2NyZWVuVmlld1xyXG4gKiBhbmQgaGFzIHByZWRldGVybWluZWQgZGltZW5zaW9ucy4gVGhpcyB0cmFuc2Zvcm0gaXMgYSByZWN0YW5ndWxhciwgaW52ZXJ0ZWQgbWFwcGluZyB3aXRoIHRoZSBtb2RlbCBvcmlnaW5cclxuICogaW4gdGhlIGNlbnRlciBvZiB0aGUgdmlldyByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IHF1YWRyaWxhdGVyYWwgZnJvbSAnLi4vLi4vcXVhZHJpbGF0ZXJhbC5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzIGZyb20gJy4uLy4uL1F1YWRyaWxhdGVyYWxDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuXHJcbi8vIGRpbWVuc2lvbnMgb2YgdGhlIHZpZXcgc3BhY2UsIHJlbGF0aXZlIHRvIFNjcmVlblZpZXcgbGF5b3V0Qm91bmRzXHJcbmNvbnN0IFZJRVdfRElNRU5TSU9OID0gbmV3IERpbWVuc2lvbjIoIDc5MCwgNTMwICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWFkcmlsYXRlcmFsTW9kZWxWaWV3VHJhbnNmb3JtMiBleHRlbmRzIE1vZGVsVmlld1RyYW5zZm9ybTIge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWxCb3VuZHM6IEJvdW5kczIsIGxheW91dEJvdW5kczogQm91bmRzMiApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gcHJvZHVjZSBzcXVhcmUgYm91bmRzIGZvciB0aGUgdHJhbnNmb3JtIHNvIHRoYXQgdGhlIHRyYW5zZm9ybSBpcyB0aGUgc2FtZSBpbiBib3RoIFggYW5kIFkgZGltZW5zaW9uc1xyXG4gICAgY29uc3QgbWluVmlld1ggPSBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1hfTUFSR0lOO1xyXG4gICAgY29uc3QgbWF4Vmlld1ggPSBtaW5WaWV3WCArIFZJRVdfRElNRU5TSU9OLndpZHRoO1xyXG4gICAgY29uc3QgbWF4Vmlld1kgPSBsYXlvdXRCb3VuZHMubWF4WSAtIFF1YWRyaWxhdGVyYWxDb25zdGFudHMuU0NSRUVOX1ZJRVdfWV9NQVJHSU47XHJcbiAgICBjb25zdCBtaW5WaWV3WSA9IG1heFZpZXdZIC0gVklFV19ESU1FTlNJT04uaGVpZ2h0O1xyXG4gICAgY29uc3Qgdmlld0NlbnRlclggPSAoIG1pblZpZXdYICsgbWF4Vmlld1ggKSAvIDI7XHJcbiAgICBjb25zdCB2aWV3Q2VudGVyWSA9ICggbWluVmlld1kgKyBtYXhWaWV3WSApIC8gMjtcclxuXHJcbiAgICAvLyBIZWlnaHQgaXMgdXNlZCB0byBwcm9kdWNlIHNxdWFyZSBib3VuZHMgZm9yIHRoZSB0cmFuc2Zvcm0gYmVjYXVzZSBib3VuZHMgYXJlIHdpZGVyIHRoYW4gdGhleSBhcmUgdGFsbC4gV2UgbmVlZFxyXG4gICAgLy8gc3F1YXJlIGJvdW5kcyBzbyB0aGF0IHNjYWxlIGZvciBYIGFuZCBZIGRpbWVuc2lvbnMgYXJlIHRoZSBzYW1lLlxyXG4gICAgY29uc3QgYXZhaWxhYmxlVmlld0hlaWdodCA9IG1heFZpZXdZIC0gbWluVmlld1k7XHJcbiAgICBjb25zdCBhdmFpbGFibGVNb2RlbEhlaWdodCA9IG1vZGVsQm91bmRzLmhlaWdodDtcclxuXHJcbiAgICBjb25zdCB2aWV3Qm91bmRzRm9yVHJhbnNmb3JtID0gbmV3IEJvdW5kczIoXHJcbiAgICAgIHZpZXdDZW50ZXJYIC0gYXZhaWxhYmxlVmlld0hlaWdodCAvIDIsXHJcbiAgICAgIHZpZXdDZW50ZXJZIC0gYXZhaWxhYmxlVmlld0hlaWdodCAvIDIsXHJcbiAgICAgIHZpZXdDZW50ZXJYICsgYXZhaWxhYmxlVmlld0hlaWdodCAvIDIsXHJcbiAgICAgIHZpZXdDZW50ZXJZICsgYXZhaWxhYmxlVmlld0hlaWdodCAvIDJcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbW9kZWxCb3VuZHNGb3JUcmFuc2Zvcm0gPSBuZXcgQm91bmRzMihcclxuICAgICAgLWF2YWlsYWJsZU1vZGVsSGVpZ2h0IC8gMixcclxuICAgICAgLWF2YWlsYWJsZU1vZGVsSGVpZ2h0IC8gMixcclxuICAgICAgYXZhaWxhYmxlTW9kZWxIZWlnaHQgLyAyLFxyXG4gICAgICBhdmFpbGFibGVNb2RlbEhlaWdodCAvIDJcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5zZXRUb1JlY3RhbmdsZUludmVydGVkWU1hcHBpbmcoIG1vZGVsQm91bmRzRm9yVHJhbnNmb3JtLCB2aWV3Qm91bmRzRm9yVHJhbnNmb3JtICk7XHJcbiAgfVxyXG59XHJcblxyXG5xdWFkcmlsYXRlcmFsLnJlZ2lzdGVyKCAnUXVhZHJpbGF0ZXJhbE1vZGVsVmlld1RyYW5zZm9ybTInLCBRdWFkcmlsYXRlcmFsTW9kZWxWaWV3VHJhbnNmb3JtMiApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLG1CQUFtQixNQUFNLHVEQUF1RDtBQUN2RixPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7O0FBRW5EO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLElBQUlGLFVBQVUsQ0FBRSxHQUFHLEVBQUUsR0FBSSxDQUFDO0FBRWpELGVBQWUsTUFBTUcsZ0NBQWdDLFNBQVNOLG1CQUFtQixDQUFDO0VBQ3pFTyxXQUFXQSxDQUFFQyxXQUFvQixFQUFFQyxZQUFxQixFQUFHO0lBQ2hFLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsTUFBTUMsUUFBUSxHQUFHUixzQkFBc0IsQ0FBQ1Msb0JBQW9CO0lBQzVELE1BQU1DLFFBQVEsR0FBR0YsUUFBUSxHQUFHTCxjQUFjLENBQUNRLEtBQUs7SUFDaEQsTUFBTUMsUUFBUSxHQUFHTCxZQUFZLENBQUNNLElBQUksR0FBR2Isc0JBQXNCLENBQUNjLG9CQUFvQjtJQUNoRixNQUFNQyxRQUFRLEdBQUdILFFBQVEsR0FBR1QsY0FBYyxDQUFDYSxNQUFNO0lBQ2pELE1BQU1DLFdBQVcsR0FBRyxDQUFFVCxRQUFRLEdBQUdFLFFBQVEsSUFBSyxDQUFDO0lBQy9DLE1BQU1RLFdBQVcsR0FBRyxDQUFFSCxRQUFRLEdBQUdILFFBQVEsSUFBSyxDQUFDOztJQUUvQztJQUNBO0lBQ0EsTUFBTU8sbUJBQW1CLEdBQUdQLFFBQVEsR0FBR0csUUFBUTtJQUMvQyxNQUFNSyxvQkFBb0IsR0FBR2QsV0FBVyxDQUFDVSxNQUFNO0lBRS9DLE1BQU1LLHNCQUFzQixHQUFHLElBQUluQixPQUFPLENBQ3hDZSxXQUFXLEdBQUdFLG1CQUFtQixHQUFHLENBQUMsRUFDckNELFdBQVcsR0FBR0MsbUJBQW1CLEdBQUcsQ0FBQyxFQUNyQ0YsV0FBVyxHQUFHRSxtQkFBbUIsR0FBRyxDQUFDLEVBQ3JDRCxXQUFXLEdBQUdDLG1CQUFtQixHQUFHLENBQ3RDLENBQUM7SUFFRCxNQUFNRyx1QkFBdUIsR0FBRyxJQUFJcEIsT0FBTyxDQUN6QyxDQUFDa0Isb0JBQW9CLEdBQUcsQ0FBQyxFQUN6QixDQUFDQSxvQkFBb0IsR0FBRyxDQUFDLEVBQ3pCQSxvQkFBb0IsR0FBRyxDQUFDLEVBQ3hCQSxvQkFBb0IsR0FBRyxDQUN6QixDQUFDO0lBRUQsSUFBSSxDQUFDRyw4QkFBOEIsQ0FBRUQsdUJBQXVCLEVBQUVELHNCQUF1QixDQUFDO0VBQ3hGO0FBQ0Y7QUFFQXRCLGFBQWEsQ0FBQ3lCLFFBQVEsQ0FBRSxrQ0FBa0MsRUFBRXBCLGdDQUFpQyxDQUFDIn0=