// Copyright 2022-2023, University of Colorado Boulder

/**
 * The major and minor tick marks for the QuadrilateralSideNode, which make it easier to view relative side lengths.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import quadrilateral from '../../quadrilateral.js';
import { Path } from '../../../../scenery/js/imports.js';
import QuadrilateralSide from '../model/QuadrilateralSide.js';
import { Line, Shape } from '../../../../kite/js/imports.js';
import QuadrilateralColors from '../../QuadrilateralColors.js';
import Vector2 from '../../../../dot/js/Vector2.js';
const TICKS_PER_SEGMENT = 4;

// relative to the full width of a QuadrilateralSide (normalized)
const PARAMETRIC_MINOR_TICK_LENGTH = 0.25;
const PARAMETRIC_MAJOR_TICK_LENGTH = 0.5;

// A line reused for drawing and finding points along a line at a parametric position. Avoids instantiating many Lines
// as we draw each tick mark.
const SCRATCH_LINE = new Line(new Vector2(0, 0), new Vector2(0, 0));
export default class SideTicksNode extends Path {
  constructor(side, modelViewTransform) {
    super(null, {
      stroke: QuadrilateralColors.quadrilateralShapeStrokeColorProperty
    });
    this.side = side;
    this.modelViewTransform = modelViewTransform;
  }

  /**
   * Redraws tick marks along the outer edge of the QuadrilateralSide between its vertices.
   */
  redraw() {
    const shape = new Shape();
    const fullLine = this.side.modelLineProperty.value;
    const segmentCount = this.side.lengthProperty.value / QuadrilateralSide.SIDE_SEGMENT_LENGTH;
    const parametricTickSeparation = 1 / (segmentCount * TICKS_PER_SEGMENT);
    const outerLine = fullLine.strokeLeft(QuadrilateralSide.SIDE_WIDTH)[0];
    const innerLine = fullLine.strokeRight(QuadrilateralSide.SIDE_WIDTH)[0];

    // alternating major/minor tick marks, starting with major so they are on the segment end points and half
    let isMajor = true;
    for (let t = 0; t < 1; t += parametricTickSeparation) {
      SCRATCH_LINE.setStart(outerLine.positionAt(t));
      SCRATCH_LINE.setEnd(innerLine.positionAt(1 - t)); // strokeRight swaps start and end position

      const parametricLength = isMajor ? PARAMETRIC_MAJOR_TICK_LENGTH : PARAMETRIC_MINOR_TICK_LENGTH;
      isMajor = !isMajor;
      shape.moveToPoint(SCRATCH_LINE.start);
      shape.lineToPoint(SCRATCH_LINE.positionAt(parametricLength));
    }
    this.shape = this.modelViewTransform.modelToViewShape(shape);
  }
}
quadrilateral.register('SideTicksNode', SideTicksNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxdWFkcmlsYXRlcmFsIiwiUGF0aCIsIlF1YWRyaWxhdGVyYWxTaWRlIiwiTGluZSIsIlNoYXBlIiwiUXVhZHJpbGF0ZXJhbENvbG9ycyIsIlZlY3RvcjIiLCJUSUNLU19QRVJfU0VHTUVOVCIsIlBBUkFNRVRSSUNfTUlOT1JfVElDS19MRU5HVEgiLCJQQVJBTUVUUklDX01BSk9SX1RJQ0tfTEVOR1RIIiwiU0NSQVRDSF9MSU5FIiwiU2lkZVRpY2tzTm9kZSIsImNvbnN0cnVjdG9yIiwic2lkZSIsIm1vZGVsVmlld1RyYW5zZm9ybSIsInN0cm9rZSIsInF1YWRyaWxhdGVyYWxTaGFwZVN0cm9rZUNvbG9yUHJvcGVydHkiLCJyZWRyYXciLCJzaGFwZSIsImZ1bGxMaW5lIiwibW9kZWxMaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInNlZ21lbnRDb3VudCIsImxlbmd0aFByb3BlcnR5IiwiU0lERV9TRUdNRU5UX0xFTkdUSCIsInBhcmFtZXRyaWNUaWNrU2VwYXJhdGlvbiIsIm91dGVyTGluZSIsInN0cm9rZUxlZnQiLCJTSURFX1dJRFRIIiwiaW5uZXJMaW5lIiwic3Ryb2tlUmlnaHQiLCJpc01ham9yIiwidCIsInNldFN0YXJ0IiwicG9zaXRpb25BdCIsInNldEVuZCIsInBhcmFtZXRyaWNMZW5ndGgiLCJtb3ZlVG9Qb2ludCIsInN0YXJ0IiwibGluZVRvUG9pbnQiLCJtb2RlbFRvVmlld1NoYXBlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTaWRlVGlja3NOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWpvciBhbmQgbWlub3IgdGljayBtYXJrcyBmb3IgdGhlIFF1YWRyaWxhdGVyYWxTaWRlTm9kZSwgd2hpY2ggbWFrZSBpdCBlYXNpZXIgdG8gdmlldyByZWxhdGl2ZSBzaWRlIGxlbmd0aHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBxdWFkcmlsYXRlcmFsIGZyb20gJy4uLy4uL3F1YWRyaWxhdGVyYWwuanMnO1xyXG5pbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxTaWRlIGZyb20gJy4uL21vZGVsL1F1YWRyaWxhdGVyYWxTaWRlLmpzJztcclxuaW1wb3J0IHsgTGluZSwgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbENvbG9ycyBmcm9tICcuLi8uLi9RdWFkcmlsYXRlcmFsQ29sb3JzLmpzJztcclxuaW1wb3J0IE1vZGVsVmlld1RyYW5zZm9ybTIgZnJvbSAnLi4vLi4vLi4vLi4vcGhldGNvbW1vbi9qcy92aWV3L01vZGVsVmlld1RyYW5zZm9ybTIuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcblxyXG5jb25zdCBUSUNLU19QRVJfU0VHTUVOVCA9IDQ7XHJcblxyXG4vLyByZWxhdGl2ZSB0byB0aGUgZnVsbCB3aWR0aCBvZiBhIFF1YWRyaWxhdGVyYWxTaWRlIChub3JtYWxpemVkKVxyXG5jb25zdCBQQVJBTUVUUklDX01JTk9SX1RJQ0tfTEVOR1RIID0gMC4yNTtcclxuY29uc3QgUEFSQU1FVFJJQ19NQUpPUl9USUNLX0xFTkdUSCA9IDAuNTtcclxuXHJcbi8vIEEgbGluZSByZXVzZWQgZm9yIGRyYXdpbmcgYW5kIGZpbmRpbmcgcG9pbnRzIGFsb25nIGEgbGluZSBhdCBhIHBhcmFtZXRyaWMgcG9zaXRpb24uIEF2b2lkcyBpbnN0YW50aWF0aW5nIG1hbnkgTGluZXNcclxuLy8gYXMgd2UgZHJhdyBlYWNoIHRpY2sgbWFyay5cclxuY29uc3QgU0NSQVRDSF9MSU5FID0gbmV3IExpbmUoIG5ldyBWZWN0b3IyKCAwLCAwICksIG5ldyBWZWN0b3IyKCAwLCAwICkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZGVUaWNrc05vZGUgZXh0ZW5kcyBQYXRoIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IHNpZGU6IFF1YWRyaWxhdGVyYWxTaWRlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbW9kZWxWaWV3VHJhbnNmb3JtOiBNb2RlbFZpZXdUcmFuc2Zvcm0yO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNpZGU6IFF1YWRyaWxhdGVyYWxTaWRlLCBtb2RlbFZpZXdUcmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIgKSB7XHJcbiAgICBzdXBlciggbnVsbCwge1xyXG4gICAgICBzdHJva2U6IFF1YWRyaWxhdGVyYWxDb2xvcnMucXVhZHJpbGF0ZXJhbFNoYXBlU3Ryb2tlQ29sb3JQcm9wZXJ0eVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc2lkZSA9IHNpZGU7XHJcbiAgICB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybSA9IG1vZGVsVmlld1RyYW5zZm9ybTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZHJhd3MgdGljayBtYXJrcyBhbG9uZyB0aGUgb3V0ZXIgZWRnZSBvZiB0aGUgUXVhZHJpbGF0ZXJhbFNpZGUgYmV0d2VlbiBpdHMgdmVydGljZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHJlZHJhdygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHNoYXBlID0gbmV3IFNoYXBlKCk7XHJcblxyXG4gICAgY29uc3QgZnVsbExpbmUgPSB0aGlzLnNpZGUubW9kZWxMaW5lUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgY29uc3Qgc2VnbWVudENvdW50ID0gdGhpcy5zaWRlLmxlbmd0aFByb3BlcnR5LnZhbHVlIC8gUXVhZHJpbGF0ZXJhbFNpZGUuU0lERV9TRUdNRU5UX0xFTkdUSDtcclxuICAgIGNvbnN0IHBhcmFtZXRyaWNUaWNrU2VwYXJhdGlvbiA9IDEgLyAoIHNlZ21lbnRDb3VudCAqIFRJQ0tTX1BFUl9TRUdNRU5UICk7XHJcblxyXG4gICAgY29uc3Qgb3V0ZXJMaW5lID0gZnVsbExpbmUuc3Ryb2tlTGVmdCggUXVhZHJpbGF0ZXJhbFNpZGUuU0lERV9XSURUSCApWyAwIF07XHJcbiAgICBjb25zdCBpbm5lckxpbmUgPSBmdWxsTGluZS5zdHJva2VSaWdodCggUXVhZHJpbGF0ZXJhbFNpZGUuU0lERV9XSURUSCApWyAwIF07XHJcblxyXG4gICAgLy8gYWx0ZXJuYXRpbmcgbWFqb3IvbWlub3IgdGljayBtYXJrcywgc3RhcnRpbmcgd2l0aCBtYWpvciBzbyB0aGV5IGFyZSBvbiB0aGUgc2VnbWVudCBlbmQgcG9pbnRzIGFuZCBoYWxmXHJcbiAgICBsZXQgaXNNYWpvciA9IHRydWU7XHJcblxyXG4gICAgZm9yICggbGV0IHQgPSAwOyB0IDwgMTsgdCArPSBwYXJhbWV0cmljVGlja1NlcGFyYXRpb24gKSB7XHJcbiAgICAgIFNDUkFUQ0hfTElORS5zZXRTdGFydCggb3V0ZXJMaW5lLnBvc2l0aW9uQXQoIHQgKSApO1xyXG4gICAgICBTQ1JBVENIX0xJTkUuc2V0RW5kKCBpbm5lckxpbmUucG9zaXRpb25BdCggMSAtIHQgKSApOyAvLyBzdHJva2VSaWdodCBzd2FwcyBzdGFydCBhbmQgZW5kIHBvc2l0aW9uXHJcblxyXG4gICAgICBjb25zdCBwYXJhbWV0cmljTGVuZ3RoID0gaXNNYWpvciA/IFBBUkFNRVRSSUNfTUFKT1JfVElDS19MRU5HVEggOiBQQVJBTUVUUklDX01JTk9SX1RJQ0tfTEVOR1RIO1xyXG4gICAgICBpc01ham9yID0gIWlzTWFqb3I7XHJcblxyXG4gICAgICBzaGFwZS5tb3ZlVG9Qb2ludCggU0NSQVRDSF9MSU5FLnN0YXJ0ICk7XHJcbiAgICAgIHNoYXBlLmxpbmVUb1BvaW50KCBTQ1JBVENIX0xJTkUucG9zaXRpb25BdCggcGFyYW1ldHJpY0xlbmd0aCApICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zaGFwZSA9IHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHNoYXBlICk7XHJcbiAgfVxyXG59XHJcblxyXG5xdWFkcmlsYXRlcmFsLnJlZ2lzdGVyKCAnU2lkZVRpY2tzTm9kZScsIFNpZGVUaWNrc05vZGUgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxpQkFBaUIsTUFBTSwrQkFBK0I7QUFDN0QsU0FBU0MsSUFBSSxFQUFFQyxLQUFLLFFBQVEsZ0NBQWdDO0FBQzVELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUU5RCxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBRW5ELE1BQU1DLGlCQUFpQixHQUFHLENBQUM7O0FBRTNCO0FBQ0EsTUFBTUMsNEJBQTRCLEdBQUcsSUFBSTtBQUN6QyxNQUFNQyw0QkFBNEIsR0FBRyxHQUFHOztBQUV4QztBQUNBO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlQLElBQUksQ0FBRSxJQUFJRyxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFLElBQUlBLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFFLENBQUM7QUFFekUsZUFBZSxNQUFNSyxhQUFhLFNBQVNWLElBQUksQ0FBQztFQUl2Q1csV0FBV0EsQ0FBRUMsSUFBdUIsRUFBRUMsa0JBQXVDLEVBQUc7SUFDckYsS0FBSyxDQUFFLElBQUksRUFBRTtNQUNYQyxNQUFNLEVBQUVWLG1CQUFtQixDQUFDVztJQUM5QixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNILElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNDLGtCQUFrQixHQUFHQSxrQkFBa0I7RUFDOUM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NHLE1BQU1BLENBQUEsRUFBUztJQUNwQixNQUFNQyxLQUFLLEdBQUcsSUFBSWQsS0FBSyxDQUFDLENBQUM7SUFFekIsTUFBTWUsUUFBUSxHQUFHLElBQUksQ0FBQ04sSUFBSSxDQUFDTyxpQkFBaUIsQ0FBQ0MsS0FBSztJQUVsRCxNQUFNQyxZQUFZLEdBQUcsSUFBSSxDQUFDVCxJQUFJLENBQUNVLGNBQWMsQ0FBQ0YsS0FBSyxHQUFHbkIsaUJBQWlCLENBQUNzQixtQkFBbUI7SUFDM0YsTUFBTUMsd0JBQXdCLEdBQUcsQ0FBQyxJQUFLSCxZQUFZLEdBQUdmLGlCQUFpQixDQUFFO0lBRXpFLE1BQU1tQixTQUFTLEdBQUdQLFFBQVEsQ0FBQ1EsVUFBVSxDQUFFekIsaUJBQWlCLENBQUMwQixVQUFXLENBQUMsQ0FBRSxDQUFDLENBQUU7SUFDMUUsTUFBTUMsU0FBUyxHQUFHVixRQUFRLENBQUNXLFdBQVcsQ0FBRTVCLGlCQUFpQixDQUFDMEIsVUFBVyxDQUFDLENBQUUsQ0FBQyxDQUFFOztJQUUzRTtJQUNBLElBQUlHLE9BQU8sR0FBRyxJQUFJO0lBRWxCLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxJQUFJUCx3QkFBd0IsRUFBRztNQUN0RGYsWUFBWSxDQUFDdUIsUUFBUSxDQUFFUCxTQUFTLENBQUNRLFVBQVUsQ0FBRUYsQ0FBRSxDQUFFLENBQUM7TUFDbER0QixZQUFZLENBQUN5QixNQUFNLENBQUVOLFNBQVMsQ0FBQ0ssVUFBVSxDQUFFLENBQUMsR0FBR0YsQ0FBRSxDQUFFLENBQUMsQ0FBQyxDQUFDOztNQUV0RCxNQUFNSSxnQkFBZ0IsR0FBR0wsT0FBTyxHQUFHdEIsNEJBQTRCLEdBQUdELDRCQUE0QjtNQUM5RnVCLE9BQU8sR0FBRyxDQUFDQSxPQUFPO01BRWxCYixLQUFLLENBQUNtQixXQUFXLENBQUUzQixZQUFZLENBQUM0QixLQUFNLENBQUM7TUFDdkNwQixLQUFLLENBQUNxQixXQUFXLENBQUU3QixZQUFZLENBQUN3QixVQUFVLENBQUVFLGdCQUFpQixDQUFFLENBQUM7SUFDbEU7SUFFQSxJQUFJLENBQUNsQixLQUFLLEdBQUcsSUFBSSxDQUFDSixrQkFBa0IsQ0FBQzBCLGdCQUFnQixDQUFFdEIsS0FBTSxDQUFDO0VBQ2hFO0FBQ0Y7QUFFQWxCLGFBQWEsQ0FBQ3lDLFFBQVEsQ0FBRSxlQUFlLEVBQUU5QixhQUFjLENBQUMifQ==