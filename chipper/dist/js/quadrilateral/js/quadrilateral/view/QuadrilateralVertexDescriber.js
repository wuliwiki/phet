// Copyright 2022-2023, University of Colorado Boulder

/**
 * Manages description strings related to the QuadrilateralVertex.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import quadrilateral from '../../quadrilateral.js';
import QuadrilateralStrings from '../../QuadrilateralStrings.js';
import QuadrilateralShapeModel from '../model/QuadrilateralShapeModel.js';
import QuadrilateralVertexLabel from '../model/QuadrilateralVertexLabel.js';
import Range from '../../../../dot/js/Range.js';
import CornerGuideNode from './CornerGuideNode.js';
import NamedQuadrilateral from '../model/NamedQuadrilateral.js';
// constants
const cornerAStringProperty = QuadrilateralStrings.a11y.cornerAStringProperty;
const cornerBStringProperty = QuadrilateralStrings.a11y.cornerBStringProperty;
const cornerCStringProperty = QuadrilateralStrings.a11y.cornerCStringProperty;
const cornerDStringProperty = QuadrilateralStrings.a11y.cornerDStringProperty;
const vertexObjectResponsePatternStringProperty = QuadrilateralStrings.a11y.voicing.vertexObjectResponsePatternStringProperty;
const farSmallerThanStringProperty = QuadrilateralStrings.a11y.voicing.farSmallerThanStringProperty;
const aboutHalfAsWideAsStringProperty = QuadrilateralStrings.a11y.voicing.aboutHalfAsWideAsStringProperty;
const halfAsWideAsStringProperty = QuadrilateralStrings.a11y.voicing.halfAsWideAsStringProperty;
const aLittleSmallerThanStringProperty = QuadrilateralStrings.a11y.voicing.aLittleSmallerThanStringProperty;
const muchSmallerThanStringProperty = QuadrilateralStrings.a11y.voicing.muchSmallerThanStringProperty;
const similarButSmallerThanStringProperty = QuadrilateralStrings.a11y.voicing.similarButSmallerThanStringProperty;
const equalToStringProperty = QuadrilateralStrings.a11y.voicing.equalToStringProperty;
const similarButWiderThanStringProperty = QuadrilateralStrings.a11y.voicing.similarButWiderThanStringProperty;
const muchWiderThanStringProperty = QuadrilateralStrings.a11y.voicing.muchWiderThanStringProperty;
const aboutTwiceAsWideAsStringProperty = QuadrilateralStrings.a11y.voicing.aboutTwiceAsWideAsStringProperty;
const twiceAsWideAsStringProperty = QuadrilateralStrings.a11y.voicing.twiceAsWideAsStringProperty;
const aLittleWiderThanStringProperty = QuadrilateralStrings.a11y.voicing.aLittleWiderThanStringProperty;
const farWiderThanStringProperty = QuadrilateralStrings.a11y.voicing.farWiderThanStringProperty;
const equalToAdjacentCornersStringProperty = QuadrilateralStrings.a11y.voicing.equalToAdjacentCornersStringProperty;
const equalToOneAdjacentCornerStringProperty = QuadrilateralStrings.a11y.voicing.equalToOneAdjacentCornerStringProperty;
const equalAdjacentCornersPatternStringProperty = QuadrilateralStrings.a11y.voicing.equalAdjacentCornersPatternStringProperty;
const smallerThanAdjacentCornersStringProperty = QuadrilateralStrings.a11y.voicing.smallerThanAdjacentCornersStringProperty;
const widerThanAdjacentCornersStringProperty = QuadrilateralStrings.a11y.voicing.widerThanAdjacentCornersStringProperty;
const notEqualToAdjacentCornersStringProperty = QuadrilateralStrings.a11y.voicing.notEqualToAdjacentCornersStringProperty;
const vertexObjectResponseWithWedgesPatternStringProperty = QuadrilateralStrings.a11y.voicing.vertexObjectResponseWithWedgesPatternStringProperty;
const rightAngleStringProperty = QuadrilateralStrings.a11y.voicing.rightAngleStringProperty;
const angleFlatStringProperty = QuadrilateralStrings.a11y.voicing.angleFlatStringProperty;
const oneWedgeStringProperty = QuadrilateralStrings.a11y.voicing.oneWedgeStringProperty;
const halfOneWedgeStringProperty = QuadrilateralStrings.a11y.voicing.halfOneWedgeStringProperty;
const lessThanHalfOneWedgeStringProperty = QuadrilateralStrings.a11y.voicing.lessThanHalfOneWedgeStringProperty;
const justOverOneWedgeStringProperty = QuadrilateralStrings.a11y.voicing.justOverOneWedgeStringProperty;
const justUnderOneWedgeStringProperty = QuadrilateralStrings.a11y.voicing.justUnderOneWedgeStringProperty;
const numberOfWedgesPatternStringProperty = QuadrilateralStrings.a11y.voicing.numberOfWedgesPatternStringProperty;
const numberOfWedgesAndAHalfPatternStringProperty = QuadrilateralStrings.a11y.voicing.numberOfWedgesAndAHalfPatternStringProperty;
const justOverNumberOfWedgesPatternStringProperty = QuadrilateralStrings.a11y.voicing.justOverNumberOfWedgesPatternStringProperty;
const justUnderNumberOfWedgesPatternStringProperty = QuadrilateralStrings.a11y.voicing.justUnderNumberOfWedgesPatternStringProperty;
const blockedByEdgeStringProperty = QuadrilateralStrings.a11y.voicing.blockedByEdgeStringProperty;

// Maps a vertex to its accessible name, like "Corner A".
const VERTEX_CORNER_LABEL_MAP = new Map([[QuadrilateralVertexLabel.VERTEX_A, cornerAStringProperty], [QuadrilateralVertexLabel.VERTEX_B, cornerBStringProperty], [QuadrilateralVertexLabel.VERTEX_C, cornerCStringProperty], [QuadrilateralVertexLabel.VERTEX_D, cornerDStringProperty]]);

// If ratio of an angle to another is within this range it is 'about half as large as the other'.
const ABOUT_HALF_RANGE = new Range(0.4, 0.6);

// If ratio of angle to another is within this range it is 'about twice as large as the other'. Note that this
// range is twice as wide as the 'about half' range because the ratios around larger values will have a bigger
// variance. See https://github.com/phetsims/quadrilateral/issues/262.
const ABOUT_TWICE_RANGE = new Range(1.8, 2.2);

// Maps the difference in angles between two vertices to a description string.
const ANGLE_COMPARISON_DESCRIPTION_MAP = new Map();
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(0, 0.1), farSmallerThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(0.1, 0.4), muchSmallerThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(ABOUT_HALF_RANGE, aboutHalfAsWideAsStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(0.6, 0.8), aLittleSmallerThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(0.8, 1), similarButSmallerThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(1, 1.3), similarButWiderThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(1.3, 1.6), aLittleWiderThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(1.6, 1.8), muchWiderThanStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(ABOUT_TWICE_RANGE, aboutTwiceAsWideAsStringProperty);
ANGLE_COMPARISON_DESCRIPTION_MAP.set(new Range(2.2, Number.POSITIVE_INFINITY), farWiderThanStringProperty);
export default class QuadrilateralVertexDescriber {
  // A reference to the model components that drive description.

  // See documentation at definition.
  static VERTEX_CORNER_LABEL_MAP = VERTEX_CORNER_LABEL_MAP;
  constructor(vertex, quadrilateralShapeModel, markersVisibleProperty) {
    this.vertex = vertex;
    this.quadrilateralShapeModel = quadrilateralShapeModel;
    this.markersVisibleProperty = markersVisibleProperty;
  }

  /**
   * Returns the Object response for the vertex. Will return something like
   *
   * "right angle, equal to opposite corner, equal to adjacent corners" or
   * "somewhat wider than opposite corner, much smaller than adjacent equal corners." or
   * "1 wedge, far smaller than opposite corner, smaller than adjacent corners."
   */
  getVertexObjectResponse() {
    let response = '';
    const oppositeVertex = this.quadrilateralShapeModel.oppositeVertexMap.get(this.vertex);
    const shapeName = this.quadrilateralShapeModel.shapeNameProperty.value;
    const oppositeComparisonString = this.getAngleComparisonDescription(oppositeVertex, shapeName);
    const adjacentVertexDescriptionString = this.getAdjacentVertexObjectDescription();

    // if corner guides are visible, a description of the number of wedges is included
    if (this.markersVisibleProperty.value) {
      response = StringUtils.fillIn(vertexObjectResponseWithWedgesPatternStringProperty, {
        wedgeDescription: QuadrilateralVertexDescriber.getWedgesDescription(this.vertex.angleProperty.value, this.quadrilateralShapeModel),
        oppositeComparison: oppositeComparisonString,
        adjacentVertexDescription: adjacentVertexDescriptionString
      });
    } else {
      response = StringUtils.fillIn(vertexObjectResponsePatternStringProperty, {
        oppositeComparison: oppositeComparisonString,
        adjacentVertexDescription: adjacentVertexDescriptionString
      });
    }
    return response;
  }

  /**
   * Returns a description for the number of wedges, to be used when corner guides are shown. Returns something like
   * "just under 1 wedge" or
   * "just over 3 wedges" or
   * "1 wedge" or
   * "right angle" or
   * "3 and a half wedges" or
   * "half one wedge"
   *
   * For the design request of this feature please see https://github.com/phetsims/quadrilateral/issues/231
   */
  static getWedgesDescription(vertexAngle, shapeModel) {
    const numberOfFullWedges = Math.floor(vertexAngle / CornerGuideNode.WEDGE_SIZE_RADIANS);
    const remainder = vertexAngle % CornerGuideNode.WEDGE_SIZE_RADIANS;
    if (shapeModel.isRightAngle(vertexAngle)) {
      return rightAngleStringProperty;
    } else if (shapeModel.isFlatAngle(vertexAngle)) {
      return angleFlatStringProperty;
    } else if (shapeModel.isStaticAngleEqualToOther(remainder, 0)) {
      if (numberOfFullWedges === 1) {
        return oneWedgeStringProperty;
      } else {
        return StringUtils.fillIn(numberOfWedgesPatternStringProperty, {
          numberOfWedges: numberOfFullWedges
        });
      }
    } else if (shapeModel.isStaticAngleEqualToOther(remainder, CornerGuideNode.WEDGE_SIZE_RADIANS / 2)) {
      if (numberOfFullWedges === 0) {
        return halfOneWedgeStringProperty;
      } else {
        return StringUtils.fillIn(numberOfWedgesAndAHalfPatternStringProperty, {
          numberOfWedges: numberOfFullWedges
        });
      }
    } else if (remainder < CornerGuideNode.WEDGE_SIZE_RADIANS / 2) {
      if (numberOfFullWedges === 0) {
        return lessThanHalfOneWedgeStringProperty;
      } else if (numberOfFullWedges === 1) {
        return justOverOneWedgeStringProperty;
      } else {
        return StringUtils.fillIn(justOverNumberOfWedgesPatternStringProperty, {
          numberOfWedges: numberOfFullWedges
        });
      }
    } else if (remainder > CornerGuideNode.WEDGE_SIZE_RADIANS / 2) {
      if (numberOfFullWedges === 0) {
        return justUnderOneWedgeStringProperty;
      } else {
        return StringUtils.fillIn(justUnderNumberOfWedgesPatternStringProperty, {
          numberOfWedges: numberOfFullWedges + 1
        });
      }
    }
    assert && assert(false, `did not find a wedge description for the provided angle: ${vertexAngle}`);
    return '';
  }

  /**
   * Get a description of the angle of this vertex and how it compares to its adjacent vertices. Will return something
   * like:
   *
   * "much smaller than adjacent equal corners." or
   * "equal to adjacent corners."
   */
  getAdjacentVertexObjectDescription() {
    const adjacentCorners = this.quadrilateralShapeModel.adjacentVertexMap.get(this.vertex);
    const adjacentCornersEqual = this.quadrilateralShapeModel.isInterAngleEqualToOther(adjacentCorners[0].angleProperty.value, adjacentCorners[1].angleProperty.value);
    let numberOfEqualAdjacentVertexPairs = 0;
    const adjacentVertexPairs = this.quadrilateralShapeModel.adjacentEqualVertexPairsProperty.value;
    adjacentVertexPairs.forEach(vertexPair => {
      if (vertexPair.component1 === this.vertex || vertexPair.component2 === this.vertex) {
        numberOfEqualAdjacentVertexPairs++;
      }
    });
    if (numberOfEqualAdjacentVertexPairs === 2) {
      // This vertex and both adjacent angles are all equal
      return equalToAdjacentCornersStringProperty;
    } else if (numberOfEqualAdjacentVertexPairs === 1) {
      // just say "equal to one adjacent corner
      return equalToOneAdjacentCornerStringProperty;
    } else if (adjacentCornersEqual) {
      // the adjacent corners are equal but not equal to provided vertex, combine their description and use either
      // to describe the relative description
      const shapeName = this.quadrilateralShapeModel.shapeNameProperty.value;
      return StringUtils.fillIn(equalAdjacentCornersPatternStringProperty, {
        comparison: this.getAngleComparisonDescription(adjacentCorners[0], shapeName)
      });
    } else {
      // None of the vertex angles are equal. Describe how this vertex is smaller than both, larger than both, or
      // simply equal to neither.
      const vertexAngle = this.vertex.angleProperty.value;
      const firstAdjacentAngle = adjacentCorners[0].angleProperty.value;
      const secondAdjacentAngle = adjacentCorners[1].angleProperty.value;
      if (firstAdjacentAngle > vertexAngle && secondAdjacentAngle > vertexAngle) {
        return smallerThanAdjacentCornersStringProperty;
      } else if (firstAdjacentAngle < vertexAngle && secondAdjacentAngle < vertexAngle) {
        return widerThanAdjacentCornersStringProperty;
      } else {
        return notEqualToAdjacentCornersStringProperty;
      }
    }
  }

  /**
   * Returns a context response for when the QuadrilateralVertex can not move because it is blocked by a boundary edge.
   */
  getBlockedByEdgeResponse() {
    return blockedByEdgeStringProperty;
  }

  /**
   * Returns the description of comparison between this angle and another, using the entries of
   * ANGLE_COMPARISON_DESCRIPTION_MAP. Description compares this vertex to otherVertex. So if this vertex has a larger
   * angle than otherVertex the output will be something like:
   * "much much wider than" or
   * "a little wider than"
   *
   * or if this QuadrilateralVertex angle is smaller than otherVertex, returns something like
   * "much much smaller than" or
   * "a little smaller than"
   */
  getAngleComparisonDescription(otherVertex, shapeName) {
    assert && assert(this.vertex.angleProperty.value !== null, 'angles need to be initialized for descriptions');
    assert && assert(otherVertex.angleProperty.value !== null, 'angles need to be initialized for descriptions');
    const angle1 = this.vertex.angleProperty.value;
    const angle2 = otherVertex.angleProperty.value;

    // If we are a trapezoid, only describe angles as equal when they are EXACTLY equal, otherwise we may run into
    // cases where we move out of isoceles trapezoid while the angles are still described as "equal".
    const usableToleranceInterval = shapeName === NamedQuadrilateral.TRAPEZOID ? 0 : this.quadrilateralShapeModel.interAngleToleranceInterval;
    if (QuadrilateralShapeModel.isAngleEqualToOther(angle1, angle2, usableToleranceInterval)) {
      return equalToStringProperty;
    } else if (QuadrilateralShapeModel.isAngleEqualToOther(angle1, angle2 * 2, usableToleranceInterval)) {
      return twiceAsWideAsStringProperty;
    } else if (QuadrilateralShapeModel.isAngleEqualToOther(angle1, angle2 * 0.5, usableToleranceInterval)) {
      return halfAsWideAsStringProperty;
    } else {
      let description = null;
      const angleRatio = angle1 / angle2;
      ANGLE_COMPARISON_DESCRIPTION_MAP.forEach((value, key) => {
        if (key.contains(angleRatio)) {
          description = value;
        }
      });
      assert && assert(description, `Description not found for angle difference ${angleRatio}`);
      return description;
    }
  }

  /**
   * Returns true if value of angle is "about" half of value of other, within defined ranges.
   */
  static isAngleAboutHalfOther(angle, other) {
    return ABOUT_HALF_RANGE.contains(angle / other);
  }

  /**
   * Returns true if value of angle is "about" twice value of other, within defined ranges.
   */
  static isAngleAboutTwiceOther(angle, other) {
    return ABOUT_TWICE_RANGE.contains(angle / other);
  }
}
quadrilateral.register('QuadrilateralVertexDescriber', QuadrilateralVertexDescriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsInF1YWRyaWxhdGVyYWwiLCJRdWFkcmlsYXRlcmFsU3RyaW5ncyIsIlF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsIiwiUXVhZHJpbGF0ZXJhbFZlcnRleExhYmVsIiwiUmFuZ2UiLCJDb3JuZXJHdWlkZU5vZGUiLCJOYW1lZFF1YWRyaWxhdGVyYWwiLCJjb3JuZXJBU3RyaW5nUHJvcGVydHkiLCJhMTF5IiwiY29ybmVyQlN0cmluZ1Byb3BlcnR5IiwiY29ybmVyQ1N0cmluZ1Byb3BlcnR5IiwiY29ybmVyRFN0cmluZ1Byb3BlcnR5IiwidmVydGV4T2JqZWN0UmVzcG9uc2VQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJ2b2ljaW5nIiwiZmFyU21hbGxlclRoYW5TdHJpbmdQcm9wZXJ0eSIsImFib3V0SGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHkiLCJoYWxmQXNXaWRlQXNTdHJpbmdQcm9wZXJ0eSIsImFMaXR0bGVTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5IiwibXVjaFNtYWxsZXJUaGFuU3RyaW5nUHJvcGVydHkiLCJzaW1pbGFyQnV0U21hbGxlclRoYW5TdHJpbmdQcm9wZXJ0eSIsImVxdWFsVG9TdHJpbmdQcm9wZXJ0eSIsInNpbWlsYXJCdXRXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSIsIm11Y2hXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSIsImFib3V0VHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5IiwidHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5IiwiYUxpdHRsZVdpZGVyVGhhblN0cmluZ1Byb3BlcnR5IiwiZmFyV2lkZXJUaGFuU3RyaW5nUHJvcGVydHkiLCJlcXVhbFRvQWRqYWNlbnRDb3JuZXJzU3RyaW5nUHJvcGVydHkiLCJlcXVhbFRvT25lQWRqYWNlbnRDb3JuZXJTdHJpbmdQcm9wZXJ0eSIsImVxdWFsQWRqYWNlbnRDb3JuZXJzUGF0dGVyblN0cmluZ1Byb3BlcnR5Iiwic21hbGxlclRoYW5BZGphY2VudENvcm5lcnNTdHJpbmdQcm9wZXJ0eSIsIndpZGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5Iiwibm90RXF1YWxUb0FkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5IiwidmVydGV4T2JqZWN0UmVzcG9uc2VXaXRoV2VkZ2VzUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwicmlnaHRBbmdsZVN0cmluZ1Byb3BlcnR5IiwiYW5nbGVGbGF0U3RyaW5nUHJvcGVydHkiLCJvbmVXZWRnZVN0cmluZ1Byb3BlcnR5IiwiaGFsZk9uZVdlZGdlU3RyaW5nUHJvcGVydHkiLCJsZXNzVGhhbkhhbGZPbmVXZWRnZVN0cmluZ1Byb3BlcnR5IiwianVzdE92ZXJPbmVXZWRnZVN0cmluZ1Byb3BlcnR5IiwianVzdFVuZGVyT25lV2VkZ2VTdHJpbmdQcm9wZXJ0eSIsIm51bWJlck9mV2VkZ2VzUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwibnVtYmVyT2ZXZWRnZXNBbmRBSGFsZlBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsImp1c3RPdmVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJqdXN0VW5kZXJOdW1iZXJPZldlZGdlc1BhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsImJsb2NrZWRCeUVkZ2VTdHJpbmdQcm9wZXJ0eSIsIlZFUlRFWF9DT1JORVJfTEFCRUxfTUFQIiwiTWFwIiwiVkVSVEVYX0EiLCJWRVJURVhfQiIsIlZFUlRFWF9DIiwiVkVSVEVYX0QiLCJBQk9VVF9IQUxGX1JBTkdFIiwiQUJPVVRfVFdJQ0VfUkFOR0UiLCJBTkdMRV9DT01QQVJJU09OX0RFU0NSSVBUSU9OX01BUCIsInNldCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiUXVhZHJpbGF0ZXJhbFZlcnRleERlc2NyaWJlciIsImNvbnN0cnVjdG9yIiwidmVydGV4IiwicXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwiLCJtYXJrZXJzVmlzaWJsZVByb3BlcnR5IiwiZ2V0VmVydGV4T2JqZWN0UmVzcG9uc2UiLCJyZXNwb25zZSIsIm9wcG9zaXRlVmVydGV4Iiwib3Bwb3NpdGVWZXJ0ZXhNYXAiLCJnZXQiLCJzaGFwZU5hbWUiLCJzaGFwZU5hbWVQcm9wZXJ0eSIsInZhbHVlIiwib3Bwb3NpdGVDb21wYXJpc29uU3RyaW5nIiwiZ2V0QW5nbGVDb21wYXJpc29uRGVzY3JpcHRpb24iLCJhZGphY2VudFZlcnRleERlc2NyaXB0aW9uU3RyaW5nIiwiZ2V0QWRqYWNlbnRWZXJ0ZXhPYmplY3REZXNjcmlwdGlvbiIsImZpbGxJbiIsIndlZGdlRGVzY3JpcHRpb24iLCJnZXRXZWRnZXNEZXNjcmlwdGlvbiIsImFuZ2xlUHJvcGVydHkiLCJvcHBvc2l0ZUNvbXBhcmlzb24iLCJhZGphY2VudFZlcnRleERlc2NyaXB0aW9uIiwidmVydGV4QW5nbGUiLCJzaGFwZU1vZGVsIiwibnVtYmVyT2ZGdWxsV2VkZ2VzIiwiTWF0aCIsImZsb29yIiwiV0VER0VfU0laRV9SQURJQU5TIiwicmVtYWluZGVyIiwiaXNSaWdodEFuZ2xlIiwiaXNGbGF0QW5nbGUiLCJpc1N0YXRpY0FuZ2xlRXF1YWxUb090aGVyIiwibnVtYmVyT2ZXZWRnZXMiLCJhc3NlcnQiLCJhZGphY2VudENvcm5lcnMiLCJhZGphY2VudFZlcnRleE1hcCIsImFkamFjZW50Q29ybmVyc0VxdWFsIiwiaXNJbnRlckFuZ2xlRXF1YWxUb090aGVyIiwibnVtYmVyT2ZFcXVhbEFkamFjZW50VmVydGV4UGFpcnMiLCJhZGphY2VudFZlcnRleFBhaXJzIiwiYWRqYWNlbnRFcXVhbFZlcnRleFBhaXJzUHJvcGVydHkiLCJmb3JFYWNoIiwidmVydGV4UGFpciIsImNvbXBvbmVudDEiLCJjb21wb25lbnQyIiwiY29tcGFyaXNvbiIsImZpcnN0QWRqYWNlbnRBbmdsZSIsInNlY29uZEFkamFjZW50QW5nbGUiLCJnZXRCbG9ja2VkQnlFZGdlUmVzcG9uc2UiLCJvdGhlclZlcnRleCIsImFuZ2xlMSIsImFuZ2xlMiIsInVzYWJsZVRvbGVyYW5jZUludGVydmFsIiwiVFJBUEVaT0lEIiwiaW50ZXJBbmdsZVRvbGVyYW5jZUludGVydmFsIiwiaXNBbmdsZUVxdWFsVG9PdGhlciIsImRlc2NyaXB0aW9uIiwiYW5nbGVSYXRpbyIsImtleSIsImNvbnRhaW5zIiwiaXNBbmdsZUFib3V0SGFsZk90aGVyIiwiYW5nbGUiLCJvdGhlciIsImlzQW5nbGVBYm91dFR3aWNlT3RoZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlF1YWRyaWxhdGVyYWxWZXJ0ZXhEZXNjcmliZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFuYWdlcyBkZXNjcmlwdGlvbiBzdHJpbmdzIHJlbGF0ZWQgdG8gdGhlIFF1YWRyaWxhdGVyYWxWZXJ0ZXguXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgcXVhZHJpbGF0ZXJhbCBmcm9tICcuLi8uLi9xdWFkcmlsYXRlcmFsLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxTdHJpbmdzIGZyb20gJy4uLy4uL1F1YWRyaWxhdGVyYWxTdHJpbmdzLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsIGZyb20gJy4uL21vZGVsL1F1YWRyaWxhdGVyYWxTaGFwZU1vZGVsLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxWZXJ0ZXggZnJvbSAnLi4vbW9kZWwvUXVhZHJpbGF0ZXJhbFZlcnRleC5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsVmVydGV4TGFiZWwgZnJvbSAnLi4vbW9kZWwvUXVhZHJpbGF0ZXJhbFZlcnRleExhYmVsLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IENvcm5lckd1aWRlTm9kZSBmcm9tICcuL0Nvcm5lckd1aWRlTm9kZS5qcyc7XHJcbmltcG9ydCBOYW1lZFF1YWRyaWxhdGVyYWwgZnJvbSAnLi4vbW9kZWwvTmFtZWRRdWFkcmlsYXRlcmFsLmpzJztcclxuaW1wb3J0IHsgUERPTVZhbHVlVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgY29ybmVyQVN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS5jb3JuZXJBU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGNvcm5lckJTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkuY29ybmVyQlN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBjb3JuZXJDU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LmNvcm5lckNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgY29ybmVyRFN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS5jb3JuZXJEU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHZlcnRleE9iamVjdFJlc3BvbnNlUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLnZlcnRleE9iamVjdFJlc3BvbnNlUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBmYXJTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmZhclNtYWxsZXJUaGFuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGFib3V0SGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuYWJvdXRIYWxmQXNXaWRlQXNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgaGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuaGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGFMaXR0bGVTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmFMaXR0bGVTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBtdWNoU21hbGxlclRoYW5TdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5tdWNoU21hbGxlclRoYW5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgc2ltaWxhckJ1dFNtYWxsZXJUaGFuU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuc2ltaWxhckJ1dFNtYWxsZXJUaGFuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGVxdWFsVG9TdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5lcXVhbFRvU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHNpbWlsYXJCdXRXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5zaW1pbGFyQnV0V2lkZXJUaGFuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IG11Y2hXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5tdWNoV2lkZXJUaGFuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGFib3V0VHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmFib3V0VHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB0d2ljZUFzV2lkZUFzU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcudHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBhTGl0dGxlV2lkZXJUaGFuU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuYUxpdHRsZVdpZGVyVGhhblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBmYXJXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5mYXJXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgZXF1YWxUb0FkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmVxdWFsVG9BZGphY2VudENvcm5lcnNTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgZXF1YWxUb09uZUFkamFjZW50Q29ybmVyU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuZXF1YWxUb09uZUFkamFjZW50Q29ybmVyU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGVxdWFsQWRqYWNlbnRDb3JuZXJzUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmVxdWFsQWRqYWNlbnRDb3JuZXJzUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBzbWFsbGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLnNtYWxsZXJUaGFuQWRqYWNlbnRDb3JuZXJzU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHdpZGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLndpZGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBub3RFcXVhbFRvQWRqYWNlbnRDb3JuZXJzU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcubm90RXF1YWxUb0FkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCB2ZXJ0ZXhPYmplY3RSZXNwb25zZVdpdGhXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcudmVydGV4T2JqZWN0UmVzcG9uc2VXaXRoV2VkZ2VzUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCByaWdodEFuZ2xlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcucmlnaHRBbmdsZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBhbmdsZUZsYXRTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5hbmdsZUZsYXRTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3Qgb25lV2VkZ2VTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5vbmVXZWRnZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBoYWxmT25lV2VkZ2VTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5oYWxmT25lV2VkZ2VTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbGVzc1RoYW5IYWxmT25lV2VkZ2VTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5sZXNzVGhhbkhhbGZPbmVXZWRnZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBqdXN0T3Zlck9uZVdlZGdlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuanVzdE92ZXJPbmVXZWRnZVN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBqdXN0VW5kZXJPbmVXZWRnZVN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLmp1c3RVbmRlck9uZVdlZGdlU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IG51bWJlck9mV2VkZ2VzUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLm51bWJlck9mV2VkZ2VzUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBudW1iZXJPZldlZGdlc0FuZEFIYWxmUGF0dGVyblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS52b2ljaW5nLm51bWJlck9mV2VkZ2VzQW5kQUhhbGZQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGp1c3RPdmVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuanVzdE92ZXJOdW1iZXJPZldlZGdlc1BhdHRlcm5TdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QganVzdFVuZGVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcuanVzdFVuZGVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IGJsb2NrZWRCeUVkZ2VTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5ibG9ja2VkQnlFZGdlU3RyaW5nUHJvcGVydHk7XHJcblxyXG4vLyBNYXBzIGEgdmVydGV4IHRvIGl0cyBhY2Nlc3NpYmxlIG5hbWUsIGxpa2UgXCJDb3JuZXIgQVwiLlxyXG5jb25zdCBWRVJURVhfQ09STkVSX0xBQkVMX01BUCA9IG5ldyBNYXA8UXVhZHJpbGF0ZXJhbFZlcnRleExhYmVsLCBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+PiggW1xyXG4gIFsgUXVhZHJpbGF0ZXJhbFZlcnRleExhYmVsLlZFUlRFWF9BLCBjb3JuZXJBU3RyaW5nUHJvcGVydHkgXSxcclxuICBbIFF1YWRyaWxhdGVyYWxWZXJ0ZXhMYWJlbC5WRVJURVhfQiwgY29ybmVyQlN0cmluZ1Byb3BlcnR5IF0sXHJcbiAgWyBRdWFkcmlsYXRlcmFsVmVydGV4TGFiZWwuVkVSVEVYX0MsIGNvcm5lckNTdHJpbmdQcm9wZXJ0eSBdLFxyXG4gIFsgUXVhZHJpbGF0ZXJhbFZlcnRleExhYmVsLlZFUlRFWF9ELCBjb3JuZXJEU3RyaW5nUHJvcGVydHkgXVxyXG5dICk7XHJcblxyXG4vLyBJZiByYXRpbyBvZiBhbiBhbmdsZSB0byBhbm90aGVyIGlzIHdpdGhpbiB0aGlzIHJhbmdlIGl0IGlzICdhYm91dCBoYWxmIGFzIGxhcmdlIGFzIHRoZSBvdGhlcicuXHJcbmNvbnN0IEFCT1VUX0hBTEZfUkFOR0UgPSBuZXcgUmFuZ2UoIDAuNCwgMC42ICk7XHJcblxyXG4vLyBJZiByYXRpbyBvZiBhbmdsZSB0byBhbm90aGVyIGlzIHdpdGhpbiB0aGlzIHJhbmdlIGl0IGlzICdhYm91dCB0d2ljZSBhcyBsYXJnZSBhcyB0aGUgb3RoZXInLiBOb3RlIHRoYXQgdGhpc1xyXG4vLyByYW5nZSBpcyB0d2ljZSBhcyB3aWRlIGFzIHRoZSAnYWJvdXQgaGFsZicgcmFuZ2UgYmVjYXVzZSB0aGUgcmF0aW9zIGFyb3VuZCBsYXJnZXIgdmFsdWVzIHdpbGwgaGF2ZSBhIGJpZ2dlclxyXG4vLyB2YXJpYW5jZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9xdWFkcmlsYXRlcmFsL2lzc3Vlcy8yNjIuXHJcbmNvbnN0IEFCT1VUX1RXSUNFX1JBTkdFID0gbmV3IFJhbmdlKCAxLjgsIDIuMiApO1xyXG5cclxuLy8gTWFwcyB0aGUgZGlmZmVyZW5jZSBpbiBhbmdsZXMgYmV0d2VlbiB0d28gdmVydGljZXMgdG8gYSBkZXNjcmlwdGlvbiBzdHJpbmcuXHJcbmNvbnN0IEFOR0xFX0NPTVBBUklTT05fREVTQ1JJUFRJT05fTUFQID0gbmV3IE1hcDxSYW5nZSwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPj4oKTtcclxuQU5HTEVfQ09NUEFSSVNPTl9ERVNDUklQVElPTl9NQVAuc2V0KCBuZXcgUmFuZ2UoIDAsIDAuMSApLCBmYXJTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5ICk7XHJcbkFOR0xFX0NPTVBBUklTT05fREVTQ1JJUFRJT05fTUFQLnNldCggbmV3IFJhbmdlKCAwLjEsIDAuNCApLCBtdWNoU21hbGxlclRoYW5TdHJpbmdQcm9wZXJ0eSApO1xyXG5BTkdMRV9DT01QQVJJU09OX0RFU0NSSVBUSU9OX01BUC5zZXQoIEFCT1VUX0hBTEZfUkFOR0UsIGFib3V0SGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHkgKTtcclxuQU5HTEVfQ09NUEFSSVNPTl9ERVNDUklQVElPTl9NQVAuc2V0KCBuZXcgUmFuZ2UoIDAuNiwgMC44ICksIGFMaXR0bGVTbWFsbGVyVGhhblN0cmluZ1Byb3BlcnR5ICk7XHJcbkFOR0xFX0NPTVBBUklTT05fREVTQ1JJUFRJT05fTUFQLnNldCggbmV3IFJhbmdlKCAwLjgsIDEgKSwgc2ltaWxhckJ1dFNtYWxsZXJUaGFuU3RyaW5nUHJvcGVydHkgKTtcclxuQU5HTEVfQ09NUEFSSVNPTl9ERVNDUklQVElPTl9NQVAuc2V0KCBuZXcgUmFuZ2UoIDEsIDEuMyApLCBzaW1pbGFyQnV0V2lkZXJUaGFuU3RyaW5nUHJvcGVydHkgKTtcclxuQU5HTEVfQ09NUEFSSVNPTl9ERVNDUklQVElPTl9NQVAuc2V0KCBuZXcgUmFuZ2UoIDEuMywgMS42ICksIGFMaXR0bGVXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSApO1xyXG5BTkdMRV9DT01QQVJJU09OX0RFU0NSSVBUSU9OX01BUC5zZXQoIG5ldyBSYW5nZSggMS42LCAxLjggKSwgbXVjaFdpZGVyVGhhblN0cmluZ1Byb3BlcnR5ICk7XHJcbkFOR0xFX0NPTVBBUklTT05fREVTQ1JJUFRJT05fTUFQLnNldCggQUJPVVRfVFdJQ0VfUkFOR0UsIGFib3V0VHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5ICk7XHJcbkFOR0xFX0NPTVBBUklTT05fREVTQ1JJUFRJT05fTUFQLnNldCggbmV3IFJhbmdlKCAyLjIsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSApLCBmYXJXaWRlclRoYW5TdHJpbmdQcm9wZXJ0eSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVhZHJpbGF0ZXJhbFZlcnRleERlc2NyaWJlciB7XHJcblxyXG4gIC8vIEEgcmVmZXJlbmNlIHRvIHRoZSBtb2RlbCBjb21wb25lbnRzIHRoYXQgZHJpdmUgZGVzY3JpcHRpb24uXHJcbiAgcHJpdmF0ZSByZWFkb25seSB2ZXJ0ZXg6IFF1YWRyaWxhdGVyYWxWZXJ0ZXg7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBxdWFkcmlsYXRlcmFsU2hhcGVNb2RlbDogUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWw7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXJrZXJzVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gU2VlIGRvY3VtZW50YXRpb24gYXQgZGVmaW5pdGlvbi5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFZFUlRFWF9DT1JORVJfTEFCRUxfTUFQID0gVkVSVEVYX0NPUk5FUl9MQUJFTF9NQVA7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmVydGV4OiBRdWFkcmlsYXRlcmFsVmVydGV4LCBxdWFkcmlsYXRlcmFsU2hhcGVNb2RlbDogUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwsIG1hcmtlcnNWaXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+ICkge1xyXG4gICAgdGhpcy52ZXJ0ZXggPSB2ZXJ0ZXg7XHJcbiAgICB0aGlzLnF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsID0gcXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWw7XHJcbiAgICB0aGlzLm1hcmtlcnNWaXNpYmxlUHJvcGVydHkgPSBtYXJrZXJzVmlzaWJsZVByb3BlcnR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgT2JqZWN0IHJlc3BvbnNlIGZvciB0aGUgdmVydGV4LiBXaWxsIHJldHVybiBzb21ldGhpbmcgbGlrZVxyXG4gICAqXHJcbiAgICogXCJyaWdodCBhbmdsZSwgZXF1YWwgdG8gb3Bwb3NpdGUgY29ybmVyLCBlcXVhbCB0byBhZGphY2VudCBjb3JuZXJzXCIgb3JcclxuICAgKiBcInNvbWV3aGF0IHdpZGVyIHRoYW4gb3Bwb3NpdGUgY29ybmVyLCBtdWNoIHNtYWxsZXIgdGhhbiBhZGphY2VudCBlcXVhbCBjb3JuZXJzLlwiIG9yXHJcbiAgICogXCIxIHdlZGdlLCBmYXIgc21hbGxlciB0aGFuIG9wcG9zaXRlIGNvcm5lciwgc21hbGxlciB0aGFuIGFkamFjZW50IGNvcm5lcnMuXCJcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmVydGV4T2JqZWN0UmVzcG9uc2UoKTogc3RyaW5nIHtcclxuICAgIGxldCByZXNwb25zZSA9ICcnO1xyXG5cclxuICAgIGNvbnN0IG9wcG9zaXRlVmVydGV4ID0gdGhpcy5xdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5vcHBvc2l0ZVZlcnRleE1hcC5nZXQoIHRoaXMudmVydGV4ICkhO1xyXG5cclxuICAgIGNvbnN0IHNoYXBlTmFtZSA9IHRoaXMucXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwuc2hhcGVOYW1lUHJvcGVydHkudmFsdWU7XHJcbiAgICBjb25zdCBvcHBvc2l0ZUNvbXBhcmlzb25TdHJpbmcgPSB0aGlzLmdldEFuZ2xlQ29tcGFyaXNvbkRlc2NyaXB0aW9uKCBvcHBvc2l0ZVZlcnRleCwgc2hhcGVOYW1lICk7XHJcbiAgICBjb25zdCBhZGphY2VudFZlcnRleERlc2NyaXB0aW9uU3RyaW5nID0gdGhpcy5nZXRBZGphY2VudFZlcnRleE9iamVjdERlc2NyaXB0aW9uKCk7XHJcblxyXG4gICAgLy8gaWYgY29ybmVyIGd1aWRlcyBhcmUgdmlzaWJsZSwgYSBkZXNjcmlwdGlvbiBvZiB0aGUgbnVtYmVyIG9mIHdlZGdlcyBpcyBpbmNsdWRlZFxyXG4gICAgaWYgKCB0aGlzLm1hcmtlcnNWaXNpYmxlUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIHJlc3BvbnNlID0gU3RyaW5nVXRpbHMuZmlsbEluKCB2ZXJ0ZXhPYmplY3RSZXNwb25zZVdpdGhXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICB3ZWRnZURlc2NyaXB0aW9uOiBRdWFkcmlsYXRlcmFsVmVydGV4RGVzY3JpYmVyLmdldFdlZGdlc0Rlc2NyaXB0aW9uKCB0aGlzLnZlcnRleC5hbmdsZVByb3BlcnR5LnZhbHVlISwgdGhpcy5xdWFkcmlsYXRlcmFsU2hhcGVNb2RlbCApLFxyXG4gICAgICAgIG9wcG9zaXRlQ29tcGFyaXNvbjogb3Bwb3NpdGVDb21wYXJpc29uU3RyaW5nLFxyXG4gICAgICAgIGFkamFjZW50VmVydGV4RGVzY3JpcHRpb246IGFkamFjZW50VmVydGV4RGVzY3JpcHRpb25TdHJpbmdcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlc3BvbnNlID0gU3RyaW5nVXRpbHMuZmlsbEluKCB2ZXJ0ZXhPYmplY3RSZXNwb25zZVBhdHRlcm5TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgIG9wcG9zaXRlQ29tcGFyaXNvbjogb3Bwb3NpdGVDb21wYXJpc29uU3RyaW5nLFxyXG4gICAgICAgIGFkamFjZW50VmVydGV4RGVzY3JpcHRpb246IGFkamFjZW50VmVydGV4RGVzY3JpcHRpb25TdHJpbmdcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBkZXNjcmlwdGlvbiBmb3IgdGhlIG51bWJlciBvZiB3ZWRnZXMsIHRvIGJlIHVzZWQgd2hlbiBjb3JuZXIgZ3VpZGVzIGFyZSBzaG93bi4gUmV0dXJucyBzb21ldGhpbmcgbGlrZVxyXG4gICAqIFwianVzdCB1bmRlciAxIHdlZGdlXCIgb3JcclxuICAgKiBcImp1c3Qgb3ZlciAzIHdlZGdlc1wiIG9yXHJcbiAgICogXCIxIHdlZGdlXCIgb3JcclxuICAgKiBcInJpZ2h0IGFuZ2xlXCIgb3JcclxuICAgKiBcIjMgYW5kIGEgaGFsZiB3ZWRnZXNcIiBvclxyXG4gICAqIFwiaGFsZiBvbmUgd2VkZ2VcIlxyXG4gICAqXHJcbiAgICogRm9yIHRoZSBkZXNpZ24gcmVxdWVzdCBvZiB0aGlzIGZlYXR1cmUgcGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcXVhZHJpbGF0ZXJhbC9pc3N1ZXMvMjMxXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRXZWRnZXNEZXNjcmlwdGlvbiggdmVydGV4QW5nbGU6IG51bWJlciwgc2hhcGVNb2RlbDogUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwgKTogUERPTVZhbHVlVHlwZSB8IG51bGwge1xyXG4gICAgY29uc3QgbnVtYmVyT2ZGdWxsV2VkZ2VzID0gTWF0aC5mbG9vciggdmVydGV4QW5nbGUgLyBDb3JuZXJHdWlkZU5vZGUuV0VER0VfU0laRV9SQURJQU5TICk7XHJcbiAgICBjb25zdCByZW1haW5kZXIgPSB2ZXJ0ZXhBbmdsZSAlIENvcm5lckd1aWRlTm9kZS5XRURHRV9TSVpFX1JBRElBTlM7XHJcblxyXG4gICAgaWYgKCBzaGFwZU1vZGVsLmlzUmlnaHRBbmdsZSggdmVydGV4QW5nbGUgKSApIHtcclxuICAgICAgcmV0dXJuIHJpZ2h0QW5nbGVTdHJpbmdQcm9wZXJ0eTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCBzaGFwZU1vZGVsLmlzRmxhdEFuZ2xlKCB2ZXJ0ZXhBbmdsZSApICkge1xyXG4gICAgICByZXR1cm4gYW5nbGVGbGF0U3RyaW5nUHJvcGVydHk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggc2hhcGVNb2RlbC5pc1N0YXRpY0FuZ2xlRXF1YWxUb090aGVyKCByZW1haW5kZXIsIDAgKSApIHtcclxuICAgICAgaWYgKCBudW1iZXJPZkZ1bGxXZWRnZXMgPT09IDEgKSB7XHJcbiAgICAgICAgcmV0dXJuIG9uZVdlZGdlU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZpbGxJbiggbnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIG51bWJlck9mV2VkZ2VzOiBudW1iZXJPZkZ1bGxXZWRnZXNcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCBzaGFwZU1vZGVsLmlzU3RhdGljQW5nbGVFcXVhbFRvT3RoZXIoIHJlbWFpbmRlciwgQ29ybmVyR3VpZGVOb2RlLldFREdFX1NJWkVfUkFESUFOUyAvIDIgKSApIHtcclxuICAgICAgaWYgKCBudW1iZXJPZkZ1bGxXZWRnZXMgPT09IDAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGhhbGZPbmVXZWRnZVN0cmluZ1Byb3BlcnR5O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oIG51bWJlck9mV2VkZ2VzQW5kQUhhbGZQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIG51bWJlck9mV2VkZ2VzOiBudW1iZXJPZkZ1bGxXZWRnZXNcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCByZW1haW5kZXIgPCBDb3JuZXJHdWlkZU5vZGUuV0VER0VfU0laRV9SQURJQU5TIC8gMiApIHtcclxuICAgICAgaWYgKCBudW1iZXJPZkZ1bGxXZWRnZXMgPT09IDAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGxlc3NUaGFuSGFsZk9uZVdlZGdlU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIG51bWJlck9mRnVsbFdlZGdlcyA9PT0gMSApIHtcclxuICAgICAgICByZXR1cm4ganVzdE92ZXJPbmVXZWRnZVN0cmluZ1Byb3BlcnR5O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oIGp1c3RPdmVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIG51bWJlck9mV2VkZ2VzOiBudW1iZXJPZkZ1bGxXZWRnZXNcclxuICAgICAgICB9ICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCByZW1haW5kZXIgPiBDb3JuZXJHdWlkZU5vZGUuV0VER0VfU0laRV9SQURJQU5TIC8gMiApIHtcclxuICAgICAgaWYgKCBudW1iZXJPZkZ1bGxXZWRnZXMgPT09IDAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGp1c3RVbmRlck9uZVdlZGdlU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZpbGxJbigganVzdFVuZGVyTnVtYmVyT2ZXZWRnZXNQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIG51bWJlck9mV2VkZ2VzOiBudW1iZXJPZkZ1bGxXZWRnZXMgKyAxXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsIGBkaWQgbm90IGZpbmQgYSB3ZWRnZSBkZXNjcmlwdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGFuZ2xlOiAke3ZlcnRleEFuZ2xlfWAgKTtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBhbmdsZSBvZiB0aGlzIHZlcnRleCBhbmQgaG93IGl0IGNvbXBhcmVzIHRvIGl0cyBhZGphY2VudCB2ZXJ0aWNlcy4gV2lsbCByZXR1cm4gc29tZXRoaW5nXHJcbiAgICogbGlrZTpcclxuICAgKlxyXG4gICAqIFwibXVjaCBzbWFsbGVyIHRoYW4gYWRqYWNlbnQgZXF1YWwgY29ybmVycy5cIiBvclxyXG4gICAqIFwiZXF1YWwgdG8gYWRqYWNlbnQgY29ybmVycy5cIlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBZGphY2VudFZlcnRleE9iamVjdERlc2NyaXB0aW9uKCk6IFBET01WYWx1ZVR5cGUge1xyXG4gICAgY29uc3QgYWRqYWNlbnRDb3JuZXJzID0gdGhpcy5xdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5hZGphY2VudFZlcnRleE1hcC5nZXQoIHRoaXMudmVydGV4ICkhO1xyXG4gICAgY29uc3QgYWRqYWNlbnRDb3JuZXJzRXF1YWwgPSB0aGlzLnF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsLmlzSW50ZXJBbmdsZUVxdWFsVG9PdGhlcihcclxuICAgICAgYWRqYWNlbnRDb3JuZXJzWyAwIF0uYW5nbGVQcm9wZXJ0eS52YWx1ZSEsXHJcbiAgICAgIGFkamFjZW50Q29ybmVyc1sgMSBdLmFuZ2xlUHJvcGVydHkudmFsdWUhXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBudW1iZXJPZkVxdWFsQWRqYWNlbnRWZXJ0ZXhQYWlycyA9IDA7XHJcbiAgICBjb25zdCBhZGphY2VudFZlcnRleFBhaXJzID0gdGhpcy5xdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5hZGphY2VudEVxdWFsVmVydGV4UGFpcnNQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGFkamFjZW50VmVydGV4UGFpcnMuZm9yRWFjaCggdmVydGV4UGFpciA9PiB7XHJcbiAgICAgIGlmICggdmVydGV4UGFpci5jb21wb25lbnQxID09PSB0aGlzLnZlcnRleCB8fCB2ZXJ0ZXhQYWlyLmNvbXBvbmVudDIgPT09IHRoaXMudmVydGV4ICkge1xyXG4gICAgICAgIG51bWJlck9mRXF1YWxBZGphY2VudFZlcnRleFBhaXJzKys7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICAgIGlmICggbnVtYmVyT2ZFcXVhbEFkamFjZW50VmVydGV4UGFpcnMgPT09IDIgKSB7XHJcblxyXG4gICAgICAvLyBUaGlzIHZlcnRleCBhbmQgYm90aCBhZGphY2VudCBhbmdsZXMgYXJlIGFsbCBlcXVhbFxyXG4gICAgICByZXR1cm4gZXF1YWxUb0FkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIG51bWJlck9mRXF1YWxBZGphY2VudFZlcnRleFBhaXJzID09PSAxICkge1xyXG5cclxuICAgICAgLy8ganVzdCBzYXkgXCJlcXVhbCB0byBvbmUgYWRqYWNlbnQgY29ybmVyXHJcbiAgICAgIHJldHVybiBlcXVhbFRvT25lQWRqYWNlbnRDb3JuZXJTdHJpbmdQcm9wZXJ0eTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCBhZGphY2VudENvcm5lcnNFcXVhbCApIHtcclxuXHJcbiAgICAgIC8vIHRoZSBhZGphY2VudCBjb3JuZXJzIGFyZSBlcXVhbCBidXQgbm90IGVxdWFsIHRvIHByb3ZpZGVkIHZlcnRleCwgY29tYmluZSB0aGVpciBkZXNjcmlwdGlvbiBhbmQgdXNlIGVpdGhlclxyXG4gICAgICAvLyB0byBkZXNjcmliZSB0aGUgcmVsYXRpdmUgZGVzY3JpcHRpb25cclxuICAgICAgY29uc3Qgc2hhcGVOYW1lID0gdGhpcy5xdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5zaGFwZU5hbWVQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZpbGxJbiggZXF1YWxBZGphY2VudENvcm5lcnNQYXR0ZXJuU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICBjb21wYXJpc29uOiB0aGlzLmdldEFuZ2xlQ29tcGFyaXNvbkRlc2NyaXB0aW9uKCBhZGphY2VudENvcm5lcnNbIDAgXSwgc2hhcGVOYW1lIClcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBOb25lIG9mIHRoZSB2ZXJ0ZXggYW5nbGVzIGFyZSBlcXVhbC4gRGVzY3JpYmUgaG93IHRoaXMgdmVydGV4IGlzIHNtYWxsZXIgdGhhbiBib3RoLCBsYXJnZXIgdGhhbiBib3RoLCBvclxyXG4gICAgICAvLyBzaW1wbHkgZXF1YWwgdG8gbmVpdGhlci5cclxuICAgICAgY29uc3QgdmVydGV4QW5nbGUgPSB0aGlzLnZlcnRleC5hbmdsZVByb3BlcnR5LnZhbHVlITtcclxuICAgICAgY29uc3QgZmlyc3RBZGphY2VudEFuZ2xlID0gYWRqYWNlbnRDb3JuZXJzWyAwIF0uYW5nbGVQcm9wZXJ0eS52YWx1ZSE7XHJcbiAgICAgIGNvbnN0IHNlY29uZEFkamFjZW50QW5nbGUgPSBhZGphY2VudENvcm5lcnNbIDEgXS5hbmdsZVByb3BlcnR5LnZhbHVlITtcclxuXHJcbiAgICAgIGlmICggZmlyc3RBZGphY2VudEFuZ2xlID4gdmVydGV4QW5nbGUgJiYgc2Vjb25kQWRqYWNlbnRBbmdsZSA+IHZlcnRleEFuZ2xlICkge1xyXG4gICAgICAgIHJldHVybiBzbWFsbGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBmaXJzdEFkamFjZW50QW5nbGUgPCB2ZXJ0ZXhBbmdsZSAmJiBzZWNvbmRBZGphY2VudEFuZ2xlIDwgdmVydGV4QW5nbGUgKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpZGVyVGhhbkFkamFjZW50Q29ybmVyc1N0cmluZ1Byb3BlcnR5O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBub3RFcXVhbFRvQWRqYWNlbnRDb3JuZXJzU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBjb250ZXh0IHJlc3BvbnNlIGZvciB3aGVuIHRoZSBRdWFkcmlsYXRlcmFsVmVydGV4IGNhbiBub3QgbW92ZSBiZWNhdXNlIGl0IGlzIGJsb2NrZWQgYnkgYSBib3VuZGFyeSBlZGdlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRCbG9ja2VkQnlFZGdlUmVzcG9uc2UoKTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gYmxvY2tlZEJ5RWRnZVN0cmluZ1Byb3BlcnR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgZGVzY3JpcHRpb24gb2YgY29tcGFyaXNvbiBiZXR3ZWVuIHRoaXMgYW5nbGUgYW5kIGFub3RoZXIsIHVzaW5nIHRoZSBlbnRyaWVzIG9mXHJcbiAgICogQU5HTEVfQ09NUEFSSVNPTl9ERVNDUklQVElPTl9NQVAuIERlc2NyaXB0aW9uIGNvbXBhcmVzIHRoaXMgdmVydGV4IHRvIG90aGVyVmVydGV4LiBTbyBpZiB0aGlzIHZlcnRleCBoYXMgYSBsYXJnZXJcclxuICAgKiBhbmdsZSB0aGFuIG90aGVyVmVydGV4IHRoZSBvdXRwdXQgd2lsbCBiZSBzb21ldGhpbmcgbGlrZTpcclxuICAgKiBcIm11Y2ggbXVjaCB3aWRlciB0aGFuXCIgb3JcclxuICAgKiBcImEgbGl0dGxlIHdpZGVyIHRoYW5cIlxyXG4gICAqXHJcbiAgICogb3IgaWYgdGhpcyBRdWFkcmlsYXRlcmFsVmVydGV4IGFuZ2xlIGlzIHNtYWxsZXIgdGhhbiBvdGhlclZlcnRleCwgcmV0dXJucyBzb21ldGhpbmcgbGlrZVxyXG4gICAqIFwibXVjaCBtdWNoIHNtYWxsZXIgdGhhblwiIG9yXHJcbiAgICogXCJhIGxpdHRsZSBzbWFsbGVyIHRoYW5cIlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbmdsZUNvbXBhcmlzb25EZXNjcmlwdGlvbiggb3RoZXJWZXJ0ZXg6IFF1YWRyaWxhdGVyYWxWZXJ0ZXgsIHNoYXBlTmFtZTogTmFtZWRRdWFkcmlsYXRlcmFsICk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4gfCBudWxsIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMudmVydGV4LmFuZ2xlUHJvcGVydHkudmFsdWUgIT09IG51bGwsICdhbmdsZXMgbmVlZCB0byBiZSBpbml0aWFsaXplZCBmb3IgZGVzY3JpcHRpb25zJyApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3RoZXJWZXJ0ZXguYW5nbGVQcm9wZXJ0eS52YWx1ZSAhPT0gbnVsbCwgJ2FuZ2xlcyBuZWVkIHRvIGJlIGluaXRpYWxpemVkIGZvciBkZXNjcmlwdGlvbnMnICk7XHJcblxyXG4gICAgY29uc3QgYW5nbGUxID0gdGhpcy52ZXJ0ZXguYW5nbGVQcm9wZXJ0eS52YWx1ZSE7XHJcbiAgICBjb25zdCBhbmdsZTIgPSBvdGhlclZlcnRleC5hbmdsZVByb3BlcnR5LnZhbHVlITtcclxuXHJcbiAgICAvLyBJZiB3ZSBhcmUgYSB0cmFwZXpvaWQsIG9ubHkgZGVzY3JpYmUgYW5nbGVzIGFzIGVxdWFsIHdoZW4gdGhleSBhcmUgRVhBQ1RMWSBlcXVhbCwgb3RoZXJ3aXNlIHdlIG1heSBydW4gaW50b1xyXG4gICAgLy8gY2FzZXMgd2hlcmUgd2UgbW92ZSBvdXQgb2YgaXNvY2VsZXMgdHJhcGV6b2lkIHdoaWxlIHRoZSBhbmdsZXMgYXJlIHN0aWxsIGRlc2NyaWJlZCBhcyBcImVxdWFsXCIuXHJcbiAgICBjb25zdCB1c2FibGVUb2xlcmFuY2VJbnRlcnZhbCA9IHNoYXBlTmFtZSA9PT0gTmFtZWRRdWFkcmlsYXRlcmFsLlRSQVBFWk9JRCA/IDAgOiB0aGlzLnF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsLmludGVyQW5nbGVUb2xlcmFuY2VJbnRlcnZhbDtcclxuICAgIGlmICggUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwuaXNBbmdsZUVxdWFsVG9PdGhlciggYW5nbGUxLCBhbmdsZTIsIHVzYWJsZVRvbGVyYW5jZUludGVydmFsICkgKSB7XHJcbiAgICAgIHJldHVybiBlcXVhbFRvU3RyaW5nUHJvcGVydHk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwuaXNBbmdsZUVxdWFsVG9PdGhlciggYW5nbGUxLCBhbmdsZTIgKiAyLCB1c2FibGVUb2xlcmFuY2VJbnRlcnZhbCApICkge1xyXG4gICAgICByZXR1cm4gdHdpY2VBc1dpZGVBc1N0cmluZ1Byb3BlcnR5O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIFF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsLmlzQW5nbGVFcXVhbFRvT3RoZXIoIGFuZ2xlMSwgYW5nbGUyICogMC41LCB1c2FibGVUb2xlcmFuY2VJbnRlcnZhbCApICkge1xyXG4gICAgICByZXR1cm4gaGFsZkFzV2lkZUFzU3RyaW5nUHJvcGVydHk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbGV0IGRlc2NyaXB0aW9uOiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgICBjb25zdCBhbmdsZVJhdGlvID0gYW5nbGUxIC8gYW5nbGUyO1xyXG4gICAgICBBTkdMRV9DT01QQVJJU09OX0RFU0NSSVBUSU9OX01BUC5mb3JFYWNoKCAoIHZhbHVlLCBrZXkgKSA9PiB7XHJcbiAgICAgICAgaWYgKCBrZXkuY29udGFpbnMoIGFuZ2xlUmF0aW8gKSApIHtcclxuICAgICAgICAgIGRlc2NyaXB0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBkZXNjcmlwdGlvbiwgYERlc2NyaXB0aW9uIG5vdCBmb3VuZCBmb3IgYW5nbGUgZGlmZmVyZW5jZSAke2FuZ2xlUmF0aW99YCApO1xyXG4gICAgICByZXR1cm4gZGVzY3JpcHRpb24hO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIG9mIGFuZ2xlIGlzIFwiYWJvdXRcIiBoYWxmIG9mIHZhbHVlIG9mIG90aGVyLCB3aXRoaW4gZGVmaW5lZCByYW5nZXMuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpc0FuZ2xlQWJvdXRIYWxmT3RoZXIoIGFuZ2xlOiBudW1iZXIsIG90aGVyOiBudW1iZXIgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQUJPVVRfSEFMRl9SQU5HRS5jb250YWlucyggYW5nbGUgLyBvdGhlciApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIG9mIGFuZ2xlIGlzIFwiYWJvdXRcIiB0d2ljZSB2YWx1ZSBvZiBvdGhlciwgd2l0aGluIGRlZmluZWQgcmFuZ2VzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaXNBbmdsZUFib3V0VHdpY2VPdGhlciggYW5nbGU6IG51bWJlciwgb3RoZXI6IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiBBQk9VVF9UV0lDRV9SQU5HRS5jb250YWlucyggYW5nbGUgLyBvdGhlciApO1xyXG4gIH1cclxufVxyXG5cclxucXVhZHJpbGF0ZXJhbC5yZWdpc3RlciggJ1F1YWRyaWxhdGVyYWxWZXJ0ZXhEZXNjcmliZXInLCBRdWFkcmlsYXRlcmFsVmVydGV4RGVzY3JpYmVyICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLGFBQWEsTUFBTSx3QkFBd0I7QUFDbEQsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCO0FBQ2hFLE9BQU9DLHVCQUF1QixNQUFNLHFDQUFxQztBQUV6RSxPQUFPQyx3QkFBd0IsTUFBTSxzQ0FBc0M7QUFDM0UsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxlQUFlLE1BQU0sc0JBQXNCO0FBQ2xELE9BQU9DLGtCQUFrQixNQUFNLGdDQUFnQztBQUcvRDtBQUNBLE1BQU1DLHFCQUFxQixHQUFHTixvQkFBb0IsQ0FBQ08sSUFBSSxDQUFDRCxxQkFBcUI7QUFDN0UsTUFBTUUscUJBQXFCLEdBQUdSLG9CQUFvQixDQUFDTyxJQUFJLENBQUNDLHFCQUFxQjtBQUM3RSxNQUFNQyxxQkFBcUIsR0FBR1Qsb0JBQW9C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