// Copyright 2023, University of Colorado Boulder

/**
 * The UI component that locks motion for the QuadrilateralVertex to be constrained to the minor grid.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import quadrilateral from '../../quadrilateral.js';
import LockNode from '../../../../scenery-phet/js/LockNode.js';
import RectangularToggleButton from '../../../../sun/js/buttons/RectangularToggleButton.js';
import { Text } from '../../../../scenery/js/imports.js';
import QuadrilateralColors from '../../QuadrilateralColors.js';
import QuadrilateralConstants from '../../QuadrilateralConstants.js';
import optionize from '../../../../phet-core/js/optionize.js';
import QuadrilateralStrings from '../../QuadrilateralStrings.js';

// constants
const smallStepsStringProperty = QuadrilateralStrings.smallStepsStringProperty;
const hintResponseStringProperty = QuadrilateralStrings.a11y.voicing.minorIntervalsToggle.hintResponseStringProperty;
const lockedNameResponseStringProperty = QuadrilateralStrings.a11y.voicing.minorIntervalsToggle.lockedNameResponseStringProperty;
const unlockedNameResponseStringProperty = QuadrilateralStrings.a11y.voicing.minorIntervalsToggle.unlockedNameResponseStringProperty;
const lockedContextResponseStringProperty = QuadrilateralStrings.a11y.voicing.minorIntervalsToggle.lockedContextResponseStringProperty;
const unlockedContextResponseStringProperty = QuadrilateralStrings.a11y.voicing.minorIntervalsToggle.unlockedContextResponseStringProperty;
export default class SmallStepsLockToggleButton extends RectangularToggleButton {
  constructor(lockToMinorIntervalsProperty, providedOptions) {
    const buttonIcon = new LockNode(lockToMinorIntervalsProperty, {
      scale: 0.4
    });
    const options = optionize()({
      content: buttonIcon,
      baseColor: QuadrilateralColors.screenViewButtonColorProperty,
      // voicing
      voicingHintResponse: hintResponseStringProperty
    }, providedOptions);
    super(lockToMinorIntervalsProperty, false, true, options);
    const labelNode = new Text(smallStepsStringProperty, {
      font: QuadrilateralConstants.SCREEN_TEXT_FONT,
      maxWidth: 100,
      leftCenter: this.rightCenter.plusXY(QuadrilateralConstants.CONTROL_LABEL_SPACING, 0)
    });
    this.addChild(labelNode);

    // voicing - update dynamic content and request Voicing when the change is made
    lockToMinorIntervalsProperty.link(lockToMinorIntervals => {
      this.voicingNameResponse = lockToMinorIntervals ? lockedNameResponseStringProperty : unlockedNameResponseStringProperty;
      this.voicingContextResponse = lockToMinorIntervals ? lockedContextResponseStringProperty : unlockedContextResponseStringProperty;
      this.voicingSpeakResponse({
        nameResponse: this.voicingNameResponse,
        contextResponse: this.voicingContextResponse
      });
    });
  }
}
quadrilateral.register('SmallStepsLockToggleButton', SmallStepsLockToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJxdWFkcmlsYXRlcmFsIiwiTG9ja05vZGUiLCJSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiIsIlRleHQiLCJRdWFkcmlsYXRlcmFsQ29sb3JzIiwiUXVhZHJpbGF0ZXJhbENvbnN0YW50cyIsIm9wdGlvbml6ZSIsIlF1YWRyaWxhdGVyYWxTdHJpbmdzIiwic21hbGxTdGVwc1N0cmluZ1Byb3BlcnR5IiwiaGludFJlc3BvbnNlU3RyaW5nUHJvcGVydHkiLCJhMTF5Iiwidm9pY2luZyIsIm1pbm9ySW50ZXJ2YWxzVG9nZ2xlIiwibG9ja2VkTmFtZVJlc3BvbnNlU3RyaW5nUHJvcGVydHkiLCJ1bmxvY2tlZE5hbWVSZXNwb25zZVN0cmluZ1Byb3BlcnR5IiwibG9ja2VkQ29udGV4dFJlc3BvbnNlU3RyaW5nUHJvcGVydHkiLCJ1bmxvY2tlZENvbnRleHRSZXNwb25zZVN0cmluZ1Byb3BlcnR5IiwiU21hbGxTdGVwc0xvY2tUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsImxvY2tUb01pbm9ySW50ZXJ2YWxzUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJidXR0b25JY29uIiwic2NhbGUiLCJvcHRpb25zIiwiY29udGVudCIsImJhc2VDb2xvciIsInNjcmVlblZpZXdCdXR0b25Db2xvclByb3BlcnR5Iiwidm9pY2luZ0hpbnRSZXNwb25zZSIsImxhYmVsTm9kZSIsImZvbnQiLCJTQ1JFRU5fVEVYVF9GT05UIiwibWF4V2lkdGgiLCJsZWZ0Q2VudGVyIiwicmlnaHRDZW50ZXIiLCJwbHVzWFkiLCJDT05UUk9MX0xBQkVMX1NQQUNJTkciLCJhZGRDaGlsZCIsImxpbmsiLCJsb2NrVG9NaW5vckludGVydmFscyIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJ2b2ljaW5nQ29udGV4dFJlc3BvbnNlIiwidm9pY2luZ1NwZWFrUmVzcG9uc2UiLCJuYW1lUmVzcG9uc2UiLCJjb250ZXh0UmVzcG9uc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNtYWxsU3RlcHNMb2NrVG9nZ2xlQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgVUkgY29tcG9uZW50IHRoYXQgbG9ja3MgbW90aW9uIGZvciB0aGUgUXVhZHJpbGF0ZXJhbFZlcnRleCB0byBiZSBjb25zdHJhaW5lZCB0byB0aGUgbWlub3IgZ3JpZC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgcXVhZHJpbGF0ZXJhbCBmcm9tICcuLi8uLi9xdWFkcmlsYXRlcmFsLmpzJztcclxuaW1wb3J0IExvY2tOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9Mb2NrTm9kZS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiwgeyBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbi5qcyc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbENvbG9ycyBmcm9tICcuLi8uLi9RdWFkcmlsYXRlcmFsQ29sb3JzLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxDb25zdGFudHMgZnJvbSAnLi4vLi4vUXVhZHJpbGF0ZXJhbENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsU3RyaW5ncyBmcm9tICcuLi8uLi9RdWFkcmlsYXRlcmFsU3RyaW5ncy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3Qgc21hbGxTdGVwc1N0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3Muc21hbGxTdGVwc1N0cmluZ1Byb3BlcnR5O1xyXG5jb25zdCBoaW50UmVzcG9uc2VTdHJpbmdQcm9wZXJ0eSA9IFF1YWRyaWxhdGVyYWxTdHJpbmdzLmExMXkudm9pY2luZy5taW5vckludGVydmFsc1RvZ2dsZS5oaW50UmVzcG9uc2VTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbG9ja2VkTmFtZVJlc3BvbnNlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcubWlub3JJbnRlcnZhbHNUb2dnbGUubG9ja2VkTmFtZVJlc3BvbnNlU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHVubG9ja2VkTmFtZVJlc3BvbnNlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcubWlub3JJbnRlcnZhbHNUb2dnbGUudW5sb2NrZWROYW1lUmVzcG9uc2VTdHJpbmdQcm9wZXJ0eTtcclxuY29uc3QgbG9ja2VkQ29udGV4dFJlc3BvbnNlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcubWlub3JJbnRlcnZhbHNUb2dnbGUubG9ja2VkQ29udGV4dFJlc3BvbnNlU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHVubG9ja2VkQ29udGV4dFJlc3BvbnNlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LnZvaWNpbmcubWlub3JJbnRlcnZhbHNUb2dnbGUudW5sb2NrZWRDb250ZXh0UmVzcG9uc2VTdHJpbmdQcm9wZXJ0eTtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIFNtYWxsU3RlcHNMb2NrVG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbWFsbFN0ZXBzTG9ja1RvZ2dsZUJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uPGJvb2xlYW4+IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGxvY2tUb01pbm9ySW50ZXJ2YWxzUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCBwcm92aWRlZE9wdGlvbnM/OiBTbWFsbFN0ZXBzTG9ja1RvZ2dsZUJ1dHRvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uSWNvbiA9IG5ldyBMb2NrTm9kZSggbG9ja1RvTWlub3JJbnRlcnZhbHNQcm9wZXJ0eSwgeyBzY2FsZTogMC40IH0gKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNtYWxsU3RlcHNMb2NrVG9nZ2xlQnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucz4oKSgge1xyXG4gICAgICBjb250ZW50OiBidXR0b25JY29uLFxyXG4gICAgICBiYXNlQ29sb3I6IFF1YWRyaWxhdGVyYWxDb2xvcnMuc2NyZWVuVmlld0J1dHRvbkNvbG9yUHJvcGVydHksXHJcblxyXG4gICAgICAvLyB2b2ljaW5nXHJcbiAgICAgIHZvaWNpbmdIaW50UmVzcG9uc2U6IGhpbnRSZXNwb25zZVN0cmluZ1Byb3BlcnR5XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggbG9ja1RvTWlub3JJbnRlcnZhbHNQcm9wZXJ0eSwgZmFsc2UsIHRydWUsIG9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbE5vZGUgPSBuZXcgVGV4dCggc21hbGxTdGVwc1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgIGZvbnQ6IFF1YWRyaWxhdGVyYWxDb25zdGFudHMuU0NSRUVOX1RFWFRfRk9OVCxcclxuICAgICAgbWF4V2lkdGg6IDEwMCxcclxuICAgICAgbGVmdENlbnRlcjogdGhpcy5yaWdodENlbnRlci5wbHVzWFkoIFF1YWRyaWxhdGVyYWxDb25zdGFudHMuQ09OVFJPTF9MQUJFTF9TUEFDSU5HLCAwIClcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGxhYmVsTm9kZSApO1xyXG5cclxuICAgIC8vIHZvaWNpbmcgLSB1cGRhdGUgZHluYW1pYyBjb250ZW50IGFuZCByZXF1ZXN0IFZvaWNpbmcgd2hlbiB0aGUgY2hhbmdlIGlzIG1hZGVcclxuICAgIGxvY2tUb01pbm9ySW50ZXJ2YWxzUHJvcGVydHkubGluayggbG9ja1RvTWlub3JJbnRlcnZhbHMgPT4ge1xyXG5cclxuICAgICAgdGhpcy52b2ljaW5nTmFtZVJlc3BvbnNlID0gbG9ja1RvTWlub3JJbnRlcnZhbHMgPyBsb2NrZWROYW1lUmVzcG9uc2VTdHJpbmdQcm9wZXJ0eSA6IHVubG9ja2VkTmFtZVJlc3BvbnNlU3RyaW5nUHJvcGVydHk7XHJcbiAgICAgIHRoaXMudm9pY2luZ0NvbnRleHRSZXNwb25zZSA9IGxvY2tUb01pbm9ySW50ZXJ2YWxzID8gbG9ja2VkQ29udGV4dFJlc3BvbnNlU3RyaW5nUHJvcGVydHkgOiB1bmxvY2tlZENvbnRleHRSZXNwb25zZVN0cmluZ1Byb3BlcnR5O1xyXG5cclxuICAgICAgdGhpcy52b2ljaW5nU3BlYWtSZXNwb25zZSgge1xyXG4gICAgICAgIG5hbWVSZXNwb25zZTogdGhpcy52b2ljaW5nTmFtZVJlc3BvbnNlLFxyXG4gICAgICAgIGNvbnRleHRSZXNwb25zZTogdGhpcy52b2ljaW5nQ29udGV4dFJlc3BvbnNlXHJcbiAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnF1YWRyaWxhdGVyYWwucmVnaXN0ZXIoICdTbWFsbFN0ZXBzTG9ja1RvZ2dsZUJ1dHRvbicsIFNtYWxsU3RlcHNMb2NrVG9nZ2xlQnV0dG9uICk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsT0FBT0MsdUJBQXVCLE1BQTBDLHVEQUF1RDtBQUMvSCxTQUFTQyxJQUFJLFFBQVEsbUNBQW1DO0FBQ3hELE9BQU9DLG1CQUFtQixNQUFNLDhCQUE4QjtBQUM5RCxPQUFPQyxzQkFBc0IsTUFBTSxpQ0FBaUM7QUFDcEUsT0FBT0MsU0FBUyxNQUE0Qix1Q0FBdUM7QUFFbkYsT0FBT0Msb0JBQW9CLE1BQU0sK0JBQStCOztBQUVoRTtBQUNBLE1BQU1DLHdCQUF3QixHQUFHRCxvQkFBb0IsQ0FBQ0Msd0JBQXdCO0FBQzlFLE1BQU1DLDBCQUEwQixHQUFHRixvQkFBb0IsQ0FBQ0csSUFBSSxDQUFDQyxPQUFPLENBQUNDLG9CQUFvQixDQUFDSCwwQkFBMEI7QUFDcEgsTUFBTUksZ0NBQWdDLEdBQUdOLG9CQUFvQixDQUFDRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0Msb0JBQW9CLENBQUNDLGdDQUFnQztBQUNoSSxNQUFNQyxrQ0FBa0MsR0FBR1Asb0JBQW9CLENBQUNHLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxvQkFBb0IsQ0FBQ0Usa0NBQWtDO0FBQ3BJLE1BQU1DLG1DQUFtQyxHQUFHUixvQkFBb0IsQ0FBQ0csSUFBSSxDQUFDQyxPQUFPLENBQUNDLG9CQUFvQixDQUFDRyxtQ0FBbUM7QUFDdEksTUFBTUMscUNBQXFDLEdBQUdULG9CQUFvQixDQUFDRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0Msb0JBQW9CLENBQUNJLHFDQUFxQztBQUsxSSxlQUFlLE1BQU1DLDBCQUEwQixTQUFTZix1QkFBdUIsQ0FBVTtFQUNoRmdCLFdBQVdBLENBQUVDLDRCQUErQyxFQUFFQyxlQUFtRCxFQUFHO0lBRXpILE1BQU1DLFVBQVUsR0FBRyxJQUFJcEIsUUFBUSxDQUFFa0IsNEJBQTRCLEVBQUU7TUFBRUcsS0FBSyxFQUFFO0lBQUksQ0FBRSxDQUFDO0lBRS9FLE1BQU1DLE9BQU8sR0FBR2pCLFNBQVMsQ0FBaUYsQ0FBQyxDQUFFO01BQzNHa0IsT0FBTyxFQUFFSCxVQUFVO01BQ25CSSxTQUFTLEVBQUVyQixtQkFBbUIsQ0FBQ3NCLDZCQUE2QjtNQUU1RDtNQUNBQyxtQkFBbUIsRUFBRWxCO0lBQ3ZCLENBQUMsRUFBRVcsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELDRCQUE0QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUVJLE9BQVEsQ0FBQztJQUUzRCxNQUFNSyxTQUFTLEdBQUcsSUFBSXpCLElBQUksQ0FBRUssd0JBQXdCLEVBQUU7TUFDcERxQixJQUFJLEVBQUV4QixzQkFBc0IsQ0FBQ3lCLGdCQUFnQjtNQUM3Q0MsUUFBUSxFQUFFLEdBQUc7TUFDYkMsVUFBVSxFQUFFLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxNQUFNLENBQUU3QixzQkFBc0IsQ0FBQzhCLHFCQUFxQixFQUFFLENBQUU7SUFDdkYsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDQyxRQUFRLENBQUVSLFNBQVUsQ0FBQzs7SUFFMUI7SUFDQVQsNEJBQTRCLENBQUNrQixJQUFJLENBQUVDLG9CQUFvQixJQUFJO01BRXpELElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdELG9CQUFvQixHQUFHekIsZ0NBQWdDLEdBQUdDLGtDQUFrQztNQUN2SCxJQUFJLENBQUMwQixzQkFBc0IsR0FBR0Ysb0JBQW9CLEdBQUd2QixtQ0FBbUMsR0FBR0MscUNBQXFDO01BRWhJLElBQUksQ0FBQ3lCLG9CQUFvQixDQUFFO1FBQ3pCQyxZQUFZLEVBQUUsSUFBSSxDQUFDSCxtQkFBbUI7UUFDdENJLGVBQWUsRUFBRSxJQUFJLENBQUNIO01BQ3hCLENBQUUsQ0FBQztJQUNMLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXhDLGFBQWEsQ0FBQzRDLFFBQVEsQ0FBRSw0QkFBNEIsRUFBRTNCLDBCQUEyQixDQUFDIn0=