// Copyright 2023, University of Colorado Boulder

/**
 * Help content for the KeyboardHelpDialog, describing how to reset the shape and get information about the shape
 * (when Voicing is enabled).
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import KeyboardHelpIconFactory from '../../../../scenery-phet/js/keyboard/help/KeyboardHelpIconFactory.js';
import KeyboardHelpSection from '../../../../scenery-phet/js/keyboard/help/KeyboardHelpSection.js';
import KeyboardHelpSectionRow from '../../../../scenery-phet/js/keyboard/help/KeyboardHelpSectionRow.js';
import LetterKeyNode from '../../../../scenery-phet/js/keyboard/LetterKeyNode.js';
import TextKeyNode from '../../../../scenery-phet/js/keyboard/TextKeyNode.js';
import { voicingManager } from '../../../../scenery/js/imports.js';
import quadrilateral from '../../quadrilateral.js';
import QuadrilateralStrings from '../../QuadrilateralStrings.js';
import QuadrilateralKeyboardHelpContent from './QuadrilateralKeyboardHelpContent.js';

// Voicing is NOT translatable and won't be for a very long time. This content is invisible in non-english locales and
// when Voicing is not supported.
const checkShapeWithVoicingString = 'With Voicing enabled, check shape name or properties';
const checkShapeDescriptionStringProperty = QuadrilateralStrings.a11y.keyboardHelpDialog.checkShapeDescriptionPatternStringProperty;
const resetShapeDescriptionStringProperty = QuadrilateralStrings.a11y.keyboardHelpDialog.resetShapeDescriptionPatternStringProperty;
export default class ShapeShortcutsHelpSection extends KeyboardHelpSection {
  constructor() {
    // command to check current shape with Voicing
    const checkShapeRow = KeyboardHelpSectionRow.labelWithIcon(checkShapeWithVoicingString, KeyboardHelpIconFactory.altPlusIcon(LetterKeyNode.c()), {
      labelOptions: {
        lineWrap: QuadrilateralKeyboardHelpContent.LABEL_LINE_WRAP
      },
      labelInnerContent: StringUtils.fillIn(checkShapeDescriptionStringProperty, {
        altOrOption: TextKeyNode.getAltKeyString()
      })
    });

    // command to reset the shape
    const resetShapeRow = KeyboardHelpSectionRow.labelWithIcon(QuadrilateralStrings.keyboardHelpDialog.resetShapeStringProperty, KeyboardHelpIconFactory.iconPlusIconRow([TextKeyNode.altOrOption(), TextKeyNode.shift(), LetterKeyNode.r()]), {
      labelInnerContent: StringUtils.fillIn(resetShapeDescriptionStringProperty, {
        altOrOption: TextKeyNode.getAltKeyString()
      })
    });
    const contents = [];
    if (voicingManager.initialized) {
      contents.push(checkShapeRow);
    }
    contents.push(resetShapeRow);
    super(QuadrilateralStrings.keyboardHelpDialog.shapeShortcutsStringProperty, contents);
    this.disposeEmitter.addListener(() => contents.forEach(row => row.dispose()));
  }
}
quadrilateral.register('ShapeShortcutsHelpSection', ShapeShortcutsHelpSection);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsIktleWJvYXJkSGVscEljb25GYWN0b3J5IiwiS2V5Ym9hcmRIZWxwU2VjdGlvbiIsIktleWJvYXJkSGVscFNlY3Rpb25Sb3ciLCJMZXR0ZXJLZXlOb2RlIiwiVGV4dEtleU5vZGUiLCJ2b2ljaW5nTWFuYWdlciIsInF1YWRyaWxhdGVyYWwiLCJRdWFkcmlsYXRlcmFsU3RyaW5ncyIsIlF1YWRyaWxhdGVyYWxLZXlib2FyZEhlbHBDb250ZW50IiwiY2hlY2tTaGFwZVdpdGhWb2ljaW5nU3RyaW5nIiwiY2hlY2tTaGFwZURlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJhMTF5Iiwia2V5Ym9hcmRIZWxwRGlhbG9nIiwiY2hlY2tTaGFwZURlc2NyaXB0aW9uUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwicmVzZXRTaGFwZURlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJyZXNldFNoYXBlRGVzY3JpcHRpb25QYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJTaGFwZVNob3J0Y3V0c0hlbHBTZWN0aW9uIiwiY29uc3RydWN0b3IiLCJjaGVja1NoYXBlUm93IiwibGFiZWxXaXRoSWNvbiIsImFsdFBsdXNJY29uIiwiYyIsImxhYmVsT3B0aW9ucyIsImxpbmVXcmFwIiwiTEFCRUxfTElORV9XUkFQIiwibGFiZWxJbm5lckNvbnRlbnQiLCJmaWxsSW4iLCJhbHRPck9wdGlvbiIsImdldEFsdEtleVN0cmluZyIsInJlc2V0U2hhcGVSb3ciLCJyZXNldFNoYXBlU3RyaW5nUHJvcGVydHkiLCJpY29uUGx1c0ljb25Sb3ciLCJzaGlmdCIsInIiLCJjb250ZW50cyIsImluaXRpYWxpemVkIiwicHVzaCIsInNoYXBlU2hvcnRjdXRzU3RyaW5nUHJvcGVydHkiLCJkaXNwb3NlRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZm9yRWFjaCIsInJvdyIsImRpc3Bvc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNoYXBlU2hvcnRjdXRzSGVscFNlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhlbHAgY29udGVudCBmb3IgdGhlIEtleWJvYXJkSGVscERpYWxvZywgZGVzY3JpYmluZyBob3cgdG8gcmVzZXQgdGhlIHNoYXBlIGFuZCBnZXQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNoYXBlXHJcbiAqICh3aGVuIFZvaWNpbmcgaXMgZW5hYmxlZCkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2tleWJvYXJkL2hlbHAvS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkuanMnO1xyXG5pbXBvcnQgS2V5Ym9hcmRIZWxwU2VjdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMva2V5Ym9hcmQvaGVscC9LZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL2tleWJvYXJkL2hlbHAvS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5qcyc7XHJcbmltcG9ydCBMZXR0ZXJLZXlOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlib2FyZC9MZXR0ZXJLZXlOb2RlLmpzJztcclxuaW1wb3J0IFRleHRLZXlOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlib2FyZC9UZXh0S2V5Tm9kZS5qcyc7XHJcbmltcG9ydCB7IHZvaWNpbmdNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHF1YWRyaWxhdGVyYWwgZnJvbSAnLi4vLi4vcXVhZHJpbGF0ZXJhbC5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsU3RyaW5ncyBmcm9tICcuLi8uLi9RdWFkcmlsYXRlcmFsU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsS2V5Ym9hcmRIZWxwQ29udGVudCBmcm9tICcuL1F1YWRyaWxhdGVyYWxLZXlib2FyZEhlbHBDb250ZW50LmpzJztcclxuXHJcbi8vIFZvaWNpbmcgaXMgTk9UIHRyYW5zbGF0YWJsZSBhbmQgd29uJ3QgYmUgZm9yIGEgdmVyeSBsb25nIHRpbWUuIFRoaXMgY29udGVudCBpcyBpbnZpc2libGUgaW4gbm9uLWVuZ2xpc2ggbG9jYWxlcyBhbmRcclxuLy8gd2hlbiBWb2ljaW5nIGlzIG5vdCBzdXBwb3J0ZWQuXHJcbmNvbnN0IGNoZWNrU2hhcGVXaXRoVm9pY2luZ1N0cmluZyA9ICdXaXRoIFZvaWNpbmcgZW5hYmxlZCwgY2hlY2sgc2hhcGUgbmFtZSBvciBwcm9wZXJ0aWVzJztcclxuY29uc3QgY2hlY2tTaGFwZURlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy5jaGVja1NoYXBlRGVzY3JpcHRpb25QYXR0ZXJuU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IHJlc2V0U2hhcGVEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5ID0gUXVhZHJpbGF0ZXJhbFN0cmluZ3MuYTExeS5rZXlib2FyZEhlbHBEaWFsb2cucmVzZXRTaGFwZURlc2NyaXB0aW9uUGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcGVTaG9ydGN1dHNIZWxwU2VjdGlvbiBleHRlbmRzIEtleWJvYXJkSGVscFNlY3Rpb24ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAvLyBjb21tYW5kIHRvIGNoZWNrIGN1cnJlbnQgc2hhcGUgd2l0aCBWb2ljaW5nXHJcbiAgICBjb25zdCBjaGVja1NoYXBlUm93ID0gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5sYWJlbFdpdGhJY29uKFxyXG4gICAgICBjaGVja1NoYXBlV2l0aFZvaWNpbmdTdHJpbmcsXHJcbiAgICAgIEtleWJvYXJkSGVscEljb25GYWN0b3J5LmFsdFBsdXNJY29uKCBMZXR0ZXJLZXlOb2RlLmMoKSApLCB7XHJcbiAgICAgICAgbGFiZWxPcHRpb25zOiB7XHJcbiAgICAgICAgICBsaW5lV3JhcDogUXVhZHJpbGF0ZXJhbEtleWJvYXJkSGVscENvbnRlbnQuTEFCRUxfTElORV9XUkFQXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbElubmVyQ29udGVudDogU3RyaW5nVXRpbHMuZmlsbEluKCBjaGVja1NoYXBlRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgYWx0T3JPcHRpb246IFRleHRLZXlOb2RlLmdldEFsdEtleVN0cmluZygpXHJcbiAgICAgICAgfSApXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gY29tbWFuZCB0byByZXNldCB0aGUgc2hhcGVcclxuICAgIGNvbnN0IHJlc2V0U2hhcGVSb3cgPSBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmxhYmVsV2l0aEljb24oXHJcbiAgICAgIFF1YWRyaWxhdGVyYWxTdHJpbmdzLmtleWJvYXJkSGVscERpYWxvZy5yZXNldFNoYXBlU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIEtleWJvYXJkSGVscEljb25GYWN0b3J5Lmljb25QbHVzSWNvblJvdyhcclxuICAgICAgICBbXHJcbiAgICAgICAgICBUZXh0S2V5Tm9kZS5hbHRPck9wdGlvbigpLFxyXG4gICAgICAgICAgVGV4dEtleU5vZGUuc2hpZnQoKSxcclxuICAgICAgICAgIExldHRlcktleU5vZGUucigpXHJcbiAgICAgICAgXVxyXG4gICAgICApLFxyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFN0cmluZ1V0aWxzLmZpbGxJbiggcmVzZXRTaGFwZURlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIGFsdE9yT3B0aW9uOiBUZXh0S2V5Tm9kZS5nZXRBbHRLZXlTdHJpbmcoKVxyXG4gICAgICAgIH0gKVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnRzOiBLZXlib2FyZEhlbHBTZWN0aW9uUm93W10gPSBbXTtcclxuICAgIGlmICggdm9pY2luZ01hbmFnZXIuaW5pdGlhbGl6ZWQgKSB7XHJcbiAgICAgIGNvbnRlbnRzLnB1c2goIGNoZWNrU2hhcGVSb3cgKTtcclxuICAgIH1cclxuICAgIGNvbnRlbnRzLnB1c2goIHJlc2V0U2hhcGVSb3cgKTtcclxuXHJcbiAgICBzdXBlciggUXVhZHJpbGF0ZXJhbFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLnNoYXBlU2hvcnRjdXRzU3RyaW5nUHJvcGVydHksIGNvbnRlbnRzICk7XHJcbiAgICB0aGlzLmRpc3Bvc2VFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiBjb250ZW50cy5mb3JFYWNoKCByb3cgPT4gcm93LmRpc3Bvc2UoKSApICk7XHJcbiAgfVxyXG59XHJcblxyXG5xdWFkcmlsYXRlcmFsLnJlZ2lzdGVyKCAnU2hhcGVTaG9ydGN1dHNIZWxwU2VjdGlvbicsIFNoYXBlU2hvcnRjdXRzSGVscFNlY3Rpb24gKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLCtDQUErQztBQUN2RSxPQUFPQyx1QkFBdUIsTUFBTSxzRUFBc0U7QUFDMUcsT0FBT0MsbUJBQW1CLE1BQU0sa0VBQWtFO0FBQ2xHLE9BQU9DLHNCQUFzQixNQUFNLHFFQUFxRTtBQUN4RyxPQUFPQyxhQUFhLE1BQU0sdURBQXVEO0FBQ2pGLE9BQU9DLFdBQVcsTUFBTSxxREFBcUQ7QUFDN0UsU0FBU0MsY0FBYyxRQUFRLG1DQUFtQztBQUNsRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUNoRSxPQUFPQyxnQ0FBZ0MsTUFBTSx1Q0FBdUM7O0FBRXBGO0FBQ0E7QUFDQSxNQUFNQywyQkFBMkIsR0FBRyxzREFBc0Q7QUFDMUYsTUFBTUMsbUNBQW1DLEdBQUdILG9CQUFvQixDQUFDSSxJQUFJLENBQUNDLGtCQUFrQixDQUFDQywwQ0FBMEM7QUFDbkksTUFBTUMsbUNBQW1DLEdBQUdQLG9CQUFvQixDQUFDSSxJQUFJLENBQUNDLGtCQUFrQixDQUFDRywwQ0FBMEM7QUFFbkksZUFBZSxNQUFNQyx5QkFBeUIsU0FBU2YsbUJBQW1CLENBQUM7RUFDbEVnQixXQUFXQSxDQUFBLEVBQUc7SUFFbkI7SUFDQSxNQUFNQyxhQUFhLEdBQUdoQixzQkFBc0IsQ0FBQ2lCLGFBQWEsQ0FDeERWLDJCQUEyQixFQUMzQlQsdUJBQXVCLENBQUNvQixXQUFXLENBQUVqQixhQUFhLENBQUNrQixDQUFDLENBQUMsQ0FBRSxDQUFDLEVBQUU7TUFDeERDLFlBQVksRUFBRTtRQUNaQyxRQUFRLEVBQUVmLGdDQUFnQyxDQUFDZ0I7TUFDN0MsQ0FBQztNQUNEQyxpQkFBaUIsRUFBRTFCLFdBQVcsQ0FBQzJCLE1BQU0sQ0FBRWhCLG1DQUFtQyxFQUFFO1FBQzFFaUIsV0FBVyxFQUFFdkIsV0FBVyxDQUFDd0IsZUFBZSxDQUFDO01BQzNDLENBQUU7SUFDSixDQUNGLENBQUM7O0lBRUQ7SUFDQSxNQUFNQyxhQUFhLEdBQUczQixzQkFBc0IsQ0FBQ2lCLGFBQWEsQ0FDeERaLG9CQUFvQixDQUFDSyxrQkFBa0IsQ0FBQ2tCLHdCQUF3QixFQUNoRTlCLHVCQUF1QixDQUFDK0IsZUFBZSxDQUNyQyxDQUNFM0IsV0FBVyxDQUFDdUIsV0FBVyxDQUFDLENBQUMsRUFDekJ2QixXQUFXLENBQUM0QixLQUFLLENBQUMsQ0FBQyxFQUNuQjdCLGFBQWEsQ0FBQzhCLENBQUMsQ0FBQyxDQUFDLENBRXJCLENBQUMsRUFDRDtNQUNFUixpQkFBaUIsRUFBRTFCLFdBQVcsQ0FBQzJCLE1BQU0sQ0FBRVosbUNBQW1DLEVBQUU7UUFDMUVhLFdBQVcsRUFBRXZCLFdBQVcsQ0FBQ3dCLGVBQWUsQ0FBQztNQUMzQyxDQUFFO0lBQ0osQ0FDRixDQUFDO0lBRUQsTUFBTU0sUUFBa0MsR0FBRyxFQUFFO0lBQzdDLElBQUs3QixjQUFjLENBQUM4QixXQUFXLEVBQUc7TUFDaENELFFBQVEsQ0FBQ0UsSUFBSSxDQUFFbEIsYUFBYyxDQUFDO0lBQ2hDO0lBQ0FnQixRQUFRLENBQUNFLElBQUksQ0FBRVAsYUFBYyxDQUFDO0lBRTlCLEtBQUssQ0FBRXRCLG9CQUFvQixDQUFDSyxrQkFBa0IsQ0FBQ3lCLDRCQUE0QixFQUFFSCxRQUFTLENBQUM7SUFDdkYsSUFBSSxDQUFDSSxjQUFjLENBQUNDLFdBQVcsQ0FBRSxNQUFNTCxRQUFRLENBQUNNLE9BQU8sQ0FBRUMsR0FBRyxJQUFJQSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFFLENBQUUsQ0FBQztFQUNuRjtBQUNGO0FBRUFwQyxhQUFhLENBQUNxQyxRQUFRLENBQUUsMkJBQTJCLEVBQUUzQix5QkFBMEIsQ0FBQyJ9