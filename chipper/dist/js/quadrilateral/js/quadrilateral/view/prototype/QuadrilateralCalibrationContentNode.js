// Copyright 2021-2023, University of Colorado Boulder

/**
 * The contents of a Dialog that will support calibrating a device to the simulation. The device is feeding
 * physical values measured by sensors. Those need to be mapped to model coordinates in the sim. We calibrate
 * by asking the user to set their device as large as they can make it. From the largest device values, we can
 * create a linear mapping to model coordinates.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Bounds2 from '../../../../../dot/js/Bounds2.js';
import Utils from '../../../../../dot/js/Utils.js';
import quadrilateral from '../../../quadrilateral.js';
import { Circle, Line, Rectangle, Text, VBox } from '../../../../../scenery/js/imports.js';
import optionize from '../../../../../phet-core/js/optionize.js';
import QuadrilateralConstants from '../../../QuadrilateralConstants.js';
// not translatable because this is a prototype feature.
const calibrationHintText = 'Extend your connected device to the maximum limits and then close this dialog box.';

// We are going to draw circles representing the vertex positions in the dialog, this is their shared radius.
const VERTEX_VIEW_RADIUS = 5;
export default class QuadrilateralCalibrationContentNode extends VBox {
  constructor(tangibleConnectionModel, providedOptions) {
    const options = optionize()({
      align: 'center'
    }, providedOptions);
    const calibrateHintText = new Text(calibrationHintText, QuadrilateralConstants.SCREEN_TEXT_OPTIONS);

    // create a square shape to display the values provided by the quadrilateral model
    const viewBounds = new Bounds2(0, 0, 300, 300);
    const calibrationRectangle = new Rectangle(viewBounds, {
      stroke: 'grey'
    });

    // vertices
    const vertexACircle = new Circle(VERTEX_VIEW_RADIUS, {
      center: viewBounds.leftTop
    });
    const vertexBCircle = new Circle(VERTEX_VIEW_RADIUS, {
      center: viewBounds.rightTop
    });
    const vertexCCircle = new Circle(VERTEX_VIEW_RADIUS, {
      center: viewBounds.rightBottom
    });
    const vertexDCircle = new Circle(VERTEX_VIEW_RADIUS, {
      center: viewBounds.leftBottom
    });
    calibrationRectangle.children = [vertexACircle, vertexBCircle, vertexCCircle, vertexDCircle];

    // display of coordinates
    const dimensionLineOptions = {
      stroke: 'grey'
    };
    const heightTickLine = new Line(0, 0, 0, 300, dimensionLineOptions);
    const bottomTickLine = new Line(0, 0, 10, 0, dimensionLineOptions);
    const topTickLine = new Line(0, 0, 10, 0, dimensionLineOptions);
    const leftSideLengthText = new Text('null', QuadrilateralConstants.SCREEN_TEXT_OPTIONS);
    leftSideLengthText.rotation = -Math.PI / 2;
    bottomTickLine.centerTop = heightTickLine.centerBottom;
    topTickLine.centerBottom = heightTickLine.centerTop;
    heightTickLine.rightCenter = calibrationRectangle.leftCenter.minusXY(15, 0);
    leftSideLengthText.rightCenter = heightTickLine.leftCenter;
    heightTickLine.children = [bottomTickLine, topTickLine, leftSideLengthText];
    calibrationRectangle.addChild(heightTickLine);
    options.children = [calibrateHintText, calibrationRectangle];
    super(options);

    // display device value as sides change
    tangibleConnectionModel.physicalModelBoundsProperty.link(physicalModelBounds => {
      if (physicalModelBounds !== null) {
        leftSideLengthText.string = Utils.toFixed(physicalModelBounds.height, 2);
      }
    });
  }
}
quadrilateral.register('QuadrilateralCalibrationContentNode', QuadrilateralCalibrationContentNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiVXRpbHMiLCJxdWFkcmlsYXRlcmFsIiwiQ2lyY2xlIiwiTGluZSIsIlJlY3RhbmdsZSIsIlRleHQiLCJWQm94Iiwib3B0aW9uaXplIiwiUXVhZHJpbGF0ZXJhbENvbnN0YW50cyIsImNhbGlicmF0aW9uSGludFRleHQiLCJWRVJURVhfVklFV19SQURJVVMiLCJRdWFkcmlsYXRlcmFsQ2FsaWJyYXRpb25Db250ZW50Tm9kZSIsImNvbnN0cnVjdG9yIiwidGFuZ2libGVDb25uZWN0aW9uTW9kZWwiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxpZ24iLCJjYWxpYnJhdGVIaW50VGV4dCIsIlNDUkVFTl9URVhUX09QVElPTlMiLCJ2aWV3Qm91bmRzIiwiY2FsaWJyYXRpb25SZWN0YW5nbGUiLCJzdHJva2UiLCJ2ZXJ0ZXhBQ2lyY2xlIiwiY2VudGVyIiwibGVmdFRvcCIsInZlcnRleEJDaXJjbGUiLCJyaWdodFRvcCIsInZlcnRleENDaXJjbGUiLCJyaWdodEJvdHRvbSIsInZlcnRleERDaXJjbGUiLCJsZWZ0Qm90dG9tIiwiY2hpbGRyZW4iLCJkaW1lbnNpb25MaW5lT3B0aW9ucyIsImhlaWdodFRpY2tMaW5lIiwiYm90dG9tVGlja0xpbmUiLCJ0b3BUaWNrTGluZSIsImxlZnRTaWRlTGVuZ3RoVGV4dCIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwiY2VudGVyVG9wIiwiY2VudGVyQm90dG9tIiwicmlnaHRDZW50ZXIiLCJsZWZ0Q2VudGVyIiwibWludXNYWSIsImFkZENoaWxkIiwicGh5c2ljYWxNb2RlbEJvdW5kc1Byb3BlcnR5IiwibGluayIsInBoeXNpY2FsTW9kZWxCb3VuZHMiLCJzdHJpbmciLCJ0b0ZpeGVkIiwiaGVpZ2h0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJRdWFkcmlsYXRlcmFsQ2FsaWJyYXRpb25Db250ZW50Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgY29udGVudHMgb2YgYSBEaWFsb2cgdGhhdCB3aWxsIHN1cHBvcnQgY2FsaWJyYXRpbmcgYSBkZXZpY2UgdG8gdGhlIHNpbXVsYXRpb24uIFRoZSBkZXZpY2UgaXMgZmVlZGluZ1xyXG4gKiBwaHlzaWNhbCB2YWx1ZXMgbWVhc3VyZWQgYnkgc2Vuc29ycy4gVGhvc2UgbmVlZCB0byBiZSBtYXBwZWQgdG8gbW9kZWwgY29vcmRpbmF0ZXMgaW4gdGhlIHNpbS4gV2UgY2FsaWJyYXRlXHJcbiAqIGJ5IGFza2luZyB0aGUgdXNlciB0byBzZXQgdGhlaXIgZGV2aWNlIGFzIGxhcmdlIGFzIHRoZXkgY2FuIG1ha2UgaXQuIEZyb20gdGhlIGxhcmdlc3QgZGV2aWNlIHZhbHVlcywgd2UgY2FuXHJcbiAqIGNyZWF0ZSBhIGxpbmVhciBtYXBwaW5nIHRvIG1vZGVsIGNvb3JkaW5hdGVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgcXVhZHJpbGF0ZXJhbCBmcm9tICcuLi8uLi8uLi9xdWFkcmlsYXRlcmFsLmpzJztcclxuaW1wb3J0IHsgQ2lyY2xlLCBMaW5lLCBSZWN0YW5nbGUsIFRleHQsIFZCb3gsIFZCb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uL1F1YWRyaWxhdGVyYWxDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgVGFuZ2libGVDb25uZWN0aW9uTW9kZWwgZnJvbSAnLi4vLi4vbW9kZWwvcHJvdG90eXBlL1RhbmdpYmxlQ29ubmVjdGlvbk1vZGVsLmpzJztcclxuXHJcbi8vIG5vdCB0cmFuc2xhdGFibGUgYmVjYXVzZSB0aGlzIGlzIGEgcHJvdG90eXBlIGZlYXR1cmUuXHJcbmNvbnN0IGNhbGlicmF0aW9uSGludFRleHQgPSAnRXh0ZW5kIHlvdXIgY29ubmVjdGVkIGRldmljZSB0byB0aGUgbWF4aW11bSBsaW1pdHMgYW5kIHRoZW4gY2xvc2UgdGhpcyBkaWFsb2cgYm94Lic7XHJcblxyXG4vLyBXZSBhcmUgZ29pbmcgdG8gZHJhdyBjaXJjbGVzIHJlcHJlc2VudGluZyB0aGUgdmVydGV4IHBvc2l0aW9ucyBpbiB0aGUgZGlhbG9nLCB0aGlzIGlzIHRoZWlyIHNoYXJlZCByYWRpdXMuXHJcbmNvbnN0IFZFUlRFWF9WSUVXX1JBRElVUyA9IDU7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWFkcmlsYXRlcmFsQ2FsaWJyYXRpb25Db250ZW50Tm9kZSBleHRlbmRzIFZCb3gge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZ2libGVDb25uZWN0aW9uTW9kZWw6IFRhbmdpYmxlQ29ubmVjdGlvbk1vZGVsLCBwcm92aWRlZE9wdGlvbnM/OiBWQm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFZCb3hPcHRpb25zLCBFbXB0eVNlbGZPcHRpb25zPigpKCB7XHJcbiAgICAgIGFsaWduOiAnY2VudGVyJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgY2FsaWJyYXRlSGludFRleHQgPSBuZXcgVGV4dCggY2FsaWJyYXRpb25IaW50VGV4dCwgUXVhZHJpbGF0ZXJhbENvbnN0YW50cy5TQ1JFRU5fVEVYVF9PUFRJT05TICk7XHJcblxyXG4gICAgLy8gY3JlYXRlIGEgc3F1YXJlIHNoYXBlIHRvIGRpc3BsYXkgdGhlIHZhbHVlcyBwcm92aWRlZCBieSB0aGUgcXVhZHJpbGF0ZXJhbCBtb2RlbFxyXG4gICAgY29uc3Qgdmlld0JvdW5kcyA9IG5ldyBCb3VuZHMyKCAwLCAwLCAzMDAsIDMwMCApO1xyXG4gICAgY29uc3QgY2FsaWJyYXRpb25SZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCB2aWV3Qm91bmRzLCB7XHJcbiAgICAgIHN0cm9rZTogJ2dyZXknXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gdmVydGljZXNcclxuICAgIGNvbnN0IHZlcnRleEFDaXJjbGUgPSBuZXcgQ2lyY2xlKCBWRVJURVhfVklFV19SQURJVVMsIHtcclxuICAgICAgY2VudGVyOiB2aWV3Qm91bmRzLmxlZnRUb3BcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IHZlcnRleEJDaXJjbGUgPSBuZXcgQ2lyY2xlKCBWRVJURVhfVklFV19SQURJVVMsIHtcclxuICAgICAgY2VudGVyOiB2aWV3Qm91bmRzLnJpZ2h0VG9wXHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCB2ZXJ0ZXhDQ2lyY2xlID0gbmV3IENpcmNsZSggVkVSVEVYX1ZJRVdfUkFESVVTLCB7XHJcbiAgICAgIGNlbnRlcjogdmlld0JvdW5kcy5yaWdodEJvdHRvbVxyXG4gICAgfSApO1xyXG4gICAgY29uc3QgdmVydGV4RENpcmNsZSA9IG5ldyBDaXJjbGUoIFZFUlRFWF9WSUVXX1JBRElVUywge1xyXG4gICAgICBjZW50ZXI6IHZpZXdCb3VuZHMubGVmdEJvdHRvbVxyXG4gICAgfSApO1xyXG4gICAgY2FsaWJyYXRpb25SZWN0YW5nbGUuY2hpbGRyZW4gPSBbIHZlcnRleEFDaXJjbGUsIHZlcnRleEJDaXJjbGUsIHZlcnRleENDaXJjbGUsIHZlcnRleERDaXJjbGUgXTtcclxuXHJcbiAgICAvLyBkaXNwbGF5IG9mIGNvb3JkaW5hdGVzXHJcbiAgICBjb25zdCBkaW1lbnNpb25MaW5lT3B0aW9ucyA9IHsgc3Ryb2tlOiAnZ3JleScgfTtcclxuICAgIGNvbnN0IGhlaWdodFRpY2tMaW5lID0gbmV3IExpbmUoIDAsIDAsIDAsIDMwMCwgZGltZW5zaW9uTGluZU9wdGlvbnMgKTtcclxuICAgIGNvbnN0IGJvdHRvbVRpY2tMaW5lID0gbmV3IExpbmUoIDAsIDAsIDEwLCAwLCBkaW1lbnNpb25MaW5lT3B0aW9ucyApO1xyXG4gICAgY29uc3QgdG9wVGlja0xpbmUgPSBuZXcgTGluZSggMCwgMCwgMTAsIDAsIGRpbWVuc2lvbkxpbmVPcHRpb25zICk7XHJcbiAgICBjb25zdCBsZWZ0U2lkZUxlbmd0aFRleHQgPSBuZXcgVGV4dCggJ251bGwnLCBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzLlNDUkVFTl9URVhUX09QVElPTlMgKTtcclxuICAgIGxlZnRTaWRlTGVuZ3RoVGV4dC5yb3RhdGlvbiA9IC1NYXRoLlBJIC8gMjtcclxuXHJcbiAgICBib3R0b21UaWNrTGluZS5jZW50ZXJUb3AgPSBoZWlnaHRUaWNrTGluZS5jZW50ZXJCb3R0b207XHJcbiAgICB0b3BUaWNrTGluZS5jZW50ZXJCb3R0b20gPSBoZWlnaHRUaWNrTGluZS5jZW50ZXJUb3A7XHJcbiAgICBoZWlnaHRUaWNrTGluZS5yaWdodENlbnRlciA9IGNhbGlicmF0aW9uUmVjdGFuZ2xlLmxlZnRDZW50ZXIubWludXNYWSggMTUsIDAgKTtcclxuICAgIGxlZnRTaWRlTGVuZ3RoVGV4dC5yaWdodENlbnRlciA9IGhlaWdodFRpY2tMaW5lLmxlZnRDZW50ZXI7XHJcblxyXG4gICAgaGVpZ2h0VGlja0xpbmUuY2hpbGRyZW4gPSBbIGJvdHRvbVRpY2tMaW5lLCB0b3BUaWNrTGluZSwgbGVmdFNpZGVMZW5ndGhUZXh0IF07XHJcblxyXG4gICAgY2FsaWJyYXRpb25SZWN0YW5nbGUuYWRkQ2hpbGQoIGhlaWdodFRpY2tMaW5lICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFtcclxuICAgICAgY2FsaWJyYXRlSGludFRleHQsXHJcbiAgICAgIGNhbGlicmF0aW9uUmVjdGFuZ2xlXHJcbiAgICBdO1xyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBkaXNwbGF5IGRldmljZSB2YWx1ZSBhcyBzaWRlcyBjaGFuZ2VcclxuICAgIHRhbmdpYmxlQ29ubmVjdGlvbk1vZGVsLnBoeXNpY2FsTW9kZWxCb3VuZHNQcm9wZXJ0eS5saW5rKCBwaHlzaWNhbE1vZGVsQm91bmRzID0+IHtcclxuICAgICAgaWYgKCBwaHlzaWNhbE1vZGVsQm91bmRzICE9PSBudWxsICkge1xyXG4gICAgICAgIGxlZnRTaWRlTGVuZ3RoVGV4dC5zdHJpbmcgPSBVdGlscy50b0ZpeGVkKCBwaHlzaWNhbE1vZGVsQm91bmRzLmhlaWdodCwgMiApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5xdWFkcmlsYXRlcmFsLnJlZ2lzdGVyKCAnUXVhZHJpbGF0ZXJhbENhbGlicmF0aW9uQ29udGVudE5vZGUnLCBRdWFkcmlsYXRlcmFsQ2FsaWJyYXRpb25Db250ZW50Tm9kZSApO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsT0FBTyxNQUFNLGtDQUFrQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLGFBQWEsTUFBTSwyQkFBMkI7QUFDckQsU0FBU0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQXFCLHNDQUFzQztBQUN2RyxPQUFPQyxTQUFTLE1BQTRCLDBDQUEwQztBQUN0RixPQUFPQyxzQkFBc0IsTUFBTSxvQ0FBb0M7QUFHdkU7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxvRkFBb0Y7O0FBRWhIO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsQ0FBQztBQUU1QixlQUFlLE1BQU1DLG1DQUFtQyxTQUFTTCxJQUFJLENBQUM7RUFDN0RNLFdBQVdBLENBQUVDLHVCQUFn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