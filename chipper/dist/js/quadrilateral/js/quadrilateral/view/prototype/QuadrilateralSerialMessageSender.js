// Copyright 2023, University of Colorado Boulder

/**
 * A class that will send a representation of the model to a parent iframe that will eventually send values
 * to a tangible device over serial connection.
 *
 * This prototype was quickly thrown together based on a Medium tutorial at
 * https://medium.com/@yyyyyyyuan/tutorial-serial-communication-with-arduino-and-p5-js-cd39b3ac10ce
 *
 * Basically it works by
 * 1) The sim runs in an iframe in a parent p5.js wrapper.
 * 2) A button in the sim sends values representing the shape of the quadrilateral to parent window with `postMessage`.
 * 2) The wrapper uses p5 modules to send values to another app, which forwards to an arduino over serial communication.
 * 3) The arduino receives the values and begins to actuate to physically reproduce the quadrilateral shape.
 *
 * Exploration happened in https://github.com/phetsims/quadrilateral/issues/341.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Utils from '../../../../../dot/js/Utils.js';
import quadrilateral from '../../../quadrilateral.js';
export default class QuadrilateralSerialMessageSender {
  constructor(tangibleConnectionModel) {
    this.shapeModel = tangibleConnectionModel.shapeModel;
  }

  /**
   * Sends a message to a parent window (p5.js wrapper) with model values. The p5.js wrapper forwards
   * the data to an actuated device with a serial connection.
   *
   * '(topLength,rightLength,bottomLength,leftLength,topLeftAngle,bottomRightAngle)'
   *
   * The device then parses this string and sets values accordingly.
   */
  sendModelValuesString() {
    const topLength = this.formatValue(this.shapeModel.sideAB.lengthProperty.value);
    const rightLength = this.formatValue(this.shapeModel.sideBC.lengthProperty.value);
    const bottomLength = this.formatValue(this.shapeModel.sideCD.lengthProperty.value);
    const leftLength = this.formatValue(this.shapeModel.sideDA.lengthProperty.value);
    const topLeftAngle = this.formatValue(this.shapeModel.vertexA.angleProperty.value);
    const bottomRightAngle = this.formatValue(this.shapeModel.vertexC.angleProperty.value);
    const valuesString = `(${topLength},${rightLength},${bottomLength},${leftLength},${topLeftAngle},${bottomRightAngle})`;
    const parent = window.parent;
    parent.postMessage(valuesString, '*');
  }

  /**
   * Limits a model value to two decimal places to send a smaller string to the wrapper (and eventually to
   * the actuated tangible device). I don't know if this is necessary, but it seems reasonable.
   */
  formatValue(value) {
    return Utils.toFixedNumber(value, 2);
  }
}
quadrilateral.register('QuadrilateralSerialMessageSender', QuadrilateralSerialMessageSender);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsInF1YWRyaWxhdGVyYWwiLCJRdWFkcmlsYXRlcmFsU2VyaWFsTWVzc2FnZVNlbmRlciIsImNvbnN0cnVjdG9yIiwidGFuZ2libGVDb25uZWN0aW9uTW9kZWwiLCJzaGFwZU1vZGVsIiwic2VuZE1vZGVsVmFsdWVzU3RyaW5nIiwidG9wTGVuZ3RoIiwiZm9ybWF0VmFsdWUiLCJzaWRlQUIiLCJsZW5ndGhQcm9wZXJ0eSIsInZhbHVlIiwicmlnaHRMZW5ndGgiLCJzaWRlQkMiLCJib3R0b21MZW5ndGgiLCJzaWRlQ0QiLCJsZWZ0TGVuZ3RoIiwic2lkZURBIiwidG9wTGVmdEFuZ2xlIiwidmVydGV4QSIsImFuZ2xlUHJvcGVydHkiLCJib3R0b21SaWdodEFuZ2xlIiwidmVydGV4QyIsInZhbHVlc1N0cmluZyIsInBhcmVudCIsIndpbmRvdyIsInBvc3RNZXNzYWdlIiwidG9GaXhlZE51bWJlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUXVhZHJpbGF0ZXJhbFNlcmlhbE1lc3NhZ2VTZW5kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCB3aWxsIHNlbmQgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgdG8gYSBwYXJlbnQgaWZyYW1lIHRoYXQgd2lsbCBldmVudHVhbGx5IHNlbmQgdmFsdWVzXHJcbiAqIHRvIGEgdGFuZ2libGUgZGV2aWNlIG92ZXIgc2VyaWFsIGNvbm5lY3Rpb24uXHJcbiAqXHJcbiAqIFRoaXMgcHJvdG90eXBlIHdhcyBxdWlja2x5IHRocm93biB0b2dldGhlciBiYXNlZCBvbiBhIE1lZGl1bSB0dXRvcmlhbCBhdFxyXG4gKiBodHRwczovL21lZGl1bS5jb20vQHl5eXl5eXl1YW4vdHV0b3JpYWwtc2VyaWFsLWNvbW11bmljYXRpb24td2l0aC1hcmR1aW5vLWFuZC1wNS1qcy1jZDM5YjNhYzEwY2VcclxuICpcclxuICogQmFzaWNhbGx5IGl0IHdvcmtzIGJ5XHJcbiAqIDEpIFRoZSBzaW0gcnVucyBpbiBhbiBpZnJhbWUgaW4gYSBwYXJlbnQgcDUuanMgd3JhcHBlci5cclxuICogMikgQSBidXR0b24gaW4gdGhlIHNpbSBzZW5kcyB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSBzaGFwZSBvZiB0aGUgcXVhZHJpbGF0ZXJhbCB0byBwYXJlbnQgd2luZG93IHdpdGggYHBvc3RNZXNzYWdlYC5cclxuICogMikgVGhlIHdyYXBwZXIgdXNlcyBwNSBtb2R1bGVzIHRvIHNlbmQgdmFsdWVzIHRvIGFub3RoZXIgYXBwLCB3aGljaCBmb3J3YXJkcyB0byBhbiBhcmR1aW5vIG92ZXIgc2VyaWFsIGNvbW11bmljYXRpb24uXHJcbiAqIDMpIFRoZSBhcmR1aW5vIHJlY2VpdmVzIHRoZSB2YWx1ZXMgYW5kIGJlZ2lucyB0byBhY3R1YXRlIHRvIHBoeXNpY2FsbHkgcmVwcm9kdWNlIHRoZSBxdWFkcmlsYXRlcmFsIHNoYXBlLlxyXG4gKlxyXG4gKiBFeHBsb3JhdGlvbiBoYXBwZW5lZCBpbiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcXVhZHJpbGF0ZXJhbC9pc3N1ZXMvMzQxLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IHF1YWRyaWxhdGVyYWwgZnJvbSAnLi4vLi4vLi4vcXVhZHJpbGF0ZXJhbC5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsU2hhcGVNb2RlbCBmcm9tICcuLi8uLi9tb2RlbC9RdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5qcyc7XHJcbmltcG9ydCBUYW5naWJsZUNvbm5lY3Rpb25Nb2RlbCBmcm9tICcuLi8uLi9tb2RlbC9wcm90b3R5cGUvVGFuZ2libGVDb25uZWN0aW9uTW9kZWwuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVhZHJpbGF0ZXJhbFNlcmlhbE1lc3NhZ2VTZW5kZXIge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc2hhcGVNb2RlbDogUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWw7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdGFuZ2libGVDb25uZWN0aW9uTW9kZWw6IFRhbmdpYmxlQ29ubmVjdGlvbk1vZGVsICkge1xyXG4gICAgdGhpcy5zaGFwZU1vZGVsID0gdGFuZ2libGVDb25uZWN0aW9uTW9kZWwuc2hhcGVNb2RlbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmRzIGEgbWVzc2FnZSB0byBhIHBhcmVudCB3aW5kb3cgKHA1LmpzIHdyYXBwZXIpIHdpdGggbW9kZWwgdmFsdWVzLiBUaGUgcDUuanMgd3JhcHBlciBmb3J3YXJkc1xyXG4gICAqIHRoZSBkYXRhIHRvIGFuIGFjdHVhdGVkIGRldmljZSB3aXRoIGEgc2VyaWFsIGNvbm5lY3Rpb24uXHJcbiAgICpcclxuICAgKiAnKHRvcExlbmd0aCxyaWdodExlbmd0aCxib3R0b21MZW5ndGgsbGVmdExlbmd0aCx0b3BMZWZ0QW5nbGUsYm90dG9tUmlnaHRBbmdsZSknXHJcbiAgICpcclxuICAgKiBUaGUgZGV2aWNlIHRoZW4gcGFyc2VzIHRoaXMgc3RyaW5nIGFuZCBzZXRzIHZhbHVlcyBhY2NvcmRpbmdseS5cclxuICAgKi9cclxuICBwdWJsaWMgc2VuZE1vZGVsVmFsdWVzU3RyaW5nKCk6IHZvaWQge1xyXG4gICAgY29uc3QgdG9wTGVuZ3RoID0gdGhpcy5mb3JtYXRWYWx1ZSggdGhpcy5zaGFwZU1vZGVsLnNpZGVBQi5sZW5ndGhQcm9wZXJ0eS52YWx1ZSApO1xyXG4gICAgY29uc3QgcmlnaHRMZW5ndGggPSB0aGlzLmZvcm1hdFZhbHVlKCB0aGlzLnNoYXBlTW9kZWwuc2lkZUJDLmxlbmd0aFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICBjb25zdCBib3R0b21MZW5ndGggPSB0aGlzLmZvcm1hdFZhbHVlKCB0aGlzLnNoYXBlTW9kZWwuc2lkZUNELmxlbmd0aFByb3BlcnR5LnZhbHVlICk7XHJcbiAgICBjb25zdCBsZWZ0TGVuZ3RoID0gdGhpcy5mb3JtYXRWYWx1ZSggdGhpcy5zaGFwZU1vZGVsLnNpZGVEQS5sZW5ndGhQcm9wZXJ0eS52YWx1ZSApO1xyXG5cclxuICAgIGNvbnN0IHRvcExlZnRBbmdsZSA9IHRoaXMuZm9ybWF0VmFsdWUoIHRoaXMuc2hhcGVNb2RlbC52ZXJ0ZXhBLmFuZ2xlUHJvcGVydHkudmFsdWUhICk7XHJcbiAgICBjb25zdCBib3R0b21SaWdodEFuZ2xlID0gdGhpcy5mb3JtYXRWYWx1ZSggdGhpcy5zaGFwZU1vZGVsLnZlcnRleEMuYW5nbGVQcm9wZXJ0eS52YWx1ZSEgKTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZXNTdHJpbmcgPSBgKCR7dG9wTGVuZ3RofSwke3JpZ2h0TGVuZ3RofSwke2JvdHRvbUxlbmd0aH0sJHtsZWZ0TGVuZ3RofSwke3RvcExlZnRBbmdsZX0sJHtib3R0b21SaWdodEFuZ2xlfSlgO1xyXG5cclxuICAgIGNvbnN0IHBhcmVudCA9IHdpbmRvdy5wYXJlbnQ7XHJcbiAgICBwYXJlbnQucG9zdE1lc3NhZ2UoIHZhbHVlc1N0cmluZywgJyonICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaW1pdHMgYSBtb2RlbCB2YWx1ZSB0byB0d28gZGVjaW1hbCBwbGFjZXMgdG8gc2VuZCBhIHNtYWxsZXIgc3RyaW5nIHRvIHRoZSB3cmFwcGVyIChhbmQgZXZlbnR1YWxseSB0b1xyXG4gICAqIHRoZSBhY3R1YXRlZCB0YW5naWJsZSBkZXZpY2UpLiBJIGRvbid0IGtub3cgaWYgdGhpcyBpcyBuZWNlc3NhcnksIGJ1dCBpdCBzZWVtcyByZWFzb25hYmxlLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZm9ybWF0VmFsdWUoIHZhbHVlOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBVdGlscy50b0ZpeGVkTnVtYmVyKCB2YWx1ZSwgMiApO1xyXG4gIH1cclxufVxyXG5cclxucXVhZHJpbGF0ZXJhbC5yZWdpc3RlciggJ1F1YWRyaWxhdGVyYWxTZXJpYWxNZXNzYWdlU2VuZGVyJywgUXVhZHJpbGF0ZXJhbFNlcmlhbE1lc3NhZ2VTZW5kZXIgKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsYUFBYSxNQUFNLDJCQUEyQjtBQUlyRCxlQUFlLE1BQU1DLGdDQUFnQyxDQUFDO0VBRzdDQyxXQUFXQSxDQUFFQyx1QkFBZ0QsRUFBRztJQUNyRSxJQUFJLENBQUNDLFVBQVUsR0FBR0QsdUJBQXVCLENBQUNDLFVBQVU7RUFDdEQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTQyxxQkFBcUJBLENBQUEsRUFBUztJQUNuQyxNQUFNQyxTQUFTLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUUsSUFBSSxDQUFDSCxVQUFVLENBQUNJLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxLQUFNLENBQUM7SUFDakYsTUFBTUMsV0FBVyxHQUFHLElBQUksQ0FBQ0osV0FBVyxDQUFFLElBQUksQ0FBQ0gsVUFBVSxDQUFDUSxNQUFNLENBQUNILGNBQWMsQ0FBQ0MsS0FBTSxDQUFDO0lBQ25GLE1BQU1HLFlBQVksR0FBRyxJQUFJLENBQUNOLFdBQVcsQ0FBRSxJQUFJLENBQUNILFVBQVUsQ0FBQ1UsTUFBTSxDQUFDTCxjQUFjLENBQUNDLEtBQU0sQ0FBQztJQUNwRixNQUFNSyxVQUFVLEdBQUcsSUFBSSxDQUFDUixXQUFXLENBQUUsSUFBSSxDQUFDSCxVQUFVLENBQUNZLE1BQU0sQ0FBQ1AsY0FBYyxDQUFDQyxLQUFNLENBQUM7SUFFbEYsTUFBTU8sWUFBWSxHQUFHLElBQUksQ0FBQ1YsV0FBVyxDQUFFLElBQUksQ0FBQ0gsVUFBVSxDQUFDYyxPQUFPLENBQUNDLGFBQWEsQ0FBQ1QsS0FBTyxDQUFDO0lBQ3JGLE1BQU1VLGdCQUFnQixHQUFHLElBQUksQ0FBQ2IsV0FBVyxDQUFFLElBQUksQ0FBQ0gsVUFBVSxDQUFDaUIsT0FBTyxDQUFDRixhQUFhLENBQUNULEtBQU8sQ0FBQztJQUV6RixNQUFNWSxZQUFZLEdBQUksSUFBR2hCLFNBQVUsSUFBR0ssV0FBWSxJQUFHRSxZQUFhLElBQUdFLFVBQVcsSUFBR0UsWUFBYSxJQUFHRyxnQkFBaUIsR0FBRTtJQUV0SCxNQUFNRyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0QsTUFBTTtJQUM1QkEsTUFBTSxDQUFDRSxXQUFXLENBQUVILFlBQVksRUFBRSxHQUFJLENBQUM7RUFDekM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDVWYsV0FBV0EsQ0FBRUcsS0FBYSxFQUFXO0lBQzNDLE9BQU9YLEtBQUssQ0FBQzJCLGFBQWEsQ0FBRWhCLEtBQUssRUFBRSxDQUFFLENBQUM7RUFDeEM7QUFDRjtBQUVBVixhQUFhLENBQUMyQixRQUFRLENBQUUsa0NBQWtDLEVBQUUxQixnQ0FBaUMsQ0FBQyJ9