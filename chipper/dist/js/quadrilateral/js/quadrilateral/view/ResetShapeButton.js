// Copyright 2022-2023, University of Colorado Boulder

/**
 * A button that will reset just the quadrilateral shape.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import TextPushButton from '../../../../sun/js/buttons/TextPushButton.js';
import QuadrilateralColors from '../../QuadrilateralColors.js';
import QuadrilateralConstants from '../../QuadrilateralConstants.js';
import quadrilateral from '../../quadrilateral.js';
import QuadrilateralStrings from '../../QuadrilateralStrings.js';
import QuadrilateralDescriber from './QuadrilateralDescriber.js';
export default class ResetShapeButton extends TextPushButton {
  constructor(quadrilateralShapeModel, tandem) {
    super(QuadrilateralStrings.resetShapeStringProperty, {
      font: QuadrilateralConstants.SCREEN_TEXT_OPTIONS.font,
      cornerRadius: QuadrilateralConstants.CORNER_RADIUS,
      baseColor: QuadrilateralColors.quadrilateralShapeColorProperty,
      // i18n
      maxTextWidth: 120,
      // voicing
      voicingNameResponse: QuadrilateralDescriber.RESET_SHAPE_RESPONSE_PACKET.nameResponse,
      voicingContextResponse: QuadrilateralDescriber.RESET_SHAPE_RESPONSE_PACKET.contextResponse,
      // phet-io
      tandem: tandem,
      listener: () => {
        quadrilateralShapeModel.isolatedReset();
        this.voicingSpeakFullResponse({
          // don't repeat the hint content on activation since the button has been pressed
          hintResponse: null
        });
      }
    });
  }
}
quadrilateral.register('ResetShapeButton', ResetShapeButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXh0UHVzaEJ1dHRvbiIsIlF1YWRyaWxhdGVyYWxDb2xvcnMiLCJRdWFkcmlsYXRlcmFsQ29uc3RhbnRzIiwicXVhZHJpbGF0ZXJhbCIsIlF1YWRyaWxhdGVyYWxTdHJpbmdzIiwiUXVhZHJpbGF0ZXJhbERlc2NyaWJlciIsIlJlc2V0U2hhcGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsIiwidGFuZGVtIiwicmVzZXRTaGFwZVN0cmluZ1Byb3BlcnR5IiwiZm9udCIsIlNDUkVFTl9URVhUX09QVElPTlMiLCJjb3JuZXJSYWRpdXMiLCJDT1JORVJfUkFESVVTIiwiYmFzZUNvbG9yIiwicXVhZHJpbGF0ZXJhbFNoYXBlQ29sb3JQcm9wZXJ0eSIsIm1heFRleHRXaWR0aCIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJSRVNFVF9TSEFQRV9SRVNQT05TRV9QQUNLRVQiLCJuYW1lUmVzcG9uc2UiLCJ2b2ljaW5nQ29udGV4dFJlc3BvbnNlIiwiY29udGV4dFJlc3BvbnNlIiwibGlzdGVuZXIiLCJpc29sYXRlZFJlc2V0Iiwidm9pY2luZ1NwZWFrRnVsbFJlc3BvbnNlIiwiaGludFJlc3BvbnNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZXNldFNoYXBlQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgYnV0dG9uIHRoYXQgd2lsbCByZXNldCBqdXN0IHRoZSBxdWFkcmlsYXRlcmFsIHNoYXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVGV4dFB1c2hCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvVGV4dFB1c2hCdXR0b24uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbENvbG9ycyBmcm9tICcuLi8uLi9RdWFkcmlsYXRlcmFsQ29sb3JzLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxDb25zdGFudHMgZnJvbSAnLi4vLi4vUXVhZHJpbGF0ZXJhbENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBxdWFkcmlsYXRlcmFsIGZyb20gJy4uLy4uL3F1YWRyaWxhdGVyYWwuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbFN0cmluZ3MgZnJvbSAnLi4vLi4vUXVhZHJpbGF0ZXJhbFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwgZnJvbSAnLi4vbW9kZWwvUXVhZHJpbGF0ZXJhbFNoYXBlTW9kZWwuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbERlc2NyaWJlciBmcm9tICcuL1F1YWRyaWxhdGVyYWxEZXNjcmliZXIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzZXRTaGFwZUJ1dHRvbiBleHRlbmRzIFRleHRQdXNoQnV0dG9uIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHF1YWRyaWxhdGVyYWxTaGFwZU1vZGVsOiBRdWFkcmlsYXRlcmFsU2hhcGVNb2RlbCwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcbiAgICBzdXBlciggUXVhZHJpbGF0ZXJhbFN0cmluZ3MucmVzZXRTaGFwZVN0cmluZ1Byb3BlcnR5LCB7XHJcblxyXG4gICAgICBmb250OiBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzLlNDUkVFTl9URVhUX09QVElPTlMuZm9udCxcclxuICAgICAgY29ybmVyUmFkaXVzOiBRdWFkcmlsYXRlcmFsQ29uc3RhbnRzLkNPUk5FUl9SQURJVVMsXHJcbiAgICAgIGJhc2VDb2xvcjogUXVhZHJpbGF0ZXJhbENvbG9ycy5xdWFkcmlsYXRlcmFsU2hhcGVDb2xvclByb3BlcnR5LFxyXG5cclxuICAgICAgLy8gaTE4blxyXG4gICAgICBtYXhUZXh0V2lkdGg6IDEyMCxcclxuXHJcbiAgICAgIC8vIHZvaWNpbmdcclxuICAgICAgdm9pY2luZ05hbWVSZXNwb25zZTogUXVhZHJpbGF0ZXJhbERlc2NyaWJlci5SRVNFVF9TSEFQRV9SRVNQT05TRV9QQUNLRVQubmFtZVJlc3BvbnNlLFxyXG4gICAgICB2b2ljaW5nQ29udGV4dFJlc3BvbnNlOiBRdWFkcmlsYXRlcmFsRGVzY3JpYmVyLlJFU0VUX1NIQVBFX1JFU1BPTlNFX1BBQ0tFVC5jb250ZXh0UmVzcG9uc2UsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG5cclxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgICBxdWFkcmlsYXRlcmFsU2hhcGVNb2RlbC5pc29sYXRlZFJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy52b2ljaW5nU3BlYWtGdWxsUmVzcG9uc2UoIHtcclxuXHJcbiAgICAgICAgICAvLyBkb24ndCByZXBlYXQgdGhlIGhpbnQgY29udGVudCBvbiBhY3RpdmF0aW9uIHNpbmNlIHRoZSBidXR0b24gaGFzIGJlZW4gcHJlc3NlZFxyXG4gICAgICAgICAgaGludFJlc3BvbnNlOiBudWxsXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5xdWFkcmlsYXRlcmFsLnJlZ2lzdGVyKCAnUmVzZXRTaGFwZUJ1dHRvbicsIFJlc2V0U2hhcGVCdXR0b24gKTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSw4Q0FBOEM7QUFFekUsT0FBT0MsbUJBQW1CLE1BQU0sOEJBQThCO0FBQzlELE9BQU9DLHNCQUFzQixNQUFNLGlDQUFpQztBQUNwRSxPQUFPQyxhQUFhLE1BQU0sd0JBQXdCO0FBQ2xELE9BQU9DLG9CQUFvQixNQUFNLCtCQUErQjtBQUVoRSxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFFaEUsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU04sY0FBYyxDQUFDO0VBQ3BETyxXQUFXQSxDQUFFQyx1QkFBZ0QsRUFBRUMsTUFBYyxFQUFHO0lBQ3JGLEtBQUssQ0FBRUwsb0JBQW9CLENBQUNNLHdCQUF3QixFQUFFO01BRXBEQyxJQUFJLEVBQUVULHNCQUFzQixDQUFDVSxtQkFBbUIsQ0FBQ0QsSUFBSTtNQUNyREUsWUFBWSxFQUFFWCxzQkFBc0IsQ0FBQ1ksYUFBYTtNQUNsREMsU0FBUyxFQUFFZCxtQkFBbUIsQ0FBQ2UsK0JBQStCO01BRTlEO01BQ0FDLFlBQVksRUFBRSxHQUFHO01BRWpCO01BQ0FDLG1CQUFtQixFQUFFYixzQkFBc0IsQ0FBQ2MsMkJBQTJCLENBQUNDLFlBQVk7TUFDcEZDLHNCQUFzQixFQUFFaEIsc0JBQXNCLENBQUNjLDJCQUEyQixDQUFDRyxlQUFlO01BRTFGO01BQ0FiLE1BQU0sRUFBRUEsTUFBTTtNQUVkYyxRQUFRLEVBQUVBLENBQUEsS0FBTTtRQUNkZix1QkFBdUIsQ0FBQ2dCLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQ0Msd0JBQXdCLENBQUU7VUFFN0I7VUFDQUMsWUFBWSxFQUFFO1FBQ2hCLENBQUUsQ0FBQztNQUNMO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBdkIsYUFBYSxDQUFDd0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFckIsZ0JBQWlCLENBQUMifQ==