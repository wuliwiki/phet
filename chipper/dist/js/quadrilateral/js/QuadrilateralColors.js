// Copyright 2021-2023, University of Colorado Boulder

/**
 * Defines the colors for this sim.
 *
 * All simulations should have a Colors.js file, see https://github.com/phetsims/scenery-phet/issues/642.
 *
 * For static colors that are used in more than one place, add them here.
 *
 * For dynamic colors that can be controlled via colorProfileProperty.js, add instances of ProfileColorProperty here,
 * each of which is required to have a default color. Note that dynamic colors can be edited by running the sim from
 * phetmarks using the "Color Edit" mode.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import { Color, ProfileColorProperty } from '../../scenery/js/imports.js';
import quadrilateral from './quadrilateral.js';
const QuadrilateralColors = {
  // Background color for screens in this sim
  screenBackgroundColorProperty: new ProfileColorProperty(quadrilateral, 'background', {
    default: new Color('#87CEEB')
  }),
  // Color for the grid lines in the play area
  gridLinesColorProperty: new ProfileColorProperty(quadrilateral, 'gridLines', {
    default: 'grey'
  }),
  // Interior grid color in the play area
  gridFillColorProperty: new ProfileColorProperty(quadrilateral, 'gridFill', {
    default: 'white'
  }),
  // Color for vertices and sides of the quadrilateral shape.
  quadrilateralShapeColorProperty: new ProfileColorProperty(quadrilateral, 'quadrilateralShape', {
    default: new Color('#FFE657')
  }),
  // The color for the quadrilateral when you hit a "named" shape.
  quadrilateralNamedShapeColorProperty: new ProfileColorProperty(quadrilateral, 'quadrilateralNamedShape', {
    default: new Color(255, 239, 189)
  }),
  // Color for strokes of the quadrilateral shape
  quadrilateralShapeStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'quadrilateralShapeStroke', {
    default: 'black'
  }),
  // Color for the dark segments of the corner guides
  cornerGuideDarkColorProperty: new ProfileColorProperty(quadrilateral, 'cornerGuideDark', {
    default: new Color(100, 100, 100)
  }),
  // Color for the light segments of the corner guides
  cornerGuideLightColorProperty: new ProfileColorProperty(quadrilateral, 'cornerGuideLight', {
    default: 'white'
  }),
  // Color for the stroke of shape markers (corner guides/unit length indicators)
  markersStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'markersStroke', {
    default: 'black'
  }),
  // Color for the stroke around right angle indicator
  rightAngleIndicatorStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'rightAngleIndicatorStroke', {
    default: 'black'
  }),
  // Color for the stroke for the diagonal guides
  diagonalGuidesStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'diagonalGuideStroke', {
    default: '#BABABA'
  }),
  // Fill color for panels in the UI.
  panelFillColorProperty: new ProfileColorProperty(quadrilateral, 'panelFillColor', {
    default: 'white'
  }),
  panelStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'panelStrokeColor', {
    default: 'black'
  }),
  gridStrokeColorProperty: new ProfileColorProperty(quadrilateral, 'playAreaStrokeColor', {
    default: 'black'
  }),
  // Color for the "Corner Labels" checkbox icon.
  visibilityIconsColorProperty: new ProfileColorProperty(quadrilateral, 'visibilityIconsColorProperty', {
    default: 'black'
  }),
  // Fill for the "Reset Shape" button
  resetShapeButtonColorProperty: new ProfileColorProperty(quadrilateral, 'resetShapeButtonColor', {
    default: new Color('rgb(247, 151, 34)')
  }),
  // Color for general buttons in the ScreenView
  screenViewButtonColorProperty: new ProfileColorProperty(quadrilateral, 'screenViewButtonColor', {
    default: 'lightgrey'
  }),
  // Stroke for the interaction cues around the quadrilateral
  interactionCueColorProperty: new ProfileColorProperty(quadrilateral, 'interactionCueColor', {
    default: new Color('blue')
  })
};
quadrilateral.register('QuadrilateralColors', QuadrilateralColors);
export default QuadrilateralColors;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb2xvciIsIlByb2ZpbGVDb2xvclByb3BlcnR5IiwicXVhZHJpbGF0ZXJhbCIsIlF1YWRyaWxhdGVyYWxDb2xvcnMiLCJzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImRlZmF1bHQiLCJncmlkTGluZXNDb2xvclByb3BlcnR5IiwiZ3JpZEZpbGxDb2xvclByb3BlcnR5IiwicXVhZHJpbGF0ZXJhbFNoYXBlQ29sb3JQcm9wZXJ0eSIsInF1YWRyaWxhdGVyYWxOYW1lZFNoYXBlQ29sb3JQcm9wZXJ0eSIsInF1YWRyaWxhdGVyYWxTaGFwZVN0cm9rZUNvbG9yUHJvcGVydHkiLCJjb3JuZXJHdWlkZURhcmtDb2xvclByb3BlcnR5IiwiY29ybmVyR3VpZGVMaWdodENvbG9yUHJvcGVydHkiLCJtYXJrZXJzU3Ryb2tlQ29sb3JQcm9wZXJ0eSIsInJpZ2h0QW5nbGVJbmRpY2F0b3JTdHJva2VDb2xvclByb3BlcnR5IiwiZGlhZ29uYWxHdWlkZXNTdHJva2VDb2xvclByb3BlcnR5IiwicGFuZWxGaWxsQ29sb3JQcm9wZXJ0eSIsInBhbmVsU3Ryb2tlQ29sb3JQcm9wZXJ0eSIsImdyaWRTdHJva2VDb2xvclByb3BlcnR5IiwidmlzaWJpbGl0eUljb25zQ29sb3JQcm9wZXJ0eSIsInJlc2V0U2hhcGVCdXR0b25Db2xvclByb3BlcnR5Iiwic2NyZWVuVmlld0J1dHRvbkNvbG9yUHJvcGVydHkiLCJpbnRlcmFjdGlvbkN1ZUNvbG9yUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlF1YWRyaWxhdGVyYWxDb2xvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgY29sb3JzIGZvciB0aGlzIHNpbS5cclxuICpcclxuICogQWxsIHNpbXVsYXRpb25zIHNob3VsZCBoYXZlIGEgQ29sb3JzLmpzIGZpbGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS1waGV0L2lzc3Vlcy82NDIuXHJcbiAqXHJcbiAqIEZvciBzdGF0aWMgY29sb3JzIHRoYXQgYXJlIHVzZWQgaW4gbW9yZSB0aGFuIG9uZSBwbGFjZSwgYWRkIHRoZW0gaGVyZS5cclxuICpcclxuICogRm9yIGR5bmFtaWMgY29sb3JzIHRoYXQgY2FuIGJlIGNvbnRyb2xsZWQgdmlhIGNvbG9yUHJvZmlsZVByb3BlcnR5LmpzLCBhZGQgaW5zdGFuY2VzIG9mIFByb2ZpbGVDb2xvclByb3BlcnR5IGhlcmUsXHJcbiAqIGVhY2ggb2Ygd2hpY2ggaXMgcmVxdWlyZWQgdG8gaGF2ZSBhIGRlZmF1bHQgY29sb3IuIE5vdGUgdGhhdCBkeW5hbWljIGNvbG9ycyBjYW4gYmUgZWRpdGVkIGJ5IHJ1bm5pbmcgdGhlIHNpbSBmcm9tXHJcbiAqIHBoZXRtYXJrcyB1c2luZyB0aGUgXCJDb2xvciBFZGl0XCIgbW9kZS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29sb3IsIFByb2ZpbGVDb2xvclByb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHF1YWRyaWxhdGVyYWwgZnJvbSAnLi9xdWFkcmlsYXRlcmFsLmpzJztcclxuXHJcbmNvbnN0IFF1YWRyaWxhdGVyYWxDb2xvcnMgPSB7XHJcblxyXG4gIC8vIEJhY2tncm91bmQgY29sb3IgZm9yIHNjcmVlbnMgaW4gdGhpcyBzaW1cclxuICBzY3JlZW5CYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnYmFja2dyb3VuZCcsIHtcclxuICAgIGRlZmF1bHQ6IG5ldyBDb2xvciggJyM4N0NFRUInIClcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgZ3JpZCBsaW5lcyBpbiB0aGUgcGxheSBhcmVhXHJcbiAgZ3JpZExpbmVzQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnZ3JpZExpbmVzJywge1xyXG4gICAgZGVmYXVsdDogJ2dyZXknXHJcbiAgfSApLFxyXG5cclxuICAvLyBJbnRlcmlvciBncmlkIGNvbG9yIGluIHRoZSBwbGF5IGFyZWFcclxuICBncmlkRmlsbENvbG9yUHJvcGVydHk6IG5ldyBQcm9maWxlQ29sb3JQcm9wZXJ0eSggcXVhZHJpbGF0ZXJhbCwgJ2dyaWRGaWxsJywge1xyXG4gICAgZGVmYXVsdDogJ3doaXRlJ1xyXG4gIH0gKSxcclxuXHJcbiAgLy8gQ29sb3IgZm9yIHZlcnRpY2VzIGFuZCBzaWRlcyBvZiB0aGUgcXVhZHJpbGF0ZXJhbCBzaGFwZS5cclxuICBxdWFkcmlsYXRlcmFsU2hhcGVDb2xvclByb3BlcnR5OiBuZXcgUHJvZmlsZUNvbG9yUHJvcGVydHkoIHF1YWRyaWxhdGVyYWwsICdxdWFkcmlsYXRlcmFsU2hhcGUnLCB7XHJcbiAgICBkZWZhdWx0OiBuZXcgQ29sb3IoICcjRkZFNjU3JyApXHJcbiAgfSApLFxyXG5cclxuICAvLyBUaGUgY29sb3IgZm9yIHRoZSBxdWFkcmlsYXRlcmFsIHdoZW4geW91IGhpdCBhIFwibmFtZWRcIiBzaGFwZS5cclxuICBxdWFkcmlsYXRlcmFsTmFtZWRTaGFwZUNvbG9yUHJvcGVydHk6IG5ldyBQcm9maWxlQ29sb3JQcm9wZXJ0eSggcXVhZHJpbGF0ZXJhbCwgJ3F1YWRyaWxhdGVyYWxOYW1lZFNoYXBlJywge1xyXG4gICAgZGVmYXVsdDogbmV3IENvbG9yKCAyNTUsIDIzOSwgMTg5IClcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciBzdHJva2VzIG9mIHRoZSBxdWFkcmlsYXRlcmFsIHNoYXBlXHJcbiAgcXVhZHJpbGF0ZXJhbFNoYXBlU3Ryb2tlQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAncXVhZHJpbGF0ZXJhbFNoYXBlU3Ryb2tlJywge1xyXG4gICAgZGVmYXVsdDogJ2JsYWNrJ1xyXG4gIH0gKSxcclxuXHJcbiAgLy8gQ29sb3IgZm9yIHRoZSBkYXJrIHNlZ21lbnRzIG9mIHRoZSBjb3JuZXIgZ3VpZGVzXHJcbiAgY29ybmVyR3VpZGVEYXJrQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnY29ybmVyR3VpZGVEYXJrJywge1xyXG4gICAgZGVmYXVsdDogbmV3IENvbG9yKCAxMDAsIDEwMCwgMTAwIClcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgbGlnaHQgc2VnbWVudHMgb2YgdGhlIGNvcm5lciBndWlkZXNcclxuICBjb3JuZXJHdWlkZUxpZ2h0Q29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnY29ybmVyR3VpZGVMaWdodCcsIHtcclxuICAgIGRlZmF1bHQ6ICd3aGl0ZSdcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgc3Ryb2tlIG9mIHNoYXBlIG1hcmtlcnMgKGNvcm5lciBndWlkZXMvdW5pdCBsZW5ndGggaW5kaWNhdG9ycylcclxuICBtYXJrZXJzU3Ryb2tlQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnbWFya2Vyc1N0cm9rZScsIHtcclxuICAgIGRlZmF1bHQ6ICdibGFjaydcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgc3Ryb2tlIGFyb3VuZCByaWdodCBhbmdsZSBpbmRpY2F0b3JcclxuICByaWdodEFuZ2xlSW5kaWNhdG9yU3Ryb2tlQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAncmlnaHRBbmdsZUluZGljYXRvclN0cm9rZScsIHtcclxuICAgIGRlZmF1bHQ6ICdibGFjaydcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgc3Ryb2tlIGZvciB0aGUgZGlhZ29uYWwgZ3VpZGVzXHJcbiAgZGlhZ29uYWxHdWlkZXNTdHJva2VDb2xvclByb3BlcnR5OiBuZXcgUHJvZmlsZUNvbG9yUHJvcGVydHkoIHF1YWRyaWxhdGVyYWwsICdkaWFnb25hbEd1aWRlU3Ryb2tlJywge1xyXG4gICAgZGVmYXVsdDogJyNCQUJBQkEnXHJcbiAgfSApLFxyXG5cclxuICAvLyBGaWxsIGNvbG9yIGZvciBwYW5lbHMgaW4gdGhlIFVJLlxyXG4gIHBhbmVsRmlsbENvbG9yUHJvcGVydHk6IG5ldyBQcm9maWxlQ29sb3JQcm9wZXJ0eSggcXVhZHJpbGF0ZXJhbCwgJ3BhbmVsRmlsbENvbG9yJywge1xyXG4gICAgZGVmYXVsdDogJ3doaXRlJ1xyXG4gIH0gKSxcclxuICBwYW5lbFN0cm9rZUNvbG9yUHJvcGVydHk6IG5ldyBQcm9maWxlQ29sb3JQcm9wZXJ0eSggcXVhZHJpbGF0ZXJhbCwgJ3BhbmVsU3Ryb2tlQ29sb3InLCB7XHJcbiAgICBkZWZhdWx0OiAnYmxhY2snXHJcbiAgfSApLFxyXG5cclxuICBncmlkU3Ryb2tlQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAncGxheUFyZWFTdHJva2VDb2xvcicsIHtcclxuICAgIGRlZmF1bHQ6ICdibGFjaydcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciB0aGUgXCJDb3JuZXIgTGFiZWxzXCIgY2hlY2tib3ggaWNvbi5cclxuICB2aXNpYmlsaXR5SWNvbnNDb2xvclByb3BlcnR5OiBuZXcgUHJvZmlsZUNvbG9yUHJvcGVydHkoIHF1YWRyaWxhdGVyYWwsICd2aXNpYmlsaXR5SWNvbnNDb2xvclByb3BlcnR5Jywge1xyXG4gICAgZGVmYXVsdDogJ2JsYWNrJ1xyXG4gIH0gKSxcclxuXHJcbiAgLy8gRmlsbCBmb3IgdGhlIFwiUmVzZXQgU2hhcGVcIiBidXR0b25cclxuICByZXNldFNoYXBlQnV0dG9uQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAncmVzZXRTaGFwZUJ1dHRvbkNvbG9yJywge1xyXG4gICAgZGVmYXVsdDogbmV3IENvbG9yKCAncmdiKDI0NywgMTUxLCAzNCknIClcclxuICB9ICksXHJcblxyXG4gIC8vIENvbG9yIGZvciBnZW5lcmFsIGJ1dHRvbnMgaW4gdGhlIFNjcmVlblZpZXdcclxuICBzY3JlZW5WaWV3QnV0dG9uQ29sb3JQcm9wZXJ0eTogbmV3IFByb2ZpbGVDb2xvclByb3BlcnR5KCBxdWFkcmlsYXRlcmFsLCAnc2NyZWVuVmlld0J1dHRvbkNvbG9yJywge1xyXG4gICAgZGVmYXVsdDogJ2xpZ2h0Z3JleSdcclxuICB9ICksXHJcblxyXG4gIC8vIFN0cm9rZSBmb3IgdGhlIGludGVyYWN0aW9uIGN1ZXMgYXJvdW5kIHRoZSBxdWFkcmlsYXRlcmFsXHJcbiAgaW50ZXJhY3Rpb25DdWVDb2xvclByb3BlcnR5OiBuZXcgUHJvZmlsZUNvbG9yUHJvcGVydHkoIHF1YWRyaWxhdGVyYWwsICdpbnRlcmFjdGlvbkN1ZUNvbG9yJywge1xyXG4gICAgZGVmYXVsdDogbmV3IENvbG9yKCAnYmx1ZScgKVxyXG4gIH0gKVxyXG59O1xyXG5cclxucXVhZHJpbGF0ZXJhbC5yZWdpc3RlciggJ1F1YWRyaWxhdGVyYWxDb2xvcnMnLCBRdWFkcmlsYXRlcmFsQ29sb3JzICk7XHJcbmV4cG9ydCBkZWZhdWx0IFF1YWRyaWxhdGVyYWxDb2xvcnM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxLQUFLLEVBQUVDLG9CQUFvQixRQUFRLDZCQUE2QjtBQUN6RSxPQUFPQyxhQUFhLE1BQU0sb0JBQW9CO0FBRTlDLE1BQU1DLG1CQUFtQixHQUFHO0VBRTFCO0VBQ0FDLDZCQUE2QixFQUFFLElBQUlI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