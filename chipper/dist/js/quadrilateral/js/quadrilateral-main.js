// Copyright 2021-2023, University of Colorado Boulder

/**
 * Main entry point for the sim.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import PreferencesModel from '../../joist/js/preferences/PreferencesModel.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import { Node } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import QuadrilateralQueryParameters from './quadrilateral/QuadrilateralQueryParameters.js';
import QuadrilateralScreen from './quadrilateral/QuadrilateralScreen.js';
import QuadrilateralStrings from './QuadrilateralStrings.js';
import QuadrilateralOptionsModel from './quadrilateral/model/QuadrilateralOptionsModel.js';
import QuadrilateralInputPreferencesNode from './quadrilateral/view/prototype/QuadrilateralInputPreferencesNode.js';
import QuadrilateralSoundOptionsNode from './quadrilateral/view/sound/QuadrilateralSoundOptionsNode.js';
const quadrilateralTitleStringProperty = QuadrilateralStrings.quadrilateral.titleStringProperty;
const optionsModel = new QuadrilateralOptionsModel();

// "Input" options are related to connection to a tangible device, this tab should only be shown when running
// while connected to some external device.
const inputPreferencesOptions = QuadrilateralQueryParameters.deviceConnection ? {
  customPreferences: [{
    createContent: () => new QuadrilateralInputPreferencesNode(optionsModel.tangibleOptionsModel)
  }]
} : undefined;
const simOptions = {
  credits: {
    softwareDevelopment: 'Jesse Greenberg',
    team: 'Brett Fiedler, Emily B. Moore, Taliesin Smith',
    contributors: 'Sofia Tancredi, Dor Abrahamson (Embodied Design Research Lab, UC Berkeley), Scott Lambert, Jenna Gorlewicz (CHROME Lab, St. Louis University)',
    soundDesign: 'Ashton Morris',
    //TODO fill in credits with QA team
    qualityAssurance: ''
  },
  // preferences configuration with defaults from package.json
  preferencesModel: new PreferencesModel({
    inputOptions: inputPreferencesOptions,
    audioOptions: {
      customPreferences: [{
        // Due to the layout considerations in the Preferences Dialog, it has 2 columns. Our entry for the left column
        // is blank
        createContent: () => new Node()
      }, {
        createContent: tandem => new QuadrilateralSoundOptionsNode(optionsModel.soundOptionsModel, tandem.createTandem('quadrilateralSoundOptionsNode'))
      }]
    }
  })
};

// launch the sim - beware that scenery Image nodes created outside of simLauncher.launch() will have zero bounds
// until the images are fully loaded, see https://github.com/phetsims/coulombs-law/issues/70
simLauncher.launch(() => {
  const quadrilateralScreen = new QuadrilateralScreen(optionsModel, {
    tandem: Tandem.ROOT.createTandem('quadrilateralScreen')
  });
  const sim = new Sim(quadrilateralTitleStringProperty, [quadrilateralScreen], simOptions);
  sim.start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc01vZGVsIiwiU2ltIiwic2ltTGF1bmNoZXIiLCJOb2RlIiwiVGFuZGVtIiwiUXVhZHJpbGF0ZXJhbFF1ZXJ5UGFyYW1ldGVycyIsIlF1YWRyaWxhdGVyYWxTY3JlZW4iLCJRdWFkcmlsYXRlcmFsU3RyaW5ncyIsIlF1YWRyaWxhdGVyYWxPcHRpb25zTW9kZWwiLCJRdWFkcmlsYXRlcmFsSW5wdXRQcmVmZXJlbmNlc05vZGUiLCJRdWFkcmlsYXRlcmFsU291bmRPcHRpb25zTm9kZSIsInF1YWRyaWxhdGVyYWxUaXRsZVN0cmluZ1Byb3BlcnR5IiwicXVhZHJpbGF0ZXJhbCIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJvcHRpb25zTW9kZWwiLCJpbnB1dFByZWZlcmVuY2VzT3B0aW9ucyIsImRldmljZUNvbm5lY3Rpb24iLCJjdXN0b21QcmVmZXJlbmNlcyIsImNyZWF0ZUNvbnRlbnQiLCJ0YW5naWJsZU9wdGlvbnNNb2RlbCIsInVuZGVmaW5lZCIsInNpbU9wdGlvbnMiLCJjcmVkaXRzIiwic29mdHdhcmVEZXZlbG9wbWVudCIsInRlYW0iLCJjb250cmlidXRvcnMiLCJzb3VuZERlc2lnbiIsInF1YWxpdHlBc3N1cmFuY2UiLCJwcmVmZXJlbmNlc01vZGVsIiwiaW5wdXRPcHRpb25zIiwiYXVkaW9PcHRpb25zIiwidGFuZGVtIiwic291bmRPcHRpb25zTW9kZWwiLCJjcmVhdGVUYW5kZW0iLCJsYXVuY2giLCJxdWFkcmlsYXRlcmFsU2NyZWVuIiwiUk9PVCIsInNpbSIsInN0YXJ0Il0sInNvdXJjZXMiOlsicXVhZHJpbGF0ZXJhbC1tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBzaW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcmVmZXJlbmNlc01vZGVsIGZyb20gJy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzTW9kZWwuanMnO1xyXG5pbXBvcnQgU2ltLCB7IFNpbU9wdGlvbnMgfSBmcm9tICcuLi8uLi9qb2lzdC9qcy9TaW0uanMnO1xyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi9xdWFkcmlsYXRlcmFsL1F1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbFNjcmVlbiBmcm9tICcuL3F1YWRyaWxhdGVyYWwvUXVhZHJpbGF0ZXJhbFNjcmVlbi5qcyc7XHJcbmltcG9ydCBRdWFkcmlsYXRlcmFsU3RyaW5ncyBmcm9tICcuL1F1YWRyaWxhdGVyYWxTdHJpbmdzLmpzJztcclxuaW1wb3J0IFF1YWRyaWxhdGVyYWxPcHRpb25zTW9kZWwgZnJvbSAnLi9xdWFkcmlsYXRlcmFsL21vZGVsL1F1YWRyaWxhdGVyYWxPcHRpb25zTW9kZWwuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbElucHV0UHJlZmVyZW5jZXNOb2RlIGZyb20gJy4vcXVhZHJpbGF0ZXJhbC92aWV3L3Byb3RvdHlwZS9RdWFkcmlsYXRlcmFsSW5wdXRQcmVmZXJlbmNlc05vZGUuanMnO1xyXG5pbXBvcnQgUXVhZHJpbGF0ZXJhbFNvdW5kT3B0aW9uc05vZGUgZnJvbSAnLi9xdWFkcmlsYXRlcmFsL3ZpZXcvc291bmQvUXVhZHJpbGF0ZXJhbFNvdW5kT3B0aW9uc05vZGUuanMnO1xyXG5cclxuY29uc3QgcXVhZHJpbGF0ZXJhbFRpdGxlU3RyaW5nUHJvcGVydHkgPSBRdWFkcmlsYXRlcmFsU3RyaW5ncy5xdWFkcmlsYXRlcmFsLnRpdGxlU3RyaW5nUHJvcGVydHk7XHJcbmNvbnN0IG9wdGlvbnNNb2RlbCA9IG5ldyBRdWFkcmlsYXRlcmFsT3B0aW9uc01vZGVsKCk7XHJcblxyXG4vLyBcIklucHV0XCIgb3B0aW9ucyBhcmUgcmVsYXRlZCB0byBjb25uZWN0aW9uIHRvIGEgdGFuZ2libGUgZGV2aWNlLCB0aGlzIHRhYiBzaG91bGQgb25seSBiZSBzaG93biB3aGVuIHJ1bm5pbmdcclxuLy8gd2hpbGUgY29ubmVjdGVkIHRvIHNvbWUgZXh0ZXJuYWwgZGV2aWNlLlxyXG5jb25zdCBpbnB1dFByZWZlcmVuY2VzT3B0aW9ucyA9IFF1YWRyaWxhdGVyYWxRdWVyeVBhcmFtZXRlcnMuZGV2aWNlQ29ubmVjdGlvbiA/IHtcclxuICBjdXN0b21QcmVmZXJlbmNlczogWyB7XHJcbiAgICBjcmVhdGVDb250ZW50OiAoKSA9PiBuZXcgUXVhZHJpbGF0ZXJhbElucHV0UHJlZmVyZW5jZXNOb2RlKCBvcHRpb25zTW9kZWwudGFuZ2libGVPcHRpb25zTW9kZWwgKVxyXG4gIH0gXVxyXG59IDogdW5kZWZpbmVkO1xyXG5cclxuY29uc3Qgc2ltT3B0aW9uczogU2ltT3B0aW9ucyA9IHtcclxuXHJcbiAgY3JlZGl0czoge1xyXG4gICAgc29mdHdhcmVEZXZlbG9wbWVudDogJ0plc3NlIEdyZWVuYmVyZycsXHJcbiAgICB0ZWFtOiAnQnJldHQgRmllZGxlciwgRW1pbHkgQi4gTW9vcmUsIFRhbGllc2luIFNtaXRoJyxcclxuICAgIGNvbnRyaWJ1dG9yczogJ1NvZmlhIFRhbmNyZWRpLCBEb3IgQWJyYWhhbXNvbiAoRW1ib2RpZWQgRGVzaWduIFJlc2VhcmNoIExhYiwgVUMgQmVya2VsZXkpLCBTY290dCBMYW1iZXJ0LCBKZW5uYSBHb3JsZXdpY3ogKENIUk9NRSBMYWIsIFN0LiBMb3VpcyBVbml2ZXJzaXR5KScsXHJcbiAgICBzb3VuZERlc2lnbjogJ0FzaHRvbiBNb3JyaXMnLFxyXG5cclxuICAgIC8vVE9ETyBmaWxsIGluIGNyZWRpdHMgd2l0aCBRQSB0ZWFtXHJcbiAgICBxdWFsaXR5QXNzdXJhbmNlOiAnJ1xyXG4gIH0sXHJcblxyXG4gIC8vIHByZWZlcmVuY2VzIGNvbmZpZ3VyYXRpb24gd2l0aCBkZWZhdWx0cyBmcm9tIHBhY2thZ2UuanNvblxyXG4gIHByZWZlcmVuY2VzTW9kZWw6IG5ldyBQcmVmZXJlbmNlc01vZGVsKCB7XHJcbiAgICBpbnB1dE9wdGlvbnM6IGlucHV0UHJlZmVyZW5jZXNPcHRpb25zLFxyXG4gICAgYXVkaW9PcHRpb25zOiB7XHJcbiAgICAgIGN1c3RvbVByZWZlcmVuY2VzOiBbXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgIC8vIER1ZSB0byB0aGUgbGF5b3V0IGNvbnNpZGVyYXRpb25zIGluIHRoZSBQcmVmZXJlbmNlcyBEaWFsb2csIGl0IGhhcyAyIGNvbHVtbnMuIE91ciBlbnRyeSBmb3IgdGhlIGxlZnQgY29sdW1uXHJcbiAgICAgICAgICAvLyBpcyBibGFua1xyXG4gICAgICAgICAgY3JlYXRlQ29udGVudDogKCkgPT4gbmV3IE5vZGUoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY3JlYXRlQ29udGVudDogdGFuZGVtID0+IG5ldyBRdWFkcmlsYXRlcmFsU291bmRPcHRpb25zTm9kZSggb3B0aW9uc01vZGVsLnNvdW5kT3B0aW9uc01vZGVsLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncXVhZHJpbGF0ZXJhbFNvdW5kT3B0aW9uc05vZGUnICkgKVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfVxyXG4gIH0gKVxyXG59O1xyXG5cclxuLy8gbGF1bmNoIHRoZSBzaW0gLSBiZXdhcmUgdGhhdCBzY2VuZXJ5IEltYWdlIG5vZGVzIGNyZWF0ZWQgb3V0c2lkZSBvZiBzaW1MYXVuY2hlci5sYXVuY2goKSB3aWxsIGhhdmUgemVybyBib3VuZHNcclxuLy8gdW50aWwgdGhlIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NvdWxvbWJzLWxhdy9pc3N1ZXMvNzBcclxuc2ltTGF1bmNoZXIubGF1bmNoKCAoKSA9PiB7XHJcbiAgY29uc3QgcXVhZHJpbGF0ZXJhbFNjcmVlbiA9IG5ldyBRdWFkcmlsYXRlcmFsU2NyZWVuKCBvcHRpb25zTW9kZWwsIHtcclxuICAgIHRhbmRlbTogVGFuZGVtLlJPT1QuY3JlYXRlVGFuZGVtKCAncXVhZHJpbGF0ZXJhbFNjcmVlbicgKVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3Qgc2ltID0gbmV3IFNpbSggcXVhZHJpbGF0ZXJhbFRpdGxlU3RyaW5nUHJvcGVydHksIFsgcXVhZHJpbGF0ZXJhbFNjcmVlbiBdLCBzaW1PcHRpb25zICk7XHJcbiAgc2ltLnN0YXJ0KCk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZ0JBQWdCLE1BQU0sZ0RBQWdEO0FBQzdFLE9BQU9DLEdBQUcsTUFBc0IsdUJBQXVCO0FBQ3ZELE9BQU9DLFdBQVcsTUFBTSwrQkFBK0I7QUFDdkQsU0FBU0MsSUFBSSxRQUFRLDZCQUE2QjtBQUNsRCxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLDRCQUE0QixNQUFNLGlEQUFpRDtBQUMxRixPQUFPQyxtQkFBbUIsTUFBTSx3Q0FBd0M7QUFDeEUsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBQzVELE9BQU9DLHlCQUF5QixNQUFNLG9EQUFvRDtBQUMxRixPQUFPQyxpQ0FBaUMsTUFBTSxxRUFBcUU7QUFDbkgsT0FBT0MsNkJBQTZCLE1BQU0sNkRBQTZEO0FBRXZHLE1BQU1DLGdDQUFnQyxHQUFHSixvQkFBb0IsQ0FBQ0ssYUFBYSxDQUFDQyxtQkFBbUI7QUFDL0YsTUFBTUMsWUFBWSxHQUFHLElBQUlOLHlCQUF5QixDQUFDLENBQUM7O0FBRXBEO0FBQ0E7QUFDQSxNQUFNTyx1QkFBdUIsR0FBR1YsNEJBQTRCLENBQUNXLGdCQUFnQixHQUFHO0VBQzlFQyxpQkFBaUIsRUFBRSxDQUFFO0lBQ25CQyxhQUFhLEVBQUVBLENBQUEsS0FBTSxJQUFJVCxpQ0FBaUMsQ0FBRUssWUFBWSxDQUFDSyxvQkFBcUI7RUFDaEcsQ0FBQztBQUNILENBQUMsR0FBR0MsU0FBUztBQUViLE1BQU1DLFVBQXNCLEdBQUc7RUFFN0JDLE9BQU8sRUFBRTtJQUNQQyxtQkFBbUIsRUFBRSxpQkFBaUI7SUFDdENDLElBQUksRUFBRSwrQ0FBK0M7SUFDckRDLFlBQVksRUFBRSwrSUFBK0k7SUFDN0pDLFdBQVcsRUFBRSxlQUFlO0lBRTVCO0lBQ0FDLGdCQUFnQixFQUFFO0VBQ3BCLENBQUM7RUFFRDtFQUNBQyxnQkFBZ0IsRUFBRSxJQUFJNUIsZ0JBQWdCLENBQUU7SUFDdEM2QixZQUFZLEVBQUVkLHVCQUF1QjtJQUNyQ2UsWUFBWSxFQUFFO01BQ1piLGlCQUFpQixFQUFFLENBQ2pCO1FBRUU7UUFDQTtRQUNBQyxhQUFhLEVBQUVBLENBQUEsS0FBTSxJQUFJZixJQUFJLENBQUM7TUFDaEMsQ0FBQyxFQUNEO1FBQ0VlLGFBQWEsRUFBRWEsTUFBTSxJQUFJLElBQUlyQiw2QkFBNkIsQ0FBRUksWUFBWSxDQUFDa0IsaUJBQWlCLEVBQUVELE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLCtCQUFnQyxDQUFFO01BQ3JKLENBQUM7SUFFTDtFQUNGLENBQUU7QUFDSixDQUFDOztBQUVEO0FBQ0E7QUFDQS9CLFdBQVcsQ0FBQ2dDLE1BQU0sQ0FBRSxNQUFNO0VBQ3hCLE1BQU1DLG1CQUFtQixHQUFHLElBQUk3QixtQkFBbUIsQ0FBRVEsWUFBWSxFQUFFO0lBQ2pFaUIsTUFBTSxFQUFFM0IsTUFBTSxDQUFDZ0MsSUFBSSxDQUFDSCxZQUFZLENBQUUscUJBQXNCO0VBQzFELENBQUUsQ0FBQztFQUVILE1BQU1JLEdBQUcsR0FBRyxJQUFJcEMsR0FBRyxDQUFFVSxnQ0FBZ0MsRUFBRSxDQUFFd0IsbUJBQW1CLENBQUUsRUFBRWQsVUFBVyxDQUFDO0VBQzVGZ0IsR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQztBQUNiLENBQUUsQ0FBQyJ9