// Copyright 2017, University of Colorado Boulder

/**
 * Settings defined in buildLocal
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const assert = require('assert');
const fs = require('fs');
const winston = require('winston');

// Handle the lack of build.json
let buildLocalObject;
try {
  buildLocalObject = JSON.parse(fs.readFileSync(`${process.env.HOME}/.phet/build-local.json`, 'utf8'));
} catch (e) {
  winston.warn('No build-local.json detected!');
  buildLocalObject = {};
}
module.exports = {
  get devUsername() {
    assert(buildLocalObject.devUsername);
    return buildLocalObject.devUsername;
  },
  get buildServerAuthorizationCode() {
    assert(buildLocalObject.buildServerAuthorizationCode);
    return buildLocalObject.buildServerAuthorizationCode;
  },
  get phetDevGitHubAccessToken() {
    assert(buildLocalObject.phetDevGitHubAccessToken, 'The phetDevGitHubAccessToken field of build-local.json is required, and can be retrieved from the PhET ' + 'credentials document for the "Github Machine User" row with the node "phetDevGitHubAccessToken" (it is ' + 'a hexadecimal string).');
    return buildLocalObject.phetDevGitHubAccessToken;
  },
  get developerGithubAccessToken() {
    assert(buildLocalObject.developerGithubAccessToken, 'The developerGithubAccessToken field of build-local.json is required for the use of the scripts in' + 'phet-info/github-labels.  For information on how to create one, see' + 'https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line#creating-a-token');
    return buildLocalObject.developerGithubAccessToken;
  },
  get developerGithubUsername() {
    assert(buildLocalObject.developerGithubUsername, 'The developerGithubUsername field of build-local.json is required for the use of the scripts in' + 'phet-info/github-labels.');
    return buildLocalObject.developerGithubUsername;
  },
  get slackBotToken() {
    assert(buildLocalObject.slackBotToken, 'The slackBotToken field of build-local.json is required for CT Slack integration');
    return buildLocalObject.slackBotToken;
  },
  get slackSigningSecret() {
    assert(buildLocalObject.slackSigningSecret, 'The slackSigningSecret field of build-local.json is required for CT Slack integration');
    return buildLocalObject.slackSigningSecret;
  },
  // Wrappers are now deployed to the dev location (for convenience)
  devDeployServer: buildLocalObject.devDeployServer || 'bayes.colorado.edu',
  devDeployPath: buildLocalObject.devDeployPath || '/data/web/htdocs/dev/html/',
  decafDeployPath: buildLocalObject.decafDeployPath || '/data/web/htdocs/dev/decaf/',
  buildServerNotifyEmail: buildLocalObject.buildServerNotifyEmail || null,
  productionServerURL: buildLocalObject.productionServerURL || 'https://phet.colorado.edu'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZnMiLCJ3aW5zdG9uIiwiYnVpbGRMb2NhbE9iamVjdCIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsInByb2Nlc3MiLCJlbnYiLCJIT01FIiwiZSIsIndhcm4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGV2VXNlcm5hbWUiLCJidWlsZFNlcnZlckF1dGhvcml6YXRpb25Db2RlIiwicGhldERldkdpdEh1YkFjY2Vzc1Rva2VuIiwiZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW4iLCJkZXZlbG9wZXJHaXRodWJVc2VybmFtZSIsInNsYWNrQm90VG9rZW4iLCJzbGFja1NpZ25pbmdTZWNyZXQiLCJkZXZEZXBsb3lTZXJ2ZXIiLCJkZXZEZXBsb3lQYXRoIiwiZGVjYWZEZXBsb3lQYXRoIiwiYnVpbGRTZXJ2ZXJOb3RpZnlFbWFpbCIsInByb2R1Y3Rpb25TZXJ2ZXJVUkwiXSwic291cmNlcyI6WyJidWlsZExvY2FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTZXR0aW5ncyBkZWZpbmVkIGluIGJ1aWxkTG9jYWxcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSggJ2ZzJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcblxyXG4vLyBIYW5kbGUgdGhlIGxhY2sgb2YgYnVpbGQuanNvblxyXG5sZXQgYnVpbGRMb2NhbE9iamVjdDtcclxudHJ5IHtcclxuICBidWlsZExvY2FsT2JqZWN0ID0gSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCBgJHtwcm9jZXNzLmVudi5IT01FfS8ucGhldC9idWlsZC1sb2NhbC5qc29uYCwgJ3V0ZjgnICkgKTtcclxufVxyXG5jYXRjaCggZSApIHtcclxuICB3aW5zdG9uLndhcm4oICdObyBidWlsZC1sb2NhbC5qc29uIGRldGVjdGVkIScgKTtcclxuICBidWlsZExvY2FsT2JqZWN0ID0ge307XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldCBkZXZVc2VybmFtZSgpIHtcclxuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5kZXZVc2VybmFtZSApO1xyXG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3QuZGV2VXNlcm5hbWU7XHJcbiAgfSxcclxuICBnZXQgYnVpbGRTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZSgpIHtcclxuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5idWlsZFNlcnZlckF1dGhvcml6YXRpb25Db2RlICk7XHJcbiAgICByZXR1cm4gYnVpbGRMb2NhbE9iamVjdC5idWlsZFNlcnZlckF1dGhvcml6YXRpb25Db2RlO1xyXG4gIH0sXHJcbiAgZ2V0IHBoZXREZXZHaXRIdWJBY2Nlc3NUb2tlbigpIHtcclxuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5waGV0RGV2R2l0SHViQWNjZXNzVG9rZW4sXHJcbiAgICAgICdUaGUgcGhldERldkdpdEh1YkFjY2Vzc1Rva2VuIGZpZWxkIG9mIGJ1aWxkLWxvY2FsLmpzb24gaXMgcmVxdWlyZWQsIGFuZCBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIFBoRVQgJyArXHJcbiAgICAgICdjcmVkZW50aWFscyBkb2N1bWVudCBmb3IgdGhlIFwiR2l0aHViIE1hY2hpbmUgVXNlclwiIHJvdyB3aXRoIHRoZSBub2RlIFwicGhldERldkdpdEh1YkFjY2Vzc1Rva2VuXCIgKGl0IGlzICcgK1xyXG4gICAgICAnYSBoZXhhZGVjaW1hbCBzdHJpbmcpLicgKTtcclxuICAgIHJldHVybiBidWlsZExvY2FsT2JqZWN0LnBoZXREZXZHaXRIdWJBY2Nlc3NUb2tlbjtcclxuICB9LFxyXG5cclxuICBnZXQgZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW4oKSB7XHJcbiAgICBhc3NlcnQoIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW4sXHJcbiAgICAgICdUaGUgZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW4gZmllbGQgb2YgYnVpbGQtbG9jYWwuanNvbiBpcyByZXF1aXJlZCBmb3IgdGhlIHVzZSBvZiB0aGUgc2NyaXB0cyBpbicgK1xyXG4gICAgICAncGhldC1pbmZvL2dpdGh1Yi1sYWJlbHMuICBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIGNyZWF0ZSBvbmUsIHNlZScgK1xyXG4gICAgICAnaHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbi1mb3ItdGhlLWNvbW1hbmQtbGluZSNjcmVhdGluZy1hLXRva2VuJyApO1xyXG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW47XHJcbiAgfSxcclxuICBnZXQgZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWUoKSB7XHJcbiAgICBhc3NlcnQoIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWUsXHJcbiAgICAgICdUaGUgZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWUgZmllbGQgb2YgYnVpbGQtbG9jYWwuanNvbiBpcyByZXF1aXJlZCBmb3IgdGhlIHVzZSBvZiB0aGUgc2NyaXB0cyBpbicgK1xyXG4gICAgICAncGhldC1pbmZvL2dpdGh1Yi1sYWJlbHMuJyApO1xyXG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWU7XHJcbiAgfSxcclxuICBnZXQgc2xhY2tCb3RUb2tlbigpIHtcclxuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5zbGFja0JvdFRva2VuLFxyXG4gICAgICAnVGhlIHNsYWNrQm90VG9rZW4gZmllbGQgb2YgYnVpbGQtbG9jYWwuanNvbiBpcyByZXF1aXJlZCBmb3IgQ1QgU2xhY2sgaW50ZWdyYXRpb24nICk7XHJcbiAgICByZXR1cm4gYnVpbGRMb2NhbE9iamVjdC5zbGFja0JvdFRva2VuO1xyXG4gIH0sXHJcbiAgZ2V0IHNsYWNrU2lnbmluZ1NlY3JldCgpIHtcclxuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5zbGFja1NpZ25pbmdTZWNyZXQsXHJcbiAgICAgICdUaGUgc2xhY2tTaWduaW5nU2VjcmV0IGZpZWxkIG9mIGJ1aWxkLWxvY2FsLmpzb24gaXMgcmVxdWlyZWQgZm9yIENUIFNsYWNrIGludGVncmF0aW9uJyApO1xyXG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3Quc2xhY2tTaWduaW5nU2VjcmV0O1xyXG4gIH0sXHJcblxyXG4gIC8vIFdyYXBwZXJzIGFyZSBub3cgZGVwbG95ZWQgdG8gdGhlIGRldiBsb2NhdGlvbiAoZm9yIGNvbnZlbmllbmNlKVxyXG4gIGRldkRlcGxveVNlcnZlcjogYnVpbGRMb2NhbE9iamVjdC5kZXZEZXBsb3lTZXJ2ZXIgfHwgJ2JheWVzLmNvbG9yYWRvLmVkdScsXHJcbiAgZGV2RGVwbG95UGF0aDogYnVpbGRMb2NhbE9iamVjdC5kZXZEZXBsb3lQYXRoIHx8ICcvZGF0YS93ZWIvaHRkb2NzL2Rldi9odG1sLycsXHJcbiAgZGVjYWZEZXBsb3lQYXRoOiBidWlsZExvY2FsT2JqZWN0LmRlY2FmRGVwbG95UGF0aCB8fCAnL2RhdGEvd2ViL2h0ZG9jcy9kZXYvZGVjYWYvJyxcclxuICBidWlsZFNlcnZlck5vdGlmeUVtYWlsOiBidWlsZExvY2FsT2JqZWN0LmJ1aWxkU2VydmVyTm90aWZ5RW1haWwgfHwgbnVsbCxcclxuICBwcm9kdWN0aW9uU2VydmVyVVJMOiBidWlsZExvY2FsT2JqZWN0LnByb2R1Y3Rpb25TZXJ2ZXJVUkwgfHwgJ2h0dHBzOi8vcGhldC5jb2xvcmFkby5lZHUnXHJcbn07XHJcbiJd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