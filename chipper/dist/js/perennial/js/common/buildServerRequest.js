// Copyright 2017, University of Colorado Boulder

/**
 * Sends a request to the build server.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const buildLocal = require('./buildLocal');
const assert = require('assert');
const axios = require('axios');
const winston = require('winston');

/**
 * Sends a request to the build server.
 * @public
 *
 * @param {string} repo
 * @param {SimVersion} version
 * @param {string} branch
 * @param {Object} dependencies - Dependencies object, use getDependencies?
 * @param {Object} [options]
 * @returns {Promise} - No resolved value
 */
module.exports = async function (repo, version, branch, dependencies, options) {
  const {
    locales = '*',
    brands = ['phet', 'phet-io'],
    servers = ['dev'] // {Array.<string>}, currently 'dev' and 'production' are supported
  } = options || {};
  winston.info(`sending build request for ${repo} ${version.toString()} with dependencies: ${JSON.stringify(dependencies)}`);
  servers.forEach(server => assert(['dev', 'production'].includes(server), `Unknown server: ${server}`));
  const requestObject = {
    api: '2.0',
    dependencies: JSON.stringify(dependencies),
    simName: repo,
    version: version.toString(),
    locales: locales,
    servers: servers,
    brands: brands,
    branch: branch,
    authorizationCode: buildLocal.buildServerAuthorizationCode
  };
  if (buildLocal.buildServerNotifyEmail) {
    requestObject.email = buildLocal.buildServerNotifyEmail;
  }
  const url = `${buildLocal.productionServerURL}/deploy-html-simulation`;
  winston.info(url);
  winston.info(JSON.stringify(requestObject));
  let response;
  try {
    response = await axios({
      method: 'POST',
      url: url,
      data: requestObject
    });
  } catch (error) {
    throw new Error(`Build request failed with error ${error}.`);
  }
  if (response.status !== 200 && response.status !== 202) {
    throw new Error(`Build request failed with error ${response.status}.`);
  } else {
    winston.info('Build request sent successfully');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZExvY2FsIiwicmVxdWlyZSIsImFzc2VydCIsImF4aW9zIiwid2luc3RvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXBvIiwidmVyc2lvbiIsImJyYW5jaCIsImRlcGVuZGVuY2llcyIsIm9wdGlvbnMiLCJsb2NhbGVzIiwiYnJhbmRzIiwic2VydmVycyIsImluZm8iLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JFYWNoIiwic2VydmVyIiwiaW5jbHVkZXMiLCJyZXF1ZXN0T2JqZWN0IiwiYXBpIiwic2ltTmFtZSIsImF1dGhvcml6YXRpb25Db2RlIiwiYnVpbGRTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZSIsImJ1aWxkU2VydmVyTm90aWZ5RW1haWwiLCJlbWFpbCIsInVybCIsInByb2R1Y3Rpb25TZXJ2ZXJVUkwiLCJyZXNwb25zZSIsIm1ldGhvZCIsImRhdGEiLCJlcnJvciIsIkVycm9yIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiYnVpbGRTZXJ2ZXJSZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIGJ1aWxkIHNlcnZlci5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGJ1aWxkTG9jYWwgPSByZXF1aXJlKCAnLi9idWlsZExvY2FsJyApO1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoICdheGlvcycgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgcmVxdWVzdCB0byB0aGUgYnVpbGQgc2VydmVyLlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvXHJcbiAqIEBwYXJhbSB7U2ltVmVyc2lvbn0gdmVyc2lvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXBlbmRlbmNpZXMgLSBEZXBlbmRlbmNpZXMgb2JqZWN0LCB1c2UgZ2V0RGVwZW5kZW5jaWVzP1xyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIE5vIHJlc29sdmVkIHZhbHVlXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCB2ZXJzaW9uLCBicmFuY2gsIGRlcGVuZGVuY2llcywgb3B0aW9ucyApIHtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgbG9jYWxlcyA9ICcqJyxcclxuICAgIGJyYW5kcyA9IFsgJ3BoZXQnLCAncGhldC1pbycgXSxcclxuICAgIHNlcnZlcnMgPSBbICdkZXYnIF0gLy8ge0FycmF5LjxzdHJpbmc+fSwgY3VycmVudGx5ICdkZXYnIGFuZCAncHJvZHVjdGlvbicgYXJlIHN1cHBvcnRlZFxyXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICB3aW5zdG9uLmluZm8oIGBzZW5kaW5nIGJ1aWxkIHJlcXVlc3QgZm9yICR7cmVwb30gJHt2ZXJzaW9uLnRvU3RyaW5nKCl9IHdpdGggZGVwZW5kZW5jaWVzOiAke0pTT04uc3RyaW5naWZ5KCBkZXBlbmRlbmNpZXMgKX1gICk7XHJcblxyXG4gIHNlcnZlcnMuZm9yRWFjaCggc2VydmVyID0+IGFzc2VydCggWyAnZGV2JywgJ3Byb2R1Y3Rpb24nIF0uaW5jbHVkZXMoIHNlcnZlciApLCBgVW5rbm93biBzZXJ2ZXI6ICR7c2VydmVyfWAgKSApO1xyXG5cclxuICBjb25zdCByZXF1ZXN0T2JqZWN0ID0ge1xyXG4gICAgYXBpOiAnMi4wJyxcclxuICAgIGRlcGVuZGVuY2llczogSlNPTi5zdHJpbmdpZnkoIGRlcGVuZGVuY2llcyApLFxyXG4gICAgc2ltTmFtZTogcmVwbyxcclxuICAgIHZlcnNpb246IHZlcnNpb24udG9TdHJpbmcoKSxcclxuICAgIGxvY2FsZXM6IGxvY2FsZXMsXHJcbiAgICBzZXJ2ZXJzOiBzZXJ2ZXJzLFxyXG4gICAgYnJhbmRzOiBicmFuZHMsXHJcbiAgICBicmFuY2g6IGJyYW5jaCxcclxuICAgIGF1dGhvcml6YXRpb25Db2RlOiBidWlsZExvY2FsLmJ1aWxkU2VydmVyQXV0aG9yaXphdGlvbkNvZGVcclxuICB9O1xyXG4gIGlmICggYnVpbGRMb2NhbC5idWlsZFNlcnZlck5vdGlmeUVtYWlsICkge1xyXG4gICAgcmVxdWVzdE9iamVjdC5lbWFpbCA9IGJ1aWxkTG9jYWwuYnVpbGRTZXJ2ZXJOb3RpZnlFbWFpbDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHVybCA9IGAke2J1aWxkTG9jYWwucHJvZHVjdGlvblNlcnZlclVSTH0vZGVwbG95LWh0bWwtc2ltdWxhdGlvbmA7XHJcblxyXG4gIHdpbnN0b24uaW5mbyggdXJsICk7XHJcbiAgd2luc3Rvbi5pbmZvKCBKU09OLnN0cmluZ2lmeSggcmVxdWVzdE9iamVjdCApICk7XHJcblxyXG4gIGxldCByZXNwb25zZTtcclxuICB0cnkge1xyXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyggeyBtZXRob2Q6ICdQT1NUJywgdXJsOiB1cmwsIGRhdGE6IHJlcXVlc3RPYmplY3QgfSApO1xyXG4gIH1cclxuICBjYXRjaCggZXJyb3IgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoIGBCdWlsZCByZXF1ZXN0IGZhaWxlZCB3aXRoIGVycm9yICR7ZXJyb3J9LmAgKTtcclxuICB9XHJcbiAgaWYgKCByZXNwb25zZS5zdGF0dXMgIT09IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgIT09IDIwMiApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggYEJ1aWxkIHJlcXVlc3QgZmFpbGVkIHdpdGggZXJyb3IgJHtyZXNwb25zZS5zdGF0dXN9LmAgKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB3aW5zdG9uLmluZm8oICdCdWlsZCByZXF1ZXN0IHNlbnQgc3VjY2Vzc2Z1bGx5JyApO1xyXG4gIH1cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFFLGNBQWUsQ0FBQztBQUM1QyxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDbEMsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUUsT0FBUSxDQUFDO0FBQ2hDLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFFLFNBQVUsQ0FBQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSSxNQUFNLENBQUNDLE9BQU8sR0FBRyxnQkFBZ0JDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFHO0VBRTlFLE1BQU07SUFDSkMsT0FBTyxHQUFHLEdBQUc7SUFDYkMsTUFBTSxHQUFHLENBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBRTtJQUM5QkMsT0FBTyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUM7RUFDdEIsQ0FBQyxHQUFHSCxPQUFPLElBQUksQ0FBQyxDQUFDO0VBRWpCUCxPQUFPLENBQUNXLElBQUksQ0FBRyw2QkFBNEJSLElBQUssSUFBR0MsT0FBTyxDQUFDUSxRQUFRLENBQUMsQ0FBRSx1QkFBc0JDLElBQUksQ0FBQ0MsU0FBUyxDQUFFUixZQUFhLENBQUUsRUFBRSxDQUFDO0VBRTlISSxPQUFPLENBQUNLLE9BQU8sQ0FBRUMsTUFBTSxJQUFJbEIsTUFBTSxDQUFFLENBQUUsS0FBSyxFQUFFLFlBQVksQ0FBRSxDQUFDbUIsUUFBUSxDQUFFRCxNQUFPLENBQUMsRUFBRyxtQkFBa0JBLE1BQU8sRUFBRSxDQUFFLENBQUM7RUFFOUcsTUFBTUUsYUFBYSxHQUFHO0lBQ3BCQyxHQUFHLEVBQUUsS0FBSztJQUNWYixZQUFZLEVBQUVPLElBQUksQ0FBQ0MsU0FBUyxDQUFFUixZQUFhLENBQUM7SUFDNUNjLE9BQU8sRUFBRWpCLElBQUk7SUFDYkMsT0FBTyxFQUFFQSxPQUFPLENBQUNRLFFBQVEsQ0FBQyxDQUFDO0lBQzNCSixPQUFPLEVBQUVBLE9BQU87SUFDaEJFLE9BQU8sRUFBRUEsT0FBTztJQUNoQkQsTUFBTSxFQUFFQSxNQUFNO0lBQ2RKLE1BQU0sRUFBRUEsTUFBTTtJQUNkZ0IsaUJBQWlCLEVBQUV6QixVQUFVLENBQUMwQjtFQUNoQyxDQUFDO0VBQ0QsSUFBSzFCLFVBQVUsQ0FBQzJCLHNCQUFzQixFQUFHO0lBQ3ZDTCxhQUFhLENBQUNNLEtBQUssR0FBRzVCLFVBQVUsQ0FBQzJCLHNCQUFzQjtFQUN6RDtFQUVBLE1BQU1FLEdBQUcsR0FBSSxHQUFFN0IsVUFBVSxDQUFDOEIsbUJBQW9CLHlCQUF3QjtFQUV0RTFCLE9BQU8sQ0FBQ1csSUFBSSxDQUFFYyxHQUFJLENBQUM7RUFDbkJ6QixPQUFPLENBQUNXLElBQUksQ0FBRUUsSUFBSSxDQUFDQyxTQUFTLENBQUVJLGFBQWMsQ0FBRSxDQUFDO0VBRS9DLElBQUlTLFFBQVE7RUFDWixJQUFJO0lBQ0ZBLFFBQVEsR0FBRyxNQUFNNUIsS0FBSyxDQUFFO01BQUU2QixNQUFNLEVBQUUsTUFBTTtNQUFFSCxHQUFHLEVBQUVBLEdBQUc7TUFBRUksSUFBSSxFQUFFWDtJQUFjLENBQUUsQ0FBQztFQUM3RSxDQUFDLENBQ0QsT0FBT1ksS0FBSyxFQUFHO0lBQ2IsTUFBTSxJQUFJQyxLQUFLLENBQUcsbUNBQWtDRCxLQUFNLEdBQUcsQ0FBQztFQUNoRTtFQUNBLElBQUtILFFBQVEsQ0FBQ0ssTUFBTSxLQUFLLEdBQUcsSUFBSUwsUUFBUSxDQUFDSyxNQUFNLEtBQUssR0FBRyxFQUFHO0lBQ3hELE1BQU0sSUFBSUQsS0FBSyxDQUFHLG1DQUFrQ0osUUFBUSxDQUFDSyxNQUFPLEdBQUcsQ0FBQztFQUMxRSxDQUFDLE1BQ0k7SUFDSGhDLE9BQU8sQ0FBQ1csSUFBSSxDQUFFLGlDQUFrQyxDQUFDO0VBQ25EO0FBQ0YsQ0FBQyJ9