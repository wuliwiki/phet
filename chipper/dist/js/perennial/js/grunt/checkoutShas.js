// Copyright 2002-2015, University of Colorado Boulder

/**
 * This grunt task checks out the shas for a project, as specified in a dependencies.json file in its top level.
 */

const assert = require('assert');
const child_process = require('child_process');
const grunt = require('grunt');

/**
 * NOTE: This is somewhat vestigial, kept to ensure some build-server behavior for now.
 * TODO(chipper1.0) https://github.com/phetsims/perennial/issues/169 remove this when possible (when all chipper 1.0 usage is not required, since all sims are chipper 2.0+)
 *
 * @param {string} repositoryName name field from package.json
 * @param {boolean} toMaster whether master should be used, or dependencies.json shas should be used
 * @param {boolean} buildServer whether this build is initiated by the build server
 */
module.exports = function (repositoryName, toMaster, buildServer) {
  const dependencies = grunt.file.readJSON(buildServer ? '../perennial/js/build-server/tmp/dependencies.json' : `../${repositoryName}/dependencies.json`);
  const done = grunt.task.current.async();
  let numToCheckOut = 0;
  let numCheckedOut = 0;
  for (const property in dependencies) {
    if (property !== 'comment' && property !== repositoryName) {
      numToCheckOut++;
    }
  }
  for (const property of dependencies) {
    if (property !== 'comment' && property !== repositoryName && dependencies.hasOwnProperty(property)) {
      assert(typeof dependencies[property].branch !== 'undefined' && typeof dependencies[property].sha !== 'undefined');
      grunt.log.writeln(`Checking out dependency ${property}: ${dependencies[property].branch}@${dependencies[property].sha}`);

      //To execute something from a different directory:
      //cp.exec('foocommand', { cwd: 'path/to/dir/' }, callback);
      //http://stackoverflow.com/questions/14026967/calling-child-process-exec-in-node-as-though-it-was-executed-in-a-specific-folde
      const command = `git checkout ${toMaster ? 'master' : dependencies[property].sha}`;
      child_process.exec(command, {
        cwd: `../${property}`
      }, (error1, stdout1, stderr1) => {
        assert(!error1, `error in ${command} for repo ${property}`);
        grunt.log.writeln('Finished checkout.');
        grunt.log.writeln(stdout1);
        grunt.log.writeln(stderr1);
        numCheckedOut = numCheckedOut + 1;
        if (numToCheckOut === numCheckedOut) {
          done();
        }
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiY2hpbGRfcHJvY2VzcyIsImdydW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG9zaXRvcnlOYW1lIiwidG9NYXN0ZXIiLCJidWlsZFNlcnZlciIsImRlcGVuZGVuY2llcyIsImZpbGUiLCJyZWFkSlNPTiIsImRvbmUiLCJ0YXNrIiwiY3VycmVudCIsImFzeW5jIiwibnVtVG9DaGVja091dCIsIm51bUNoZWNrZWRPdXQiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwiYnJhbmNoIiwic2hhIiwibG9nIiwid3JpdGVsbiIsImNvbW1hbmQiLCJleGVjIiwiY3dkIiwiZXJyb3IxIiwic3Rkb3V0MSIsInN0ZGVycjEiXSwic291cmNlcyI6WyJjaGVja291dFNoYXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMDItMjAxNSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBncnVudCB0YXNrIGNoZWNrcyBvdXQgdGhlIHNoYXMgZm9yIGEgcHJvamVjdCwgYXMgc3BlY2lmaWVkIGluIGEgZGVwZW5kZW5jaWVzLmpzb24gZmlsZSBpbiBpdHMgdG9wIGxldmVsLlxyXG4gKi9cclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IGNoaWxkX3Byb2Nlc3MgPSByZXF1aXJlKCAnY2hpbGRfcHJvY2VzcycgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcblxyXG4vKipcclxuICogTk9URTogVGhpcyBpcyBzb21ld2hhdCB2ZXN0aWdpYWwsIGtlcHQgdG8gZW5zdXJlIHNvbWUgYnVpbGQtc2VydmVyIGJlaGF2aW9yIGZvciBub3cuXHJcbiAqIFRPRE8oY2hpcHBlcjEuMCkgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BlcmVubmlhbC9pc3N1ZXMvMTY5IHJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUgKHdoZW4gYWxsIGNoaXBwZXIgMS4wIHVzYWdlIGlzIG5vdCByZXF1aXJlZCwgc2luY2UgYWxsIHNpbXMgYXJlIGNoaXBwZXIgMi4wKylcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG9zaXRvcnlOYW1lIG5hbWUgZmllbGQgZnJvbSBwYWNrYWdlLmpzb25cclxuICogQHBhcmFtIHtib29sZWFufSB0b01hc3RlciB3aGV0aGVyIG1hc3RlciBzaG91bGQgYmUgdXNlZCwgb3IgZGVwZW5kZW5jaWVzLmpzb24gc2hhcyBzaG91bGQgYmUgdXNlZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJ1aWxkU2VydmVyIHdoZXRoZXIgdGhpcyBidWlsZCBpcyBpbml0aWF0ZWQgYnkgdGhlIGJ1aWxkIHNlcnZlclxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcmVwb3NpdG9yeU5hbWUsIHRvTWFzdGVyLCBidWlsZFNlcnZlciApIHtcclxuXHJcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gZ3J1bnQuZmlsZS5yZWFkSlNPTiggKCBidWlsZFNlcnZlciApID8gJy4uL3BlcmVubmlhbC9qcy9idWlsZC1zZXJ2ZXIvdG1wL2RlcGVuZGVuY2llcy5qc29uJyA6IGAuLi8ke3JlcG9zaXRvcnlOYW1lfS9kZXBlbmRlbmNpZXMuanNvbmAgKTtcclxuICBjb25zdCBkb25lID0gZ3J1bnQudGFzay5jdXJyZW50LmFzeW5jKCk7XHJcbiAgbGV0IG51bVRvQ2hlY2tPdXQgPSAwO1xyXG4gIGxldCBudW1DaGVja2VkT3V0ID0gMDtcclxuICBmb3IgKCBjb25zdCBwcm9wZXJ0eSBpbiBkZXBlbmRlbmNpZXMgKSB7XHJcbiAgICBpZiAoIHByb3BlcnR5ICE9PSAnY29tbWVudCcgJiYgcHJvcGVydHkgIT09IHJlcG9zaXRvcnlOYW1lICkge1xyXG4gICAgICBudW1Ub0NoZWNrT3V0Kys7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKCBjb25zdCBwcm9wZXJ0eSBvZiBkZXBlbmRlbmNpZXMgKSB7XHJcbiAgICBpZiAoIHByb3BlcnR5ICE9PSAnY29tbWVudCcgJiYgcHJvcGVydHkgIT09IHJlcG9zaXRvcnlOYW1lICYmIGRlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eSggcHJvcGVydHkgKSApIHtcclxuICAgICAgYXNzZXJ0KCB0eXBlb2YgZGVwZW5kZW5jaWVzWyBwcm9wZXJ0eSBdLmJyYW5jaCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlcGVuZGVuY2llc1sgcHJvcGVydHkgXS5zaGEgIT09ICd1bmRlZmluZWQnICk7XHJcblxyXG4gICAgICBncnVudC5sb2cud3JpdGVsbiggYENoZWNraW5nIG91dCBkZXBlbmRlbmN5ICR7cHJvcGVydHl9OiAke2RlcGVuZGVuY2llc1sgcHJvcGVydHkgXS5icmFuY2h9QCR7ZGVwZW5kZW5jaWVzWyBwcm9wZXJ0eSBdLnNoYX1gICk7XHJcblxyXG4gICAgICAvL1RvIGV4ZWN1dGUgc29tZXRoaW5nIGZyb20gYSBkaWZmZXJlbnQgZGlyZWN0b3J5OlxyXG4gICAgICAvL2NwLmV4ZWMoJ2Zvb2NvbW1hbmQnLCB7IGN3ZDogJ3BhdGgvdG8vZGlyLycgfSwgY2FsbGJhY2spO1xyXG4gICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQwMjY5NjcvY2FsbGluZy1jaGlsZC1wcm9jZXNzLWV4ZWMtaW4tbm9kZS1hcy10aG91Z2gtaXQtd2FzLWV4ZWN1dGVkLWluLWEtc3BlY2lmaWMtZm9sZGVcclxuICAgICAgY29uc3QgY29tbWFuZCA9IGBnaXQgY2hlY2tvdXQgJHt0b01hc3RlciA/ICdtYXN0ZXInIDogZGVwZW5kZW5jaWVzWyBwcm9wZXJ0eSBdLnNoYX1gO1xyXG4gICAgICBjaGlsZF9wcm9jZXNzLmV4ZWMoIGNvbW1hbmQsIHsgY3dkOiBgLi4vJHtwcm9wZXJ0eX1gIH0sICggZXJyb3IxLCBzdGRvdXQxLCBzdGRlcnIxICkgPT4ge1xyXG4gICAgICAgIGFzc2VydCggIWVycm9yMSwgYGVycm9yIGluICR7Y29tbWFuZH0gZm9yIHJlcG8gJHtwcm9wZXJ0eX1gICk7XHJcbiAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oICdGaW5pc2hlZCBjaGVja291dC4nICk7XHJcbiAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oIHN0ZG91dDEgKTtcclxuICAgICAgICBncnVudC5sb2cud3JpdGVsbiggc3RkZXJyMSApO1xyXG4gICAgICAgIG51bUNoZWNrZWRPdXQgPSBudW1DaGVja2VkT3V0ICsgMTtcclxuICAgICAgICBpZiAoIG51bVRvQ2hlY2tPdXQgPT09IG51bUNoZWNrZWRPdXQgKSB7XHJcbiAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICB9XHJcbiAgfVxyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBRSxlQUFnQixDQUFDO0FBQ2hELE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFFLE9BQVEsQ0FBQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxjQUFjLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFHO0VBRWpFLE1BQU1DLFlBQVksR0FBR04sS0FBSyxDQUFDTyxJQUFJLENBQUNDLFFBQVEsQ0FBSUgsV0FBVyxHQUFLLG9EQUFvRCxHQUFJLE1BQUtGLGNBQWUsb0JBQW9CLENBQUM7RUFDN0osTUFBTU0sSUFBSSxHQUFHVCxLQUFLLENBQUNVLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUN2QyxJQUFJQyxhQUFhLEdBQUcsQ0FBQztFQUNyQixJQUFJQyxhQUFhLEdBQUcsQ0FBQztFQUNyQixLQUFNLE1BQU1DLFFBQVEsSUFBSVQsWUFBWSxFQUFHO0lBQ3JDLElBQUtTLFFBQVEsS0FBSyxTQUFTLElBQUlBLFFBQVEsS0FBS1osY0FBYyxFQUFHO01BQzNEVSxhQUFhLEVBQUU7SUFDakI7RUFDRjtFQUVBLEtBQU0sTUFBTUUsUUFBUSxJQUFJVCxZQUFZLEVBQUc7SUFDckMsSUFBS1MsUUFBUSxLQUFLLFNBQVMsSUFBSUEsUUFBUSxLQUFLWixjQUFjLElBQUlHLFlBQVksQ0FBQ1UsY0FBYyxDQUFFRCxRQUFTLENBQUMsRUFBRztNQUN0R2xCLE1BQU0sQ0FBRSxPQUFPUyxZQUFZLENBQUVTLFFBQVEsQ0FBRSxDQUFDRSxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU9YLFlBQVksQ0FBRVMsUUFBUSxDQUFFLENBQUNHLEdBQUcsS0FBSyxXQUFZLENBQUM7TUFFdkhsQixLQUFLLENBQUNtQixHQUFHLENBQUNDLE9BQU8sQ0FBRywyQkFBMEJMLFFBQVMsS0FBSVQsWUFBWSxDQUFFUyxRQUFRLENBQUUsQ0FBQ0UsTUFBTyxJQUFHWCxZQUFZLENBQUVTLFFBQVEsQ0FBRSxDQUFDRyxHQUFJLEVBQUUsQ0FBQzs7TUFFOUg7TUFDQTtNQUNBO01BQ0EsTUFBTUcsT0FBTyxHQUFJLGdCQUFlakIsUUFBUSxHQUFHLFFBQVEsR0FBR0UsWUFBWSxDQUFFUyxRQUFRLENBQUUsQ0FBQ0csR0FBSSxFQUFDO01BQ3BGbkIsYUFBYSxDQUFDdUIsSUFBSSxDQUFFRCxPQUFPLEVBQUU7UUFBRUUsR0FBRyxFQUFHLE1BQUtSLFFBQVM7TUFBRSxDQUFDLEVBQUUsQ0FBRVMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sS0FBTTtRQUN0RjdCLE1BQU0sQ0FBRSxDQUFDMkIsTUFBTSxFQUFHLFlBQVdILE9BQVEsYUFBWU4sUUFBUyxFQUFFLENBQUM7UUFDN0RmLEtBQUssQ0FBQ21CLEdBQUcsQ0FBQ0MsT0FBTyxDQUFFLG9CQUFxQixDQUFDO1FBQ3pDcEIsS0FBSyxDQUFDbUIsR0FBRyxDQUFDQyxPQUFPLENBQUVLLE9BQVEsQ0FBQztRQUM1QnpCLEtBQUssQ0FBQ21CLEdBQUcsQ0FBQ0MsT0FBTyxDQUFFTSxPQUFRLENBQUM7UUFDNUJaLGFBQWEsR0FBR0EsYUFBYSxHQUFHLENBQUM7UUFDakMsSUFBS0QsYUFBYSxLQUFLQyxhQUFhLEVBQUc7VUFDckNMLElBQUksQ0FBQyxDQUFDO1FBQ1I7TUFDRixDQUFFLENBQUM7SUFDTDtFQUNGO0FBQ0YsQ0FBQyJ9