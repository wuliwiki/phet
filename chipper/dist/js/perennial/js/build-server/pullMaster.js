// Copyright 2017, University of Colorado Boulder

const constants = require('./constants');
const execute = require('../common/execute');
const gitPull = require('../common/gitPull');
const winston = require('winston');
const _ = require('lodash');

/**
 * pull master for every repo in dependencies.json (plus babel) to make sure everything is up to date
 */
module.exports = async function pullMaster(repos) {
  // so we don't have to modify the repos object
  const reposCopy = _.clone(repos);
  if ('comment' in reposCopy) {
    delete reposCopy.comment;
  }
  const errors = [];

  // Pull the appropriate babel branch
  try {
    await execute('git', ['checkout', constants.BUILD_SERVER_CONFIG.babelBranch], '../babel');
    await gitPull('babel');
  } catch (error) {
    console.error(error);
    throw new Error('git checkout/pull failed in babel');
  }
  for (const repoName in reposCopy) {
    winston.log('info', `pulling from ${repoName}`);
    const repoDir = `../${repoName}`;
    try {
      await execute('git', ['checkout', 'master'], repoDir);
    } catch (error) {
      console.error(error);
      throw new Error(`git checkout master failed in ${repoName}`);
    }
    try {
      await gitPull(repoName);
    } catch (error) {
      errors.push(error);
    }
  }
  if (errors.length > 0) {
    throw new Error('at least one repository failed to pull master');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiZXhlY3V0ZSIsImdpdFB1bGwiLCJ3aW5zdG9uIiwiXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwdWxsTWFzdGVyIiwicmVwb3MiLCJyZXBvc0NvcHkiLCJjbG9uZSIsImNvbW1lbnQiLCJlcnJvcnMiLCJCVUlMRF9TRVJWRVJfQ09ORklHIiwiYmFiZWxCcmFuY2giLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsInJlcG9OYW1lIiwibG9nIiwicmVwb0RpciIsInB1c2giLCJsZW5ndGgiXSwic291cmNlcyI6WyJwdWxsTWFzdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcblxyXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCAnLi9jb25zdGFudHMnICk7XHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vY29tbW9uL2V4ZWN1dGUnICk7XHJcbmNvbnN0IGdpdFB1bGwgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdFB1bGwnICk7XHJcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCAnd2luc3RvbicgKTtcclxuY29uc3QgXyA9IHJlcXVpcmUoICdsb2Rhc2gnICk7XHJcblxyXG4vKipcclxuICogcHVsbCBtYXN0ZXIgZm9yIGV2ZXJ5IHJlcG8gaW4gZGVwZW5kZW5jaWVzLmpzb24gKHBsdXMgYmFiZWwpIHRvIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHVwIHRvIGRhdGVcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24gcHVsbE1hc3RlciggcmVwb3MgKSB7XHJcblxyXG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gbW9kaWZ5IHRoZSByZXBvcyBvYmplY3RcclxuICBjb25zdCByZXBvc0NvcHkgPSBfLmNsb25lKCByZXBvcyApO1xyXG5cclxuICBpZiAoICdjb21tZW50JyBpbiByZXBvc0NvcHkgKSB7XHJcbiAgICBkZWxldGUgcmVwb3NDb3B5LmNvbW1lbnQ7XHJcbiAgfVxyXG5cclxuICBjb25zdCBlcnJvcnMgPSBbXTtcclxuXHJcbiAgLy8gUHVsbCB0aGUgYXBwcm9wcmlhdGUgYmFiZWwgYnJhbmNoXHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGV4ZWN1dGUoICdnaXQnLCBbICdjaGVja291dCcsIGNvbnN0YW50cy5CVUlMRF9TRVJWRVJfQ09ORklHLmJhYmVsQnJhbmNoIF0sICcuLi9iYWJlbCcgKTtcclxuICAgIGF3YWl0IGdpdFB1bGwoICdiYWJlbCcgKTtcclxuICB9XHJcbiAgY2F0Y2goIGVycm9yICkge1xyXG4gICAgY29uc29sZS5lcnJvciggZXJyb3IgKTtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ2dpdCBjaGVja291dC9wdWxsIGZhaWxlZCBpbiBiYWJlbCcgKTtcclxuICB9XHJcblxyXG4gIGZvciAoIGNvbnN0IHJlcG9OYW1lIGluIHJlcG9zQ29weSApIHtcclxuICAgIHdpbnN0b24ubG9nKCAnaW5mbycsIGBwdWxsaW5nIGZyb20gJHtyZXBvTmFtZX1gICk7XHJcbiAgICBjb25zdCByZXBvRGlyID0gYC4uLyR7cmVwb05hbWV9YDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBleGVjdXRlKCAnZ2l0JywgWyAnY2hlY2tvdXQnLCAnbWFzdGVyJyBdLCByZXBvRGlyICk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZXJyb3IgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoIGVycm9yICk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggYGdpdCBjaGVja291dCBtYXN0ZXIgZmFpbGVkIGluICR7cmVwb05hbWV9YCApO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IGdpdFB1bGwoIHJlcG9OYW1lICk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZXJyb3IgKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKCBlcnJvciApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKCBlcnJvcnMubGVuZ3RoID4gMCApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ2F0IGxlYXN0IG9uZSByZXBvc2l0b3J5IGZhaWxlZCB0byBwdWxsIG1hc3RlcicgKTtcclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUUsU0FBVSxDQUFDO0FBQ3BDLE1BQU1JLENBQUMsR0FBR0osT0FBTyxDQUFFLFFBQVMsQ0FBQzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGVBQWVDLFVBQVVBLENBQUVDLEtBQUssRUFBRztFQUVsRDtFQUNBLE1BQU1DLFNBQVMsR0FBR0wsQ0FBQyxDQUFDTSxLQUFLLENBQUVGLEtBQU0sQ0FBQztFQUVsQyxJQUFLLFNBQVMsSUFBSUMsU0FBUyxFQUFHO0lBQzVCLE9BQU9BLFNBQVMsQ0FBQ0UsT0FBTztFQUMxQjtFQUVBLE1BQU1DLE1BQU0sR0FBRyxFQUFFOztFQUVqQjtFQUNBLElBQUk7SUFDRixNQUFNWCxPQUFPLENBQUUsS0FBSyxFQUFFLENBQUUsVUFBVSxFQUFFRixTQUFTLENBQUNjLG1CQUFtQixDQUFDQyxXQUFXLENBQUUsRUFBRSxVQUFXLENBQUM7SUFDN0YsTUFBTVosT0FBTyxDQUFFLE9BQVEsQ0FBQztFQUMxQixDQUFDLENBQ0QsT0FBT2EsS0FBSyxFQUFHO0lBQ2JDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFFQSxLQUFNLENBQUM7SUFDdEIsTUFBTSxJQUFJRSxLQUFLLENBQUUsbUNBQW9DLENBQUM7RUFDeEQ7RUFFQSxLQUFNLE1BQU1DLFFBQVEsSUFBSVQsU0FBUyxFQUFHO0lBQ2xDTixPQUFPLENBQUNnQixHQUFHLENBQUUsTUFBTSxFQUFHLGdCQUFlRCxRQUFTLEVBQUUsQ0FBQztJQUNqRCxNQUFNRSxPQUFPLEdBQUksTUFBS0YsUUFBUyxFQUFDO0lBRWhDLElBQUk7TUFDRixNQUFNakIsT0FBTyxDQUFFLEtBQUssRUFBRSxDQUFFLFVBQVUsRUFBRSxRQUFRLENBQUUsRUFBRW1CLE9BQVEsQ0FBQztJQUMzRCxDQUFDLENBQ0QsT0FBT0wsS0FBSyxFQUFHO01BQ2JDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFFQSxLQUFNLENBQUM7TUFDdEIsTUFBTSxJQUFJRSxLQUFLLENBQUcsaUNBQWdDQyxRQUFTLEVBQUUsQ0FBQztJQUNoRTtJQUVBLElBQUk7TUFDRixNQUFNaEIsT0FBTyxDQUFFZ0IsUUFBUyxDQUFDO0lBQzNCLENBQUMsQ0FDRCxPQUFPSCxLQUFLLEVBQUc7TUFDYkgsTUFBTSxDQUFDUyxJQUFJLENBQUVOLEtBQU0sQ0FBQztJQUN0QjtFQUNGO0VBRUEsSUFBS0gsTUFBTSxDQUFDVSxNQUFNLEdBQUcsQ0FBQyxFQUFHO0lBQ3ZCLE1BQU0sSUFBSUwsS0FBSyxDQUFFLCtDQUFnRCxDQUFDO0VBQ3BFO0FBQ0YsQ0FBQyJ9