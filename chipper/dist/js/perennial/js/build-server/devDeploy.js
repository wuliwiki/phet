// Copyright 2017-2018, University of Colorado Boulder

const constants = require('./constants');
const devSsh = require('../common/devSsh');
const rsync = require('rsync');
const winston = require('winston');
const writeFile = require('../common/writeFile');
const user = constants.BUILD_SERVER_CONFIG.devUsername;
const host = constants.BUILD_SERVER_CONFIG.devDeployServer;

/**
 * Copy files to dev server, typically bayes.colorado.edu.
 *
 * @param {string} simDir
 * @param {string} simName
 * @param {string} version
 * @param {ChipperVersion} chipperVersion
 * @param {string[]} brands
 *
 * @returns {Promise}
 */
module.exports = async function (simDir, simName, version, chipperVersion, brands) {
  const simDirectory = constants.BUILD_SERVER_CONFIG.devDeployPath + simName;
  let versionDirectory = version;
  try {
    // Chipper 1.0 has -phetio in the version schema for PhET-iO branded sims
    if (brands.length === 1 && brands[0] === constants.PHET_IO_BRAND && chipperVersion.major === 0 && !version.match('-phetio')) {
      versionDirectory = version.split('-').join('-phetio');
    }
    const simVersionDirectory = `${simDirectory}/${versionDirectory}`;

    // mkdir first in case it doesn't exist already
    await devSsh(`mkdir -p ${simVersionDirectory}`);
    const buildDir = `${simDir}/build`;

    // copy the files
    if (brands.includes(constants.PHET_BRAND)) {
      let targetDir = buildDir;
      if (chipperVersion.major === 2 && chipperVersion.minor === 0) {
        targetDir += '/phet';
      }
      targetDir += '/.rsync-filter';
      const rsyncFilterContents = '- *_CA*\n+ *_en*\n+ *_all*\n+ *_a11y*\n- *.html';
      await writeFile(targetDir, rsyncFilterContents);
    }
    return await new Promise((resolve, reject) => {
      new rsync().flags('razpFFO').set('no-perms').source(`${buildDir}/`).destination(`${user}@${host}:${simVersionDirectory}`).execute((err, code, cmd) => {
        if (err) {
          winston.debug(code);
          winston.debug(cmd);
          reject(err);
        } else {
          resolve();
        }
      });
    });
  } catch (err) {
    return Promise.reject(err);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiZGV2U3NoIiwicnN5bmMiLCJ3aW5zdG9uIiwid3JpdGVGaWxlIiwidXNlciIsIkJVSUxEX1NFUlZFUl9DT05GSUciLCJkZXZVc2VybmFtZSIsImhvc3QiLCJkZXZEZXBsb3lTZXJ2ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwic2ltRGlyIiwic2ltTmFtZSIsInZlcnNpb24iLCJjaGlwcGVyVmVyc2lvbiIsImJyYW5kcyIsInNpbURpcmVjdG9yeSIsImRldkRlcGxveVBhdGgiLCJ2ZXJzaW9uRGlyZWN0b3J5IiwibGVuZ3RoIiwiUEhFVF9JT19CUkFORCIsIm1ham9yIiwibWF0Y2giLCJzcGxpdCIsImpvaW4iLCJzaW1WZXJzaW9uRGlyZWN0b3J5IiwiYnVpbGREaXIiLCJpbmNsdWRlcyIsIlBIRVRfQlJBTkQiLCJ0YXJnZXREaXIiLCJtaW5vciIsInJzeW5jRmlsdGVyQ29udGVudHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZsYWdzIiwic2V0Iiwic291cmNlIiwiZGVzdGluYXRpb24iLCJleGVjdXRlIiwiZXJyIiwiY29kZSIsImNtZCIsImRlYnVnIl0sInNvdXJjZXMiOlsiZGV2RGVwbG95LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMTgsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuXHJcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoICcuL2NvbnN0YW50cycgKTtcclxuY29uc3QgZGV2U3NoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9kZXZTc2gnICk7XHJcbmNvbnN0IHJzeW5jID0gcmVxdWlyZSggJ3JzeW5jJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcbmNvbnN0IHdyaXRlRmlsZSA9IHJlcXVpcmUoICcuLi9jb21tb24vd3JpdGVGaWxlJyApO1xyXG5cclxuY29uc3QgdXNlciA9IGNvbnN0YW50cy5CVUlMRF9TRVJWRVJfQ09ORklHLmRldlVzZXJuYW1lO1xyXG5jb25zdCBob3N0ID0gY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZGV2RGVwbG95U2VydmVyO1xyXG5cclxuLyoqXHJcbiAqIENvcHkgZmlsZXMgdG8gZGV2IHNlcnZlciwgdHlwaWNhbGx5IGJheWVzLmNvbG9yYWRvLmVkdS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHNpbURpclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2ltTmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxyXG4gKiBAcGFyYW0ge0NoaXBwZXJWZXJzaW9ufSBjaGlwcGVyVmVyc2lvblxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBicmFuZHNcclxuICpcclxuICogQHJldHVybnMge1Byb21pc2V9XHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCBzaW1EaXIsIHNpbU5hbWUsIHZlcnNpb24sIGNoaXBwZXJWZXJzaW9uLCBicmFuZHMgKSB7XHJcbiAgY29uc3Qgc2ltRGlyZWN0b3J5ID0gY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZGV2RGVwbG95UGF0aCArIHNpbU5hbWU7XHJcbiAgbGV0IHZlcnNpb25EaXJlY3RvcnkgPSB2ZXJzaW9uO1xyXG5cclxuICB0cnkge1xyXG5cclxuICAgIC8vIENoaXBwZXIgMS4wIGhhcyAtcGhldGlvIGluIHRoZSB2ZXJzaW9uIHNjaGVtYSBmb3IgUGhFVC1pTyBicmFuZGVkIHNpbXNcclxuICAgIGlmICggYnJhbmRzLmxlbmd0aCA9PT0gMSAmJiBicmFuZHNbIDAgXSA9PT0gY29uc3RhbnRzLlBIRVRfSU9fQlJBTkQgJiYgY2hpcHBlclZlcnNpb24ubWFqb3IgPT09IDAgJiYgIXZlcnNpb24ubWF0Y2goICctcGhldGlvJyApICkge1xyXG4gICAgICB2ZXJzaW9uRGlyZWN0b3J5ID0gdmVyc2lvbi5zcGxpdCggJy0nICkuam9pbiggJy1waGV0aW8nICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzaW1WZXJzaW9uRGlyZWN0b3J5ID0gYCR7c2ltRGlyZWN0b3J5fS8ke3ZlcnNpb25EaXJlY3Rvcnl9YDtcclxuXHJcbiAgICAvLyBta2RpciBmaXJzdCBpbiBjYXNlIGl0IGRvZXNuJ3QgZXhpc3QgYWxyZWFkeVxyXG4gICAgYXdhaXQgZGV2U3NoKCBgbWtkaXIgLXAgJHtzaW1WZXJzaW9uRGlyZWN0b3J5fWAgKTtcclxuICAgIGNvbnN0IGJ1aWxkRGlyID0gYCR7c2ltRGlyfS9idWlsZGA7XHJcblxyXG4gICAgLy8gY29weSB0aGUgZmlsZXNcclxuICAgIGlmICggYnJhbmRzLmluY2x1ZGVzKCBjb25zdGFudHMuUEhFVF9CUkFORCApICkge1xyXG4gICAgICBsZXQgdGFyZ2V0RGlyID0gYnVpbGREaXI7XHJcbiAgICAgIGlmICggY2hpcHBlclZlcnNpb24ubWFqb3IgPT09IDIgJiYgY2hpcHBlclZlcnNpb24ubWlub3IgPT09IDAgKSB7XHJcbiAgICAgICAgdGFyZ2V0RGlyICs9ICcvcGhldCc7XHJcbiAgICAgIH1cclxuICAgICAgdGFyZ2V0RGlyICs9ICcvLnJzeW5jLWZpbHRlcic7XHJcblxyXG4gICAgICBjb25zdCByc3luY0ZpbHRlckNvbnRlbnRzID0gJy0gKl9DQSpcXG4rICpfZW4qXFxuKyAqX2FsbCpcXG4rICpfYTExeSpcXG4tICouaHRtbCc7XHJcbiAgICAgIGF3YWl0IHdyaXRlRmlsZSggdGFyZ2V0RGlyLCByc3luY0ZpbHRlckNvbnRlbnRzICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xyXG4gICAgICBuZXcgcnN5bmMoKVxyXG4gICAgICAgIC5mbGFncyggJ3JhenBGRk8nIClcclxuICAgICAgICAuc2V0KCAnbm8tcGVybXMnIClcclxuICAgICAgICAuc291cmNlKCBgJHtidWlsZERpcn0vYCApXHJcbiAgICAgICAgLmRlc3RpbmF0aW9uKCBgJHt1c2VyfUAke2hvc3R9OiR7c2ltVmVyc2lvbkRpcmVjdG9yeX1gIClcclxuICAgICAgICAuZXhlY3V0ZSggKCBlcnIsIGNvZGUsIGNtZCApID0+IHtcclxuICAgICAgICAgIGlmICggZXJyICkge1xyXG4gICAgICAgICAgICB3aW5zdG9uLmRlYnVnKCBjb2RlICk7XHJcbiAgICAgICAgICAgIHdpbnN0b24uZGVidWcoIGNtZCApO1xyXG4gICAgICAgICAgICByZWplY3QoIGVyciApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7IHJlc29sdmUoKTsgfVxyXG4gICAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuICB9XHJcbiAgY2F0Y2hcclxuICAgICggZXJyICkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCBlcnIgKTtcclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUUsT0FBUSxDQUFDO0FBQ2hDLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFFLFNBQVUsQ0FBQztBQUNwQyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUVsRCxNQUFNSyxJQUFJLEdBQUdOLFNBQVMsQ0FBQ08sbUJBQW1CLENBQUNDLFdBQVc7QUFDdEQsTUFBTUMsSUFBSSxHQUFHVCxTQUFTLENBQUNPLG1CQUFtQixDQUFDRyxlQUFlOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGdCQUFnQkMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUc7RUFDbEYsTUFBTUMsWUFBWSxHQUFHbEIsU0FBUyxDQUFDTyxtQkFBbUIsQ0FBQ1ksYUFBYSxHQUFHTCxPQUFPO0VBQzFFLElBQUlNLGdCQUFnQixHQUFHTCxPQUFPO0VBRTlCLElBQUk7SUFFRjtJQUNBLElBQUtFLE1BQU0sQ0FBQ0ksTUFBTSxLQUFLLENBQUMsSUFBSUosTUFBTSxDQUFFLENBQUMsQ0FBRSxLQUFLakIsU0FBUyxDQUFDc0IsYUFBYSxJQUFJTixjQUFjLENBQUNPLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxLQUFLLENBQUUsU0FBVSxDQUFDLEVBQUc7TUFDaklKLGdCQUFnQixHQUFHTCxPQUFPLENBQUNVLEtBQUssQ0FBRSxHQUFJLENBQUMsQ0FBQ0MsSUFBSSxDQUFFLFNBQVUsQ0FBQztJQUMzRDtJQUNBLE1BQU1DLG1CQUFtQixHQUFJLEdBQUVULFlBQWEsSUFBR0UsZ0JBQWlCLEVBQUM7O0lBRWpFO0lBQ0EsTUFBTWxCLE1BQU0sQ0FBRyxZQUFXeUIsbUJBQW9CLEVBQUUsQ0FBQztJQUNqRCxNQUFNQyxRQUFRLEdBQUksR0FBRWYsTUFBTyxRQUFPOztJQUVsQztJQUNBLElBQUtJLE1BQU0sQ0FBQ1ksUUFBUSxDQUFFN0IsU0FBUyxDQUFDOEIsVUFBVyxDQUFDLEVBQUc7TUFDN0MsSUFBSUMsU0FBUyxHQUFHSCxRQUFRO01BQ3hCLElBQUtaLGNBQWMsQ0FBQ08sS0FBSyxLQUFLLENBQUMsSUFBSVAsY0FBYyxDQUFDZ0IsS0FBSyxLQUFLLENBQUMsRUFBRztRQUM5REQsU0FBUyxJQUFJLE9BQU87TUFDdEI7TUFDQUEsU0FBUyxJQUFJLGdCQUFnQjtNQUU3QixNQUFNRSxtQkFBbUIsR0FBRyxpREFBaUQ7TUFDN0UsTUFBTTVCLFNBQVMsQ0FBRTBCLFNBQVMsRUFBRUUsbUJBQW9CLENBQUM7SUFDbkQ7SUFDQSxPQUFPLE1BQU0sSUFBSUMsT0FBTyxDQUFFLENBQUVDLE9BQU8sRUFBRUMsTUFBTSxLQUFNO01BQy9DLElBQUlqQyxLQUFLLENBQUMsQ0FBQyxDQUNSa0MsS0FBSyxDQUFFLFNBQVUsQ0FBQyxDQUNsQkMsR0FBRyxDQUFFLFVBQVcsQ0FBQyxDQUNqQkMsTUFBTSxDQUFHLEdBQUVYLFFBQVMsR0FBRyxDQUFDLENBQ3hCWSxXQUFXLENBQUcsR0FBRWxDLElBQUssSUFBR0csSUFBSyxJQUFHa0IsbUJBQW9CLEVBQUUsQ0FBQyxDQUN2RGMsT0FBTyxDQUFFLENBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEtBQU07UUFDOUIsSUFBS0YsR0FBRyxFQUFHO1VBQ1R0QyxPQUFPLENBQUN5QyxLQUFLLENBQUVGLElBQUssQ0FBQztVQUNyQnZDLE9BQU8sQ0FBQ3lDLEtBQUssQ0FBRUQsR0FBSSxDQUFDO1VBQ3BCUixNQUFNLENBQUVNLEdBQUksQ0FBQztRQUNmLENBQUMsTUFDSTtVQUFFUCxPQUFPLENBQUMsQ0FBQztRQUFFO01BQ3BCLENBQUUsQ0FBQztJQUNQLENBQUUsQ0FBQztFQUNMLENBQUMsQ0FDRCxPQUNJTyxHQUFHLEVBQUc7SUFDUixPQUFPUixPQUFPLENBQUNFLE1BQU0sQ0FBRU0sR0FBSSxDQUFDO0VBQzlCO0FBQ0YsQ0FBQyJ9