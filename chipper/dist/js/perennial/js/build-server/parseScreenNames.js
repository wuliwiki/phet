// Copyright 2021, University of Colorado Boulder

const axios = require('axios');
const puppeteer = require('puppeteer');
const winston = require('winston');
const assert = require('assert');
const puppeteerLoad = require('../common/puppeteerLoad');

/**
 * @param {string} simName
 * @param {string[]} locales - a list of locale codes
 * @returns {Promise.<{}>}
 */
const parseScreenNamesFromSimulation = async (simName, locales) => {
  const browser = await puppeteer.launch({
    args: ['--disable-gpu']
  });
  const returnObject = {};
  for (let localeIndex = 0; localeIndex < locales.length; localeIndex++) {
    const locale = locales[localeIndex];
    try {
      const url = `https://phet.colorado.edu/sims/html/${simName}/latest/${simName}_all.html?locale=${locale}`;
      const result = await puppeteerLoad(url, {
        waitForFunction: 'phet.joist.sim.screens',
        browser: browser,
        evaluate: () => {
          return phet.joist.sim.screens.map(screen => screen.name || screen.nameProperty && screen.nameProperty.value).filter((screenName, screenIndex) => !(screenIndex === 0 && screenName === '\u202aHome\u202c'));
        }
      });
      assert(result !== null, 'must be a list of screen names, not null');
      returnObject[locale] = result;
    } catch (e) {
      winston.log('error', `Could not parse screen names from sim: ${e}`);
      e.stack && winston.log('error', e.stack);
      browser && (await browser.close());
      throw e;
    }
  }
  await browser.close();
  return returnObject;
};
const parseScreenNamesAllSimulations = async () => {
  const url = 'https://phet.colorado.edu/services/metadata/1.3/simulations?format=json&type=html&summary';
  const projects = (await axios.get(url)).data.projects;
  const screenNameObject = {};
  for (let projectIndex = 0; projectIndex < projects.length; projectIndex++) {
    const project = projects[projectIndex];
    const simulation = project.simulations[0];
    const simName = simulation.name;
    const locales = Object.keys(simulation.localizedSimulations);
    screenNameObject[simName] = await parseScreenNamesFromSimulation(simName, locales);
  }
  return screenNameObject;
};
module.exports = {
  parseScreenNames: async (simName, locales) => parseScreenNamesFromSimulation(simName, locales),
  parseScreenNamesAllSimulations: parseScreenNamesAllSimulations
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJwdXBwZXRlZXIiLCJ3aW5zdG9uIiwiYXNzZXJ0IiwicHVwcGV0ZWVyTG9hZCIsInBhcnNlU2NyZWVuTmFtZXNGcm9tU2ltdWxhdGlvbiIsInNpbU5hbWUiLCJsb2NhbGVzIiwiYnJvd3NlciIsImxhdW5jaCIsImFyZ3MiLCJyZXR1cm5PYmplY3QiLCJsb2NhbGVJbmRleCIsImxlbmd0aCIsImxvY2FsZSIsInVybCIsInJlc3VsdCIsIndhaXRGb3JGdW5jdGlvbiIsImV2YWx1YXRlIiwicGhldCIsImpvaXN0Iiwic2ltIiwic2NyZWVucyIsIm1hcCIsInNjcmVlbiIsIm5hbWUiLCJuYW1lUHJvcGVydHkiLCJ2YWx1ZSIsImZpbHRlciIsInNjcmVlbk5hbWUiLCJzY3JlZW5JbmRleCIsImUiLCJsb2ciLCJzdGFjayIsImNsb3NlIiwicGFyc2VTY3JlZW5OYW1lc0FsbFNpbXVsYXRpb25zIiwicHJvamVjdHMiLCJnZXQiLCJkYXRhIiwic2NyZWVuTmFtZU9iamVjdCIsInByb2plY3RJbmRleCIsInByb2plY3QiLCJzaW11bGF0aW9uIiwic2ltdWxhdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwibG9jYWxpemVkU2ltdWxhdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VTY3JlZW5OYW1lcyJdLCJzb3VyY2VzIjpbInBhcnNlU2NyZWVuTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCAnYXhpb3MnICk7XHJcbmNvbnN0IHB1cHBldGVlciA9IHJlcXVpcmUoICdwdXBwZXRlZXInICk7XHJcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCAnd2luc3RvbicgKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgcHVwcGV0ZWVyTG9hZCA9IHJlcXVpcmUoICcuLi9jb21tb24vcHVwcGV0ZWVyTG9hZCcgKTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2ltTmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBsb2NhbGVzIC0gYSBsaXN0IG9mIGxvY2FsZSBjb2Rlc1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48e30+fVxyXG4gKi9cclxuY29uc3QgcGFyc2VTY3JlZW5OYW1lc0Zyb21TaW11bGF0aW9uID0gYXN5bmMgKCBzaW1OYW1lLCBsb2NhbGVzICkgPT4ge1xyXG5cclxuICBjb25zdCBicm93c2VyID0gYXdhaXQgcHVwcGV0ZWVyLmxhdW5jaCgge1xyXG4gICAgYXJnczogW1xyXG4gICAgICAnLS1kaXNhYmxlLWdwdSdcclxuICAgIF1cclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IHJldHVybk9iamVjdCA9IHt9O1xyXG5cclxuICBmb3IgKCBsZXQgbG9jYWxlSW5kZXggPSAwOyBsb2NhbGVJbmRleCA8IGxvY2FsZXMubGVuZ3RoOyBsb2NhbGVJbmRleCsrICkge1xyXG4gICAgY29uc3QgbG9jYWxlID0gbG9jYWxlc1sgbG9jYWxlSW5kZXggXTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL3BoZXQuY29sb3JhZG8uZWR1L3NpbXMvaHRtbC8ke3NpbU5hbWV9L2xhdGVzdC8ke3NpbU5hbWV9X2FsbC5odG1sP2xvY2FsZT0ke2xvY2FsZX1gO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXBwZXRlZXJMb2FkKCB1cmwsIHtcclxuICAgICAgICB3YWl0Rm9yRnVuY3Rpb246ICdwaGV0LmpvaXN0LnNpbS5zY3JlZW5zJyxcclxuICAgICAgICBicm93c2VyOiBicm93c2VyLFxyXG4gICAgICAgIGV2YWx1YXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcGhldC5qb2lzdC5zaW0uc2NyZWVuc1xyXG4gICAgICAgICAgICAubWFwKCBzY3JlZW4gPT4gc2NyZWVuLm5hbWUgfHwgKCBzY3JlZW4ubmFtZVByb3BlcnR5ICYmIHNjcmVlbi5uYW1lUHJvcGVydHkudmFsdWUgKSApXHJcbiAgICAgICAgICAgIC5maWx0ZXIoICggc2NyZWVuTmFtZSwgc2NyZWVuSW5kZXggKSA9PiAhKCBzY3JlZW5JbmRleCA9PT0gMCAmJiBzY3JlZW5OYW1lID09PSAnXFx1MjAyYUhvbWVcXHUyMDJjJyApICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICAgIGFzc2VydCggcmVzdWx0ICE9PSBudWxsLCAnbXVzdCBiZSBhIGxpc3Qgb2Ygc2NyZWVuIG5hbWVzLCBub3QgbnVsbCcgKTtcclxuXHJcbiAgICAgIHJldHVybk9iamVjdFsgbG9jYWxlIF0gPSByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZSApIHtcclxuICAgICAgd2luc3Rvbi5sb2coICdlcnJvcicsIGBDb3VsZCBub3QgcGFyc2Ugc2NyZWVuIG5hbWVzIGZyb20gc2ltOiAke2V9YCApO1xyXG4gICAgICBlLnN0YWNrICYmIHdpbnN0b24ubG9nKCAnZXJyb3InLCBlLnN0YWNrICk7XHJcbiAgICAgIGJyb3dzZXIgJiYgYXdhaXQgYnJvd3Nlci5jbG9zZSgpO1xyXG5cclxuICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGF3YWl0IGJyb3dzZXIuY2xvc2UoKTtcclxuXHJcbiAgcmV0dXJuIHJldHVybk9iamVjdDtcclxufTtcclxuXHJcbmNvbnN0IHBhcnNlU2NyZWVuTmFtZXNBbGxTaW11bGF0aW9ucyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9waGV0LmNvbG9yYWRvLmVkdS9zZXJ2aWNlcy9tZXRhZGF0YS8xLjMvc2ltdWxhdGlvbnM/Zm9ybWF0PWpzb24mdHlwZT1odG1sJnN1bW1hcnknO1xyXG4gIGNvbnN0IHByb2plY3RzID0gKCBhd2FpdCBheGlvcy5nZXQoIHVybCApICkuZGF0YS5wcm9qZWN0cztcclxuXHJcbiAgY29uc3Qgc2NyZWVuTmFtZU9iamVjdCA9IHt9O1xyXG5cclxuICBmb3IgKCBsZXQgcHJvamVjdEluZGV4ID0gMDsgcHJvamVjdEluZGV4IDwgcHJvamVjdHMubGVuZ3RoOyBwcm9qZWN0SW5kZXgrKyApIHtcclxuICAgIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0c1sgcHJvamVjdEluZGV4IF07XHJcbiAgICBjb25zdCBzaW11bGF0aW9uID0gcHJvamVjdC5zaW11bGF0aW9uc1sgMCBdO1xyXG4gICAgY29uc3Qgc2ltTmFtZSA9IHNpbXVsYXRpb24ubmFtZTtcclxuICAgIGNvbnN0IGxvY2FsZXMgPSBPYmplY3Qua2V5cyggc2ltdWxhdGlvbi5sb2NhbGl6ZWRTaW11bGF0aW9ucyApO1xyXG4gICAgc2NyZWVuTmFtZU9iamVjdFsgc2ltTmFtZSBdID0gYXdhaXQgcGFyc2VTY3JlZW5OYW1lc0Zyb21TaW11bGF0aW9uKCBzaW1OYW1lLCBsb2NhbGVzICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2NyZWVuTmFtZU9iamVjdDtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHBhcnNlU2NyZWVuTmFtZXM6IGFzeW5jICggc2ltTmFtZSwgbG9jYWxlcyApID0+IHBhcnNlU2NyZWVuTmFtZXNGcm9tU2ltdWxhdGlvbiggc2ltTmFtZSwgbG9jYWxlcyApLFxyXG4gIHBhcnNlU2NyZWVuTmFtZXNBbGxTaW11bGF0aW9uczogcGFyc2VTY3JlZW5OYW1lc0FsbFNpbXVsYXRpb25zXHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBRSxPQUFRLENBQUM7QUFDaEMsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUUsV0FBWSxDQUFDO0FBQ3hDLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFFLFNBQVUsQ0FBQztBQUNwQyxNQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDbEMsTUFBTUksYUFBYSxHQUFHSixPQUFPLENBQUUseUJBQTBCLENBQUM7O0FBRTFEO0FB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