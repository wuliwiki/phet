// Copyright 2016 BrainPOP
// Released under MIT License,
// see https://raw.githubusercontent.com/phetsims/sherpa/master/licenses/game-up-camera-1.0.0.js.txt

/**
 * Responds to requests from BrainPOP/Game Up/SnapThought for return images from a PhET simulation.
 * @author BrainPOP
 * @author Vin Rowe
 * @author Sam Reid (PhET Interactive Simulations)
 */

const logging = window.phet.chipper.queryParameters.gameUpLogging;
const isGameUp = window.phet.chipper.queryParameters.gameUp;
const isGameUpTestHarness = window.phet.chipper.queryParameters.gameUpTestHarness;
const log = text => logging && console.log(text);

// Only enable if a query parameter is set
if (isGameUp) {
  log('Enabled Game Up Camera');
  const suffix = '.brainpop.com';

  // haven't received word from the parent that captureReady succeeded
  let gameUpCaptureReady = false;

  // Stop checking after 10 times in case we somehow missed the GameUpCaptureReady message
  let numberOfChecks = 0;
  const checkInitialization = () => {
    // haven't received word from the parent that captureReady succeeded
    if (!gameUpCaptureReady && numberOfChecks < 10) {
      parent.postMessage('captureReady', '*');
      numberOfChecks++;
      log('Posted captureReady, number of checks: ' + numberOfChecks);
      setTimeout(checkInitialization, 1000); //try again in a second
    }
  };

  const receiver = event => {
    if (event.origin.indexOf(suffix, event.origin.length - suffix.length) !== -1 || isGameUpTestHarness) {
      if (event.data === 'captureImage') {
        const dataURL = window.phet.joist.ScreenshotGenerator.generateScreenshot(window.phet.joist.sim, 'image/jpeg');
        sendImage(dataURL, event.origin, event.source);
        log('Sent image');
      } else if (event.data === 'GameUpCaptureReady') {
        log('GameUpCaptureReady');

        // TODO: post captureReady from here

        //captureReady succeeded
        gameUpCaptureReady = true;
      }
    }
  };
  const sendImage = (imageString, origin, source) => {
    //capture.js already appends this, so we end up with two
    imageString = imageString.replace('data:image/jpeg;base64,', '');

    //send it back
    source.postMessage(imageString, origin);
  };
  if (window.addEventListener) {
    window.addEventListener('message', receiver, false);
  } else if (window.attachEvent) {
    window.attachEvent('onmessage', receiver);
  }

  // Call captureReady, function will recall itself until gameUpCaptureReady
  checkInitialization();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnaW5nIiwid2luZG93IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJnYW1lVXBMb2dnaW5nIiwiaXNHYW1lVXAiLCJnYW1lVXAiLCJpc0dhbWVVcFRlc3RIYXJuZXNzIiwiZ2FtZVVwVGVzdEhhcm5lc3MiLCJsb2ciLCJ0ZXh0IiwiY29uc29sZSIsInN1ZmZpeCIsImdhbWVVcENhcHR1cmVSZWFkeSIsIm51bWJlck9mQ2hlY2tzIiwiY2hlY2tJbml0aWFsaXphdGlvbiIsInBhcmVudCIsInBvc3RNZXNzYWdlIiwic2V0VGltZW91dCIsInJlY2VpdmVyIiwiZXZlbnQiLCJvcmlnaW4iLCJpbmRleE9mIiwibGVuZ3RoIiwiZGF0YSIsImRhdGFVUkwiLCJqb2lzdCIsIlNjcmVlbnNob3RHZW5lcmF0b3IiLCJnZW5lcmF0ZVNjcmVlbnNob3QiLCJzaW0iLCJzZW5kSW1hZ2UiLCJzb3VyY2UiLCJpbWFnZVN0cmluZyIsInJlcGxhY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiXSwic291cmNlcyI6WyJnYW1lLXVwLWNhbWVyYS0xLjAuMC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNiBCcmFpblBPUFxyXG4vLyBSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZSxcclxuLy8gc2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9waGV0c2ltcy9zaGVycGEvbWFzdGVyL2xpY2Vuc2VzL2dhbWUtdXAtY2FtZXJhLTEuMC4wLmpzLnR4dFxyXG5cclxuLyoqXHJcbiAqIFJlc3BvbmRzIHRvIHJlcXVlc3RzIGZyb20gQnJhaW5QT1AvR2FtZSBVcC9TbmFwVGhvdWdodCBmb3IgcmV0dXJuIGltYWdlcyBmcm9tIGEgUGhFVCBzaW11bGF0aW9uLlxyXG4gKiBAYXV0aG9yIEJyYWluUE9QXHJcbiAqIEBhdXRob3IgVmluIFJvd2VcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jb25zdCBsb2dnaW5nID0gd2luZG93LnBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZ2FtZVVwTG9nZ2luZztcclxuY29uc3QgaXNHYW1lVXAgPSB3aW5kb3cucGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5nYW1lVXA7XHJcbmNvbnN0IGlzR2FtZVVwVGVzdEhhcm5lc3MgPSB3aW5kb3cucGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5nYW1lVXBUZXN0SGFybmVzcztcclxuXHJcbmNvbnN0IGxvZyA9IHRleHQgPT4gbG9nZ2luZyAmJiBjb25zb2xlLmxvZyggdGV4dCApO1xyXG5cclxuLy8gT25seSBlbmFibGUgaWYgYSBxdWVyeSBwYXJhbWV0ZXIgaXMgc2V0XHJcbmlmICggaXNHYW1lVXAgKSB7XHJcblxyXG4gIGxvZyggJ0VuYWJsZWQgR2FtZSBVcCBDYW1lcmEnICk7XHJcblxyXG4gIGNvbnN0IHN1ZmZpeCA9ICcuYnJhaW5wb3AuY29tJztcclxuXHJcbiAgLy8gaGF2ZW4ndCByZWNlaXZlZCB3b3JkIGZyb20gdGhlIHBhcmVudCB0aGF0IGNhcHR1cmVSZWFkeSBzdWNjZWVkZWRcclxuICBsZXQgZ2FtZVVwQ2FwdHVyZVJlYWR5ID0gZmFsc2U7XHJcblxyXG4gIC8vIFN0b3AgY2hlY2tpbmcgYWZ0ZXIgMTAgdGltZXMgaW4gY2FzZSB3ZSBzb21laG93IG1pc3NlZCB0aGUgR2FtZVVwQ2FwdHVyZVJlYWR5IG1lc3NhZ2VcclxuICBsZXQgbnVtYmVyT2ZDaGVja3MgPSAwO1xyXG5cclxuICBjb25zdCBjaGVja0luaXRpYWxpemF0aW9uID0gKCkgPT4ge1xyXG5cclxuICAgIC8vIGhhdmVuJ3QgcmVjZWl2ZWQgd29yZCBmcm9tIHRoZSBwYXJlbnQgdGhhdCBjYXB0dXJlUmVhZHkgc3VjY2VlZGVkXHJcbiAgICBpZiAoICFnYW1lVXBDYXB0dXJlUmVhZHkgJiYgbnVtYmVyT2ZDaGVja3MgPCAxMCApIHtcclxuICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKCAnY2FwdHVyZVJlYWR5JywgJyonICk7XHJcbiAgICAgIG51bWJlck9mQ2hlY2tzKys7XHJcblxyXG4gICAgICBsb2coICdQb3N0ZWQgY2FwdHVyZVJlYWR5LCBudW1iZXIgb2YgY2hlY2tzOiAnICsgbnVtYmVyT2ZDaGVja3MgKTtcclxuICAgICAgc2V0VGltZW91dCggY2hlY2tJbml0aWFsaXphdGlvbiwgMTAwMCApOy8vdHJ5IGFnYWluIGluIGEgc2Vjb25kXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmVjZWl2ZXIgPSBldmVudCA9PiB7XHJcbiAgICBpZiAoIGV2ZW50Lm9yaWdpbi5pbmRleE9mKCBzdWZmaXgsIGV2ZW50Lm9yaWdpbi5sZW5ndGggLSBzdWZmaXgubGVuZ3RoICkgIT09IC0xIHx8IGlzR2FtZVVwVGVzdEhhcm5lc3MgKSB7XHJcbiAgICAgIGlmICggZXZlbnQuZGF0YSA9PT0gJ2NhcHR1cmVJbWFnZScgKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YVVSTCA9IHdpbmRvdy5waGV0LmpvaXN0LlNjcmVlbnNob3RHZW5lcmF0b3IuZ2VuZXJhdGVTY3JlZW5zaG90KCB3aW5kb3cucGhldC5qb2lzdC5zaW0sICdpbWFnZS9qcGVnJyApO1xyXG4gICAgICAgIHNlbmRJbWFnZSggZGF0YVVSTCwgZXZlbnQub3JpZ2luLCBldmVudC5zb3VyY2UgKTtcclxuXHJcbiAgICAgICAgbG9nKCAnU2VudCBpbWFnZScgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggZXZlbnQuZGF0YSA9PT0gJ0dhbWVVcENhcHR1cmVSZWFkeScgKSB7XHJcblxyXG4gICAgICAgIGxvZyggJ0dhbWVVcENhcHR1cmVSZWFkeScgKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogcG9zdCBjYXB0dXJlUmVhZHkgZnJvbSBoZXJlXHJcblxyXG4gICAgICAgIC8vY2FwdHVyZVJlYWR5IHN1Y2NlZWRlZFxyXG4gICAgICAgIGdhbWVVcENhcHR1cmVSZWFkeSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzZW5kSW1hZ2UgPSAoIGltYWdlU3RyaW5nLCBvcmlnaW4sIHNvdXJjZSApID0+IHtcclxuXHJcbiAgICAvL2NhcHR1cmUuanMgYWxyZWFkeSBhcHBlbmRzIHRoaXMsIHNvIHdlIGVuZCB1cCB3aXRoIHR3b1xyXG4gICAgaW1hZ2VTdHJpbmcgPSBpbWFnZVN0cmluZy5yZXBsYWNlKCAnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnLCAnJyApO1xyXG5cclxuICAgIC8vc2VuZCBpdCBiYWNrXHJcbiAgICBzb3VyY2UucG9zdE1lc3NhZ2UoIGltYWdlU3RyaW5nLCBvcmlnaW4gKTtcclxuICB9O1xyXG5cclxuICBpZiAoIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdtZXNzYWdlJywgcmVjZWl2ZXIsIGZhbHNlICk7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XHJcbiAgICB3aW5kb3cuYXR0YWNoRXZlbnQoICdvbm1lc3NhZ2UnLCByZWNlaXZlciApO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FsbCBjYXB0dXJlUmVhZHksIGZ1bmN0aW9uIHdpbGwgcmVjYWxsIGl0c2VsZiB1bnRpbCBnYW1lVXBDYXB0dXJlUmVhZHlcclxuICBjaGVja0luaXRpYWxpemF0aW9uKCk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLGFBQWE7QUFDakUsTUFBTUMsUUFBUSxHQUFHTCxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNHLE1BQU07QUFDM0QsTUFBTUMsbUJBQW1CLEdBQUdQLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxPQUFP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