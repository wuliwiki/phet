// Copyright 2016-2022, University of Colorado Boulder

/**
 * View for scene-based
 * View node for the Explore screen, or for Predict screen if the model has predictMode set to true.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import ScreenView from '../../../../joist/js/ScreenView.js';
import ResetAllButton from '../../../../scenery-phet/js/buttons/ResetAllButton.js';
import { Node } from '../../../../scenery/js/imports.js';
import proportionPlayground from '../../proportionPlayground.js';
import ProportionPlaygroundConstants from '../ProportionPlaygroundConstants.js';
import AppleSceneNode from './apples/AppleSceneNode.js';
import BilliardsSceneNode from './billiards/BilliardsSceneNode.js';
import NecklaceSceneNode from './necklace/NecklaceSceneNode.js';
import PaintSceneNode from './paint/PaintSceneNode.js';
import SceneSelectionControls from './SceneSelectionControls.js';
class ProportionScreenView extends ScreenView {
  /**
   * @param {BarModel} model - the model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super({
      tandem: tandem
    });

    // Reset All button
    this.addChild(new ResetAllButton({
      listener: () => {
        model.reset();
      },
      centerX: this.layoutBounds.right - ProportionPlaygroundConstants.BUTTON_RIGHT_CENTER_OFFSET,
      bottom: this.layoutBounds.maxY - 10,
      tandem: tandem.createTandem('resetAllButton')
    }));

    // @private {Array.<SceneNode>} - Store by index for lookup by radio button index
    this.sceneNodes = [new NecklaceSceneNode(model.necklaceScene, this.layoutBounds, tandem.createTandem('necklaceScene')), new PaintSceneNode(model.paintScene, this.layoutBounds, tandem.createTandem('paintScene')), new BilliardsSceneNode(model.billiardsScene, this.layoutBounds, tandem.createTandem('billiardsScene')), new AppleSceneNode(model.appleScene, this.layoutBounds, tandem.createTandem('appleScene'))];

    // Scene selection radio buttons
    this.addChild(new SceneSelectionControls(model.sceneProperty, this.sceneNodes, tandem.createTandem('sceneSelectionButtonGroup'), {
      centerX: this.layoutBounds.centerX,
      top: 5
    }));
    this.sceneNodes.forEach(scene => {
      scene.addShowBothSwitch();
    });
    const sceneContainer = new Node({
      children: this.sceneNodes
    });
    this.addChild(sceneContainer);

    // When the scene radio button is selected, show the selected scene
    model.sceneProperty.link(scene => {
      for (let i = 0; i < this.sceneNodes.length; i++) {
        const sceneNode = this.sceneNodes[i];
        const shouldBeVisible = sceneNode.scene === scene;
        const isCurrentlyVisible = sceneNode.visible;

        // Interrupt
        if (!shouldBeVisible && isCurrentlyVisible) {
          sceneNode.interruptSubtreeInput();
        }
        sceneNode.visible = shouldBeVisible;
      }
    });
  }

  /**
   * Steps forward in time.
   * @public
   *
   * @param {number} dt - In seconds
   */
  step(dt) {
    // NOTE: uncapped dt in the view so that the transient animations finish when someone tabs out. See
    // https://github.com/phetsims/proportion-playground/issues/87 for more information.

    const visibleBounds = this.visibleBoundsProperty.value;
    for (let i = 0; i < this.sceneNodes.length; i++) {
      this.sceneNodes[i].step(dt, visibleBounds);
    }
  }
}
proportionPlayground.register('ProportionScreenView', ProportionScreenView);
export default ProportionScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW5WaWV3IiwiUmVzZXRBbGxCdXR0b24iLCJOb2RlIiwicHJvcG9ydGlvblBsYXlncm91bmQiLCJQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cyIsIkFwcGxlU2NlbmVOb2RlIiwiQmlsbGlhcmRzU2NlbmVOb2RlIiwiTmVja2xhY2VTY2VuZU5vZGUiLCJQYWludFNjZW5lTm9kZSIsIlNjZW5lU2VsZWN0aW9uQ29udHJvbHMiLCJQcm9wb3J0aW9uU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJhZGRDaGlsZCIsImxpc3RlbmVyIiwicmVzZXQiLCJjZW50ZXJYIiwibGF5b3V0Qm91bmRzIiwicmlnaHQiLCJCVVRUT05fUklHSFRfQ0VOVEVSX09GRlNFVCIsImJvdHRvbSIsIm1heFkiLCJjcmVhdGVUYW5kZW0iLCJzY2VuZU5vZGVzIiwibmVja2xhY2VTY2VuZSIsInBhaW50U2NlbmUiLCJiaWxsaWFyZHNTY2VuZSIsImFwcGxlU2NlbmUiLCJzY2VuZVByb3BlcnR5IiwidG9wIiwiZm9yRWFjaCIsInNjZW5lIiwiYWRkU2hvd0JvdGhTd2l0Y2giLCJzY2VuZUNvbnRhaW5lciIsImNoaWxkcmVuIiwibGluayIsImkiLCJsZW5ndGgiLCJzY2VuZU5vZGUiLCJzaG91bGRCZVZpc2libGUiLCJpc0N1cnJlbnRseVZpc2libGUiLCJ2aXNpYmxlIiwiaW50ZXJydXB0U3VidHJlZUlucHV0Iiwic3RlcCIsImR0IiwidmlzaWJsZUJvdW5kcyIsInZpc2libGVCb3VuZHNQcm9wZXJ0eSIsInZhbHVlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9wb3J0aW9uU2NyZWVuVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWaWV3IGZvciBzY2VuZS1iYXNlZFxyXG4gKiBWaWV3IG5vZGUgZm9yIHRoZSBFeHBsb3JlIHNjcmVlbiwgb3IgZm9yIFByZWRpY3Qgc2NyZWVuIGlmIHRoZSBtb2RlbCBoYXMgcHJlZGljdE1vZGUgc2V0IHRvIHRydWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlblZpZXcgZnJvbSAnLi4vLi4vLi4vLi4vam9pc3QvanMvU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBSZXNldEFsbEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvYnV0dG9ucy9SZXNldEFsbEJ1dHRvbi5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgcHJvcG9ydGlvblBsYXlncm91bmQgZnJvbSAnLi4vLi4vcHJvcG9ydGlvblBsYXlncm91bmQuanMnO1xyXG5pbXBvcnQgUHJvcG9ydGlvblBsYXlncm91bmRDb25zdGFudHMgZnJvbSAnLi4vUHJvcG9ydGlvblBsYXlncm91bmRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgQXBwbGVTY2VuZU5vZGUgZnJvbSAnLi9hcHBsZXMvQXBwbGVTY2VuZU5vZGUuanMnO1xyXG5pbXBvcnQgQmlsbGlhcmRzU2NlbmVOb2RlIGZyb20gJy4vYmlsbGlhcmRzL0JpbGxpYXJkc1NjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBOZWNrbGFjZVNjZW5lTm9kZSBmcm9tICcuL25lY2tsYWNlL05lY2tsYWNlU2NlbmVOb2RlLmpzJztcclxuaW1wb3J0IFBhaW50U2NlbmVOb2RlIGZyb20gJy4vcGFpbnQvUGFpbnRTY2VuZU5vZGUuanMnO1xyXG5pbXBvcnQgU2NlbmVTZWxlY3Rpb25Db250cm9scyBmcm9tICcuL1NjZW5lU2VsZWN0aW9uQ29udHJvbHMuanMnO1xyXG5cclxuY2xhc3MgUHJvcG9ydGlvblNjcmVlblZpZXcgZXh0ZW5kcyBTY3JlZW5WaWV3IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCYXJNb2RlbH0gbW9kZWwgLSB0aGUgbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlcigge1xyXG4gICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFJlc2V0IEFsbCBidXR0b25cclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBSZXNldEFsbEJ1dHRvbigge1xyXG4gICAgICBsaXN0ZW5lcjogKCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLnJlc2V0KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNlbnRlclg6IHRoaXMubGF5b3V0Qm91bmRzLnJpZ2h0IC0gUHJvcG9ydGlvblBsYXlncm91bmRDb25zdGFudHMuQlVUVE9OX1JJR0hUX0NFTlRFUl9PRkZTRVQsXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMubWF4WSAtIDEwLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdyZXNldEFsbEJ1dHRvbicgKVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge0FycmF5LjxTY2VuZU5vZGU+fSAtIFN0b3JlIGJ5IGluZGV4IGZvciBsb29rdXAgYnkgcmFkaW8gYnV0dG9uIGluZGV4XHJcbiAgICB0aGlzLnNjZW5lTm9kZXMgPSBbXHJcbiAgICAgIG5ldyBOZWNrbGFjZVNjZW5lTm9kZSggbW9kZWwubmVja2xhY2VTY2VuZSwgdGhpcy5sYXlvdXRCb3VuZHMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICduZWNrbGFjZVNjZW5lJyApICksXHJcbiAgICAgIG5ldyBQYWludFNjZW5lTm9kZSggbW9kZWwucGFpbnRTY2VuZSwgdGhpcy5sYXlvdXRCb3VuZHMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdwYWludFNjZW5lJyApICksXHJcbiAgICAgIG5ldyBCaWxsaWFyZHNTY2VuZU5vZGUoIG1vZGVsLmJpbGxpYXJkc1NjZW5lLCB0aGlzLmxheW91dEJvdW5kcywgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2JpbGxpYXJkc1NjZW5lJyApICksXHJcbiAgICAgIG5ldyBBcHBsZVNjZW5lTm9kZSggbW9kZWwuYXBwbGVTY2VuZSwgdGhpcy5sYXlvdXRCb3VuZHMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhcHBsZVNjZW5lJyApIClcclxuICAgIF07XHJcblxyXG4gICAgLy8gU2NlbmUgc2VsZWN0aW9uIHJhZGlvIGJ1dHRvbnNcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBTY2VuZVNlbGVjdGlvbkNvbnRyb2xzKCBtb2RlbC5zY2VuZVByb3BlcnR5LCB0aGlzLnNjZW5lTm9kZXMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzY2VuZVNlbGVjdGlvbkJ1dHRvbkdyb3VwJyApLCB7XHJcbiAgICAgIGNlbnRlclg6IHRoaXMubGF5b3V0Qm91bmRzLmNlbnRlclgsXHJcbiAgICAgIHRvcDogNVxyXG4gICAgfSApICk7XHJcblxyXG4gICAgdGhpcy5zY2VuZU5vZGVzLmZvckVhY2goIHNjZW5lID0+IHtcclxuICAgICAgc2NlbmUuYWRkU2hvd0JvdGhTd2l0Y2goKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBzY2VuZUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnNjZW5lTm9kZXNcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHNjZW5lQ29udGFpbmVyICk7XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgc2NlbmUgcmFkaW8gYnV0dG9uIGlzIHNlbGVjdGVkLCBzaG93IHRoZSBzZWxlY3RlZCBzY2VuZVxyXG4gICAgbW9kZWwuc2NlbmVQcm9wZXJ0eS5saW5rKCBzY2VuZSA9PiB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuc2NlbmVOb2Rlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICBjb25zdCBzY2VuZU5vZGUgPSB0aGlzLnNjZW5lTm9kZXNbIGkgXTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2hvdWxkQmVWaXNpYmxlID0gc2NlbmVOb2RlLnNjZW5lID09PSBzY2VuZTtcclxuICAgICAgICBjb25zdCBpc0N1cnJlbnRseVZpc2libGUgPSBzY2VuZU5vZGUudmlzaWJsZTtcclxuXHJcbiAgICAgICAgLy8gSW50ZXJydXB0XHJcbiAgICAgICAgaWYgKCAhc2hvdWxkQmVWaXNpYmxlICYmIGlzQ3VycmVudGx5VmlzaWJsZSApIHtcclxuICAgICAgICAgIHNjZW5lTm9kZS5pbnRlcnJ1cHRTdWJ0cmVlSW5wdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NlbmVOb2RlLnZpc2libGUgPSBzaG91bGRCZVZpc2libGU7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0ZXBzIGZvcndhcmQgaW4gdGltZS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHQgLSBJbiBzZWNvbmRzXHJcbiAgICovXHJcbiAgc3RlcCggZHQgKSB7XHJcbiAgICAvLyBOT1RFOiB1bmNhcHBlZCBkdCBpbiB0aGUgdmlldyBzbyB0aGF0IHRoZSB0cmFuc2llbnQgYW5pbWF0aW9ucyBmaW5pc2ggd2hlbiBzb21lb25lIHRhYnMgb3V0LiBTZWVcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9wcm9wb3J0aW9uLXBsYXlncm91bmQvaXNzdWVzLzg3IGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cclxuICAgIGNvbnN0IHZpc2libGVCb3VuZHMgPSB0aGlzLnZpc2libGVCb3VuZHNQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuc2NlbmVOb2Rlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgdGhpcy5zY2VuZU5vZGVzWyBpIF0uc3RlcCggZHQsIHZpc2libGVCb3VuZHMgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnByb3BvcnRpb25QbGF5Z3JvdW5kLnJlZ2lzdGVyKCAnUHJvcG9ydGlvblNjcmVlblZpZXcnLCBQcm9wb3J0aW9uU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBQcm9wb3J0aW9uU2NyZWVuVmlldzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sb0NBQW9DO0FBQzNELE9BQU9DLGNBQWMsTUFBTSx1REFBdUQ7QUFDbEYsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxvQkFBb0IsTUFBTSwrQkFBK0I7QUFDaEUsT0FBT0MsNkJBQTZCLE1BQU0scUNBQXFDO0FBQy9FLE9BQU9DLGNBQWMsTUFBTSw0QkFBNEI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0sbUNBQW1DO0FBQ2xFLE9BQU9DLGlCQUFpQixNQUFNLGlDQUFpQztBQUMvRCxPQUFPQyxjQUFjLE1BQU0sMkJBQTJCO0FBQ3RELE9BQU9DLHNCQUFzQixNQUFNLDZCQUE2QjtBQUVoRSxNQUFNQyxvQkFBb0IsU0FBU1YsVUFBVSxDQUFDO0VBRTVDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VXLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFHO0lBQzNCLEtBQUssQ0FBRTtNQUNMQSxNQUFNLEVBQUVBO0lBQ1YsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUUsSUFBSWIsY0FBYyxDQUFFO01BQ2pDYyxRQUFRLEVBQUVBLENBQUEsS0FBTTtRQUNkSCxLQUFLLENBQUNJLEtBQUssQ0FBQyxDQUFDO01BQ2YsQ0FBQztNQUNEQyxPQUFPLEVBQUUsSUFBSSxDQUFDQyxZQUFZLENBQUNDLEtBQUssR0FBR2YsNkJBQTZCLENBQUNnQiwwQkFBMEI7TUFDM0ZDLE1BQU0sRUFBRSxJQUFJLENBQUNILFlBQVksQ0FBQ0ksSUFBSSxHQUFHLEVBQUU7TUFDbkNULE1BQU0s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