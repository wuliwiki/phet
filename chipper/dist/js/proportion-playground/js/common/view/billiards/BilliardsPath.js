// Copyright 2017-2022, University of Colorado Boulder

/**
 * Displays the path along which the billiard ball has traveled.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector2 from '../../../../../dot/js/Vector2.js';
import { Line, Node } from '../../../../../scenery/js/imports.js';
import proportionPlayground from '../../../proportionPlayground.js';
import ProportionPlaygroundColors from '../ProportionPlaygroundColors.js';

// constants
const LINE_OPTIONS = {
  stroke: ProportionPlaygroundColors.billiardsPathProperty,
  lineWidth: 2,
  lineCap: 'round'
};
class BilliardsPath extends Node {
  /**
   * @param {ModelViewTransform2} modelViewTransform
   * @param {ObservableArrayDef.<Vector2>} collisionPoints - In model coordinates
   * @param {Property.<Vector2>} ballPositionProperty - In model coordinates
   */
  constructor(modelViewTransform, collisionPoints, ballPositionProperty) {
    super();
    assert && assert(collisionPoints.length > 0, 'Should be guaranteed');

    // @private {ModelViewTransform2}
    this.modelViewTransform = modelViewTransform;

    // @private {ObservableArrayDef.<Vector2>}
    this.collisionPoints = collisionPoints;

    // @private {Vector2}
    this.previousCollisionPoint = null;

    // @private {Property.<Vector2>}
    this.ballPositionProperty = ballPositionProperty;

    // @private {Line}
    this.currentLine = new Line(LINE_OPTIONS);
    this.addChild(this.currentLine);
    ballPositionProperty.link(modelPoint => {
      this.currentLine.p2 = modelViewTransform.modelToViewPosition(modelPoint);
    });

    // @private {function}
    this.collisionListener = this.addCollision.bind(this);
    collisionPoints.addItemAddedListener(this.collisionListener);
    collisionPoints.forEach(this.collisionListener);

    // Update our view on a model-view transform change.
    modelViewTransform.changeEmitter.addListener(this.reset.bind(this));
  }

  /**
   * Handles added collision points.
   * @private
   *
   * @param {Vector2} point
   */
  addCollision(point) {
    point = this.modelViewTransform.modelToViewPosition(point);

    // If we are the first point, don't create a line
    if (this.previousCollisionPoint) {
      this.addChild(new Line(this.previousCollisionPoint, point, LINE_OPTIONS));
    }
    this.currentLine.p1 = this.previousCollisionPoint = point;
  }

  /**
   * Resets the path.
   * @public
   */
  reset() {
    this.previousCollisionPoint = null;
    this.children = [this.currentLine];
    this.currentLine.p1 = new Vector2(0, 0);
    this.collisionPoints.forEach(this.collisionListener);
  }
}
proportionPlayground.register('BilliardsPath', BilliardsPath);
export default BilliardsPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiTGluZSIsIk5vZGUiLCJwcm9wb3J0aW9uUGxheWdyb3VuZCIsIlByb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzIiwiTElORV9PUFRJT05TIiwic3Ryb2tlIiwiYmlsbGlhcmRzUGF0aFByb3BlcnR5IiwibGluZVdpZHRoIiwibGluZUNhcCIsIkJpbGxpYXJkc1BhdGgiLCJjb25zdHJ1Y3RvciIsIm1vZGVsVmlld1RyYW5zZm9ybSIsImNvbGxpc2lvblBvaW50cyIsImJhbGxQb3NpdGlvblByb3BlcnR5IiwiYXNzZXJ0IiwibGVuZ3RoIiwicHJldmlvdXNDb2xsaXNpb25Qb2ludCIsImN1cnJlbnRMaW5lIiwiYWRkQ2hpbGQiLCJsaW5rIiwibW9kZWxQb2ludCIsInAyIiwibW9kZWxUb1ZpZXdQb3NpdGlvbiIsImNvbGxpc2lvbkxpc3RlbmVyIiwiYWRkQ29sbGlzaW9uIiwiYmluZCIsImFkZEl0ZW1BZGRlZExpc3RlbmVyIiwiZm9yRWFjaCIsImNoYW5nZUVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsInJlc2V0IiwicG9pbnQiLCJwMSIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCaWxsaWFyZHNQYXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIHRoZSBwYXRoIGFsb25nIHdoaWNoIHRoZSBiaWxsaWFyZCBiYWxsIGhhcyB0cmF2ZWxlZC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgTGluZSwgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwcm9wb3J0aW9uUGxheWdyb3VuZCBmcm9tICcuLi8uLi8uLi9wcm9wb3J0aW9uUGxheWdyb3VuZC5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycyBmcm9tICcuLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTElORV9PUFRJT05TID0ge1xyXG4gIHN0cm9rZTogUHJvcG9ydGlvblBsYXlncm91bmRDb2xvcnMuYmlsbGlhcmRzUGF0aFByb3BlcnR5LFxyXG4gIGxpbmVXaWR0aDogMixcclxuICBsaW5lQ2FwOiAncm91bmQnXHJcbn07XHJcblxyXG5jbGFzcyBCaWxsaWFyZHNQYXRoIGV4dGVuZHMgTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtNb2RlbFZpZXdUcmFuc2Zvcm0yfSBtb2RlbFZpZXdUcmFuc2Zvcm1cclxuICAgKiBAcGFyYW0ge09ic2VydmFibGVBcnJheURlZi48VmVjdG9yMj59IGNvbGxpc2lvblBvaW50cyAtIEluIG1vZGVsIGNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48VmVjdG9yMj59IGJhbGxQb3NpdGlvblByb3BlcnR5IC0gSW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWxWaWV3VHJhbnNmb3JtLCBjb2xsaXNpb25Qb2ludHMsIGJhbGxQb3NpdGlvblByb3BlcnR5ICkge1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY29sbGlzaW9uUG9pbnRzLmxlbmd0aCA+IDAsICdTaG91bGQgYmUgZ3VhcmFudGVlZCcgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7TW9kZWxWaWV3VHJhbnNmb3JtMn1cclxuICAgIHRoaXMubW9kZWxWaWV3VHJhbnNmb3JtID0gbW9kZWxWaWV3VHJhbnNmb3JtO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtPYnNlcnZhYmxlQXJyYXlEZWYuPFZlY3RvcjI+fVxyXG4gICAgdGhpcy5jb2xsaXNpb25Qb2ludHMgPSBjb2xsaXNpb25Qb2ludHM7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge1ZlY3RvcjJ9XHJcbiAgICB0aGlzLnByZXZpb3VzQ29sbGlzaW9uUG9pbnQgPSBudWxsO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtQcm9wZXJ0eS48VmVjdG9yMj59XHJcbiAgICB0aGlzLmJhbGxQb3NpdGlvblByb3BlcnR5ID0gYmFsbFBvc2l0aW9uUHJvcGVydHk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUge0xpbmV9XHJcbiAgICB0aGlzLmN1cnJlbnRMaW5lID0gbmV3IExpbmUoIExJTkVfT1BUSU9OUyApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggdGhpcy5jdXJyZW50TGluZSApO1xyXG4gICAgYmFsbFBvc2l0aW9uUHJvcGVydHkubGluayggbW9kZWxQb2ludCA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExpbmUucDIgPSBtb2RlbFZpZXdUcmFuc2Zvcm0ubW9kZWxUb1ZpZXdQb3NpdGlvbiggbW9kZWxQb2ludCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtmdW5jdGlvbn1cclxuICAgIHRoaXMuY29sbGlzaW9uTGlzdGVuZXIgPSB0aGlzLmFkZENvbGxpc2lvbi5iaW5kKCB0aGlzICk7XHJcbiAgICBjb2xsaXNpb25Qb2ludHMuYWRkSXRlbUFkZGVkTGlzdGVuZXIoIHRoaXMuY29sbGlzaW9uTGlzdGVuZXIgKTtcclxuICAgIGNvbGxpc2lvblBvaW50cy5mb3JFYWNoKCB0aGlzLmNvbGxpc2lvbkxpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIG91ciB2aWV3IG9uIGEgbW9kZWwtdmlldyB0cmFuc2Zvcm0gY2hhbmdlLlxyXG4gICAgbW9kZWxWaWV3VHJhbnNmb3JtLmNoYW5nZUVtaXR0ZXIuYWRkTGlzdGVuZXIoIHRoaXMucmVzZXQuYmluZCggdGhpcyApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIGFkZGVkIGNvbGxpc2lvbiBwb2ludHMuXHJcbiAgICogQHByaXZhdGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gcG9pbnRcclxuICAgKi9cclxuICBhZGRDb2xsaXNpb24oIHBvaW50ICkge1xyXG4gICAgcG9pbnQgPSB0aGlzLm1vZGVsVmlld1RyYW5zZm9ybS5tb2RlbFRvVmlld1Bvc2l0aW9uKCBwb2ludCApO1xyXG5cclxuICAgIC8vIElmIHdlIGFyZSB0aGUgZmlyc3QgcG9pbnQsIGRvbid0IGNyZWF0ZSBhIGxpbmVcclxuICAgIGlmICggdGhpcy5wcmV2aW91c0NvbGxpc2lvblBvaW50ICkge1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBuZXcgTGluZSggdGhpcy5wcmV2aW91c0NvbGxpc2lvblBvaW50LCBwb2ludCwgTElORV9PUFRJT05TICkgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmN1cnJlbnRMaW5lLnAxID0gdGhpcy5wcmV2aW91c0NvbGxpc2lvblBvaW50ID0gcG9pbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldHMgdGhlIHBhdGguXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5wcmV2aW91c0NvbGxpc2lvblBvaW50ID0gbnVsbDtcclxuICAgIHRoaXMuY2hpbGRyZW4gPSBbIHRoaXMuY3VycmVudExpbmUgXTtcclxuICAgIHRoaXMuY3VycmVudExpbmUucDEgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xyXG4gICAgdGhpcy5jb2xsaXNpb25Qb2ludHMuZm9yRWFjaCggdGhpcy5jb2xsaXNpb25MaXN0ZW5lciApO1xyXG4gIH1cclxufVxyXG5cclxucHJvcG9ydGlvblBsYXlncm91bmQucmVnaXN0ZXIoICdCaWxsaWFyZHNQYXRoJywgQmlsbGlhcmRzUGF0aCApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmlsbGlhcmRzUGF0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