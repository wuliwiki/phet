// Copyright 2016-2022, University of Colorado Boulder

/**
 * Shows a single billiards table with its associated NumberPickers to change the size.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import merge from '../../../../../phet-core/js/merge.js';
import { HBox, VBox } from '../../../../../scenery/js/imports.js';
import proportionPlayground from '../../../proportionPlayground.js';
import ProportionPlaygroundStrings from '../../../ProportionPlaygroundStrings.js';
import Side from '../../model/Side.js';
import ProportionPlaygroundColors from '../ProportionPlaygroundColors.js';
import SceneRatioControl from '../SceneRatioControl.js';
import BilliardsTableNode from './BilliardsTableNode.js';
const lengthString = ProportionPlaygroundStrings.length;
const widthString = ProportionPlaygroundStrings.width;
class BilliardsTableControl extends SceneRatioControl {
  /**
   * @param {BilliardsTable} billiardsTable - the model
   * @param {Tandem} tandem
   * @param {Object} config - node layout config
   */
  constructor(billiardsTable, tandem, config) {
    super(billiardsTable, ProportionPlaygroundColors.billiardsBorderProperty, ProportionPlaygroundColors.billiardsBorderProperty, tandem, {
      leftPickerLabel: lengthString,
      rightPickerLabel: widthString,
      pickerLabelMaxWidth: 70
    });
    assert && assert(config.side, 'side is required');
    config = merge({
      side: null,
      // {Side} - Required, assertion above
      allowDragToResize: false // Whether resizing is allowed
    }, config);

    // @public - The table itself, with the ball/holes/gridlines/etc.
    this.billiardsTableNode = new BilliardsTableNode(billiardsTable, tandem.createTandem('billiardsTableNode'), {
      allowDragToResize: config.allowDragToResize
    });

    // @protected @override - We need more customization for positioning for the billiards scene, so we create our own
    // pickerContainer instead of calling a function to create it.
    this.pickerContainer = new VBox({
      spacing: 30,
      children: [this.leftPicker, this.rightPicker]
    });
    this.addChild(new HBox({
      spacing: 30,
      children: config.side === Side.LEFT ? [this.pickerContainer, this.billiardsTableNode] : [this.billiardsTableNode, this.pickerContainer],
      excludeInvisibleChildrenFromBounds: false
    }));
    this.mutate(config);
  }

  /**
   * Sets the center of our billiardsTableNode (not our whole control) to the given centerX.
   * @public
   *
   * @param {number} centerX
   */
  setBilliardsCenter(centerX) {
    this.x = centerX - this.billiardsTableNode.centerX;
  }
}
proportionPlayground.register('BilliardsTableControl', BilliardsTableControl);
export default BilliardsTableControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIkhCb3giLCJWQm94IiwicHJvcG9ydGlvblBsYXlncm91bmQiLCJQcm9wb3J0aW9uUGxheWdyb3VuZFN0cmluZ3MiLCJTaWRlIiwiUHJvcG9ydGlvblBsYXlncm91bmRDb2xvcnMiLCJTY2VuZVJhdGlvQ29udHJvbCIsIkJpbGxpYXJkc1RhYmxlTm9kZSIsImxlbmd0aFN0cmluZyIsImxlbmd0aCIsIndpZHRoU3RyaW5nIiwid2lkdGgiLCJCaWxsaWFyZHNUYWJsZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsImJpbGxpYXJkc1RhYmxlIiwidGFuZGVtIiwiY29uZmlnIiwiYmlsbGlhcmRzQm9yZGVyUHJvcGVydHkiLCJsZWZ0UGlja2VyTGFiZWwiLCJyaWdodFBpY2tlckxhYmVsIiwicGlja2VyTGFiZWxNYXhXaWR0aCIsImFzc2VydCIsInNpZGUiLCJhbGxvd0RyYWdUb1Jlc2l6ZSIsImJpbGxpYXJkc1RhYmxlTm9kZSIsImNyZWF0ZVRhbmRlbSIsInBpY2tlckNvbnRhaW5lciIsInNwYWNpbmciLCJjaGlsZHJlbiIsImxlZnRQaWNrZXIiLCJyaWdodFBpY2tlciIsImFkZENoaWxkIiwiTEVGVCIsImV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHMiLCJtdXRhdGUiLCJzZXRCaWxsaWFyZHNDZW50ZXIiLCJjZW50ZXJYIiwieCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQmlsbGlhcmRzVGFibGVDb250cm9sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNob3dzIGEgc2luZ2xlIGJpbGxpYXJkcyB0YWJsZSB3aXRoIGl0cyBhc3NvY2lhdGVkIE51bWJlclBpY2tlcnMgdG8gY2hhbmdlIHRoZSBzaXplLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHByb3BvcnRpb25QbGF5Z3JvdW5kIGZyb20gJy4uLy4uLy4uL3Byb3BvcnRpb25QbGF5Z3JvdW5kLmpzJztcclxuaW1wb3J0IFByb3BvcnRpb25QbGF5Z3JvdW5kU3RyaW5ncyBmcm9tICcuLi8uLi8uLi9Qcm9wb3J0aW9uUGxheWdyb3VuZFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgU2lkZSBmcm9tICcuLi8uLi9tb2RlbC9TaWRlLmpzJztcclxuaW1wb3J0IFByb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzIGZyb20gJy4uL1Byb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzLmpzJztcclxuaW1wb3J0IFNjZW5lUmF0aW9Db250cm9sIGZyb20gJy4uL1NjZW5lUmF0aW9Db250cm9sLmpzJztcclxuaW1wb3J0IEJpbGxpYXJkc1RhYmxlTm9kZSBmcm9tICcuL0JpbGxpYXJkc1RhYmxlTm9kZS5qcyc7XHJcblxyXG5jb25zdCBsZW5ndGhTdHJpbmcgPSBQcm9wb3J0aW9uUGxheWdyb3VuZFN0cmluZ3MubGVuZ3RoO1xyXG5jb25zdCB3aWR0aFN0cmluZyA9IFByb3BvcnRpb25QbGF5Z3JvdW5kU3RyaW5ncy53aWR0aDtcclxuXHJcbmNsYXNzIEJpbGxpYXJkc1RhYmxlQ29udHJvbCBleHRlbmRzIFNjZW5lUmF0aW9Db250cm9sIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge0JpbGxpYXJkc1RhYmxlfSBiaWxsaWFyZHNUYWJsZSAtIHRoZSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gbm9kZSBsYXlvdXQgY29uZmlnXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGJpbGxpYXJkc1RhYmxlLCB0YW5kZW0sIGNvbmZpZyApIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBiaWxsaWFyZHNUYWJsZSxcclxuICAgICAgUHJvcG9ydGlvblBsYXlncm91bmRDb2xvcnMuYmlsbGlhcmRzQm9yZGVyUHJvcGVydHksXHJcbiAgICAgIFByb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzLmJpbGxpYXJkc0JvcmRlclByb3BlcnR5LFxyXG4gICAgICB0YW5kZW0sXHJcbiAgICAgIHtcclxuICAgICAgICBsZWZ0UGlja2VyTGFiZWw6IGxlbmd0aFN0cmluZyxcclxuICAgICAgICByaWdodFBpY2tlckxhYmVsOiB3aWR0aFN0cmluZyxcclxuICAgICAgICBwaWNrZXJMYWJlbE1heFdpZHRoOiA3MFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbmZpZy5zaWRlLCAnc2lkZSBpcyByZXF1aXJlZCcgKTtcclxuXHJcbiAgICBjb25maWcgPSBtZXJnZSgge1xyXG4gICAgICBzaWRlOiBudWxsLCAvLyB7U2lkZX0gLSBSZXF1aXJlZCwgYXNzZXJ0aW9uIGFib3ZlXHJcbiAgICAgIGFsbG93RHJhZ1RvUmVzaXplOiBmYWxzZSAvLyBXaGV0aGVyIHJlc2l6aW5nIGlzIGFsbG93ZWRcclxuICAgIH0sIGNvbmZpZyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMgLSBUaGUgdGFibGUgaXRzZWxmLCB3aXRoIHRoZSBiYWxsL2hvbGVzL2dyaWRsaW5lcy9ldGMuXHJcbiAgICB0aGlzLmJpbGxpYXJkc1RhYmxlTm9kZSA9IG5ldyBCaWxsaWFyZHNUYWJsZU5vZGUoIGJpbGxpYXJkc1RhYmxlLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmlsbGlhcmRzVGFibGVOb2RlJyApLCB7XHJcbiAgICAgIGFsbG93RHJhZ1RvUmVzaXplOiBjb25maWcuYWxsb3dEcmFnVG9SZXNpemVcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBAcHJvdGVjdGVkIEBvdmVycmlkZSAtIFdlIG5lZWQgbW9yZSBjdXN0b21pemF0aW9uIGZvciBwb3NpdGlvbmluZyBmb3IgdGhlIGJpbGxpYXJkcyBzY2VuZSwgc28gd2UgY3JlYXRlIG91ciBvd25cclxuICAgIC8vIHBpY2tlckNvbnRhaW5lciBpbnN0ZWFkIG9mIGNhbGxpbmcgYSBmdW5jdGlvbiB0byBjcmVhdGUgaXQuXHJcbiAgICB0aGlzLnBpY2tlckNvbnRhaW5lciA9IG5ldyBWQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDMwLFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIHRoaXMubGVmdFBpY2tlcixcclxuICAgICAgICB0aGlzLnJpZ2h0UGlja2VyXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG5ldyBIQm94KCB7XHJcbiAgICAgIHNwYWNpbmc6IDMwLFxyXG4gICAgICBjaGlsZHJlbjogY29uZmlnLnNpZGUgPT09IFNpZGUuTEVGVCA/IFsgdGhpcy5waWNrZXJDb250YWluZXIsIHRoaXMuYmlsbGlhcmRzVGFibGVOb2RlIF0gOlxyXG4gICAgICAgIFsgdGhpcy5iaWxsaWFyZHNUYWJsZU5vZGUsIHRoaXMucGlja2VyQ29udGFpbmVyIF0sXHJcbiAgICAgIGV4Y2x1ZGVJbnZpc2libGVDaGlsZHJlbkZyb21Cb3VuZHM6IGZhbHNlXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggY29uZmlnICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBjZW50ZXIgb2Ygb3VyIGJpbGxpYXJkc1RhYmxlTm9kZSAobm90IG91ciB3aG9sZSBjb250cm9sKSB0byB0aGUgZ2l2ZW4gY2VudGVyWC5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWFxyXG4gICAqL1xyXG4gIHNldEJpbGxpYXJkc0NlbnRlciggY2VudGVyWCApIHtcclxuICAgIHRoaXMueCA9IGNlbnRlclggLSB0aGlzLmJpbGxpYXJkc1RhYmxlTm9kZS5jZW50ZXJYO1xyXG4gIH1cclxufVxyXG5cclxucHJvcG9ydGlvblBsYXlncm91bmQucmVnaXN0ZXIoICdCaWxsaWFyZHNUYWJsZUNvbnRyb2wnLCBCaWxsaWFyZHNUYWJsZUNvbnRyb2wgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJpbGxpYXJkc1RhYmxlQ29udHJvbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxzQ0FBc0M7QUFDakUsT0FBT0Msb0JBQW9CLE1BQU0sa0NBQWtDO0FBQ25FLE9BQU9DLDJCQUEyQixNQUFNLHlDQUF5QztBQUNqRixPQUFPQyxJQUFJLE1BQU0scUJBQXFCO0FBQ3RDLE9BQU9DLDBCQUEwQixNQUFNLGtDQUFrQztBQUN6RSxPQUFPQyxpQkFBaUIsTUFBTSx5QkFBeUI7QUFDdkQsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBRXhELE1BQU1DLFlBQVksR0FBR0wsMkJBQTJCLENBQUNNLE1BQU07QUFDdkQsTUFBTUMsV0FBVyxHQUFHUCwyQkFBMkIsQ0FBQ1EsS0FBSztBQUVyRCxNQUFNQyxxQkFBcUIsU0FBU04saUJBQWlCLENBQUM7RUFDcEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFTyxXQUFXQSxDQUFFQyxjQUFjLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFHO0lBQzVDLEtBQUssQ0FDSEYsY0FBYyxFQUNkVCwwQkFBMEIsQ0FBQ1ksdUJBQXVCLEVBQ2xEWiwwQkFBMEIsQ0FBQ1ksdUJBQXVCLEVBQ2xERixNQUFNLEVBQ047TUFDRUcsZUFBZSxFQUFFVixZQUFZO01BQzdCVyxnQkFBZ0IsRUFBRVQsV0FBVztNQUM3QlUsbUJBQW1CLEVBQUU7SUFDdkIsQ0FDRixDQUFDO0lBRURDLE1BQU0sSUFBSUEsTUFBTSxDQUFFTCxNQUFNLENBQUNNLElBQUksRUFBRSxrQkFBbUIsQ0FBQztJQUVuRE4sTUFBTSxHQUFHakIsS0FBSyxDQUFFO01BQ2R1QixJQUFJLEVBQUUsSUFBSTtNQUFFO01BQ1pDLGlCQUFpQixFQUFFLEtBQUssQ0FBQztJQUMzQixDQUFDLEVBQUVQLE1BQU8sQ0FBQzs7SUFFWDtJQUNBLElBQUksQ0FBQ1Esa0JBQWtCLEdBQUcsSUFBSWpCLGtCQUFrQixDQUFFTyxjQUFjLEVBQUVDLE1BQU0sQ0FBQ1UsWUFBWSxDQUFFLG9CQUFxQixDQUFDLEVBQUU7TUFDN0dGLGlCQUFpQixFQUFFUCxNQUFNLENBQUNPO0lBQzVCLENBQUUsQ0FBQzs7SUFFSDtJQUNBO0lBQ0EsSUFBSSxDQUFDRyxlQUFlLEdBQUcsSUFBSXpCLElBQUksQ0FBRTtNQUMvQjBCLE9BQU8sRUFBRSxFQUFFO01BQ1hDLFFBQVEsRUFBRSxDQUNSLElBQUksQ0FBQ0MsVUFBVSxFQUNmLElBQUksQ0FBQ0MsV0FBVztJQUVwQixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNDLFFBQVEsQ0FBRSxJQUFJL0IsSUFBSSxDQUFFO01BQ3ZCMkIsT0FBTyxFQUFFLEVBQUU7TUFDWEMsUUFBUSxFQUFFWixNQUFNLENBQUNNLElBQUksS0FBS2xCLElBQUksQ0FBQzRCLElBQUksR0FBRyxDQUFFLElBQUksQ0FBQ04sZUFBZSxFQUFFLElBQUksQ0FBQ0Ysa0JBQWtCLENBQUUsR0FDckYsQ0FBRSxJQUFJLENBQUNBLGtCQUFrQixFQUFFLElBQUksQ0FBQ0UsZUFBZSxDQUFFO01BQ25ETyxrQ0FBa0MsRUFBRTtJQUN0QyxDQUFFLENBQUUsQ0FBQztJQUVMLElBQUksQ0FBQ0MsTUFBTSxDQUFFbEIsTUFBTyxDQUFDO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFbUIsa0JBQWtCQSxDQUFFQyxPQUFPLEVBQUc7SUFDNUIsSUFBSSxDQUFDQyxDQUFDLEdBQUdELE9BQU8sR0FBRyxJQUFJLENBQUNaLGtCQUFrQixDQUFDWSxPQUFPO0VBQ3BEO0FBQ0Y7QUFFQWxDLG9CQUFvQixDQUFDb0MsUUFBUSxDQUFFLHVCQUF1QixFQUFFMUIscUJBQXNCLENBQUM7QUFFL0UsZUFBZUEscUJBQXFCIn0=