// Copyright 2016-2022, University of Colorado Boulder

/**
 * Displays a gradient of colors from the two extremes (from a single paintChoice)
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from '../../../../../axon/js/DerivedProperty.js';
import Utils from '../../../../../dot/js/Utils.js';
import { Image, Node, Rectangle } from '../../../../../scenery/js/imports.js';
import proportionPlayground from '../../../proportionPlayground.js';
class PaintChoiceGradientNode extends Node {
  /**
   * Rectangle that shows a given spectrum
   *
   * @param {number} width
   * @param {number} height
   * @param {PaintChoice} paintChoice
   * @param {Object} [options]
   */
  constructor(width, height, paintChoice, options) {
    super();

    // {string} - Image for the current gradient colors.
    const imageUrlProperty = new DerivedProperty([paintChoice.leftColorProperty, paintChoice.rightColorProperty], (leftColor, rightColor) => {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = width;
      canvas.height = height;

      // Fill it in one pixel at a time
      for (let i = 0; i < height; i++) {
        const parameter = Utils.clamp(Utils.linear(0, height, 0, 1, i), 0, 1);
        context.fillStyle = paintChoice.getBlendedColor(parameter).toCSS();
        context.fillRect(0, i, width, 1);
      }
      return canvas.toDataURL();
    });

    // Gradient (swap image when the colors change)
    const image = new Image(imageUrlProperty.value, {
      initialWidth: width,
      initialHeight: height
    });
    imageUrlProperty.linkAttribute(image, 'image');
    this.addChild(image);

    // Outline
    this.addChild(new Rectangle(0, 0, width, height, {
      stroke: 'black',
      lineWidth: 2
    }));
    this.mutate(options);
  }
}
proportionPlayground.register('PaintChoiceGradientNode', PaintChoiceGradientNode);
export default PaintChoiceGradientNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJVdGlscyIsIkltYWdlIiwiTm9kZSIsIlJlY3RhbmdsZSIsInByb3BvcnRpb25QbGF5Z3JvdW5kIiwiUGFpbnRDaG9pY2VHcmFkaWVudE5vZGUiLCJjb25zdHJ1Y3RvciIsIndpZHRoIiwiaGVpZ2h0IiwicGFpbnRDaG9pY2UiLCJvcHRpb25zIiwiaW1hZ2VVcmxQcm9wZXJ0eSIsImxlZnRDb2xvclByb3BlcnR5IiwicmlnaHRDb2xvclByb3BlcnR5IiwibGVmdENvbG9yIiwicmlnaHRDb2xvciIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaSIsInBhcmFtZXRlciIsImNsYW1wIiwibGluZWFyIiwiZmlsbFN0eWxlIiwiZ2V0QmxlbmRlZENvbG9yIiwidG9DU1MiLCJmaWxsUmVjdCIsInRvRGF0YVVSTCIsImltYWdlIiwidmFsdWUiLCJpbml0aWFsV2lkdGgiLCJpbml0aWFsSGVpZ2h0IiwibGlua0F0dHJpYnV0ZSIsImFkZENoaWxkIiwic3Ryb2tlIiwibGluZVdpZHRoIiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQYWludENob2ljZUdyYWRpZW50Tm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEaXNwbGF5cyBhIGdyYWRpZW50IG9mIGNvbG9ycyBmcm9tIHRoZSB0d28gZXh0cmVtZXMgKGZyb20gYSBzaW5nbGUgcGFpbnRDaG9pY2UpXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBJbWFnZSwgTm9kZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHByb3BvcnRpb25QbGF5Z3JvdW5kIGZyb20gJy4uLy4uLy4uL3Byb3BvcnRpb25QbGF5Z3JvdW5kLmpzJztcclxuXHJcbmNsYXNzIFBhaW50Q2hvaWNlR3JhZGllbnROb2RlIGV4dGVuZHMgTm9kZSB7XHJcbiAgLyoqXHJcbiAgICogUmVjdGFuZ2xlIHRoYXQgc2hvd3MgYSBnaXZlbiBzcGVjdHJ1bVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxyXG4gICAqIEBwYXJhbSB7UGFpbnRDaG9pY2V9IHBhaW50Q2hvaWNlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCBwYWludENob2ljZSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIHtzdHJpbmd9IC0gSW1hZ2UgZm9yIHRoZSBjdXJyZW50IGdyYWRpZW50IGNvbG9ycy5cclxuICAgIGNvbnN0IGltYWdlVXJsUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHBhaW50Q2hvaWNlLmxlZnRDb2xvclByb3BlcnR5LCBwYWludENob2ljZS5yaWdodENvbG9yUHJvcGVydHkgXSwgKCBsZWZ0Q29sb3IsIHJpZ2h0Q29sb3IgKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICk7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xyXG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgIC8vIEZpbGwgaXQgaW4gb25lIHBpeGVsIGF0IGEgdGltZVxyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKyApIHtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBVdGlscy5jbGFtcCggVXRpbHMubGluZWFyKCAwLCBoZWlnaHQsIDAsIDEsIGkgKSwgMCwgMSApO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gcGFpbnRDaG9pY2UuZ2V0QmxlbmRlZENvbG9yKCBwYXJhbWV0ZXIgKS50b0NTUygpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoIDAsIGksIHdpZHRoLCAxICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gR3JhZGllbnQgKHN3YXAgaW1hZ2Ugd2hlbiB0aGUgY29sb3JzIGNoYW5nZSlcclxuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCBpbWFnZVVybFByb3BlcnR5LnZhbHVlLCB7XHJcbiAgICAgIGluaXRpYWxXaWR0aDogd2lkdGgsXHJcbiAgICAgIGluaXRpYWxIZWlnaHQ6IGhlaWdodFxyXG4gICAgfSApO1xyXG4gICAgaW1hZ2VVcmxQcm9wZXJ0eS5saW5rQXR0cmlidXRlKCBpbWFnZSwgJ2ltYWdlJyApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggaW1hZ2UgKTtcclxuXHJcbiAgICAvLyBPdXRsaW5lXHJcbiAgICB0aGlzLmFkZENoaWxkKCBuZXcgUmVjdGFuZ2xlKCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCB7IHN0cm9rZTogJ2JsYWNrJywgbGluZVdpZHRoOiAyIH0gKSApO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5wcm9wb3J0aW9uUGxheWdyb3VuZC5yZWdpc3RlciggJ1BhaW50Q2hvaWNlR3JhZGllbnROb2RlJywgUGFpbnRDaG9pY2VHcmFkaWVudE5vZGUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhaW50Q2hvaWNlR3JhZGllbnROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwyQ0FBMkM7QUFDdkUsT0FBT0MsS0FBSyxNQUFNLGdDQUFnQztBQUNsRCxTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsU0FBUyxRQUFRLHNDQUFzQztBQUM3RSxPQUFPQyxvQkFBb0IsTUFBTSxrQ0FBa0M7QUFFbkUsTUFBTUMsdUJBQXVCLFNBQVNILElBQUksQ0FBQztFQUN6QztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VJLFdBQVdBLENBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRztJQUVqRCxLQUFLLENBQUMsQ0FBQzs7SUFFUDtJQUNBLE1BQU1DLGdCQUFnQixHQUFHLElBQUlaLGVBQWUsQ0FBRSxDQUFFVSxXQUFXLENBQUNHLGlCQUFpQixFQUFFSCxXQUFXLENBQUNJLGtCQUFrQixDQUFFLEVBQUUsQ0FBRUMsU0FBUyxFQUFFQyxVQUFVLEtBQU07TUFDNUksTUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxRQUFTLENBQUM7TUFDakQsTUFBTUMsT0FBTyxHQUFHSCxNQUFNLENBQUNJLFVBQVUsQ0FBRSxJQUFLLENBQUM7TUFDekNKLE1BQU0sQ0FBQ1QsS0FBSyxHQUFHQSxLQUFLO01BQ3BCUyxNQUFNLENBQUNSLE1BQU0sR0FBR0EsTUFBTTs7TUFFdEI7TUFDQSxLQUFNLElBQUlhLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2IsTUFBTSxFQUFFYSxDQUFDLEVBQUUsRUFBRztRQUNqQyxNQUFNQyxTQUFTLEdBQUd0QixLQUFLLENBQUN1QixLQUFLLENBQUV2QixLQUFLLENBQUN3QixNQUFNLENBQUUsQ0FBQyxFQUFFaEIsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVhLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7UUFDekVGLE9BQU8sQ0FBQ00sU0FBUyxHQUFHaEIsV0FBVyxDQUFDaUIsZUFBZSxDQUFFSixTQUFVLENBQUMsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7UUFDcEVSLE9BQU8sQ0FBQ1MsUUFBUSxDQUFFLENBQUMsRUFBRVAsQ0FBQyxFQUFFZCxLQUFLLEVBQUUsQ0FBRSxDQUFDO01BQ3BDO01BRUEsT0FBT1MsTUFBTSxDQUFDYSxTQUFTLENBQUMsQ0FBQztJQUMzQixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSTdCLEtBQUssQ0FBRVUsZ0JBQWdCLENBQUNvQixLQUFLLEVBQUU7TUFDL0NDLFlBQVksRUFBRXpCLEtBQUs7TUFDbkIwQixhQUFhLEVBQUV6QjtJQUNqQixDQUFFLENBQUM7SUFDSEcsZ0JBQWdCLENBQUN1QixhQUFhLENBQUVKLEtBQUssRUFBRSxPQUFRLENBQUM7SUFDaEQsSUFBSSxDQUFDSyxRQUFRLENBQUVMLEtBQU0sQ0FBQzs7SUFFdEI7SUFDQSxJQUFJLENBQUNLLFFBQVEsQ0FBRSxJQUFJaEMsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVJLEtBQUssRUFBRUMsTUFBTSxFQUFFO01BQUU0QixNQUFNLEVBQUUsT0FBTztNQUFFQyxTQUFTLEVBQUU7SUFBRSxDQUFFLENBQUUsQ0FBQztJQUV4RixJQUFJLENBQUNDLE1BQU0sQ0FBRTVCLE9BQVEsQ0FBQztFQUN4QjtBQUNGO0FBRUFOLG9CQUFvQixDQUFDbUMsUUFBUSxDQUFFLHlCQUF5QixFQUFFbEMsdUJBQXdCLENBQUM7QUFFbkYsZUFBZUEsdUJBQXVCIn0=