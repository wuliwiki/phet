// Copyright 2016-2022, University of Colorado Boulder

/**
 * Displays a single instance of the repeating pattern for all visible necklaces.
 * @public
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../../../axon/js/Property.js';
import merge from '../../../../../phet-core/js/merge.js';
import { AlignBox, Node, Text, VBox } from '../../../../../scenery/js/imports.js';
import Panel from '../../../../../sun/js/Panel.js';
import Tandem from '../../../../../tandem/js/Tandem.js';
import proportionPlayground from '../../../proportionPlayground.js';
import ProportionPlaygroundStrings from '../../../ProportionPlaygroundStrings.js';
import Necklace from '../../model/necklace/Necklace.js';
import Side from '../../model/Side.js';
import ProportionPlaygroundConstants from '../../ProportionPlaygroundConstants.js';
import ProportionPlaygroundColors from '../ProportionPlaygroundColors.js';
import PatternNode from './PatternNode.js';
const patternString = ProportionPlaygroundStrings.pattern;
class PatternPanel extends Panel {
  /**
   * @param {Necklace} leftNecklace
   * @param {Necklace} rightNecklace
   * @param {Object} [options]
   */
  constructor(leftNecklace, rightNecklace, options) {
    const labelNode = new Text(patternString, {
      maxWidth: 100,
      font: ProportionPlaygroundConstants.CONTROL_FONT
    });

    // Determine the maximum necklace dimensions
    const maxNecklace = new Necklace(20, 19, new Property(true), new Property(true), Tandem.OPT_OUT);
    const maxPatternBounds = new PatternNode(maxNecklace).bounds;
    maxPatternBounds.maxX += 2 * maxPatternBounds.width;
    maxPatternBounds.maxY += 5; // Some extra padding

    const patternContent = new Node();
    function handlePattern(necklace, side) {
      const patternNode = new PatternNode(necklace, {
        x: side === Side.RIGHT ? 30 : 0
      });
      let added = false;
      necklace.visibleProperty.link(visible => {
        // No problem to leak, this is done twice
        if (added && !visible) {
          patternContent.removeChild(patternNode);
          added = false;
        } else if (!added && visible) {
          patternContent.addChild(patternNode);
          added = true;
        }
      });
    }
    handlePattern(leftNecklace, Side.LEFT);
    handlePattern(rightNecklace, Side.RIGHT);
    const alignBox = new AlignBox(patternContent, {
      yAlign: 'top',
      alignBounds: maxPatternBounds
    });
    const content = new VBox({
      spacing: 7,
      children: [labelNode, alignBox]
    });
    super(content, merge({
      cornerRadius: 3,
      stroke: ProportionPlaygroundColors.necklacePatternBorderProperty,
      xMargin: 10
    }, options));
  }
}
proportionPlayground.register('PatternPanel', PatternPanel);
export default PatternPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIm1lcmdlIiwiQWxpZ25Cb3giLCJOb2RlIiwiVGV4dCIsIlZCb3giLCJQYW5lbCIsIlRhbmRlbSIsInByb3BvcnRpb25QbGF5Z3JvdW5kIiwiUHJvcG9ydGlvblBsYXlncm91bmRTdHJpbmdzIiwiTmVja2xhY2UiLCJTaWRlIiwiUHJvcG9ydGlvblBsYXlncm91bmRDb25zdGFudHMiLCJQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycyIsIlBhdHRlcm5Ob2RlIiwicGF0dGVyblN0cmluZyIsInBhdHRlcm4iLCJQYXR0ZXJuUGFuZWwiLCJjb25zdHJ1Y3RvciIsImxlZnROZWNrbGFjZSIsInJpZ2h0TmVja2xhY2UiLCJvcHRpb25zIiwibGFiZWxOb2RlIiwibWF4V2lkdGgiLCJmb250IiwiQ09OVFJPTF9GT05UIiwibWF4TmVja2xhY2UiLCJPUFRfT1VUIiwibWF4UGF0dGVybkJvdW5kcyIsImJvdW5kcyIsIm1heFgiLCJ3aWR0aCIsIm1heFkiLCJwYXR0ZXJuQ29udGVudCIsImhhbmRsZVBhdHRlcm4iLCJuZWNrbGFjZSIsInNpZGUiLCJwYXR0ZXJuTm9kZSIsIngiLCJSSUdIVCIsImFkZGVkIiwidmlzaWJsZVByb3BlcnR5IiwibGluayIsInZpc2libGUiLCJyZW1vdmVDaGlsZCIsImFkZENoaWxkIiwiTEVGVCIsImFsaWduQm94IiwieUFsaWduIiwiYWxpZ25Cb3VuZHMiLCJjb250ZW50Iiwic3BhY2luZyIsImNoaWxkcmVuIiwiY29ybmVyUmFkaXVzIiwic3Ryb2tlIiwibmVja2xhY2VQYXR0ZXJuQm9yZGVyUHJvcGVydHkiLCJ4TWFyZ2luIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQYXR0ZXJuUGFuZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGlzcGxheXMgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgdGhlIHJlcGVhdGluZyBwYXR0ZXJuIGZvciBhbGwgdmlzaWJsZSBuZWNrbGFjZXMuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBOb2RlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBwcm9wb3J0aW9uUGxheWdyb3VuZCBmcm9tICcuLi8uLi8uLi9wcm9wb3J0aW9uUGxheWdyb3VuZC5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZFN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vUHJvcG9ydGlvblBsYXlncm91bmRTdHJpbmdzLmpzJztcclxuaW1wb3J0IE5lY2tsYWNlIGZyb20gJy4uLy4uL21vZGVsL25lY2tsYWNlL05lY2tsYWNlLmpzJztcclxuaW1wb3J0IFNpZGUgZnJvbSAnLi4vLi4vbW9kZWwvU2lkZS5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cyBmcm9tICcuLi8uLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycyBmcm9tICcuLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycy5qcyc7XHJcbmltcG9ydCBQYXR0ZXJuTm9kZSBmcm9tICcuL1BhdHRlcm5Ob2RlLmpzJztcclxuXHJcbmNvbnN0IHBhdHRlcm5TdHJpbmcgPSBQcm9wb3J0aW9uUGxheWdyb3VuZFN0cmluZ3MucGF0dGVybjtcclxuXHJcbmNsYXNzIFBhdHRlcm5QYW5lbCBleHRlbmRzIFBhbmVsIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge05lY2tsYWNlfSBsZWZ0TmVja2xhY2VcclxuICAgKiBAcGFyYW0ge05lY2tsYWNlfSByaWdodE5lY2tsYWNlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBsZWZ0TmVja2xhY2UsIHJpZ2h0TmVja2xhY2UsIG9wdGlvbnMgKSB7XHJcbiAgICBjb25zdCBsYWJlbE5vZGUgPSBuZXcgVGV4dCggcGF0dGVyblN0cmluZywge1xyXG4gICAgICBtYXhXaWR0aDogMTAwLFxyXG4gICAgICBmb250OiBQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cy5DT05UUk9MX0ZPTlRcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgdGhlIG1heGltdW0gbmVja2xhY2UgZGltZW5zaW9uc1xyXG4gICAgY29uc3QgbWF4TmVja2xhY2UgPSBuZXcgTmVja2xhY2UoIDIwLCAxOSwgbmV3IFByb3BlcnR5KCB0cnVlICksIG5ldyBQcm9wZXJ0eSggdHJ1ZSApLCBUYW5kZW0uT1BUX09VVCApO1xyXG4gICAgY29uc3QgbWF4UGF0dGVybkJvdW5kcyA9IG5ldyBQYXR0ZXJuTm9kZSggbWF4TmVja2xhY2UgKS5ib3VuZHM7XHJcbiAgICBtYXhQYXR0ZXJuQm91bmRzLm1heFggKz0gMiAqIG1heFBhdHRlcm5Cb3VuZHMud2lkdGg7XHJcbiAgICBtYXhQYXR0ZXJuQm91bmRzLm1heFkgKz0gNTsgLy8gU29tZSBleHRyYSBwYWRkaW5nXHJcblxyXG4gICAgY29uc3QgcGF0dGVybkNvbnRlbnQgPSBuZXcgTm9kZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGhhbmRsZVBhdHRlcm4oIG5lY2tsYWNlLCBzaWRlICkge1xyXG4gICAgICBjb25zdCBwYXR0ZXJuTm9kZSA9IG5ldyBQYXR0ZXJuTm9kZSggbmVja2xhY2UsIHtcclxuICAgICAgICB4OiBzaWRlID09PSBTaWRlLlJJR0hUID8gMzAgOiAwXHJcbiAgICAgIH0gKTtcclxuICAgICAgbGV0IGFkZGVkID0gZmFsc2U7XHJcbiAgICAgIG5lY2tsYWNlLnZpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmxlID0+IHsgLy8gTm8gcHJvYmxlbSB0byBsZWFrLCB0aGlzIGlzIGRvbmUgdHdpY2VcclxuICAgICAgICBpZiAoIGFkZGVkICYmICF2aXNpYmxlICkge1xyXG4gICAgICAgICAgcGF0dGVybkNvbnRlbnQucmVtb3ZlQ2hpbGQoIHBhdHRlcm5Ob2RlICk7XHJcbiAgICAgICAgICBhZGRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggIWFkZGVkICYmIHZpc2libGUgKSB7XHJcbiAgICAgICAgICBwYXR0ZXJuQ29udGVudC5hZGRDaGlsZCggcGF0dGVybk5vZGUgKTtcclxuICAgICAgICAgIGFkZGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVQYXR0ZXJuKCBsZWZ0TmVja2xhY2UsIFNpZGUuTEVGVCApO1xyXG4gICAgaGFuZGxlUGF0dGVybiggcmlnaHROZWNrbGFjZSwgU2lkZS5SSUdIVCApO1xyXG5cclxuICAgIGNvbnN0IGFsaWduQm94ID0gbmV3IEFsaWduQm94KCBwYXR0ZXJuQ29udGVudCwge1xyXG4gICAgICB5QWxpZ246ICd0b3AnLFxyXG4gICAgICBhbGlnbkJvdW5kczogbWF4UGF0dGVybkJvdW5kc1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgVkJveCgge1xyXG4gICAgICBzcGFjaW5nOiA3LFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGxhYmVsTm9kZSxcclxuICAgICAgICBhbGlnbkJveFxyXG4gICAgICBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIG1lcmdlKCB7XHJcbiAgICAgIGNvcm5lclJhZGl1czogMyxcclxuICAgICAgc3Ryb2tlOiBQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycy5uZWNrbGFjZVBhdHRlcm5Cb3JkZXJQcm9wZXJ0eSxcclxuICAgICAgeE1hcmdpbjogMTBcclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxufVxyXG5cclxucHJvcG9ydGlvblBsYXlncm91bmQucmVnaXN0ZXIoICdQYXR0ZXJuUGFuZWwnLCBQYXR0ZXJuUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGF0dGVyblBhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSxvQ0FBb0M7QUFDekQsT0FBT0MsS0FBSyxNQUFNLHNDQUFzQztBQUN4RCxTQUFTQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLFFBQVEsc0NBQXNDO0FBQ2pGLE9BQU9DLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsT0FBT0MsTUFBTSxNQUFNLG9DQUFvQztBQUN2RCxPQUFPQyxvQkFBb0IsTUFBTSxrQ0FBa0M7QUFDbkUsT0FBT0MsMkJBQTJCLE1BQU0seUNBQXlDO0FBQ2pGLE9BQU9DLFFBQVEsTUFBTSxrQ0FBa0M7QUFDdkQsT0FBT0MsSUFBSSxNQUFNLHFCQUFxQjtBQUN0QyxPQUFPQyw2QkFBNkIsTUFBTSx3Q0FBd0M7QUFDbEYsT0FBT0MsMEJBQTBCLE1BQU0sa0NBQWtDO0FBQ3pFLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFFMUMsTUFBTUMsYUFBYSxHQUFHTiwyQkFBMkIsQ0FBQ08sT0FBTztBQUV6RCxNQUFNQyxZQUFZLFNBQVNYLEtBQUssQ0FBQztFQUMvQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VZLFdBQVdBLENBQUVD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