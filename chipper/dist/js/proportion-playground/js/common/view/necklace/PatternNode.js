// Copyright 2016-2022, University of Colorado Boulder

/**
 * Displays a single instance of the repeating pattern for a single necklace.
 * @public
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Multilink from '../../../../../axon/js/Multilink.js';
import Utils from '../../../../../dot/js/Utils.js';
import Vector2 from '../../../../../dot/js/Vector2.js';
import { Circle, Node, Rectangle } from '../../../../../scenery/js/imports.js';
import proportionPlayground from '../../../proportionPlayground.js';
import ProportionPlaygroundConstants from '../../ProportionPlaygroundConstants.js';
import ProportionPlaygroundColors from '../ProportionPlaygroundColors.js';

// constants
const BEAD_SIZE = 9;

// {Node} - Will have multiple parents, used as a single graphic node
const roundBeadNode = new Circle(BEAD_SIZE / 2, {
  fill: ProportionPlaygroundColors.necklaceRoundBeadProperty
});

// {Node} - Will have multiple parents, used as a single graphic node
const squareBeadNode = new Rectangle(0, 0, BEAD_SIZE, BEAD_SIZE, {
  fill: ProportionPlaygroundColors.necklaceSquareBeadProperty,
  center: Vector2.ZERO
});

// {number} - Vertical offset between nodes
const NODE_OFFSET = roundBeadNode.height + 1.5;

// {number} - Maximum number of beads visible in a pattern (20,20 will reduce to 1,1)
const MAX_BEADS = 2 * ProportionPlaygroundConstants.BEAD_COUNT_RANGE.max - 1;
class PatternNode extends Node {
  /**
   * @param {Necklace} necklace
   * @param {Object} [options]
   */
  constructor(necklace, options) {
    super();

    // Construct nodes for every possible bead
    const roundBeadNodes = _.range(0, MAX_BEADS).map(n => new Node({
      children: [roundBeadNode],
      y: NODE_OFFSET * n
    }));
    const squareBeadNodes = _.range(0, MAX_BEADS).map(n => new Node({
      children: [squareBeadNode],
      y: NODE_OFFSET * n
    }));
    roundBeadNodes.forEach(this.addChild.bind(this));
    squareBeadNodes.forEach(this.addChild.bind(this));

    // Toggle visibility based on current counts
    Multilink.multilink([necklace.roundBeadCountProperty, necklace.squareBeadCountProperty], (roundBeadCount, squareBeadCount) => {
      const gcd = Utils.gcd(roundBeadCount, squareBeadCount);
      if (gcd !== 0) {
        roundBeadCount /= gcd;
        squareBeadCount /= gcd;
      }
      for (let i = 0; i < MAX_BEADS; i++) {
        roundBeadNodes[i].visible = i < roundBeadCount;
        squareBeadNodes[i].visible = i >= roundBeadCount && i < squareBeadCount + roundBeadCount;
      }
    });
    this.mutate(options);
  }
}
proportionPlayground.register('PatternNode', PatternNode);
export default PatternNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJVdGlscyIsIlZlY3RvcjIiLCJDaXJjbGUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwicHJvcG9ydGlvblBsYXlncm91bmQiLCJQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cyIsIlByb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzIiwiQkVBRF9TSVpFIiwicm91bmRCZWFkTm9kZSIsImZpbGwiLCJuZWNrbGFjZVJvdW5kQmVhZFByb3BlcnR5Iiwic3F1YXJlQmVhZE5vZGUiLCJuZWNrbGFjZVNxdWFyZUJlYWRQcm9wZXJ0eSIsImNlbnRlciIsIlpFUk8iLCJOT0RFX09GRlNFVCIsImhlaWdodCIsIk1BWF9CRUFEUyIsIkJFQURfQ09VTlRfUkFOR0UiLCJtYXgiLCJQYXR0ZXJuTm9kZSIsImNvbnN0cnVjdG9yIiwibmVja2xhY2UiLCJvcHRpb25zIiwicm91bmRCZWFkTm9kZXMiLCJfIiwicmFuZ2UiLCJtYXAiLCJuIiwiY2hpbGRyZW4iLCJ5Iiwic3F1YXJlQmVhZE5vZGVzIiwiZm9yRWFjaCIsImFkZENoaWxkIiwiYmluZCIsIm11bHRpbGluayIsInJvdW5kQmVhZENvdW50UHJvcGVydHkiLCJzcXVhcmVCZWFkQ291bnRQcm9wZXJ0eSIsInJvdW5kQmVhZENvdW50Iiwic3F1YXJlQmVhZENvdW50IiwiZ2NkIiwiaSIsInZpc2libGUiLCJtdXRhdGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBhdHRlcm5Ob2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGEgc2luZ2xlIGluc3RhbmNlIG9mIHRoZSByZXBlYXRpbmcgcGF0dGVybiBmb3IgYSBzaW5nbGUgbmVja2xhY2UuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBwcm9wb3J0aW9uUGxheWdyb3VuZCBmcm9tICcuLi8uLi8uLi9wcm9wb3J0aW9uUGxheWdyb3VuZC5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cyBmcm9tICcuLi8uLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycyBmcm9tICcuLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycy5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQkVBRF9TSVpFID0gOTtcclxuXHJcbi8vIHtOb2RlfSAtIFdpbGwgaGF2ZSBtdWx0aXBsZSBwYXJlbnRzLCB1c2VkIGFzIGEgc2luZ2xlIGdyYXBoaWMgbm9kZVxyXG5jb25zdCByb3VuZEJlYWROb2RlID0gbmV3IENpcmNsZSggQkVBRF9TSVpFIC8gMiwge1xyXG4gIGZpbGw6IFByb3BvcnRpb25QbGF5Z3JvdW5kQ29sb3JzLm5lY2tsYWNlUm91bmRCZWFkUHJvcGVydHlcclxufSApO1xyXG5cclxuLy8ge05vZGV9IC0gV2lsbCBoYXZlIG11bHRpcGxlIHBhcmVudHMsIHVzZWQgYXMgYSBzaW5nbGUgZ3JhcGhpYyBub2RlXHJcbmNvbnN0IHNxdWFyZUJlYWROb2RlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgQkVBRF9TSVpFLCBCRUFEX1NJWkUsIHtcclxuICBmaWxsOiBQcm9wb3J0aW9uUGxheWdyb3VuZENvbG9ycy5uZWNrbGFjZVNxdWFyZUJlYWRQcm9wZXJ0eSxcclxuICBjZW50ZXI6IFZlY3RvcjIuWkVST1xyXG59ICk7XHJcblxyXG4vLyB7bnVtYmVyfSAtIFZlcnRpY2FsIG9mZnNldCBiZXR3ZWVuIG5vZGVzXHJcbmNvbnN0IE5PREVfT0ZGU0VUID0gcm91bmRCZWFkTm9kZS5oZWlnaHQgKyAxLjU7XHJcblxyXG4vLyB7bnVtYmVyfSAtIE1heGltdW0gbnVtYmVyIG9mIGJlYWRzIHZpc2libGUgaW4gYSBwYXR0ZXJuICgyMCwyMCB3aWxsIHJlZHVjZSB0byAxLDEpXHJcbmNvbnN0IE1BWF9CRUFEUyA9IDIgKiBQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cy5CRUFEX0NPVU5UX1JBTkdFLm1heCAtIDE7XHJcblxyXG5jbGFzcyBQYXR0ZXJuTm9kZSBleHRlbmRzIE5vZGUge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TmVja2xhY2V9IG5lY2tsYWNlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBuZWNrbGFjZSwgb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgLy8gQ29uc3RydWN0IG5vZGVzIGZvciBldmVyeSBwb3NzaWJsZSBiZWFkXHJcbiAgICBjb25zdCByb3VuZEJlYWROb2RlcyA9IF8ucmFuZ2UoIDAsIE1BWF9CRUFEUyApLm1hcCggbiA9PiBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyByb3VuZEJlYWROb2RlIF0sXHJcbiAgICAgIHk6IE5PREVfT0ZGU0VUICogblxyXG4gICAgfSApICk7XHJcbiAgICBjb25zdCBzcXVhcmVCZWFkTm9kZXMgPSBfLnJhbmdlKCAwLCBNQVhfQkVBRFMgKS5tYXAoIG4gPT4gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgc3F1YXJlQmVhZE5vZGUgXSxcclxuICAgICAgeTogTk9ERV9PRkZTRVQgKiBuXHJcbiAgICB9ICkgKTtcclxuICAgIHJvdW5kQmVhZE5vZGVzLmZvckVhY2goIHRoaXMuYWRkQ2hpbGQuYmluZCggdGhpcyApICk7XHJcbiAgICBzcXVhcmVCZWFkTm9kZXMuZm9yRWFjaCggdGhpcy5hZGRDaGlsZC5iaW5kKCB0aGlzICkgKTtcclxuXHJcbiAgICAvLyBUb2dnbGUgdmlzaWJpbGl0eSBiYXNlZCBvbiBjdXJyZW50IGNvdW50c1xyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyBuZWNrbGFjZS5yb3VuZEJlYWRDb3VudFByb3BlcnR5LCBuZWNrbGFjZS5zcXVhcmVCZWFkQ291bnRQcm9wZXJ0eSBdLCAoIHJvdW5kQmVhZENvdW50LCBzcXVhcmVCZWFkQ291bnQgKSA9PiB7XHJcbiAgICAgIGNvbnN0IGdjZCA9IFV0aWxzLmdjZCggcm91bmRCZWFkQ291bnQsIHNxdWFyZUJlYWRDb3VudCApO1xyXG4gICAgICBpZiAoIGdjZCAhPT0gMCApIHtcclxuICAgICAgICByb3VuZEJlYWRDb3VudCAvPSBnY2Q7XHJcbiAgICAgICAgc3F1YXJlQmVhZENvdW50IC89IGdjZDtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBNQVhfQkVBRFM7IGkrKyApIHtcclxuICAgICAgICByb3VuZEJlYWROb2Rlc1sgaSBdLnZpc2libGUgPSBpIDwgcm91bmRCZWFkQ291bnQ7XHJcbiAgICAgICAgc3F1YXJlQmVhZE5vZGVzWyBpIF0udmlzaWJsZSA9ICggaSA+PSByb3VuZEJlYWRDb3VudCApICYmICggaSA8IHNxdWFyZUJlYWRDb3VudCArIHJvdW5kQmVhZENvdW50ICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLm11dGF0ZSggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxucHJvcG9ydGlvblBsYXlncm91bmQucmVnaXN0ZXIoICdQYXR0ZXJuTm9kZScsIFBhdHRlcm5Ob2RlICk7XHJcblxy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