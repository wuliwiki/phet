// Copyright 2016-2020, University of Colorado Boulder

/**
 * Model for a single group of apples (green or red but not both) in the apples scene.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import NumberProperty from '../../../../../axon/js/NumberProperty.js';
import proportionPlayground from '../../../proportionPlayground.js';
import ProportionPlaygroundConstants from '../../ProportionPlaygroundConstants.js';
import SceneRatio from '../SceneRatio.js';
class AppleGroup extends SceneRatio {
  /**
   * @param {number} initialCost - Initial total cost of all apples
   * @param {number} initialApples - Initial number of apples
   * @param {Property.<boolean>} visibleProperty - Whether our visual representation is visible
   * @param {Property.<boolean>} controlsVisibleProperty - Whether our controls are visible
   * @param {Tandem} tandem
   */
  constructor(initialCost, initialApples, visibleProperty, controlsVisibleProperty, tandem) {
    const totalCostProperty = new NumberProperty(initialCost, {
      range: ProportionPlaygroundConstants.APPLE_TOTAL_COST_RANGE,
      numberType: 'Integer',
      tandem: tandem.createTandem('totalCostProperty')
    });
    const numberOfApplesProperty = new NumberProperty(initialApples, {
      range: ProportionPlaygroundConstants.APPLE_COUNT_RANGE,
      numberType: 'Integer',
      tandem: tandem.createTandem('numberOfApplesProperty')
    });
    super(visibleProperty, controlsVisibleProperty, totalCostProperty, numberOfApplesProperty, tandem);

    // @public {NumberProperty} - Total cost of all of the apples
    this.totalCostProperty = totalCostProperty;

    // @public {NumberProperty} - How many apples are in this group
    this.numberOfApplesProperty = numberOfApplesProperty;
  }
}
proportionPlayground.register('AppleGroup', AppleGroup);
export default AppleGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsInByb3BvcnRpb25QbGF5Z3JvdW5kIiwiUHJvcG9ydGlvblBsYXlncm91bmRDb25zdGFudHMiLCJTY2VuZVJhdGlvIiwiQXBwbGVHcm91cCIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbENvc3QiLCJpbml0aWFsQXBwbGVzIiwidmlzaWJsZVByb3BlcnR5IiwiY29udHJvbHNWaXNpYmxlUHJvcGVydHkiLCJ0YW5kZW0iLCJ0b3RhbENvc3RQcm9wZXJ0eSIsInJhbmdlIiwiQVBQTEVfVE9UQUxfQ09TVF9SQU5HRSIsIm51bWJlclR5cGUiLCJjcmVhdGVUYW5kZW0iLCJudW1iZXJPZkFwcGxlc1Byb3BlcnR5IiwiQVBQTEVfQ09VTlRfUkFOR0UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFwcGxlR3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyMCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTW9kZWwgZm9yIGEgc2luZ2xlIGdyb3VwIG9mIGFwcGxlcyAoZ3JlZW4gb3IgcmVkIGJ1dCBub3QgYm90aCkgaW4gdGhlIGFwcGxlcyBzY2VuZS5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBwcm9wb3J0aW9uUGxheWdyb3VuZCBmcm9tICcuLi8uLi8uLi9wcm9wb3J0aW9uUGxheWdyb3VuZC5qcyc7XHJcbmltcG9ydCBQcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cyBmcm9tICcuLi8uLi9Qcm9wb3J0aW9uUGxheWdyb3VuZENvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBTY2VuZVJhdGlvIGZyb20gJy4uL1NjZW5lUmF0aW8uanMnO1xyXG5cclxuY2xhc3MgQXBwbGVHcm91cCBleHRlbmRzIFNjZW5lUmF0aW8ge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbml0aWFsQ29zdCAtIEluaXRpYWwgdG90YWwgY29zdCBvZiBhbGwgYXBwbGVzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxBcHBsZXMgLSBJbml0aWFsIG51bWJlciBvZiBhcHBsZXNcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gdmlzaWJsZVByb3BlcnR5IC0gV2hldGhlciBvdXIgdmlzdWFsIHJlcHJlc2VudGF0aW9uIGlzIHZpc2libGVcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5Ljxib29sZWFuPn0gY29udHJvbHNWaXNpYmxlUHJvcGVydHkgLSBXaGV0aGVyIG91ciBjb250cm9scyBhcmUgdmlzaWJsZVxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggaW5pdGlhbENvc3QsIGluaXRpYWxBcHBsZXMsIHZpc2libGVQcm9wZXJ0eSwgY29udHJvbHNWaXNpYmxlUHJvcGVydHksIHRhbmRlbSApIHtcclxuXHJcbiAgICBjb25zdCB0b3RhbENvc3RQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggaW5pdGlhbENvc3QsIHtcclxuICAgICAgcmFuZ2U6IFByb3BvcnRpb25QbGF5Z3JvdW5kQ29uc3RhbnRzLkFQUExFX1RPVEFMX0NPU1RfUkFOR0UsXHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJyxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAndG90YWxDb3N0UHJvcGVydHknIClcclxuICAgIH0gKTtcclxuICAgIGNvbnN0IG51bWJlck9mQXBwbGVzUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIGluaXRpYWxBcHBsZXMsIHtcclxuICAgICAgcmFuZ2U6IFByb3BvcnRpb25QbGF5Z3JvdW5kQ29uc3RhbnRzLkFQUExFX0NPVU5UX1JBTkdFLFxyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ251bWJlck9mQXBwbGVzUHJvcGVydHknIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggdmlzaWJsZVByb3BlcnR5LCBjb250cm9sc1Zpc2libGVQcm9wZXJ0eSxcclxuICAgICAgdG90YWxDb3N0UHJvcGVydHksXHJcbiAgICAgIG51bWJlck9mQXBwbGVzUHJvcGVydHksXHJcbiAgICAgIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge051bWJlclByb3BlcnR5fSAtIFRvdGFsIGNvc3Qgb2YgYWxsIG9mIHRoZSBhcHBsZXNcclxuICAgIHRoaXMudG90YWxDb3N0UHJvcGVydHkgPSB0b3RhbENvc3RQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBAcHVibGljIHtOdW1iZXJQcm9wZXJ0eX0gLSBIb3cgbWFueSBhcHBsZXMgYXJlIGluIHRoaXMgZ3JvdXBcclxuICAgIHRoaXMubnVtYmVyT2ZBcHBsZXNQcm9wZXJ0eSA9IG51bWJlck9mQXBwbGVzUHJvcGVydHk7XHJcbiAgfVxyXG59XHJcblxyXG5wcm9wb3J0aW9uUGxheWdyb3VuZC5yZWdpc3RlciggJ0FwcGxlR3JvdXAnLCBBcHBsZUdyb3VwICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHBsZUdyb3VwOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sMENBQTBDO0FBQ3JFLE9BQU9DLG9CQUFvQixNQUFNLGtDQUFrQztBQUNuRSxPQUFPQyw2QkFBNkIsTUFBTSx3Q0FBd0M7QUFDbEYsT0FBT0MsVUFBVSxNQUFNLGtCQUFrQjtBQUV6QyxNQUFNQyxVQUFVLFNBQVNELFVBQVUsQ0FBQztFQUNsQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRSxXQUFXQSxDQUFFQyxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsZUFBZSxFQUFFQyx1QkFBdUIsRUFBRUMsTUFBTSxFQUFHO0lBRTFGLE1BQU1DLGlCQUFpQixHQUFHLElBQUlYLGNBQWMsQ0FBRU0sV0FBVyxFQUFFO01BQ3pETSxLQUFLLEVBQUVWLDZCQUE2QixDQUFDVyxzQkFBc0I7TUFDM0RDLFVBQVUsRUFBRSxTQUFTO01BQ3JCSixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLG1CQUFvQjtJQUNuRCxDQUFFLENBQUM7SUFDSCxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJaEIsY0FBYyxDQUFFTyxhQUFhLEVBQUU7TUFDaEVLLEtBQUssRUFBRVYsNkJBQTZCLENBQUNlLGlCQUFpQjtNQUN0REgsVUFBVSxFQUFFLFNBQVM7TUFDckJKLE1BQU0sRUFBRUEsTUFBTSxDQUFDSyxZQUFZLENBQUUsd0JBQXlCO0lBQ3hELENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVAsZUFBZSxFQUFFQyx1QkFBdUIsRUFDN0NFLGlCQUFpQixFQUNqQkssc0JBQXNCLEVBQ3RCTixNQUFPLENBQUM7O0lBRVY7SUFDQSxJQUFJLENBQUNDLGlCQUFpQixHQUFHQSxpQkFBaUI7O0lBRTFDO0lBQ0EsSUFBSSxDQUFDSyxzQkFBc0IsR0FBR0Esc0JBQXNCO0VBQ3REO0FBQ0Y7QUFFQWYsb0JBQW9CLENBQUNpQixRQUFRLENBQUUsWUFBWSxFQUFFZCxVQUFXLENBQUM7QUFFekQsZUFBZUEsVUFBVSJ9