// Copyright 2016-2020, University of Colorado Boulder

/**
 * Model for the Apple Scene, which includes two groups of apples, red and green.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import BooleanProperty from '../../../../../axon/js/BooleanProperty.js';
import proportionPlayground from '../../../proportionPlayground.js';
import Scene from '../Scene.js';
import AppleGroup from './AppleGroup.js';
class AppleScene extends Scene {
  /**
   * @param {boolean} predictMode - true for the Predict Screen which has a reveal button
   * @param {Tandem} tandem
   */
  constructor(predictMode, tandem) {
    assert && assert(tandem);
    super(predictMode, tandem);

    // @public {BooleanProperty}
    this.showCostPerAppleProperty = new BooleanProperty(false, {
      tandem: tandem.createTandem('showCostPerAppleProperty')
    });
    const initialCost = predictMode ? 5 : 0;
    const initialApples = predictMode ? 5 : 1;

    // @public {AppleGroup}
    this.leftAppleGroup = new AppleGroup(initialCost, initialApples, this.leftVisibleProperty, this.leftControlsVisibleProperty, tandem.createTandem('leftAppleGroup'));
    this.rightAppleGroup = new AppleGroup(initialCost, initialApples, this.rightVisibleProperty, this.rightControlsVisibleProperty, tandem.createTandem('rightAppleGroup'));
    this.initializeRatios(this.leftAppleGroup, this.rightAppleGroup);
  }

  /**
   * Reset the model
   * @public
   * @override
   */
  reset() {
    super.reset();
    this.showCostPerAppleProperty.reset();
  }
}
proportionPlayground.register('AppleScene', AppleScene);
export default AppleScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJwcm9wb3J0aW9uUGxheWdyb3VuZCIsIlNjZW5lIiwiQXBwbGVHcm91cCIsIkFwcGxlU2NlbmUiLCJjb25zdHJ1Y3RvciIsInByZWRpY3RNb2RlIiwidGFuZGVtIiwiYXNzZXJ0Iiwic2hvd0Nvc3RQZXJBcHBsZVByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwiaW5pdGlhbENvc3QiLCJpbml0aWFsQXBwbGVzIiwibGVmdEFwcGxlR3JvdXAiLCJsZWZ0VmlzaWJsZVByb3BlcnR5IiwibGVmdENvbnRyb2xzVmlzaWJsZVByb3BlcnR5IiwicmlnaHRBcHBsZUdyb3VwIiwicmlnaHRWaXNpYmxlUHJvcGVydHkiLCJyaWdodENvbnRyb2xzVmlzaWJsZVByb3BlcnR5IiwiaW5pdGlhbGl6ZVJhdGlvcyIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcHBsZVNjZW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciB0aGUgQXBwbGUgU2NlbmUsIHdoaWNoIGluY2x1ZGVzIHR3byBncm91cHMgb2YgYXBwbGVzLCByZWQgYW5kIGdyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgcHJvcG9ydGlvblBsYXlncm91bmQgZnJvbSAnLi4vLi4vLi4vcHJvcG9ydGlvblBsYXlncm91bmQuanMnO1xyXG5pbXBvcnQgU2NlbmUgZnJvbSAnLi4vU2NlbmUuanMnO1xyXG5pbXBvcnQgQXBwbGVHcm91cCBmcm9tICcuL0FwcGxlR3JvdXAuanMnO1xyXG5cclxuY2xhc3MgQXBwbGVTY2VuZSBleHRlbmRzIFNjZW5lIHtcclxuICAvKipcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByZWRpY3RNb2RlIC0gdHJ1ZSBmb3IgdGhlIFByZWRpY3QgU2NyZWVuIHdoaWNoIGhhcyBhIHJldmVhbCBidXR0b25cclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHByZWRpY3RNb2RlLCB0YW5kZW0gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0YW5kZW0gKTtcclxuXHJcbiAgICBzdXBlciggcHJlZGljdE1vZGUsIHRhbmRlbSApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge0Jvb2xlYW5Qcm9wZXJ0eX1cclxuICAgIHRoaXMuc2hvd0Nvc3RQZXJBcHBsZVByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2hvd0Nvc3RQZXJBcHBsZVByb3BlcnR5JyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbENvc3QgPSBwcmVkaWN0TW9kZSA/IDUgOiAwO1xyXG4gICAgY29uc3QgaW5pdGlhbEFwcGxlcyA9IHByZWRpY3RNb2RlID8gNSA6IDE7XHJcblxyXG4gICAgLy8gQHB1YmxpYyB7QXBwbGVHcm91cH1cclxuICAgIHRoaXMubGVmdEFwcGxlR3JvdXAgPSBuZXcgQXBwbGVHcm91cCggaW5pdGlhbENvc3QsIGluaXRpYWxBcHBsZXMsIHRoaXMubGVmdFZpc2libGVQcm9wZXJ0eSwgdGhpcy5sZWZ0Q29udHJvbHNWaXNpYmxlUHJvcGVydHksIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdsZWZ0QXBwbGVHcm91cCcgKSApO1xyXG4gICAgdGhpcy5yaWdodEFwcGxlR3JvdXAgPSBuZXcgQXBwbGVHcm91cCggaW5pdGlhbENvc3QsIGluaXRpYWxBcHBsZXMsIHRoaXMucmlnaHRWaXNpYmxlUHJvcGVydHksIHRoaXMucmlnaHRDb250cm9sc1Zpc2libGVQcm9wZXJ0eSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3JpZ2h0QXBwbGVHcm91cCcgKSApO1xyXG5cclxuICAgIHRoaXMuaW5pdGlhbGl6ZVJhdGlvcyggdGhpcy5sZWZ0QXBwbGVHcm91cCwgdGhpcy5yaWdodEFwcGxlR3JvdXAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IHRoZSBtb2RlbFxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIHN1cGVyLnJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy5zaG93Q29zdFBlckFwcGxlUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbnByb3BvcnRpb25QbGF5Z3JvdW5kLnJlZ2lzdGVyKCAnQXBwbGVTY2VuZScsIEFwcGxlU2NlbmUgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcGxlU2NlbmU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSwyQ0FBMkM7QUFDdkUsT0FBT0Msb0JBQW9CLE1BQU0sa0NBQWtDO0FBQ25FLE9BQU9DLEtBQUssTUFBTSxhQUFhO0FBQy9CLE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFFeEMsTUFBTUMsVUFBVSxTQUFTRixLQUFLLENBQUM7RUFDN0I7QUFDRjtBQUNBO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUc7SUFDakNDLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxNQUFPLENBQUM7SUFFMUIsS0FBSyxDQUFFRCxXQUFXLEVBQUVDLE1BQU8sQ0FBQzs7SUFFNUI7SUFDQSxJQUFJLENBQUNFLHdCQUF3QixHQUFHLElBQUlULGVBQWUsQ0FBRSxLQUFLLEVBQUU7TUFDMURPLE1BQU0sRUFBRUEsTUFBTSxDQUFDRyxZQUFZLENBQUUsMEJBQTJCO0lBQzFELENBQUUsQ0FBQztJQUVILE1BQU1DLFdBQVcsR0FBR0wsV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLE1BQU1NLGFBQWEsR0FBR04sV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDOztJQUV6QztJQUNBLElBQUksQ0FBQ08sY0FBYyxHQUFHLElBQUlWLFVBQVUsQ0FBRVEsV0FBVyxFQUFFQyxhQUFhLEVBQUUsSUFBSSxDQUFDRSxtQkFBbUIsRUFBRSxJQUFJLENBQUNDLDJCQUEyQixFQUFFUixNQUFNLENBQUNHLFlBQVksQ0FBRSxnQkFBaUIsQ0FBRSxDQUFDO0lBQ3ZLLElBQUksQ0FBQ00sZUFBZSxHQUFHLElBQUliLFVBQVUsQ0FBRVEsV0FBVyxFQUFFQyxhQUFhLEVBQUUsSUFBSSxDQUFDSyxvQkFBb0IsRUFBRSxJQUFJLENBQUNDLDRCQUE0QixFQUFFWCxNQUFNLENBQUNHLFlBQVksQ0FBRSxpQkFBa0IsQ0FBRSxDQUFDO0lBRTNLLElBQUksQ0FBQ1MsZ0JBQWdCLENBQUUsSUFBSSxDQUFDTixjQUFjLEVBQUUsSUFBSSxDQUFDRyxlQUFnQixDQUFDO0VBQ3BFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUksS0FBS0EsQ0FBQSxFQUFHO0lBQ04sS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUViLElBQUksQ0FBQ1gsd0JBQXdCLENBQUNXLEtBQUssQ0FBQyxDQUFDO0VBQ3ZDO0FBQ0Y7QUFFQW5CLG9CQUFvQixDQUFDb0IsUUFBUSxDQUFFLFlBQVksRUFBRWpCLFVBQVcsQ0FBQztBQUV6RCxlQUFlQSxVQUFVIn0=