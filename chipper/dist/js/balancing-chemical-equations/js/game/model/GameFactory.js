// Copyright 2014-2023, University of Colorado Boulder

/**
 * Factory that creates a game.
 * A game is a set of equations to be balanced.
 * The equations are chosen from a 'pool', and each game level has its own pool.
 *
 * Equations are instantiated by calling EquationGenerator functions.
 * We need new equations for each game, and we need to be able to exclude some types of equations
 * during the equation selection process.
 *
 * @author Vasily Shakhov (mlearner.com)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import BCEQueryParameters from '../../common/BCEQueryParameters.js';
import DecompositionEquation from '../../common/model/DecompositionEquation.js';
import DisplacementEquation from '../../common/model/DisplacementEquation.js';
import SynthesisEquation from '../../common/model/SynthesisEquation.js';
import RandomStrategy from './RandomStrategy.js';

// constants
const EQUATIONS_PER_GAME = 5;

// See GameFactory.LEVEL3_EXCLUSIONS_MAP

// Level 1 equation pool
const LEVEL1_POOL = [
// this is the largest molecule, put it first to simplify layout testing
DecompositionEquation.create_PCl5_PCl3_Cl2,
// this equation requires maxX adjustment in EquationNode, put it here to simplify layout testing
DecompositionEquation.create_CH3OH_CO_2H2, SynthesisEquation.create_CH2O_H2_CH3OH, SynthesisEquation.create_2H2_O2_2H2O, SynthesisEquation.create_H2_F2_2HF, DecompositionEquation.create_2HCl_H2_Cl2, SynthesisEquation.create_CH2O_H2_CH3OH, DecompositionEquation.create_C2H6_C2H4_H2, SynthesisEquation.create_C2H2_2H2_C2H6, SynthesisEquation.create_C_O2_CO2, SynthesisEquation.create_2C_O2_2CO, DecompositionEquation.create_2CO2_2CO_O2, DecompositionEquation.create_2CO_C_CO2, SynthesisEquation.create_C_2S_CS2, DecompositionEquation.create_2NH3_N2_3H2, DecompositionEquation.create_2NO_N2_O2, DecompositionEquation.create_2NO2_2NO_O2, SynthesisEquation.create_2N2_O2_2N2O, SynthesisEquation.create_P4_6H2_4PH3, SynthesisEquation.create_P4_6F2_4PF3, DecompositionEquation.create_4PCl3_P4_6Cl2, DecompositionEquation.create_2SO3_2SO2_O2];

// Level 2 equation pool
const LEVEL2_POOL = [DisplacementEquation.create_2C_2H2O_CH4_CO2, DisplacementEquation.create_CH4_H2O_3H2_CO, DisplacementEquation.create_CH4_2O2_CO2_2H2O, DisplacementEquation.create_C2H4_3O2_2CO2_2H2O, DisplacementEquation.create_C2H6_Cl2_C2H5Cl_HCl, DisplacementEquation.create_CH4_4S_CS2_2H2S, DisplacementEquation.create_CS2_3O2_CO2_2SO2, DisplacementEquation.create_SO2_2H2_S_2H2O, DisplacementEquation.create_SO2_3H2_H2S_2H2O, DisplacementEquation.create_2F2_H2O_OF2_2HF, DisplacementEquation.create_OF2_H2O_O2_2HF];

// Level 3 equation pool
const LEVEL3_POOL = [
// this is the longest equation, requires minX adjustment in EquationNode, put it first to simplify layout testing
DisplacementEquation.create_C2H5OH_3O2_2CO2_3H2O,
// this is the reverse of the previous equation
DisplacementEquation.create_2CO2_3H2O_C2H5OH_3O2, DisplacementEquation.create_2C2H6_7O2_4CO2_6H2O, DisplacementEquation.create_4CO2_6H2O_2C2H6_7O2, DisplacementEquation.create_2C2H2_5O2_4CO2_2H2O, DisplacementEquation.create_4CO2_2H2O_2C2H2_5O2, DisplacementEquation.create_4NH3_3O2_2N2_6H2O, DisplacementEquation.create_2N2_6H2O_4NH3_3O2, DisplacementEquation.create_4NH3_5O2_4NO_6H2O, DisplacementEquation.create_4NO_6H2O_4NH3_5O2, DisplacementEquation.create_4NH3_7O2_4NO2_6H2O, DisplacementEquation.create_4NO2_6H2O_4NH3_7O2, DisplacementEquation.create_4NH3_6NO_5N2_6H2O, DisplacementEquation.create_5N2_6H2O_4NH3_6NO];

// all pools, indexed by level
const POOLS = [LEVEL1_POOL, LEVEL2_POOL, LEVEL3_POOL];

/*
 *  Level 3 exclusions map
 *  This mess deserves some explanation... For level 3, the design team wanted a complicated
 *  strategy for selecting equations, where selection of an equation causes other equations to be
 *  ruled out as possible choices.  For example, if we choose an equation that contains 4NH3 as
 *  a reactant, we don't want to choose any other equations with 4NH3 as a reactant, and we don't
 *  want to choose the reverse equation.  Since this "exclusion" strategy was a moving target and
 *  the rules kept changing, I implemented this general solution, whereby a list of exclusions
 *  can be specified for each equation.
 */
const LEVEL3_EXCLUSIONS_MAP = new Map();
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_2C2H6_7O2_4CO2_6H2O, [DisplacementEquation.create_4CO2_6H2O_2C2H6_7O2, /* reverse equation */
DisplacementEquation.create_2C2H2_5O2_4CO2_2H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4CO2_6H2O_2C2H6_7O2, [DisplacementEquation.create_2C2H6_7O2_4CO2_6H2O, /* reverse equation */
DisplacementEquation.create_4CO2_2H2O_2C2H2_5O2]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_2C2H2_5O2_4CO2_2H2O, [DisplacementEquation.create_4CO2_2H2O_2C2H2_5O2, /* reverse equation */
DisplacementEquation.create_2C2H6_7O2_4CO2_6H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4CO2_2H2O_2C2H2_5O2, [DisplacementEquation.create_2C2H2_5O2_4CO2_2H2O, /* reverse equation */
DisplacementEquation.create_4CO2_6H2O_2C2H6_7O2]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_C2H5OH_3O2_2CO2_3H2O, [DisplacementEquation.create_2CO2_3H2O_C2H5OH_3O2 /* reverse equation */]);

LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_2CO2_3H2O_C2H5OH_3O2, [DisplacementEquation.create_C2H5OH_3O2_2CO2_3H2O /* reverse equation */]);

LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NH3_3O2_2N2_6H2O, [DisplacementEquation.create_2N2_6H2O_4NH3_3O2, /* reverse equation */
DisplacementEquation.create_4NH3_5O2_4NO_6H2O, /* other equations with reactant 4NH3 */
DisplacementEquation.create_4NH3_7O2_4NO2_6H2O, DisplacementEquation.create_4NH3_6NO_5N2_6H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NH3_5O2_4NO_6H2O, [DisplacementEquation.create_4NO_6H2O_4NH3_5O2, /* reverse equation */
DisplacementEquation.create_4NH3_3O2_2N2_6H2O, /* other equations with reactant 4NH3 */
DisplacementEquation.create_4NH3_7O2_4NO2_6H2O, DisplacementEquation.create_4NH3_6NO_5N2_6H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NH3_7O2_4NO2_6H2O, [DisplacementEquation.create_4NO2_6H2O_4NH3_7O2, /* reverse equation */
DisplacementEquation.create_4NH3_3O2_2N2_6H2O, /* other equations with reactant 4NH3 */
DisplacementEquation.create_4NH3_5O2_4NO_6H2O, DisplacementEquation.create_4NH3_6NO_5N2_6H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NH3_6NO_5N2_6H2O, [DisplacementEquation.create_5N2_6H2O_4NH3_6NO, /* reverse equation */
DisplacementEquation.create_4NH3_3O2_2N2_6H2O, /* other equations with reactant 4NH3 */
DisplacementEquation.create_4NH3_5O2_4NO_6H2O, DisplacementEquation.create_4NH3_7O2_4NO2_6H2O]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_2N2_6H2O_4NH3_3O2, [DisplacementEquation.create_4NH3_3O2_2N2_6H2O, /* reverse equation */
DisplacementEquation.create_4NO_6H2O_4NH3_5O2, /* other equations with product 4NH3 */
DisplacementEquation.create_4NO2_6H2O_4NH3_7O2, DisplacementEquation.create_5N2_6H2O_4NH3_6NO]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NO_6H2O_4NH3_5O2, [DisplacementEquation.create_4NH3_5O2_4NO_6H2O, /* reverse equation */
DisplacementEquation.create_2N2_6H2O_4NH3_3O2, /* other equations with product 4NH3 */
DisplacementEquation.create_4NO2_6H2O_4NH3_7O2, DisplacementEquation.create_5N2_6H2O_4NH3_6NO]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_4NO2_6H2O_4NH3_7O2, [DisplacementEquation.create_4NH3_7O2_4NO2_6H2O, /* reverse equation */
DisplacementEquation.create_2N2_6H2O_4NH3_3O2, /* other equations with product 4NH3 */
DisplacementEquation.create_4NO_6H2O_4NH3_5O2, DisplacementEquation.create_5N2_6H2O_4NH3_6NO]);
LEVEL3_EXCLUSIONS_MAP.set(DisplacementEquation.create_5N2_6H2O_4NH3_6NO, [DisplacementEquation.create_4NH3_6NO_5N2_6H2O, /* reverse equation */
DisplacementEquation.create_2N2_6H2O_4NH3_3O2, /* other equations with product 4NH3 */
DisplacementEquation.create_4NO_6H2O_4NH3_5O2, DisplacementEquation.create_4NO2_6H2O_4NH3_7O2]);

// strategies for selecting equations, indexed by game level
const STRATEGIES = [new RandomStrategy(LEVEL1_POOL, false), new RandomStrategy(LEVEL2_POOL, true), new RandomStrategy(LEVEL3_POOL, true, {
  exclusionsMap: LEVEL3_EXCLUSIONS_MAP
})];
const GameFactory = {
  /**
   * Gets the number of equations for a level.
   * If we're playing all equations for testing purposes, return the entire pool length.
   */
  getNumberOfEquations(level) {
    return BCEQueryParameters.playAll ? POOLS[level].length : EQUATIONS_PER_GAME;
  },
  /**
   * Creates a set of equations to be used in the game.
   * If 'playAll' query parameter is defined, return all equations for the level.
   */
  createEquations(level) {
    // Get an array of EquationGenerators.
    const equationGenerators = BCEQueryParameters.playAll ? POOLS[level] : STRATEGIES[level].getEquationGenerators(EQUATIONS_PER_GAME);

    // Execute each EquationGenerator to produce an Equation.
    return equationGenerators.map(equationGenerator => equationGenerator());
  }
};
balancingChemicalEquations.register('GameFactory', GameFactory);
export default GameFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyIsIkJDRVF1ZXJ5UGFyYW1ldGVycyIsIkRlY29tcG9zaXRpb25FcXVhdGlvbiIsIkRpc3BsYWNlbWVudEVxdWF0aW9uIiwiU3ludGhlc2lzRXF1YXRpb24iLCJSYW5kb21TdHJhdGVneSIsIkVRVUFUSU9OU19QRVJfR0FNRSIsIkxFVkVMMV9QT09MIiwiY3JlYXRlX1BDbDVfUENsM19DbDIiLCJjcmVhdGVfQ0gzT0hfQ09fMkgyIiwiY3JlYXRlX0NIMk9fSDJfQ0gzT0giLCJjcmVhdGVfMkgyX08yXzJIMk8iLCJjcmVhdGVfSDJfRjJfMkhGIiwiY3JlYXRlXzJIQ2xfSDJfQ2wyIiwiY3JlYXRlX0MySDZfQzJINF9IMiIsImNyZWF0ZV9DMkgyXzJIMl9DMkg2IiwiY3JlYXRlX0NfTzJfQ08yIiwiY3JlYXRlXzJDX08yXzJDTyIsImNyZWF0ZV8yQ08yXzJDT19PMiIsImNyZWF0ZV8yQ09fQ19DTzIiLCJjcmVhdGVfQ18yU19DUzIiLCJjcmVhdGVfMk5IM19OMl8zSDIiLCJjcmVhdGVfMk5PX04yX08yIiwiY3JlYXRlXzJOTzJfMk5PX08yIiwiY3JlYXRlXzJOMl9PMl8yTjJPIiwiY3JlYXRlX1A0XzZIMl80UEgzIiwiY3JlYXRlX1A0XzZGMl80UEYzIiwiY3JlYXRlXzRQQ2wzX1A0XzZDbDIiLCJjcmVhdGVfMlNPM18yU08yX08yIiwiTEVWRUwyX1BPT0wiLCJjcmVhdGVfMkNfMkgyT19DSDRfQ08yIiwiY3JlYXRlX0NINF9IMk9fM0gyX0NPIiwiY3JlYXRlX0NINF8yTzJfQ08yXzJIMk8iLCJjcmVhdGVfQzJINF8zTzJfMkNPMl8ySDJPIiwiY3JlYXRlX0MySDZfQ2wyX0MySDVDbF9IQ2wiLCJjcmVhdGVfQ0g0XzRTX0NTMl8ySDJTIiwiY3JlYXRlX0NTMl8zTzJfQ08yXzJTTzIiLCJjcmVhdGVfU08yXzJIMl9TXzJIMk8iLCJjcmVhdGVfU08yXzNIMl9IMlNfMkgyTyIsImNyZWF0ZV8yRjJfSDJPX09GMl8ySEYiLCJjcmVhdGVfT0YyX0gyT19PMl8ySEYiLCJMRVZFTDNfUE9PTCIsImNyZWF0ZV9DMkg1T0hfM08yXzJDTzJfM0gyTyIsImNyZWF0ZV8yQ08yXzNIMk9fQzJINU9IXzNPMiIsImNyZWF0ZV8yQzJINl83TzJfNENPMl82SDJPIiwiY3JlYXRlXzRDTzJfNkgyT18yQzJINl83TzIiLCJjcmVhdGVfMkMySDJfNU8yXzRDTzJfMkgyTyIsImNyZWF0ZV80Q08yXzJIMk9fMkMySDJfNU8yIiwiY3JlYXRlXzROSDNfM08yXzJOMl82SDJPIiwiY3JlYXRlXzJOMl82SDJPXzROSDNfM08yIiwiY3JlYXRlXzROSDNfNU8yXzROT182SDJPIiwiY3JlYXRlXzROT182SDJPXzROSDNfNU8yIiwiY3JlYXRlXzROSDNfN08yXzROTzJfNkgyTyIsImNyZWF0ZV80Tk8yXzZIMk9fNE5IM183TzIiLCJjcmVhdGVfNE5IM182Tk9fNU4yXzZIMk8iLCJjcmVhdGVfNU4yXzZIMk9fNE5IM182Tk8iLCJQT09MUyIsIkxFVkVMM19FWENMVVNJT05TX01BUCIsIk1hcCIsInNldCIsIlNUUkFURUdJRVMiLCJleGNsdXNpb25zTWFwIiwiR2FtZUZhY3RvcnkiLCJnZXROdW1iZXJPZkVxdWF0aW9ucyIsImxldmVsIiwicGxheUFsbCIsImxlbmd0aCIsImNyZWF0ZUVxdWF0aW9ucyIsImVxdWF0aW9uR2VuZXJhdG9ycyIsImdldEVxdWF0aW9uR2VuZXJhdG9ycyIsIm1hcCIsImVxdWF0aW9uR2VuZXJhdG9yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJHYW1lRmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IHRoYXQgY3JlYXRlcyBhIGdhbWUuXHJcbiAqIEEgZ2FtZSBpcyBhIHNldCBvZiBlcXVhdGlvbnMgdG8gYmUgYmFsYW5jZWQuXHJcbiAqIFRoZSBlcXVhdGlvbnMgYXJlIGNob3NlbiBmcm9tIGEgJ3Bvb2wnLCBhbmQgZWFjaCBnYW1lIGxldmVsIGhhcyBpdHMgb3duIHBvb2wuXHJcbiAqXHJcbiAqIEVxdWF0aW9ucyBhcmUgaW5zdGFudGlhdGVkIGJ5IGNhbGxpbmcgRXF1YXRpb25HZW5lcmF0b3IgZnVuY3Rpb25zLlxyXG4gKiBXZSBuZWVkIG5ldyBlcXVhdGlvbnMgZm9yIGVhY2ggZ2FtZSwgYW5kIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBleGNsdWRlIHNvbWUgdHlwZXMgb2YgZXF1YXRpb25zXHJcbiAqIGR1cmluZyB0aGUgZXF1YXRpb24gc2VsZWN0aW9uIHByb2Nlc3MuXHJcbiAqXHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKG1sZWFybmVyLmNvbSlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMuanMnO1xyXG5pbXBvcnQgQkNFUXVlcnlQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL2NvbW1vbi9CQ0VRdWVyeVBhcmFtZXRlcnMuanMnO1xyXG5pbXBvcnQgRGVjb21wb3NpdGlvbkVxdWF0aW9uIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9EZWNvbXBvc2l0aW9uRXF1YXRpb24uanMnO1xyXG5pbXBvcnQgRGlzcGxhY2VtZW50RXF1YXRpb24gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Rpc3BsYWNlbWVudEVxdWF0aW9uLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9FcXVhdGlvbi5qcyc7XHJcbmltcG9ydCBTeW50aGVzaXNFcXVhdGlvbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvU3ludGhlc2lzRXF1YXRpb24uanMnO1xyXG5pbXBvcnQgUmFuZG9tU3RyYXRlZ3kgZnJvbSAnLi9SYW5kb21TdHJhdGVneS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgRVFVQVRJT05TX1BFUl9HQU1FID0gNTtcclxuXHJcbmV4cG9ydCB0eXBlIEVxdWF0aW9uR2VuZXJhdG9yID0gKCkgPT4gRXF1YXRpb247XHJcblxyXG4vLyBTZWUgR2FtZUZhY3RvcnkuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQXHJcbmV4cG9ydCB0eXBlIEV4Y2x1c2lvbnNNYXAgPSBNYXA8RXF1YXRpb25HZW5lcmF0b3IsIEVxdWF0aW9uR2VuZXJhdG9yW10+O1xyXG5cclxuLy8gTGV2ZWwgMSBlcXVhdGlvbiBwb29sXHJcbmNvbnN0IExFVkVMMV9QT09MOiBFcXVhdGlvbkdlbmVyYXRvcltdID0gW1xyXG4gIC8vIHRoaXMgaXMgdGhlIGxhcmdlc3QgbW9sZWN1bGUsIHB1dCBpdCBmaXJzdCB0byBzaW1wbGlmeSBsYXlvdXQgdGVzdGluZ1xyXG4gIERlY29tcG9zaXRpb25FcXVhdGlvbi5jcmVhdGVfUENsNV9QQ2wzX0NsMixcclxuICAvLyB0aGlzIGVxdWF0aW9uIHJlcXVpcmVzIG1heFggYWRqdXN0bWVudCBpbiBFcXVhdGlvbk5vZGUsIHB1dCBpdCBoZXJlIHRvIHNpbXBsaWZ5IGxheW91dCB0ZXN0aW5nXHJcbiAgRGVjb21wb3NpdGlvbkVxdWF0aW9uLmNyZWF0ZV9DSDNPSF9DT18ySDIsXHJcbiAgU3ludGhlc2lzRXF1YXRpb24uY3JlYXRlX0NIMk9fSDJfQ0gzT0gsXHJcbiAgU3ludGhlc2lzRXF1YXRpb24uY3JlYXRlXzJIMl9PMl8ySDJPLFxyXG4gIFN5bnRoZXNpc0VxdWF0aW9uLmNyZWF0ZV9IMl9GMl8ySEYsXHJcbiAgRGVjb21wb3NpdGlvbkVxdWF0aW9uLmNyZWF0ZV8ySENsX0gyX0NsMixcclxuICBTeW50aGVzaXNFcXVhdGlvbi5jcmVhdGVfQ0gyT19IMl9DSDNPSCxcclxuICBEZWNvbXBvc2l0aW9uRXF1YXRpb24uY3JlYXRlX0MySDZfQzJINF9IMixcclxuICBTeW50aGVzaXNFcXVhdGlvbi5jcmVhdGVfQzJIMl8ySDJfQzJINixcclxuICBTeW50aGVzaXNFcXVhdGlvbi5jcmVhdGVfQ19PMl9DTzIsXHJcbiAgU3ludGhlc2lzRXF1YXRpb24uY3JlYXRlXzJDX08yXzJDTyxcclxuICBEZWNvbXBvc2l0aW9uRXF1YXRpb24uY3JlYXRlXzJDTzJfMkNPX08yLFxyXG4gIERlY29tcG9zaXRpb25FcXVhdGlvbi5jcmVhdGVfMkNPX0NfQ08yLFxyXG4gIFN5bnRoZXNpc0VxdWF0aW9uLmNyZWF0ZV9DXzJTX0NTMixcclxuICBEZWNvbXBvc2l0aW9uRXF1YXRpb24uY3JlYXRlXzJOSDNfTjJfM0gyLFxyXG4gIERlY29tcG9zaXRpb25FcXVhdGlvbi5jcmVhdGVfMk5PX04yX08yLFxyXG4gIERlY29tcG9zaXRpb25FcXVhdGlvbi5jcmVhdGVfMk5PMl8yTk9fTzIsXHJcbiAgU3ludGhlc2lzRXF1YXRpb24uY3JlYXRlXzJOMl9PMl8yTjJPLFxyXG4gIFN5bnRoZXNpc0VxdWF0aW9uLmNyZWF0ZV9QNF82SDJfNFBIMyxcclxuICBTeW50aGVzaXNFcXVhdGlvbi5jcmVhdGVfUDRfNkYyXzRQRjMsXHJcbiAgRGVjb21wb3NpdGlvbkVxdWF0aW9uLmNyZWF0ZV80UENsM19QNF82Q2wyLFxyXG4gIERlY29tcG9zaXRpb25FcXVhdGlvbi5jcmVhdGVfMlNPM18yU08yX08yXHJcbl07XHJcblxyXG4vLyBMZXZlbCAyIGVxdWF0aW9uIHBvb2xcclxuY29uc3QgTEVWRUwyX1BPT0w6IEVxdWF0aW9uR2VuZXJhdG9yW10gPSBbXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzJDXzJIMk9fQ0g0X0NPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfQ0g0X0gyT18zSDJfQ08sXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlX0NINF8yTzJfQ08yXzJIMk8sXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlX0MySDRfM08yXzJDTzJfMkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfQzJINl9DbDJfQzJINUNsX0hDbCxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfQ0g0XzRTX0NTMl8ySDJTLFxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV9DUzJfM08yX0NPMl8yU08yLFxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV9TTzJfMkgyX1NfMkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfU08yXzNIMl9IMlNfMkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkYyX0gyT19PRjJfMkhGLFxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV9PRjJfSDJPX08yXzJIRlxyXG5dO1xyXG5cclxuLy8gTGV2ZWwgMyBlcXVhdGlvbiBwb29sXHJcbmNvbnN0IExFVkVMM19QT09MOiBFcXVhdGlvbkdlbmVyYXRvcltdID0gW1xyXG4gIC8vIHRoaXMgaXMgdGhlIGxvbmdlc3QgZXF1YXRpb24sIHJlcXVpcmVzIG1pblggYWRqdXN0bWVudCBpbiBFcXVhdGlvbk5vZGUsIHB1dCBpdCBmaXJzdCB0byBzaW1wbGlmeSBsYXlvdXQgdGVzdGluZ1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV9DMkg1T0hfM08yXzJDTzJfM0gyTyxcclxuICAvLyB0aGlzIGlzIHRoZSByZXZlcnNlIG9mIHRoZSBwcmV2aW91cyBlcXVhdGlvblxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV8yQ08yXzNIMk9fQzJINU9IXzNPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkMySDZfN08yXzRDTzJfNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNENPMl82SDJPXzJDMkg2XzdPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkMySDJfNU8yXzRDTzJfMkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNENPMl8ySDJPXzJDMkgyXzVPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM18zTzJfMk4yXzZIMk8sXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzJOMl82SDJPXzROSDNfM08yLFxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzVPMl80Tk9fNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5PXzZIMk9fNE5IM181TzIsXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfN08yXzROTzJfNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5PMl82SDJPXzROSDNfN08yLFxyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzZOT181TjJfNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNU4yXzZIMk9fNE5IM182Tk9cclxuXTtcclxuXHJcbi8vIGFsbCBwb29scywgaW5kZXhlZCBieSBsZXZlbFxyXG5jb25zdCBQT09MUyA9IFsgTEVWRUwxX1BPT0wsIExFVkVMMl9QT09MLCBMRVZFTDNfUE9PTCBdO1xyXG5cclxuLypcclxuICogIExldmVsIDMgZXhjbHVzaW9ucyBtYXBcclxuICogIFRoaXMgbWVzcyBkZXNlcnZlcyBzb21lIGV4cGxhbmF0aW9uLi4uIEZvciBsZXZlbCAzLCB0aGUgZGVzaWduIHRlYW0gd2FudGVkIGEgY29tcGxpY2F0ZWRcclxuICogIHN0cmF0ZWd5IGZvciBzZWxlY3RpbmcgZXF1YXRpb25zLCB3aGVyZSBzZWxlY3Rpb24gb2YgYW4gZXF1YXRpb24gY2F1c2VzIG90aGVyIGVxdWF0aW9ucyB0byBiZVxyXG4gKiAgcnVsZWQgb3V0IGFzIHBvc3NpYmxlIGNob2ljZXMuICBGb3IgZXhhbXBsZSwgaWYgd2UgY2hvb3NlIGFuIGVxdWF0aW9uIHRoYXQgY29udGFpbnMgNE5IMyBhc1xyXG4gKiAgYSByZWFjdGFudCwgd2UgZG9uJ3Qgd2FudCB0byBjaG9vc2UgYW55IG90aGVyIGVxdWF0aW9ucyB3aXRoIDROSDMgYXMgYSByZWFjdGFudCwgYW5kIHdlIGRvbid0XHJcbiAqICB3YW50IHRvIGNob29zZSB0aGUgcmV2ZXJzZSBlcXVhdGlvbi4gIFNpbmNlIHRoaXMgXCJleGNsdXNpb25cIiBzdHJhdGVneSB3YXMgYSBtb3ZpbmcgdGFyZ2V0IGFuZFxyXG4gKiAgdGhlIHJ1bGVzIGtlcHQgY2hhbmdpbmcsIEkgaW1wbGVtZW50ZWQgdGhpcyBnZW5lcmFsIHNvbHV0aW9uLCB3aGVyZWJ5IGEgbGlzdCBvZiBleGNsdXNpb25zXHJcbiAqICBjYW4gYmUgc3BlY2lmaWVkIGZvciBlYWNoIGVxdWF0aW9uLlxyXG4gKi9cclxuY29uc3QgTEVWRUwzX0VYQ0xVU0lPTlNfTUFQID0gbmV3IE1hcDxFcXVhdGlvbkdlbmVyYXRvciwgRXF1YXRpb25HZW5lcmF0b3JbXT4oKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzJDMkg2XzdPMl80Q08yXzZIMk8sIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNENPMl82SDJPXzJDMkg2XzdPMiwgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV8yQzJIMl81TzJfNENPMl8ySDJPXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzRDTzJfNkgyT18yQzJINl83TzIsIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkMySDZfN08yXzRDTzJfNkgyTywgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Q08yXzJIMk9fMkMySDJfNU8yXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzJDMkgyXzVPMl80Q08yXzJIMk8sIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNENPMl8ySDJPXzJDMkgyXzVPMiwgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV8yQzJINl83TzJfNENPMl82SDJPXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzRDTzJfMkgyT18yQzJIMl81TzIsIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkMySDJfNU8yXzRDTzJfMkgyTywgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Q08yXzZIMk9fMkMySDZfN08yXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlX0MySDVPSF8zTzJfMkNPMl8zSDJPLCBbXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzJDTzJfM0gyT19DMkg1T0hfM08yIC8qIHJldmVyc2UgZXF1YXRpb24gKi9cclxuXSApO1xyXG5MRVZFTDNfRVhDTFVTSU9OU19NQVAuc2V0KCBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMkNPMl8zSDJPX0MySDVPSF8zTzIsIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfQzJINU9IXzNPMl8yQ08yXzNIMk8gLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG5dICk7XHJcbkxFVkVMM19FWENMVVNJT05TX01BUC5zZXQoIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzNPMl8yTjJfNkgyTywgW1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV8yTjJfNkgyT180TkgzXzNPMiwgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzVPMl80Tk9fNkgyTywgLyogb3RoZXIgZXF1YXRpb25zIHdpdGggcmVhY3RhbnQgNE5IMyAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzdPMl80Tk8yXzZIMk8sXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfNk5PXzVOMl82SDJPXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfNU8yXzROT182SDJPLCBbXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROT182SDJPXzROSDNfNU8yLCAvKiByZXZlcnNlIGVxdWF0aW9uICovXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfM08yXzJOMl82SDJPLCAvKiBvdGhlciBlcXVhdGlvbnMgd2l0aCByZWFjdGFudCA0TkgzICovXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfN08yXzROTzJfNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM182Tk9fNU4yXzZIMk9cclxuXSApO1xyXG5MRVZFTDNfRVhDTFVTSU9OU19NQVAuc2V0KCBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM183TzJfNE5PMl82SDJPLCBbXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROTzJfNkgyT180TkgzXzdPMiwgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzNPMl8yTjJfNkgyTywgLyogb3RoZXIgZXF1YXRpb25zIHdpdGggcmVhY3RhbnQgNE5IMyAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzVPMl80Tk9fNkgyTyxcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM182Tk9fNU4yXzZIMk9cclxuXSApO1xyXG5MRVZFTDNfRVhDTFVTSU9OU19NQVAuc2V0KCBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM182Tk9fNU4yXzZIMk8sIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNU4yXzZIMk9fNE5IM182Tk8sIC8qIHJldmVyc2UgZXF1YXRpb24gKi9cclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM18zTzJfMk4yXzZIMk8sIC8qIG90aGVyIGVxdWF0aW9ucyB3aXRoIHJlYWN0YW50IDROSDMgKi9cclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM181TzJfNE5PXzZIMk8sXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROSDNfN08yXzROTzJfNkgyT1xyXG5dICk7XHJcbkxFVkVMM19FWENMVVNJT05TX01BUC5zZXQoIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV8yTjJfNkgyT180TkgzXzNPMiwgW1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzNPMl8yTjJfNkgyTywgLyogcmV2ZXJzZSBlcXVhdGlvbiAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Tk9fNkgyT180TkgzXzVPMiwgLyogb3RoZXIgZXF1YXRpb25zIHdpdGggcHJvZHVjdCA0TkgzICovXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROTzJfNkgyT180TkgzXzdPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNU4yXzZIMk9fNE5IM182Tk9cclxuXSApO1xyXG5MRVZFTDNfRVhDTFVTSU9OU19NQVAuc2V0KCBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5PXzZIMk9fNE5IM181TzIsIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM181TzJfNE5PXzZIMk8sIC8qIHJldmVyc2UgZXF1YXRpb24gKi9cclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMk4yXzZIMk9fNE5IM18zTzIsIC8qIG90aGVyIGVxdWF0aW9ucyB3aXRoIHByb2R1Y3QgNE5IMyAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Tk8yXzZIMk9fNE5IM183TzIsXHJcbiAgRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzVOMl82SDJPXzROSDNfNk5PXHJcbl0gKTtcclxuTEVWRUwzX0VYQ0xVU0lPTlNfTUFQLnNldCggRGlzcGxhY2VtZW50RXF1YXRpb24uY3JlYXRlXzROTzJfNkgyT180TkgzXzdPMiwgW1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80TkgzXzdPMl80Tk8yXzZIMk8sIC8qIHJldmVyc2UgZXF1YXRpb24gKi9cclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMk4yXzZIMk9fNE5IM18zTzIsIC8qIG90aGVyIGVxdWF0aW9ucyB3aXRoIHByb2R1Y3QgNE5IMyAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Tk9fNkgyT180TkgzXzVPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNU4yXzZIMk9fNE5IM182Tk9cclxuXSApO1xyXG5MRVZFTDNfRVhDTFVTSU9OU19NQVAuc2V0KCBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNU4yXzZIMk9fNE5IM182Tk8sIFtcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5IM182Tk9fNU4yXzZIMk8sIC8qIHJldmVyc2UgZXF1YXRpb24gKi9cclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfMk4yXzZIMk9fNE5IM18zTzIsIC8qIG90aGVyIGVxdWF0aW9ucyB3aXRoIHByb2R1Y3QgNE5IMyAqL1xyXG4gIERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV80Tk9fNkgyT180TkgzXzVPMixcclxuICBEaXNwbGFjZW1lbnRFcXVhdGlvbi5jcmVhdGVfNE5PMl82SDJPXzROSDNfN08yXHJcbl0gKTtcclxuXHJcbi8vIHN0cmF0ZWdpZXMgZm9yIHNlbGVjdGluZyBlcXVhdGlvbnMsIGluZGV4ZWQgYnkgZ2FtZSBsZXZlbFxyXG5jb25zdCBTVFJBVEVHSUVTID0gW1xyXG4gIG5ldyBSYW5kb21TdHJhdGVneSggTEVWRUwxX1BPT0wsIGZhbHNlICksXHJcbiAgbmV3IFJhbmRvbVN0cmF0ZWd5KCBMRVZFTDJfUE9PTCwgdHJ1ZSApLFxyXG4gIG5ldyBSYW5kb21TdHJhdGVneSggTEVWRUwzX1BPT0wsIHRydWUsIHsgZXhjbHVzaW9uc01hcDogTEVWRUwzX0VYQ0xVU0lPTlNfTUFQIH0gKVxyXG5dO1xyXG5cclxuY29uc3QgR2FtZUZhY3RvcnkgPSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBlcXVhdGlvbnMgZm9yIGEgbGV2ZWwuXHJcbiAgICogSWYgd2UncmUgcGxheWluZyBhbGwgZXF1YXRpb25zIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCByZXR1cm4gdGhlIGVudGlyZSBwb29sIGxlbmd0aC5cclxuICAgKi9cclxuICBnZXROdW1iZXJPZkVxdWF0aW9ucyggbGV2ZWw6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIEJDRVF1ZXJ5UGFyYW1ldGVycy5wbGF5QWxsID8gUE9PTFNbIGxldmVsIF0ubGVuZ3RoIDogRVFVQVRJT05TX1BFUl9HQU1FO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBzZXQgb2YgZXF1YXRpb25zIHRvIGJlIHVzZWQgaW4gdGhlIGdhbWUuXHJcbiAgICogSWYgJ3BsYXlBbGwnIHF1ZXJ5IHBhcmFtZXRlciBpcyBkZWZpbmVkLCByZXR1cm4gYWxsIGVxdWF0aW9ucyBmb3IgdGhlIGxldmVsLlxyXG4gICAqL1xyXG4gIGNyZWF0ZUVxdWF0aW9ucyggbGV2ZWw6IG51bWJlciApOiBFcXVhdGlvbltdIHtcclxuXHJcbiAgICAvLyBHZXQgYW4gYXJyYXkgb2YgRXF1YXRpb25HZW5lcmF0b3JzLlxyXG4gICAgY29uc3QgZXF1YXRpb25HZW5lcmF0b3JzID0gQkNFUXVlcnlQYXJhbWV0ZXJzLnBsYXlBbGwgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUE9PTFNbIGxldmVsIF0gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU1RSQVRFR0lFU1sgbGV2ZWwgXS5nZXRFcXVhdGlvbkdlbmVyYXRvcnMoIEVRVUFUSU9OU19QRVJfR0FNRSApO1xyXG5cclxuICAgIC8vIEV4ZWN1dGUgZWFjaCBFcXVhdGlvbkdlbmVyYXRvciB0byBwcm9kdWNlIGFuIEVxdWF0aW9uLlxyXG4gICAgcmV0dXJuIGVxdWF0aW9uR2VuZXJhdG9ycy5tYXAoIGVxdWF0aW9uR2VuZXJhdG9yID0+IGVxdWF0aW9uR2VuZXJhdG9yKCkgKTtcclxuICB9XHJcbn07XHJcblxyXG5iYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucy5yZWdpc3RlciggJ0dhbWVGYWN0b3J5JywgR2FtZUZhY3RvcnkgKTtcclxuZXhwb3J0IGRlZmF1bHQgR2FtZUZhY3Rvcnk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsMEJBQTBCLE1BQU0scUNBQXFDO0FBQzVFLE9BQU9DLGtCQUFrQixNQUFNLG9DQUFvQztBQUNuRSxPQUFPQyxxQkFBcUIsTUFBTSw2Q0FBNkM7QUFDL0UsT0FBT0Msb0JBQW9CLE1BQU0sNENBQTRDO0FBRTdFLE9BQU9DLGlCQUFpQixNQUFNLHlDQUF5QztBQUN2RSxPQUFPQyxjQUFjLE1BQU0scUJBQXFCOztBQUVoRDtBQUNBLE1BQU1DLGtCQUFrQixHQUFHLENBQUM7O0FBSTVCOztBQUdBO0FBQ0EsTUFBTUMsV0FBZ0MsR0FBRztBQUN2QztBQUNBTCxxQkFBcUIsQ0FBQ00sb0JBQW9CO0FBQzFDO0FBQ0FOLHFCQUFxQixDQUFDTyxtQkFBbUIsRUFDekNMLGlCQUFpQixDQUFDTSxvQkFBb0IsRUFDdENOLGlCQUFpQixDQUFDTyxrQkFBa0IsRUFDcENQLGlCQUFp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