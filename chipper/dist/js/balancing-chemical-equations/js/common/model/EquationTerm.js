// Copyright 2014-2023, University of Colorado Boulder

/**
 * A term in a chemical equation.
 * The "balanced coefficient" is the lowest coefficient value that will balance the equation, and is immutable.
 * The "user coefficient" is the coefficient set by the user.
 *
 * @author Vasily Shakhov (mlearner.com)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import optionize from '../../../../phet-core/js/optionize.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import BCEQueryParameters from '../BCEQueryParameters.js';
export default class EquationTerm {
  constructor(balancedCoefficient, molecule, providedOptions) {
    const options = optionize()({
      // SelfOptions
      initialCoefficient: 0
    }, providedOptions);

    // If we're inspecting all game challenges, fill in the correct answer to make our job easier.
    if (BCEQueryParameters.playAll) {
      options.initialCoefficient = balancedCoefficient;
    }
    this.balancedCoefficient = balancedCoefficient;
    this.molecule = molecule;
    this.userCoefficientProperty = new NumberProperty(options.initialCoefficient, {
      numberType: 'Integer'
    });
  }
  reset() {
    this.userCoefficientProperty.reset();
  }
}
balancingChemicalEquations.register('EquationTerm', EquationTerm);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIm9wdGlvbml6ZSIsImJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zIiwiQkNFUXVlcnlQYXJhbWV0ZXJzIiwiRXF1YXRpb25UZXJtIiwiY29uc3RydWN0b3IiLCJiYWxhbmNlZENvZWZmaWNpZW50IiwibW9sZWN1bGUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaW5pdGlhbENvZWZmaWNpZW50IiwicGxheUFsbCIsInVzZXJDb2VmZmljaWVudFByb3BlcnR5IiwibnVtYmVyVHlwZSIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFcXVhdGlvblRlcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB0ZXJtIGluIGEgY2hlbWljYWwgZXF1YXRpb24uXHJcbiAqIFRoZSBcImJhbGFuY2VkIGNvZWZmaWNpZW50XCIgaXMgdGhlIGxvd2VzdCBjb2VmZmljaWVudCB2YWx1ZSB0aGF0IHdpbGwgYmFsYW5jZSB0aGUgZXF1YXRpb24sIGFuZCBpcyBpbW11dGFibGUuXHJcbiAqIFRoZSBcInVzZXIgY29lZmZpY2llbnRcIiBpcyB0aGUgY29lZmZpY2llbnQgc2V0IGJ5IHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFZhc2lseSBTaGFraG92IChtbGVhcm5lci5jb20pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyBmcm9tICcuLi8uLi9iYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucy5qcyc7XHJcbmltcG9ydCBCQ0VRdWVyeVBhcmFtZXRlcnMgZnJvbSAnLi4vQkNFUXVlcnlQYXJhbWV0ZXJzLmpzJztcclxuaW1wb3J0IE1vbGVjdWxlIGZyb20gJy4vTW9sZWN1bGUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBpbml0aWFsQ29lZmZpY2llbnQ/OiBudW1iZXI7IC8vIGluaXRpYWwgdmFsdWUgb2YgdGhlIGNvZWZmaWNpZW50XHJcbn07XHJcblxyXG50eXBlIEVxdWF0aW9uVGVybU9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVxdWF0aW9uVGVybSB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBiYWxhbmNlZENvZWZmaWNpZW50OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1vbGVjdWxlOiBNb2xlY3VsZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgdXNlckNvZWZmaWNpZW50UHJvcGVydHk6IFByb3BlcnR5PG51bWJlcj47XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYmFsYW5jZWRDb2VmZmljaWVudDogbnVtYmVyLCBtb2xlY3VsZTogTW9sZWN1bGUsIHByb3ZpZGVkT3B0aW9ucz86IEVxdWF0aW9uVGVybU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFcXVhdGlvblRlcm1PcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgaW5pdGlhbENvZWZmaWNpZW50OiAwXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBJZiB3ZSdyZSBpbnNwZWN0aW5nIGFsbCBnYW1lIGNoYWxsZW5nZXMsIGZpbGwgaW4gdGhlIGNvcnJlY3QgYW5zd2VyIHRvIG1ha2Ugb3VyIGpvYiBlYXNpZXIuXHJcbiAgICBpZiAoIEJDRVF1ZXJ5UGFyYW1ldGVycy5wbGF5QWxsICkge1xyXG4gICAgICBvcHRpb25zLmluaXRpYWxDb2VmZmljaWVudCA9IGJhbGFuY2VkQ29lZmZpY2llbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iYWxhbmNlZENvZWZmaWNpZW50ID0gYmFsYW5jZWRDb2VmZmljaWVudDtcclxuICAgIHRoaXMubW9sZWN1bGUgPSBtb2xlY3VsZTtcclxuXHJcbiAgICB0aGlzLnVzZXJDb2VmZmljaWVudFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBvcHRpb25zLmluaXRpYWxDb2VmZmljaWVudCwge1xyXG4gICAgICBudW1iZXJUeXBlOiAnSW50ZWdlcidcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMudXNlckNvZWZmaWNpZW50UHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnRXF1YXRpb25UZXJtJywgRXF1YXRpb25UZXJtICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sdUNBQXVDO0FBRWxFLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsMEJBQTBCLE1BQU0scUNBQXFDO0FBQzVFLE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQVN6RCxlQUFlLE1BQU1DLFlBQVksQ0FBQztFQU16QkMsV0FBV0EsQ0FBRUMsbUJBQTJCLEVBQUVDLFFBQWtCLEVBQUVDLGVBQXFDLEVBQUc7SUFFM0csTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQW1DLENBQUMsQ0FBRTtNQUU3RDtNQUNBUyxrQkFBa0IsRUFBRTtJQUN0QixDQUFDLEVBQUVGLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsSUFBS0wsa0JBQWtCLENBQUNRLE9BQU8sRUFBRztNQUNoQ0YsT0FBTyxDQUFDQyxrQkFBa0IsR0FBR0osbUJBQW1CO0lBQ2xEO0lBRUEsSUFBSSxDQUFDQSxtQkFBbUIsR0FBR0EsbUJBQW1CO0lBQzlDLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxRQUFRO0lBRXhCLElBQUksQ0FBQ0ssdUJBQXVCLEdBQUcsSUFBSVosY0FBYyxDQUFFUyxPQUFPLENBQUNDLGtCQUFrQixFQUFFO01BQzdFRyxVQUFVLEVBQUU7SUFDZCxDQUFFLENBQUM7RUFDTDtFQUVPQyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDRix1QkFBdUIsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7RUFDdEM7QUFDRjtBQUVBWiwwQkFBMEIsQ0FBQ2EsUUFBUSxDQUFFLGNBQWMsRUFBRVgsWUFBYSxDQUFDIn0=