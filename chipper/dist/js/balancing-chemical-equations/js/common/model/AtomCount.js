// Copyright 2014-2023, University of Colorado Boulder

/**
 * Data structure for describing how many times an atom appears in an equation.
 * There are separate counts for the left-hand (reactants) and right-hand (products)
 * sides of the equation.
 *
 * @author Vasily Shakhov
 * @author Chris Malley (PixelZoom, Inc.)
 */

import balancingChemicalEquations from '../../balancingChemicalEquations.js';
export default class AtomCount {
  // the element that describes the atom's chemical properties

  constructor(element, reactantsCount, productsCount) {
    this.element = element;
    this.reactantsCount = reactantsCount;
    this.productsCount = productsCount;
  }

  /**
   * Returns a count of each type of atom, based on the user coefficients.
   * The order of atoms will be the same order that they are encountered in the terms, left to right.
   * For example, if the equation is CH4 + 2 O2 -> CO2 + 2 H2O, then the order of atoms
   * will be [C,H,O].
   */
  static countAtoms(equation) {
    const atomCounts = [];
    appendToCounts(atomCounts, equation.reactants, true /* isReactants */);
    appendToCounts(atomCounts, equation.products, false /* isReactants */);
    return atomCounts;
  }
}

/**
 * Some of our visual representations of 'balanced' (ie, balance scales and bar charts)
 * compare the number of atoms on the left and right side of the equation.
 *
 * This algorithm supports those representations by computing the atom counts.
 * It examines a collection of terms in the equation (either reactants or products),
 * examines those terms' molecules, and counts the number of each atom type.
 * The atomCounts argument is modified, so that it contains the counts for the
 * specified terms.
 *
 * This is a brute force algorithm, but our number of terms is always small,
 * and this is easy to implement and understand.
 *
 * @param atomCounts
 * @param terms
 * @param isReactants true if the terms are the reactants, false if they are the products
 */
function appendToCounts(atomCounts, terms, isReactants) {
  terms.forEach(term => {
    term.molecule.atoms.forEach(atom => {
      let found = false;
      for (let i = 0; i < atomCounts.length; i++) {
        const atomCount = atomCounts[i];
        // add to an existing count
        if (atomCount.element === atom.element) {
          if (isReactants) {
            atomCount.reactantsCount += term.userCoefficientProperty.value;
          } else {
            atomCount.productsCount += term.userCoefficientProperty.value;
          }
          found = true;
          break;
        }
      }

      // if no existing count was found, create one.
      if (!found) {
        if (isReactants) {
          atomCounts.push(new AtomCount(atom.element, term.userCoefficientProperty.value, 0));
        } else {
          atomCounts.push(new AtomCount(atom.element, 0, term.userCoefficientProperty.value));
        }
      }
    });
  });
  return atomCounts;
}
balancingChemicalEquations.register('AtomCount', AtomCount);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyIsIkF0b21Db3VudCIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsInJlYWN0YW50c0NvdW50IiwicHJvZHVjdHNDb3VudCIsImNvdW50QXRvbXMiLCJlcXVhdGlvbiIsImF0b21Db3VudHMiLCJhcHBlbmRUb0NvdW50cyIsInJlYWN0YW50cyIsInByb2R1Y3RzIiwidGVybXMiLCJpc1JlYWN0YW50cyIsImZvckVhY2giLCJ0ZXJtIiwibW9sZWN1bGUiLCJhdG9tcyIsImF0b20iLCJmb3VuZCIsImkiLCJsZW5ndGgiLCJhdG9tQ291bnQiLCJ1c2VyQ29lZmZpY2llbnRQcm9wZXJ0eSIsInZhbHVlIiwicHVzaCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRvbUNvdW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERhdGEgc3RydWN0dXJlIGZvciBkZXNjcmliaW5nIGhvdyBtYW55IHRpbWVzIGFuIGF0b20gYXBwZWFycyBpbiBhbiBlcXVhdGlvbi5cclxuICogVGhlcmUgYXJlIHNlcGFyYXRlIGNvdW50cyBmb3IgdGhlIGxlZnQtaGFuZCAocmVhY3RhbnRzKSBhbmQgcmlnaHQtaGFuZCAocHJvZHVjdHMpXHJcbiAqIHNpZGVzIG9mIHRoZSBlcXVhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyBmcm9tICcuLi8uLi9iYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucy5qcyc7XHJcbmltcG9ydCBFbGVtZW50IGZyb20gJy4uLy4uLy4uLy4uL25pdHJvZ2x5Y2VyaW4vanMvRWxlbWVudC5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbiBmcm9tICcuL0VxdWF0aW9uLmpzJztcclxuaW1wb3J0IEVxdWF0aW9uVGVybSBmcm9tICcuL0VxdWF0aW9uVGVybS5qcyc7XHJcbmltcG9ydCBBdG9tIGZyb20gJy4uLy4uLy4uLy4uL25pdHJvZ2x5Y2VyaW4vanMvQXRvbS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdG9tQ291bnQge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudDsgLy8gdGhlIGVsZW1lbnQgdGhhdCBkZXNjcmliZXMgdGhlIGF0b20ncyBjaGVtaWNhbCBwcm9wZXJ0aWVzXHJcbiAgcHVibGljIHJlYWN0YW50c0NvdW50OiBudW1iZXI7XHJcbiAgcHVibGljIHByb2R1Y3RzQ291bnQ6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBlbGVtZW50OiBFbGVtZW50LCByZWFjdGFudHNDb3VudDogbnVtYmVyLCBwcm9kdWN0c0NvdW50OiBudW1iZXIgKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5yZWFjdGFudHNDb3VudCA9IHJlYWN0YW50c0NvdW50O1xyXG4gICAgdGhpcy5wcm9kdWN0c0NvdW50ID0gcHJvZHVjdHNDb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBjb3VudCBvZiBlYWNoIHR5cGUgb2YgYXRvbSwgYmFzZWQgb24gdGhlIHVzZXIgY29lZmZpY2llbnRzLlxyXG4gICAqIFRoZSBvcmRlciBvZiBhdG9tcyB3aWxsIGJlIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgZW5jb3VudGVyZWQgaW4gdGhlIHRlcm1zLCBsZWZ0IHRvIHJpZ2h0LlxyXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgZXF1YXRpb24gaXMgQ0g0ICsgMiBPMiAtPiBDTzIgKyAyIEgyTywgdGhlbiB0aGUgb3JkZXIgb2YgYXRvbXNcclxuICAgKiB3aWxsIGJlIFtDLEgsT10uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjb3VudEF0b21zKCBlcXVhdGlvbjogRXF1YXRpb24gKTogQXRvbUNvdW50W10ge1xyXG4gICAgY29uc3QgYXRvbUNvdW50czogQXRvbUNvdW50W10gPSBbXTtcclxuICAgIGFwcGVuZFRvQ291bnRzKCBhdG9tQ291bnRzLCBlcXVhdGlvbi5yZWFjdGFudHMsIHRydWUgLyogaXNSZWFjdGFudHMgKi8gKTtcclxuICAgIGFwcGVuZFRvQ291bnRzKCBhdG9tQ291bnRzLCBlcXVhdGlvbi5wcm9kdWN0cywgZmFsc2UgLyogaXNSZWFjdGFudHMgKi8gKTtcclxuICAgIHJldHVybiBhdG9tQ291bnRzO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNvbWUgb2Ygb3VyIHZpc3VhbCByZXByZXNlbnRhdGlvbnMgb2YgJ2JhbGFuY2VkJyAoaWUsIGJhbGFuY2Ugc2NhbGVzIGFuZCBiYXIgY2hhcnRzKVxyXG4gKiBjb21wYXJlIHRoZSBudW1iZXIgb2YgYXRvbXMgb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGUgb2YgdGhlIGVxdWF0aW9uLlxyXG4gKlxyXG4gKiBUaGlzIGFsZ29yaXRobSBzdXBwb3J0cyB0aG9zZSByZXByZXNlbnRhdGlvbnMgYnkgY29tcHV0aW5nIHRoZSBhdG9tIGNvdW50cy5cclxuICogSXQgZXhhbWluZXMgYSBjb2xsZWN0aW9uIG9mIHRlcm1zIGluIHRoZSBlcXVhdGlvbiAoZWl0aGVyIHJlYWN0YW50cyBvciBwcm9kdWN0cyksXHJcbiAqIGV4YW1pbmVzIHRob3NlIHRlcm1zJyBtb2xlY3VsZXMsIGFuZCBjb3VudHMgdGhlIG51bWJlciBvZiBlYWNoIGF0b20gdHlwZS5cclxuICogVGhlIGF0b21Db3VudHMgYXJndW1lbnQgaXMgbW9kaWZpZWQsIHNvIHRoYXQgaXQgY29udGFpbnMgdGhlIGNvdW50cyBmb3IgdGhlXHJcbiAqIHNwZWNpZmllZCB0ZXJtcy5cclxuICpcclxuICogVGhpcyBpcyBhIGJydXRlIGZvcmNlIGFsZ29yaXRobSwgYnV0IG91ciBudW1iZXIgb2YgdGVybXMgaXMgYWx3YXlzIHNtYWxsLFxyXG4gKiBhbmQgdGhpcyBpcyBlYXN5IHRvIGltcGxlbWVudCBhbmQgdW5kZXJzdGFuZC5cclxuICpcclxuICogQHBhcmFtIGF0b21Db3VudHNcclxuICogQHBhcmFtIHRlcm1zXHJcbiAqIEBwYXJhbSBpc1JlYWN0YW50cyB0cnVlIGlmIHRoZSB0ZXJtcyBhcmUgdGhlIHJlYWN0YW50cywgZmFsc2UgaWYgdGhleSBhcmUgdGhlIHByb2R1Y3RzXHJcbiAqL1xyXG5mdW5jdGlvbiBhcHBlbmRUb0NvdW50cyggYXRvbUNvdW50czogQXRvbUNvdW50W10sIHRlcm1zOiBFcXVhdGlvblRlcm1bXSwgaXNSZWFjdGFudHM6IGJvb2xlYW4gKTogQXRvbUNvdW50W10ge1xyXG4gIHRlcm1zLmZvckVhY2goIHRlcm0gPT4ge1xyXG4gICAgdGVybS5tb2xlY3VsZS5hdG9tcy5mb3JFYWNoKCAoIGF0b206IEF0b20gKSA9PiB7XHJcblxyXG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgYXRvbUNvdW50cy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICBjb25zdCBhdG9tQ291bnQgPSBhdG9tQ291bnRzWyBpIF07XHJcbiAgICAgICAgLy8gYWRkIHRvIGFuIGV4aXN0aW5nIGNvdW50XHJcbiAgICAgICAgaWYgKCBhdG9tQ291bnQuZWxlbWVudCA9PT0gYXRvbS5lbGVtZW50ICkge1xyXG4gICAgICAgICAgaWYgKCBpc1JlYWN0YW50cyApIHtcclxuICAgICAgICAgICAgYXRvbUNvdW50LnJlYWN0YW50c0NvdW50ICs9IHRlcm0udXNlckNvZWZmaWNpZW50UHJvcGVydHkudmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXRvbUNvdW50LnByb2R1Y3RzQ291bnQgKz0gdGVybS51c2VyQ29lZmZpY2llbnRQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gaWYgbm8gZXhpc3RpbmcgY291bnQgd2FzIGZvdW5kLCBjcmVhdGUgb25lLlxyXG4gICAgICBpZiAoICFmb3VuZCApIHtcclxuICAgICAgICBpZiAoIGlzUmVhY3RhbnRzICkge1xyXG4gICAgICAgICAgYXRvbUNvdW50cy5wdXNoKCBuZXcgQXRvbUNvdW50KCBhdG9tLmVsZW1lbnQsIHRlcm0udXNlckNvZWZmaWNpZW50UHJvcGVydHkudmFsdWUsIDAgKSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGF0b21Db3VudHMucHVzaCggbmV3IEF0b21Db3VudCggYXRvbS5lbGVtZW50LCAwLCB0ZXJtLnVzZXJDb2VmZmljaWVudFByb3BlcnR5LnZhbHVlICkgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9ICk7XHJcbiAgcmV0dXJuIGF0b21Db3VudHM7XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnQXRvbUNvdW50JywgQXRvbUNvdW50ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLDBCQUEwQixNQUFNLHFDQUFxQztBQU01RSxlQUFlLE1BQU1DLFNBQVMsQ0FBQztFQUVLOztFQUkzQkMsV0FBV0EsQ0FBRUMsT0FBZ0IsRUFBRUMsY0FBc0IsRUFBRUMsYUFBcUIsRUFBRztJQUNwRixJQUFJLENBQUNGLE9BQU8sR0FBR0EsT0FBTztJQUN0QixJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLGFBQWEsR0FBR0EsYUFBYTtFQUNwQzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxPQUFjQyxVQUFVQSxDQUFFQyxRQUFrQixFQUFnQjtJQUMxRCxNQUFNQyxVQUF1QixHQUFHLEVBQUU7SUFDbENDLGNBQWMsQ0FBRUQsVUFBVSxFQUFFRCxRQUFRLENBQUNHLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWtCLENBQUM7SUFDeEVELGNBQWMsQ0FBRUQsVUFBVSxFQUFFRCxRQUFRLENBQUNJLFFBQVEsRUFBRSxLQUFLLENBQUMsaUJBQWtCLENBQUM7SUFDeEUsT0FBT0gsVUFBVTtFQUNuQjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxjQUFjQSxDQUFFRCxVQUF1QixFQUFFSSxLQUFxQixFQUFFQyxXQUFvQixFQUFnQjtFQUMzR0QsS0FBSyxDQUFDRSxPQUFPLENBQUVDLElBQUksSUFBSTtJQUNyQkEsSUFBSSxDQUFDQyxRQUFRLENBQUNDLEtBQUssQ0FBQ0gsT0FBTyxDQUFJSSxJQUFVLElBQU07TUFFN0MsSUFBSUMsS0FBSyxHQUFHLEtBQUs7TUFDakIsS0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdaLFVBQVUsQ0FBQ2EsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztRQUM1QyxNQUFNRSxTQUFTLEdBQUdkLFVBQVUsQ0FBRVksQ0FBQyxDQUFFO1FBQ2pDO1FBQ0EsSUFBS0UsU0FBUyxDQUFDbkIsT0FBTyxLQUFLZSxJQUFJLENBQUNmLE9BQU8sRUFBRztVQUN4QyxJQUFLVSxXQUFXLEVBQUc7WUFDakJTLFNBQVMsQ0FBQ2xCLGNBQWMsSUFBSVcsSUFBSSxDQUFDUSx1QkFBdUIsQ0FBQ0MsS0FBSztVQUNoRSxDQUFDLE1BQ0k7WUFDSEYsU0FBUyxDQUFDakIsYUFBYSxJQUFJVSxJQUFJLENBQUNRLHVCQUF1QixDQUFDQyxLQUFLO1VBQy9EO1VBQ0FMLEtBQUssR0FBRyxJQUFJO1VBQ1o7UUFDRjtNQUNGOztNQUVBO01BQ0EsSUFBSyxDQUFDQSxLQUFLLEVBQUc7UUFDWixJQUFLTixXQUFXLEVBQUc7VUFDakJMLFVBQVUsQ0FBQ2lCLElBQUksQ0FBRSxJQUFJeEIsU0FBUyxDQUFFaUIsSUFBSSxDQUFDZixPQUFPLEVBQUVZLElBQUksQ0FBQ1EsdUJBQXVCLENBQUNDLEtBQUssRUFBRSxDQUFFLENBQUUsQ0FBQztRQUN6RixDQUFDLE1BQ0k7VUFDSGhCLFVBQVUsQ0FBQ2lCLElBQUksQ0FBRSxJQUFJeEIsU0FBUyxDQUFFaUIsSUFBSSxDQUFDZixPQUFPLEVBQUUsQ0FBQyxFQUFFWSxJQUFJLENBQUNRLHVCQUF1QixDQUFDQyxLQUFNLENBQUUsQ0FBQztRQUN6RjtNQUNGO0lBQ0YsQ0FBRSxDQUFDO0VBQ0wsQ0FBRSxDQUFDO0VBQ0gsT0FBT2hCLFVBQVU7QUFDbkI7QUFFQVIsMEJBQTBCLENBQUMwQixRQUFRLENBQUUsV0FBVyxFQUFFekIsU0FBVSxDQUFDIn0=