// Copyright 2014-2023, University of Colorado Boulder

/**
 * Fulcrum on which the scale balances. This is a triangle that is labeled with the atom symbol.
 *
 * @author Vasily Shakhov (mlearner.com)
 */

import { Shape } from '../../../../kite/js/imports.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { LinearGradient, Node, Path, Text } from '../../../../scenery/js/imports.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
const FONT = new PhetFont(22);
export default class FulcrumNode extends Node {
  constructor(element, fulcrumSize) {
    // triangle, start at tip and move clockwise
    const triangleShape = new Shape().moveTo(0, 0).lineTo(fulcrumSize.width / 2, fulcrumSize.height).lineTo(-fulcrumSize.width / 2, fulcrumSize.height).close();
    const triangleNode = new Path(triangleShape, {
      fill: new LinearGradient(0, 0, 0, fulcrumSize.height).addColorStop(0, 'white').addColorStop(1, 'rgb(192, 192, 192)'),
      lineWidth: 1,
      stroke: 'black'
    });

    // atom symbol, centered in triangle
    const symbolNode = new Text(element.symbol, {
      font: FONT,
      centerX: triangleNode.centerX,
      centerY: triangleNode.centerY + 8
    });
    super({
      children: [triangleNode, symbolNode]
    });
  }
}
balancingChemicalEquations.register('FulcrumNode', FulcrumNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIlBoZXRGb250IiwiTGluZWFyR3JhZGllbnQiLCJOb2RlIiwiUGF0aCIsIlRleHQiLCJiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyIsIkZPTlQiLCJGdWxjcnVtTm9kZSIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImZ1bGNydW1TaXplIiwidHJpYW5nbGVTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsIndpZHRoIiwiaGVpZ2h0IiwiY2xvc2UiLCJ0cmlhbmdsZU5vZGUiLCJmaWxsIiwiYWRkQ29sb3JTdG9wIiwibGluZVdpZHRoIiwic3Ryb2tlIiwic3ltYm9sTm9kZSIsInN5bWJvbCIsImZvbnQiLCJjZW50ZXJYIiwiY2VudGVyWSIsImNoaWxkcmVuIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGdWxjcnVtTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBGdWxjcnVtIG9uIHdoaWNoIHRoZSBzY2FsZSBiYWxhbmNlcy4gVGhpcyBpcyBhIHRyaWFuZ2xlIHRoYXQgaXMgbGFiZWxlZCB3aXRoIHRoZSBhdG9tIHN5bWJvbC5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAobWxlYXJuZXIuY29tKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbGVtZW50IGZyb20gJy4uLy4uLy4uLy4uL25pdHJvZ2x5Y2VyaW4vanMvRWxlbWVudC5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQsIE5vZGUsIFBhdGgsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMuanMnO1xyXG5cclxuY29uc3QgRk9OVCA9IG5ldyBQaGV0Rm9udCggMjIgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGNydW1Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZWxlbWVudDogRWxlbWVudCwgZnVsY3J1bVNpemU6IERpbWVuc2lvbjIgKSB7XHJcblxyXG4gICAgLy8gdHJpYW5nbGUsIHN0YXJ0IGF0IHRpcCBhbmQgbW92ZSBjbG9ja3dpc2VcclxuICAgIGNvbnN0IHRyaWFuZ2xlU2hhcGUgPSBuZXcgU2hhcGUoKVxyXG4gICAgICAubW92ZVRvKCAwLCAwIClcclxuICAgICAgLmxpbmVUbyggZnVsY3J1bVNpemUud2lkdGggLyAyLCBmdWxjcnVtU2l6ZS5oZWlnaHQgKVxyXG4gICAgICAubGluZVRvKCAtZnVsY3J1bVNpemUud2lkdGggLyAyLCBmdWxjcnVtU2l6ZS5oZWlnaHQgKVxyXG4gICAgICAuY2xvc2UoKTtcclxuICAgIGNvbnN0IHRyaWFuZ2xlTm9kZSA9IG5ldyBQYXRoKCB0cmlhbmdsZVNoYXBlLCB7XHJcbiAgICAgIGZpbGw6IG5ldyBMaW5lYXJHcmFkaWVudCggMCwgMCwgMCwgZnVsY3J1bVNpemUuaGVpZ2h0ICkuYWRkQ29sb3JTdG9wKCAwLCAnd2hpdGUnICkuYWRkQ29sb3JTdG9wKCAxLCAncmdiKDE5MiwgMTkyLCAxOTIpJyApLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIGF0b20gc3ltYm9sLCBjZW50ZXJlZCBpbiB0cmlhbmdsZVxyXG4gICAgY29uc3Qgc3ltYm9sTm9kZSA9IG5ldyBUZXh0KCBlbGVtZW50LnN5bWJvbCwge1xyXG4gICAgICBmb250OiBGT05ULFxyXG4gICAgICBjZW50ZXJYOiB0cmlhbmdsZU5vZGUuY2VudGVyWCxcclxuICAgICAgY2VudGVyWTogdHJpYW5nbGVOb2RlLmNlbnRlclkgKyA4XHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFsgdHJpYW5nbGVOb2RlLCBzeW1ib2xOb2RlIF1cclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnRnVsY3J1bU5vZGUnLCBGdWxjcnVtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxTQUFTQSxLQUFLLFFBQVEsZ0NBQWdDO0FBQ3RELE9BQU9DLFFBQVEsTUFBTSx5Q0FBeUM7QUFDOUQsU0FBU0MsY0FBYyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUNwRixPQUFPQywwQkFBMEIsTUFBTSxxQ0FBcUM7QUFFNUUsTUFBTUMsSUFBSSxHQUFHLElBQUlOLFFBQVEsQ0FBRSxFQUFHLENBQUM7QUFFL0IsZUFBZSxNQUFNTyxXQUFXLFNBQVNMLElBQUksQ0FBQztFQUVyQ00sV0FBV0EsQ0FBRUMsT0FBZ0IsRUFBRUMsV0FBdUIsRUFBRztJQUU5RDtJQUNBLE1BQU1DLGFBQWEsR0FBRyxJQUFJWixLQUFLLENBQUMsQ0FBQyxDQUM5QmEsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FDZEMsTUFBTSxDQUFFSCxXQUFXLENBQUNJLEtBQUssR0FBRyxDQUFDLEVBQUVKLFdBQVcsQ0FBQ0ssTUFBTyxDQUFDLENBQ25ERixNQUFNLENBQUUsQ0FBQ0gsV0FBVyxDQUFDSSxLQUFLLEdBQUcsQ0FBQyxFQUFFSixXQUFXLENBQUNLLE1BQU8sQ0FBQyxDQUNwREMsS0FBSyxDQUFDLENBQUM7SUFDVixNQUFNQyxZQUFZLEdBQUcsSUFBSWQsSUFBSSxDQUFFUSxhQUFhLEVBQUU7TUFDNUNPLElBQUksRUFBRSxJQUFJakIsY0FBYyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFUyxXQUFXLENBQUNLLE1BQU8sQ0FBQyxDQUFDSSxZQUFZLENBQUUsQ0FBQyxFQUFFLE9BQVEsQ0FBQyxDQUFDQSxZQUFZLENBQUUsQ0FBQyxFQUFFLG9CQUFxQixDQUFDO01BQzFIQyxTQUFTLEVBQUUsQ0FBQztNQUNaQyxNQUFNLEVBQUU7SUFDVixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSWxCLElBQUksQ0FBRUssT0FBTyxDQUFDYyxNQUFNLEVBQUU7TUFDM0NDLElBQUksRUFBRWxCLElBQUk7TUFDVm1CLE9BQU8sRUFBRVIsWUFBWSxDQUFDUSxPQUFPO01BQzdCQyxPQUFPLEVBQUVULFlBQVksQ0FBQ1MsT0FBTyxHQUFHO0lBQ2xDLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRTtNQUNMQyxRQUFRLEVBQUUsQ0FBRVYsWUFBWSxFQUFFSyxVQUFVO0lBQ3RDLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQWpCLDBCQUEwQixDQUFDdUIsUUFBUSxDQUFFLGFBQWEsRUFBRXJCLFdBQVksQ0FBQyJ9