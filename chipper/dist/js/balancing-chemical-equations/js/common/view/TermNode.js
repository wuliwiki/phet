// Copyright 2014-2023, University of Colorado Boulder

/**
 * A term in the equation, includes the coefficient and symbol.
 * The coefficient may or may not be editable.
 *
 * @author Vasily Shakhov (mlearner.com)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Property from '../../../../axon/js/Property.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, RichText } from '../../../../scenery/js/imports.js';
import NumberPicker from '../../../../sun/js/NumberPicker.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class TermNode extends Node {
  constructor(coefficientRange, term, providedOptions) {
    const options = optionize()({
      // SelfOptions
      fontSize: 32,
      xSpacing: 4
    }, providedOptions);

    // coefficient picker
    const coefficientPicker = new NumberPicker(term.userCoefficientProperty, new Property(coefficientRange), {
      color: 'rgb(50,50,50)',
      pressedColor: 'black',
      xMargin: 8,
      yMargin: 0,
      touchAreaXDilation: 30,
      font: new PhetFont(options.fontSize),
      timerDelay: 400,
      // ms until the picker starts to fire continuously
      timerInterval: 200 // ms between value change while firing continuously
    });

    // symbol, non-subscript part of the symbol is vertically centered on the picker
    const richTextOptions = {
      font: new PhetFont(options.fontSize)
    };
    const symbolNode = new RichText(term.molecule.symbol, richTextOptions);
    symbolNode.left = coefficientPicker.right + options.xSpacing;
    symbolNode.centerY = coefficientPicker.centerY + (symbolNode.height - new RichText('H', richTextOptions).height) / 2;
    options.children = [coefficientPicker, symbolNode];
    super(options);
    this.coefficientPicker = coefficientPicker;
  }
  dispose() {
    this.coefficientPicker.dispose();
    super.dispose();
  }

  /**
   * Sets whether the term's coefficient is editable, by showing/hiding the arrows on the NumberPicker.
   */
  setCoefficientEditable(editable) {
    this.pickable = editable;
    this.coefficientPicker.setArrowsVisible(editable);
  }
}
balancingChemicalEquations.register('TermNode', TermNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlBoZXRGb250IiwiTm9kZSIsIlJpY2hUZXh0IiwiTnVtYmVyUGlja2VyIiwiYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMiLCJvcHRpb25pemUiLCJUZXJtTm9kZSIsImNvbnN0cnVjdG9yIiwiY29lZmZpY2llbnRSYW5nZSIsInRlcm0iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZm9udFNpemUiLCJ4U3BhY2luZyIsImNvZWZmaWNpZW50UGlja2VyIiwidXNlckNvZWZmaWNpZW50UHJvcGVydHkiLCJjb2xvciIsInByZXNzZWRDb2xvciIsInhNYXJnaW4iLCJ5TWFyZ2luIiwidG91Y2hBcmVhWERpbGF0aW9uIiwiZm9udCIsInRpbWVyRGVsYXkiLCJ0aW1lckludGVydmFsIiwicmljaFRleHRPcHRpb25zIiwic3ltYm9sTm9kZSIsIm1vbGVjdWxlIiwic3ltYm9sIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyWSIsImhlaWdodCIsImNoaWxkcmVuIiwiZGlzcG9zZSIsInNldENvZWZmaWNpZW50RWRpdGFibGUiLCJlZGl0YWJsZSIsInBpY2thYmxlIiwic2V0QXJyb3dzVmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGVybU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB0ZXJtIGluIHRoZSBlcXVhdGlvbiwgaW5jbHVkZXMgdGhlIGNvZWZmaWNpZW50IGFuZCBzeW1ib2wuXHJcbiAqIFRoZSBjb2VmZmljaWVudCBtYXkgb3IgbWF5IG5vdCBiZSBlZGl0YWJsZS5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAobWxlYXJuZXIuY29tKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgTnVtYmVyUGlja2VyIGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9OdW1iZXJQaWNrZXIuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMuanMnO1xyXG5pbXBvcnQgRXF1YXRpb25UZXJtIGZyb20gJy4uL21vZGVsL0VxdWF0aW9uVGVybS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIGZvbnRTaXplPzogbnVtYmVyO1xyXG4gIHhTcGFjaW5nPzogbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBUZXJtTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlcm1Ob2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgY29lZmZpY2llbnRQaWNrZXI6IE51bWJlclBpY2tlcjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb2VmZmljaWVudFJhbmdlOiBSYW5nZSwgdGVybTogRXF1YXRpb25UZXJtLCBwcm92aWRlZE9wdGlvbnM/OiBUZXJtTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxUZXJtTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgZm9udFNpemU6IDMyLFxyXG4gICAgICB4U3BhY2luZzogNFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gY29lZmZpY2llbnQgcGlja2VyXHJcbiAgICBjb25zdCBjb2VmZmljaWVudFBpY2tlciA9IG5ldyBOdW1iZXJQaWNrZXIoIHRlcm0udXNlckNvZWZmaWNpZW50UHJvcGVydHksIG5ldyBQcm9wZXJ0eSggY29lZmZpY2llbnRSYW5nZSApLCB7XHJcbiAgICAgIGNvbG9yOiAncmdiKDUwLDUwLDUwKScsXHJcbiAgICAgIHByZXNzZWRDb2xvcjogJ2JsYWNrJyxcclxuICAgICAgeE1hcmdpbjogOCxcclxuICAgICAgeU1hcmdpbjogMCxcclxuICAgICAgdG91Y2hBcmVhWERpbGF0aW9uOiAzMCxcclxuICAgICAgZm9udDogbmV3IFBoZXRGb250KCBvcHRpb25zLmZvbnRTaXplICksXHJcbiAgICAgIHRpbWVyRGVsYXk6IDQwMCwgLy8gbXMgdW50aWwgdGhlIHBpY2tlciBzdGFydHMgdG8gZmlyZSBjb250aW51b3VzbHlcclxuICAgICAgdGltZXJJbnRlcnZhbDogMjAwIC8vIG1zIGJldHdlZW4gdmFsdWUgY2hhbmdlIHdoaWxlIGZpcmluZyBjb250aW51b3VzbHlcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzeW1ib2wsIG5vbi1zdWJzY3JpcHQgcGFydCBvZiB0aGUgc3ltYm9sIGlzIHZlcnRpY2FsbHkgY2VudGVyZWQgb24gdGhlIHBpY2tlclxyXG4gICAgY29uc3QgcmljaFRleHRPcHRpb25zID0geyBmb250OiBuZXcgUGhldEZvbnQoIG9wdGlvbnMuZm9udFNpemUgKSB9O1xyXG4gICAgY29uc3Qgc3ltYm9sTm9kZSA9IG5ldyBSaWNoVGV4dCggdGVybS5tb2xlY3VsZS5zeW1ib2wsIHJpY2hUZXh0T3B0aW9ucyApO1xyXG4gICAgc3ltYm9sTm9kZS5sZWZ0ID0gY29lZmZpY2llbnRQaWNrZXIucmlnaHQgKyBvcHRpb25zLnhTcGFjaW5nO1xyXG4gICAgc3ltYm9sTm9kZS5jZW50ZXJZID0gY29lZmZpY2llbnRQaWNrZXIuY2VudGVyWSArICggc3ltYm9sTm9kZS5oZWlnaHQgLSBuZXcgUmljaFRleHQoICdIJywgcmljaFRleHRPcHRpb25zICkuaGVpZ2h0ICkgLyAyO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGNvZWZmaWNpZW50UGlja2VyLCBzeW1ib2xOb2RlIF07XHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuY29lZmZpY2llbnRQaWNrZXIgPSBjb2VmZmljaWVudFBpY2tlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb2VmZmljaWVudFBpY2tlci5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHdoZXRoZXIgdGhlIHRlcm0ncyBjb2VmZmljaWVudCBpcyBlZGl0YWJsZSwgYnkgc2hvd2luZy9oaWRpbmcgdGhlIGFycm93cyBvbiB0aGUgTnVtYmVyUGlja2VyLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDb2VmZmljaWVudEVkaXRhYmxlKCBlZGl0YWJsZTogYm9vbGVhbiApOiB2b2lkIHtcclxuICAgIHRoaXMucGlja2FibGUgPSBlZGl0YWJsZTtcclxuICAgIHRoaXMuY29lZmZpY2llbnRQaWNrZXIuc2V0QXJyb3dzVmlzaWJsZSggZWRpdGFibGUgKTtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnVGVybU5vZGUnLCBUZXJtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FB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