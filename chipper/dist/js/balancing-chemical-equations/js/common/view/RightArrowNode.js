// Copyright 2014-2023, University of Colorado Boulder

/**
 * An arrow that points left to right, from reactants to products.
 * Highlights when the equation is balanced.
 *
 * @author Vasily Shakhov (mlearner.com)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import BCEConstants from '../BCEConstants.js';
// constants
const ARROW_LENGTH = 70;
export default class RightArrowNode extends ArrowNode {
  constructor(equationProperty, providedOptions) {
    const options = optionize()({
      // ArrowNodeOptions
      tailWidth: 15,
      headWidth: 35,
      headHeight: 30
    }, providedOptions);
    super(0, 0, ARROW_LENGTH, 0, options);
    this.equationProperty = equationProperty;
    this._highlightEnabled = true;

    // Wire observer to current equation.
    const balancedObserver = this.updateHighlight.bind(this);
    equationProperty.link((newEquation, oldEquation) => {
      if (oldEquation) {
        oldEquation.balancedProperty.unlink(balancedObserver);
      }
      newEquation.balancedProperty.link(balancedObserver);
    });
  }

  // No dispose needed, instances of this type persist for lifetime of the sim.

  setHighlightEnabled(enabled) {
    this._highlightEnabled = enabled;
    this.updateHighlight();
  }

  // Highlights the arrow if the equation is balanced.
  updateHighlight() {
    this.fill = this.equationProperty.value.balancedProperty.value && this._highlightEnabled ? BCEConstants.BALANCED_HIGHLIGHT_COLOR : BCEConstants.UNBALANCED_COLOR;
  }
}
balancingChemicalEquations.register('RightArrowNode', RightArrowNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJBcnJvd05vZGUiLCJiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyIsIkJDRUNvbnN0YW50cyIsIkFSUk9XX0xFTkdUSCIsIlJpZ2h0QXJyb3dOb2RlIiwiY29uc3RydWN0b3IiLCJlcXVhdGlvblByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhaWxXaWR0aCIsImhlYWRXaWR0aCIsImhlYWRIZWlnaHQiLCJfaGlnaGxpZ2h0RW5hYmxlZCIsImJhbGFuY2VkT2JzZXJ2ZXIiLCJ1cGRhdGVIaWdobGlnaHQiLCJiaW5kIiwibGluayIsIm5ld0VxdWF0aW9uIiwib2xkRXF1YXRpb24iLCJiYWxhbmNlZFByb3BlcnR5IiwidW5saW5rIiwic2V0SGlnaGxpZ2h0RW5hYmxlZCIsImVuYWJsZWQiLCJmaWxsIiwidmFsdWUiLCJCQUxBTkNFRF9ISUdITElHSFRfQ09MT1IiLCJVTkJBTEFOQ0VEX0NPTE9SIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSaWdodEFycm93Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBbiBhcnJvdyB0aGF0IHBvaW50cyBsZWZ0IHRvIHJpZ2h0LCBmcm9tIHJlYWN0YW50cyB0byBwcm9kdWN0cy5cclxuICogSGlnaGxpZ2h0cyB3aGVuIHRoZSBlcXVhdGlvbiBpcyBiYWxhbmNlZC5cclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAobWxlYXJuZXIuY29tKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBBcnJvd05vZGUsIHsgQXJyb3dOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgeyBOb2RlVHJhbnNsYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zIGZyb20gJy4uLy4uL2JhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLmpzJztcclxuaW1wb3J0IEJDRUNvbnN0YW50cyBmcm9tICcuLi9CQ0VDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgRXF1YXRpb24gZnJvbSAnLi4vbW9kZWwvRXF1YXRpb24uanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEFSUk9XX0xFTkdUSCA9IDcwO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIFJpZ2h0QXJyb3dOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJpZ2h0QXJyb3dOb2RlIGV4dGVuZHMgQXJyb3dOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBlcXVhdGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxFcXVhdGlvbj47XHJcbiAgcHJpdmF0ZSBfaGlnaGxpZ2h0RW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBlcXVhdGlvblByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxFcXVhdGlvbj4sIHByb3ZpZGVkT3B0aW9ucz86IFJpZ2h0QXJyb3dOb2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJpZ2h0QXJyb3dOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIEFycm93Tm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEFycm93Tm9kZU9wdGlvbnNcclxuICAgICAgdGFpbFdpZHRoOiAxNSxcclxuICAgICAgaGVhZFdpZHRoOiAzNSxcclxuICAgICAgaGVhZEhlaWdodDogMzBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCBBUlJPV19MRU5HVEgsIDAsIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmVxdWF0aW9uUHJvcGVydHkgPSBlcXVhdGlvblByb3BlcnR5O1xyXG4gICAgdGhpcy5faGlnaGxpZ2h0RW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgLy8gV2lyZSBvYnNlcnZlciB0byBjdXJyZW50IGVxdWF0aW9uLlxyXG4gICAgY29uc3QgYmFsYW5jZWRPYnNlcnZlciA9IHRoaXMudXBkYXRlSGlnaGxpZ2h0LmJpbmQoIHRoaXMgKTtcclxuICAgIGVxdWF0aW9uUHJvcGVydHkubGluayggKCBuZXdFcXVhdGlvbiwgb2xkRXF1YXRpb24gKSA9PiB7XHJcbiAgICAgIGlmICggb2xkRXF1YXRpb24gKSB7IG9sZEVxdWF0aW9uLmJhbGFuY2VkUHJvcGVydHkudW5saW5rKCBiYWxhbmNlZE9ic2VydmVyICk7IH1cclxuICAgICAgbmV3RXF1YXRpb24uYmFsYW5jZWRQcm9wZXJ0eS5saW5rKCBiYWxhbmNlZE9ic2VydmVyICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBObyBkaXNwb3NlIG5lZWRlZCwgaW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBwZXJzaXN0IGZvciBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG5cclxuICBwdWJsaWMgc2V0SGlnaGxpZ2h0RW5hYmxlZCggZW5hYmxlZDogYm9vbGVhbiApOiB2b2lkIHtcclxuICAgIHRoaXMuX2hpZ2hsaWdodEVuYWJsZWQgPSBlbmFibGVkO1xyXG4gICAgdGhpcy51cGRhdGVIaWdobGlnaHQoKTtcclxuICB9XHJcblxyXG4gIC8vIEhpZ2hsaWdodHMgdGhlIGFycm93IGlmIHRoZSBlcXVhdGlvbiBpcyBiYWxhbmNlZC5cclxuICBwcml2YXRlIHVwZGF0ZUhpZ2hsaWdodCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZmlsbCA9ICggdGhpcy5lcXVhdGlvblByb3BlcnR5LnZhbHVlLmJhbGFuY2VkUHJvcGVydHkudmFsdWUgJiYgdGhpcy5faGlnaGxpZ2h0RW5hYmxlZCApXHJcbiAgICAgICAgICAgICAgICA/IEJDRUNvbnN0YW50cy5CQUxBTkNFRF9ISUdITElHSFRfQ09MT1IgOiBCQ0VDb25zdGFudHMuVU5CQUxBTkNFRF9DT0xPUjtcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnUmlnaHRBcnJvd05vZGUnLCBSaWdodEFycm93Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsU0FBUyxNQUE0Qix1Q0FBdUM7QUFDbkYsT0FBT0MsU0FBUyxNQUE0QiwwQ0FBMEM7QUFFdEYsT0FBT0MsMEJBQTBCLE1BQU0scUNBQXFDO0FBQzVFLE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFHN0M7QUFDQSxNQUFNQyxZQUFZLEdBQUcsRUFBRTtBQU12QixlQUFlLE1BQU1DLGNBQWMsU0FBU0osU0FBUyxDQUFDO0VBSzdDSyxXQUFXQSxDQUFFQyxnQkFBNkMsRUFBRUMsZUFBdUMsRUFBRztJQUUzRyxNQUFNQyxPQUFPLEdBQUdULFNBQVMsQ0FBdUQsQ0FBQyxDQUFFO01BRWpGO01BQ0FVLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFVBQVUsRUFBRTtJQUNkLENBQUMsRUFBRUosZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUosWUFBWSxFQUFFLENBQUMsRUFBRUssT0FBUSxDQUFDO0lBRXZDLElBQUksQ0FBQ0YsZ0JBQWdCLEdBQUdBLGdCQUFnQjtJQUN4QyxJQUFJLENBQUNNLGlCQUFpQixHQUFHLElBQUk7O0lBRTdCO0lBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQyxlQUFlLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUM7SUFDMURULGdCQUFnQixDQUFDVSxJQUFJLENBQUUsQ0FBRUMsV0FBVyxFQUFFQyxXQUFXLEtBQU07TUFDckQsSUFBS0EsV0FBVyxFQUFHO1FBQUVBLFdBQVcsQ0FBQ0MsZ0JBQWdCLENBQUNDLE1BQU0sQ0FBRVAsZ0JBQWlCLENBQUM7TUFBRTtNQUM5RUksV0FBVyxDQUFDRSxnQkFBZ0IsQ0FBQ0gsSUFBSSxDQUFFSCxnQkFBaUIsQ0FBQztJQUN2RCxDQUFFLENBQUM7RUFDTDs7RUFFQTs7RUFFT1EsbUJBQW1CQSxDQUFFQyxPQUFnQixFQUFTO0lBQ25ELElBQUksQ0FBQ1YsaUJBQWlCLEdBQUdVLE9BQU87SUFDaEMsSUFBSSxDQUFDUixlQUFlLENBQUMsQ0FBQztFQUN4Qjs7RUFFQTtFQUNRQSxlQUFlQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDUyxJQUFJLEdBQUssSUFBSSxDQUFDakIsZ0JBQWdCLENBQUNrQixLQUFLLENBQUNMLGdCQUFnQixDQUFDSyxLQUFLLElBQUksSUFBSSxDQUFDWixpQkFBaUIsR0FDNUVWLFlBQVksQ0FBQ3VCLHdCQUF3QixHQUFHdkIsWUFBWSxDQUFDd0IsZ0JBQWdCO0VBQ3JGO0FBQ0Y7QUFFQXpCLDBCQUEwQixDQUFDMEIsUUFBUSxDQUFFLGdCQUFnQixFQUFFdkIsY0FBZSxDQUFDIn0=