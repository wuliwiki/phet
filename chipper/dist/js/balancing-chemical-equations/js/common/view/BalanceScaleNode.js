// Copyright 2014-2023, University of Colorado Boulder

/**
 * A balance scale, depicts the relationship between the atom count
 * on the left and right side of an equation.
 *
 * The 2 main parts of a balance scale are the fulcrum and the beam.
 * Origin is at the tip of the fulcrum.
 *
 * @author Vasily Shakhov (mlearner.com)
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import AtomNode from '../../../../nitroglycerin/js/nodes/AtomNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import BCEConstants from '../BCEConstants.js';
import BeamNode from './BeamNode.js';
import FulcrumNode from './FulcrumNode.js';

// constants
const FULCRUM_SIZE = new Dimension2(60, 45);
const BEAM_LENGTH = 205;
const BEAM_THICKNESS = 6;
const NUMBER_OF_TILT_ANGLES = 6;
const COUNT_Y_SPACING = 3;
const ATOMS_IN_PILE_BASE = 5; // number of atoms along the base of each pile
const TEXT_OPTIONS = {
  font: new PhetFont(18),
  fill: 'black'
};
export default class BalanceScaleNode extends Node {
  /**
   * @param element the atom that we're displaying on the scale
   * @param leftNumberOfAtomsProperty number of atoms on left (reactants) side of the beam
   * @param rightNumberOfAtomsProperty number of atoms on right (products) side of the beam
   * @param highlightedProperty
   * @param [providedOptions]
   */
  constructor(element, leftNumberOfAtomsProperty, rightNumberOfAtomsProperty, highlightedProperty, providedOptions) {
    const options = optionize()({}, providedOptions);
    super();
    this.element = element;
    this.leftNumberOfAtomsProperty = leftNumberOfAtomsProperty;
    this.rightNumberOfAtomsProperty = rightNumberOfAtomsProperty;

    // fulcrum
    const fulcrumNode = new FulcrumNode(element, FULCRUM_SIZE);
    this.beamNode = new BeamNode(BEAM_LENGTH, BEAM_THICKNESS, {
      bottom: 0,
      transformBounds: true /* see issue #77 */
    });

    // left pile & count
    this.leftPileNode = new Node();
    this.leftCountText = new Text(leftNumberOfAtomsProperty.value, TEXT_OPTIONS);

    // right pile & count
    this.rightPileNode = new Node();
    this.rightCountText = new Text(rightNumberOfAtomsProperty.value, TEXT_OPTIONS);

    // parent for both piles, to simplify rotation
    this.pilesParent = new Node({
      children: [this.leftPileNode, this.leftCountText, this.rightPileNode, this.rightCountText],
      transformBounds: true /* see issue #77 */
    });

    options.children = [fulcrumNode, this.beamNode, this.pilesParent];
    this.mutate(options);

    // highlight the beam
    const highlightObserver = highlighted => this.beamNode.setHighlighted(highlighted);
    highlightedProperty.link(highlightObserver);

    // update piles
    const updateNodeBind = this.updateNode.bind(this);
    leftNumberOfAtomsProperty.lazyLink(updateNodeBind);
    rightNumberOfAtomsProperty.lazyLink(updateNodeBind);
    this.updateNode();

    // unlink from Properties
    this.balanceScaleNodeDispose = () => {
      highlightedProperty.unlink(highlightObserver);
      leftNumberOfAtomsProperty.unlink(updateNodeBind);
      rightNumberOfAtomsProperty.unlink(updateNodeBind);
    };
  }
  dispose() {
    this.balanceScaleNodeDispose();
    super.dispose();
  }

  /**
   * Places piles of atoms on the ends of the beam, with a count of the number of
   * atoms above each pile.  Then rotates the beam and stuff on it to indicate the
   * relative balance between the left and right piles.
   */
  updateNode() {
    // update piles on beam in neutral orientation
    this.beamNode.setRotation(0);
    this.pilesParent.setRotation(0);
    const leftNumberOfAtoms = this.leftNumberOfAtomsProperty.value;
    const rightNumberOfAtoms = this.rightNumberOfAtomsProperty.value;

    // update piles
    updatePile(this.element, leftNumberOfAtoms, this.leftPileNode, this.leftCountText, this.beamNode.left + 0.25 * this.beamNode.width, this.beamNode.top);
    updatePile(this.element, rightNumberOfAtoms, this.rightPileNode, this.rightCountText, this.beamNode.right - 0.25 * this.beamNode.width, this.beamNode.top);

    // rotate beam and piles on fulcrum
    const maxAngle = Math.PI / 2 - Math.acos(FULCRUM_SIZE.height / (BEAM_LENGTH / 2));
    const difference = rightNumberOfAtoms - leftNumberOfAtoms;
    let angle = 0;
    if (Math.abs(difference) >= NUMBER_OF_TILT_ANGLES) {
      // max tilt
      const sign = Math.abs(difference) / difference;
      angle = sign * maxAngle;
    } else {
      // partial tilt
      angle = difference * (maxAngle / NUMBER_OF_TILT_ANGLES);
    }
    this.beamNode.setRotation(angle);
    this.pilesParent.setRotation(angle);
  }
}

/**
 * Updates a triangular pile of atoms.
 * Atoms are populated one row at a time, starting from the base of the triangle and working up.
 * To improve performance:
 * - Atoms are added to the pile as needed.
 * - Atoms are never removed from the pile; they stay in the pile for the lifetime of this node.
 * - The visibility of atoms is adjusted to show the correct number of atoms.
 *
 * @param element
 * @param numberOfAtoms - number of atoms that will be visible in the pile
 * @param pileNode - pile that will be modified
 * @param countText - displays numberOfAtoms
 * @param pileCenterX - x-coordinate of the pile's center, relative to the beam
 * @param beamTop - y-coordinate of the beam's top
 */
function updatePile(element, numberOfAtoms, pileNode, countText, pileCenterX, beamTop) {
  const nodesInPile = pileNode.getChildrenCount(); // how many atom nodes are currently in the pile
  let pile = 0; // which pile we're working on, layered back-to-front, offset left-to-right
  let row = 0; // the row number, bottom row is zero
  let atomsInRow = 0; // number of atoms that have been added to the current row
  let x = 0;
  let y = 0;
  let atomNode;
  for (let i = 0; i < Math.max(nodesInPile, numberOfAtoms); i++) {
    if (i < nodesInPile) {
      // set visibility of an atom that's already in the pile
      atomNode = pileNode.getChildAt(i);
      atomNode.visible = i < numberOfAtoms;
    } else {
      // add an atom node
      atomNode = new AtomNode(element, BCEConstants.ATOM_NODE_OPTIONS);
      atomNode.scale(BCEConstants.MOLECULE_SCALE_FACTOR);
      pileNode.addChild(atomNode);
      atomNode.translation = new Vector2(x + atomNode.width / 2, y - atomNode.height / 2);
    }

    // determine position of next atom
    atomsInRow++;
    if (atomsInRow < ATOMS_IN_PILE_BASE - row) {
      // continue with current row
      x = atomNode.right;
    } else if (row < ATOMS_IN_PILE_BASE - 1) {
      // move to next row in current triangular pile
      row++;
      atomsInRow = 0;
      x = (pile + row) * (atomNode.width / 2);
      y = -(row * 0.85 * atomNode.height);
    } else {
      // start a new pile, offset from the previous pile
      row = 0;
      pile++;
      atomsInRow = 0;
      x = pile * (atomNode.width / 2);
      y = 0;
    }
  }

  // count display
  countText.string = numberOfAtoms;

  // layout
  if (pileNode.visibleBounds.isEmpty()) {
    // pile is empty, just deal with count
    countText.centerX = pileCenterX;
    countText.bottom = beamTop - COUNT_Y_SPACING;
  } else {
    // account for invisible atoms in the pile
    pileNode.centerX = pileCenterX + (pileNode.width - pileNode.visibleBounds.width) / 2;
    pileNode.bottom = beamTop + 1;
    countText.centerX = pileCenterX;
    countText.bottom = pileNode.visibleBounds.top - COUNT_Y_SPACING;
  }
}
balancingChemicalEquations.register('BalanceScaleNode', BalanceScaleNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVmVjdG9yMiIsIkF0b21Ob2RlIiwib3B0aW9uaXplIiwiUGhldEZvbnQiLCJOb2RlIiwiVGV4dCIsImJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zIiwiQkNFQ29uc3RhbnRzIiwiQmVhbU5vZGUiLCJGdWxjcnVtTm9kZSIsIkZVTENSVU1fU0laRSIsIkJFQU1fTEVOR1RIIiwiQkVBTV9USElDS05FU1MiLCJOVU1CRVJfT0ZfVElMVF9BTkdMRVMiLCJDT1VOVF9ZX1NQQUNJTkciLCJBVE9NU19JTl9QSUxFX0JBU0UiLCJURVhUX09QVElPTlMiLCJmb250IiwiZmlsbCIsIkJhbGFuY2VTY2FsZU5vZGUiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJsZWZ0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5IiwicmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHkiLCJoaWdobGlnaHRlZFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImZ1bGNydW1Ob2RlIiwiYmVhbU5vZGUiLCJib3R0b20iLCJ0cmFuc2Zvcm1Cb3VuZHMiLCJsZWZ0UGlsZU5vZGUiLCJsZWZ0Q291bnRUZXh0IiwidmFsdWUiLCJyaWdodFBpbGVOb2RlIiwicmlnaHRDb3VudFRleHQiLCJwaWxlc1BhcmVudCIsImNoaWxkcmVuIiwibXV0YXRlIiwiaGlnaGxpZ2h0T2JzZXJ2ZXIiLCJoaWdobGlnaHRlZCIsInNldEhpZ2hsaWdodGVkIiwibGluayIsInVwZGF0ZU5vZGVCaW5kIiwidXBkYXRlTm9kZSIsImJpbmQiLCJsYXp5TGluayIsImJhbGFuY2VTY2FsZU5vZGVEaXNwb3NlIiwidW5saW5rIiwiZGlzcG9zZSIsInNldFJvdGF0aW9uIiwibGVmdE51bWJlck9mQXRvbXMiLCJyaWdodE51bWJlck9mQXRvbXMiLCJ1cGRhdGVQaWxlIiwibGVmdCIsIndpZHRoIiwidG9wIiwicmlnaHQiLCJtYXhBbmdsZSIsIk1hdGgiLCJQSSIsImFjb3MiLCJoZWlnaHQiLCJkaWZmZXJlbmNlIiwiYW5nbGUiLCJhYnMiLCJzaWduIiwibnVtYmVyT2ZBdG9tcyIsInBpbGVOb2RlIiwiY291bnRUZXh0IiwicGlsZUNlbnRlclgiLCJiZWFtVG9wIiwibm9kZXNJblBpbGUiLCJnZXRDaGlsZHJlbkNvdW50IiwicGlsZSIsInJvdyIsImF0b21zSW5Sb3ciLCJ4IiwieSIsImF0b21Ob2RlIiwiaSIsIm1heCIsImdldENoaWxkQXQiLCJ2aXNpYmxlIiwiQVRPTV9OT0RFX09QVElPTlMiLCJzY2FsZSIsIk1PTEVDVUxFX1NDQUxFX0ZBQ1RPUiIsImFkZENoaWxkIiwidHJhbnNsYXRpb24iLCJzdHJpbmciLCJ2aXNpYmxlQm91bmRzIiwiaXNFbXB0eSIsImNlbnRlclgiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJhbGFuY2VTY2FsZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBiYWxhbmNlIHNjYWxlLCBkZXBpY3RzIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgYXRvbSBjb3VudFxyXG4gKiBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZSBvZiBhbiBlcXVhdGlvbi5cclxuICpcclxuICogVGhlIDIgbWFpbiBwYXJ0cyBvZiBhIGJhbGFuY2Ugc2NhbGUgYXJlIHRoZSBmdWxjcnVtIGFuZCB0aGUgYmVhbS5cclxuICogT3JpZ2luIGlzIGF0IHRoZSB0aXAgb2YgdGhlIGZ1bGNydW0uXHJcbiAqXHJcbiAqIEBhdXRob3IgVmFzaWx5IFNoYWtob3YgKG1sZWFybmVyLmNvbSlcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgRWxlbWVudCBmcm9tICcuLi8uLi8uLi8uLi9uaXRyb2dseWNlcmluL2pzL0VsZW1lbnQuanMnO1xyXG5pbXBvcnQgQXRvbU5vZGUgZnJvbSAnLi4vLi4vLi4vLi4vbml0cm9nbHljZXJpbi9qcy9ub2Rlcy9BdG9tTm9kZS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMgZnJvbSAnLi4vLi4vYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMuanMnO1xyXG5pbXBvcnQgQkNFQ29uc3RhbnRzIGZyb20gJy4uL0JDRUNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBCZWFtTm9kZSBmcm9tICcuL0JlYW1Ob2RlLmpzJztcclxuaW1wb3J0IEZ1bGNydW1Ob2RlIGZyb20gJy4vRnVsY3J1bU5vZGUuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEZVTENSVU1fU0laRSA9IG5ldyBEaW1lbnNpb24yKCA2MCwgNDUgKTtcclxuY29uc3QgQkVBTV9MRU5HVEggPSAyMDU7XHJcbmNvbnN0IEJFQU1fVEhJQ0tORVNTID0gNjtcclxuY29uc3QgTlVNQkVSX09GX1RJTFRfQU5HTEVTID0gNjtcclxuY29uc3QgQ09VTlRfWV9TUEFDSU5HID0gMztcclxuY29uc3QgQVRPTVNfSU5fUElMRV9CQVNFID0gNTsgLy8gbnVtYmVyIG9mIGF0b21zIGFsb25nIHRoZSBiYXNlIG9mIGVhY2ggcGlsZVxyXG5jb25zdCBURVhUX09QVElPTlMgPSB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMTggKSwgZmlsbDogJ2JsYWNrJyB9O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEJhbGFuY2VTY2FsZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFsYW5jZVNjYWxlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsZWZ0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj47XHJcbiAgcHJpdmF0ZSByZWFkb25seSBiZWFtTm9kZTogQmVhbU5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsZWZ0UGlsZU5vZGU6IE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSByaWdodFBpbGVOb2RlOiBOb2RlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGVmdENvdW50VGV4dDogVGV4dDtcclxuICBwcml2YXRlIHJlYWRvbmx5IHJpZ2h0Q291bnRUZXh0OiBUZXh0O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcGlsZXNQYXJlbnQ6IE5vZGU7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYmFsYW5jZVNjYWxlTm9kZURpc3Bvc2U6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBlbGVtZW50IHRoZSBhdG9tIHRoYXQgd2UncmUgZGlzcGxheWluZyBvbiB0aGUgc2NhbGVcclxuICAgKiBAcGFyYW0gbGVmdE51bWJlck9mQXRvbXNQcm9wZXJ0eSBudW1iZXIgb2YgYXRvbXMgb24gbGVmdCAocmVhY3RhbnRzKSBzaWRlIG9mIHRoZSBiZWFtXHJcbiAgICogQHBhcmFtIHJpZ2h0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5IG51bWJlciBvZiBhdG9tcyBvbiByaWdodCAocHJvZHVjdHMpIHNpZGUgb2YgdGhlIGJlYW1cclxuICAgKiBAcGFyYW0gaGlnaGxpZ2h0ZWRQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZWxlbWVudDogRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgIGxlZnROdW1iZXJPZkF0b21zUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICByaWdodE51bWJlck9mQXRvbXNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyPixcclxuICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogQmFsYW5jZVNjYWxlTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCYWxhbmNlU2NhbGVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7fSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5sZWZ0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5ID0gbGVmdE51bWJlck9mQXRvbXNQcm9wZXJ0eTtcclxuICAgIHRoaXMucmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHkgPSByaWdodE51bWJlck9mQXRvbXNQcm9wZXJ0eTtcclxuXHJcbiAgICAvLyBmdWxjcnVtXHJcbiAgICBjb25zdCBmdWxjcnVtTm9kZSA9IG5ldyBGdWxjcnVtTm9kZSggZWxlbWVudCwgRlVMQ1JVTV9TSVpFICk7XHJcblxyXG4gICAgdGhpcy5iZWFtTm9kZSA9IG5ldyBCZWFtTm9kZSggQkVBTV9MRU5HVEgsIEJFQU1fVEhJQ0tORVNTLCB7XHJcbiAgICAgIGJvdHRvbTogMCxcclxuICAgICAgdHJhbnNmb3JtQm91bmRzOiB0cnVlIC8qIHNlZSBpc3N1ZSAjNzcgKi9cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBsZWZ0IHBpbGUgJiBjb3VudFxyXG4gICAgdGhpcy5sZWZ0UGlsZU5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgdGhpcy5sZWZ0Q291bnRUZXh0ID0gbmV3IFRleHQoIGxlZnROdW1iZXJPZkF0b21zUHJvcGVydHkudmFsdWUsIFRFWFRfT1BUSU9OUyApO1xyXG5cclxuICAgIC8vIHJpZ2h0IHBpbGUgJiBjb3VudFxyXG4gICAgdGhpcy5yaWdodFBpbGVOb2RlID0gbmV3IE5vZGUoKTtcclxuICAgIHRoaXMucmlnaHRDb3VudFRleHQgPSBuZXcgVGV4dCggcmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHkudmFsdWUsIFRFWFRfT1BUSU9OUyApO1xyXG5cclxuICAgIC8vIHBhcmVudCBmb3IgYm90aCBwaWxlcywgdG8gc2ltcGxpZnkgcm90YXRpb25cclxuICAgIHRoaXMucGlsZXNQYXJlbnQgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogWyB0aGlzLmxlZnRQaWxlTm9kZSwgdGhpcy5sZWZ0Q291bnRUZXh0LCB0aGlzLnJpZ2h0UGlsZU5vZGUsIHRoaXMucmlnaHRDb3VudFRleHQgXSxcclxuICAgICAgdHJhbnNmb3JtQm91bmRzOiB0cnVlIC8qIHNlZSBpc3N1ZSAjNzcgKi9cclxuICAgIH0gKTtcclxuXHJcbiAgICBvcHRpb25zLmNoaWxkcmVuID0gWyBmdWxjcnVtTm9kZSwgdGhpcy5iZWFtTm9kZSwgdGhpcy5waWxlc1BhcmVudCBdO1xyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBoaWdobGlnaHQgdGhlIGJlYW1cclxuICAgIGNvbnN0IGhpZ2hsaWdodE9ic2VydmVyID0gKCBoaWdobGlnaHRlZDogYm9vbGVhbiApID0+IHRoaXMuYmVhbU5vZGUuc2V0SGlnaGxpZ2h0ZWQoIGhpZ2hsaWdodGVkICk7XHJcbiAgICBoaWdobGlnaHRlZFByb3BlcnR5LmxpbmsoIGhpZ2hsaWdodE9ic2VydmVyICk7XHJcblxyXG4gICAgLy8gdXBkYXRlIHBpbGVzXHJcbiAgICBjb25zdCB1cGRhdGVOb2RlQmluZCA9IHRoaXMudXBkYXRlTm9kZS5iaW5kKCB0aGlzICk7XHJcbiAgICBsZWZ0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5LmxhenlMaW5rKCB1cGRhdGVOb2RlQmluZCApO1xyXG4gICAgcmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHkubGF6eUxpbmsoIHVwZGF0ZU5vZGVCaW5kICk7XHJcbiAgICB0aGlzLnVwZGF0ZU5vZGUoKTtcclxuXHJcbiAgICAvLyB1bmxpbmsgZnJvbSBQcm9wZXJ0aWVzXHJcbiAgICB0aGlzLmJhbGFuY2VTY2FsZU5vZGVEaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICBoaWdobGlnaHRlZFByb3BlcnR5LnVubGluayggaGlnaGxpZ2h0T2JzZXJ2ZXIgKTtcclxuICAgICAgbGVmdE51bWJlck9mQXRvbXNQcm9wZXJ0eS51bmxpbmsoIHVwZGF0ZU5vZGVCaW5kICk7XHJcbiAgICAgIHJpZ2h0TnVtYmVyT2ZBdG9tc1Byb3BlcnR5LnVubGluayggdXBkYXRlTm9kZUJpbmQgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuYmFsYW5jZVNjYWxlTm9kZURpc3Bvc2UoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBsYWNlcyBwaWxlcyBvZiBhdG9tcyBvbiB0aGUgZW5kcyBvZiB0aGUgYmVhbSwgd2l0aCBhIGNvdW50IG9mIHRoZSBudW1iZXIgb2ZcclxuICAgKiBhdG9tcyBhYm92ZSBlYWNoIHBpbGUuICBUaGVuIHJvdGF0ZXMgdGhlIGJlYW0gYW5kIHN0dWZmIG9uIGl0IHRvIGluZGljYXRlIHRoZVxyXG4gICAqIHJlbGF0aXZlIGJhbGFuY2UgYmV0d2VlbiB0aGUgbGVmdCBhbmQgcmlnaHQgcGlsZXMuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVOb2RlKCk6IHZvaWQge1xyXG5cclxuICAgIC8vIHVwZGF0ZSBwaWxlcyBvbiBiZWFtIGluIG5ldXRyYWwgb3JpZW50YXRpb25cclxuICAgIHRoaXMuYmVhbU5vZGUuc2V0Um90YXRpb24oIDAgKTtcclxuICAgIHRoaXMucGlsZXNQYXJlbnQuc2V0Um90YXRpb24oIDAgKTtcclxuXHJcbiAgICBjb25zdCBsZWZ0TnVtYmVyT2ZBdG9tcyA9IHRoaXMubGVmdE51bWJlck9mQXRvbXNQcm9wZXJ0eS52YWx1ZTtcclxuICAgIGNvbnN0IHJpZ2h0TnVtYmVyT2ZBdG9tcyA9IHRoaXMucmlnaHROdW1iZXJPZkF0b21zUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgLy8gdXBkYXRlIHBpbGVzXHJcbiAgICB1cGRhdGVQaWxlKCB0aGlzLmVsZW1lbnQsIGxlZnROdW1iZXJPZkF0b21zLCB0aGlzLmxlZnRQaWxlTm9kZSwgdGhpcy5sZWZ0Q291bnRUZXh0LCB0aGlzLmJlYW1Ob2RlLmxlZnQgKyAwLjI1ICogdGhpcy5iZWFtTm9kZS53aWR0aCwgdGhpcy5iZWFtTm9kZS50b3AgKTtcclxuICAgIHVwZGF0ZVBpbGUoIHRoaXMuZWxlbWVudCwgcmlnaHROdW1iZXJPZkF0b21zLCB0aGlzLnJpZ2h0UGlsZU5vZGUsIHRoaXMucmlnaHRDb3VudFRleHQsIHRoaXMuYmVhbU5vZGUucmlnaHQgLSAwLjI1ICogdGhpcy5iZWFtTm9kZS53aWR0aCwgdGhpcy5iZWFtTm9kZS50b3AgKTtcclxuXHJcbiAgICAvLyByb3RhdGUgYmVhbSBhbmQgcGlsZXMgb24gZnVsY3J1bVxyXG4gICAgY29uc3QgbWF4QW5nbGUgPSAoIE1hdGguUEkgLyAyICkgLSBNYXRoLmFjb3MoIEZVTENSVU1fU0laRS5oZWlnaHQgLyAoIEJFQU1fTEVOR1RIIC8gMiApICk7XHJcbiAgICBjb25zdCBkaWZmZXJlbmNlID0gcmlnaHROdW1iZXJPZkF0b21zIC0gbGVmdE51bWJlck9mQXRvbXM7XHJcbiAgICBsZXQgYW5nbGUgPSAwO1xyXG4gICAgaWYgKCBNYXRoLmFicyggZGlmZmVyZW5jZSApID49IE5VTUJFUl9PRl9USUxUX0FOR0xFUyApIHtcclxuICAgICAgLy8gbWF4IHRpbHRcclxuICAgICAgY29uc3Qgc2lnbiA9IE1hdGguYWJzKCBkaWZmZXJlbmNlICkgLyBkaWZmZXJlbmNlO1xyXG4gICAgICBhbmdsZSA9IHNpZ24gKiBtYXhBbmdsZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAvLyBwYXJ0aWFsIHRpbHRcclxuICAgICAgYW5nbGUgPSBkaWZmZXJlbmNlICogKCBtYXhBbmdsZSAvIE5VTUJFUl9PRl9USUxUX0FOR0xFUyApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5iZWFtTm9kZS5zZXRSb3RhdGlvbiggYW5nbGUgKTtcclxuICAgIHRoaXMucGlsZXNQYXJlbnQuc2V0Um90YXRpb24oIGFuZ2xlICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyBhIHRyaWFuZ3VsYXIgcGlsZSBvZiBhdG9tcy5cclxuICogQXRvbXMgYXJlIHBvcHVsYXRlZCBvbmUgcm93IGF0IGEgdGltZSwgc3RhcnRpbmcgZnJvbSB0aGUgYmFzZSBvZiB0aGUgdHJpYW5nbGUgYW5kIHdvcmtpbmcgdXAuXHJcbiAqIFRvIGltcHJvdmUgcGVyZm9ybWFuY2U6XHJcbiAqIC0gQXRvbXMgYXJlIGFkZGVkIHRvIHRoZSBwaWxlIGFzIG5lZWRlZC5cclxuICogLSBBdG9tcyBhcmUgbmV2ZXIgcmVtb3ZlZCBmcm9tIHRoZSBwaWxlOyB0aGV5IHN0YXkgaW4gdGhlIHBpbGUgZm9yIHRoZSBsaWZldGltZSBvZiB0aGlzIG5vZGUuXHJcbiAqIC0gVGhlIHZpc2liaWxpdHkgb2YgYXRvbXMgaXMgYWRqdXN0ZWQgdG8gc2hvdyB0aGUgY29ycmVjdCBudW1iZXIgb2YgYXRvbXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbGVtZW50XHJcbiAqIEBwYXJhbSBudW1iZXJPZkF0b21zIC0gbnVtYmVyIG9mIGF0b21zIHRoYXQgd2lsbCBiZSB2aXNpYmxlIGluIHRoZSBwaWxlXHJcbiAqIEBwYXJhbSBwaWxlTm9kZSAtIHBpbGUgdGhhdCB3aWxsIGJlIG1vZGlmaWVkXHJcbiAqIEBwYXJhbSBjb3VudFRleHQgLSBkaXNwbGF5cyBudW1iZXJPZkF0b21zXHJcbiAqIEBwYXJhbSBwaWxlQ2VudGVyWCAtIHgtY29vcmRpbmF0ZSBvZiB0aGUgcGlsZSdzIGNlbnRlciwgcmVsYXRpdmUgdG8gdGhlIGJlYW1cclxuICogQHBhcmFtIGJlYW1Ub3AgLSB5LWNvb3JkaW5hdGUgb2YgdGhlIGJlYW0ncyB0b3BcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZVBpbGUoIGVsZW1lbnQ6IEVsZW1lbnQsIG51bWJlck9mQXRvbXM6IG51bWJlciwgcGlsZU5vZGU6IE5vZGUsIGNvdW50VGV4dDogVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgcGlsZUNlbnRlclg6IG51bWJlciwgYmVhbVRvcDogbnVtYmVyICk6IHZvaWQge1xyXG5cclxuICBjb25zdCBub2Rlc0luUGlsZSA9IHBpbGVOb2RlLmdldENoaWxkcmVuQ291bnQoKTsgLy8gaG93IG1hbnkgYXRvbSBub2RlcyBhcmUgY3VycmVudGx5IGluIHRoZSBwaWxlXHJcbiAgbGV0IHBpbGUgPSAwOyAvLyB3aGljaCBwaWxlIHdlJ3JlIHdvcmtpbmcgb24sIGxheWVyZWQgYmFjay10by1mcm9udCwgb2Zmc2V0IGxlZnQtdG8tcmlnaHRcclxuICBsZXQgcm93ID0gMDsgLy8gdGhlIHJvdyBudW1iZXIsIGJvdHRvbSByb3cgaXMgemVyb1xyXG4gIGxldCBhdG9tc0luUm93ID0gMDsgLy8gbnVtYmVyIG9mIGF0b21zIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBjdXJyZW50IHJvd1xyXG4gIGxldCB4ID0gMDtcclxuICBsZXQgeSA9IDA7XHJcbiAgbGV0IGF0b21Ob2RlO1xyXG5cclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBNYXRoLm1heCggbm9kZXNJblBpbGUsIG51bWJlck9mQXRvbXMgKTsgaSsrICkge1xyXG5cclxuICAgIGlmICggaSA8IG5vZGVzSW5QaWxlICkge1xyXG4gICAgICAvLyBzZXQgdmlzaWJpbGl0eSBvZiBhbiBhdG9tIHRoYXQncyBhbHJlYWR5IGluIHRoZSBwaWxlXHJcbiAgICAgIGF0b21Ob2RlID0gcGlsZU5vZGUuZ2V0Q2hpbGRBdCggaSApO1xyXG4gICAgICBhdG9tTm9kZS52aXNpYmxlID0gKCBpIDwgbnVtYmVyT2ZBdG9tcyApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIGFkZCBhbiBhdG9tIG5vZGVcclxuICAgICAgYXRvbU5vZGUgPSBuZXcgQXRvbU5vZGUoIGVsZW1lbnQsIEJDRUNvbnN0YW50cy5BVE9NX05PREVfT1BUSU9OUyApO1xyXG4gICAgICBhdG9tTm9kZS5zY2FsZSggQkNFQ29uc3RhbnRzLk1PTEVDVUxFX1NDQUxFX0ZBQ1RPUiApO1xyXG4gICAgICBwaWxlTm9kZS5hZGRDaGlsZCggYXRvbU5vZGUgKTtcclxuICAgICAgYXRvbU5vZGUudHJhbnNsYXRpb24gPSBuZXcgVmVjdG9yMiggeCArICggYXRvbU5vZGUud2lkdGggLyAyICksIHkgLSAoIGF0b21Ob2RlLmhlaWdodCAvIDIgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRldGVybWluZSBwb3NpdGlvbiBvZiBuZXh0IGF0b21cclxuICAgIGF0b21zSW5Sb3crKztcclxuICAgIGlmICggYXRvbXNJblJvdyA8IEFUT01TX0lOX1BJTEVfQkFTRSAtIHJvdyApIHtcclxuICAgICAgLy8gY29udGludWUgd2l0aCBjdXJyZW50IHJvd1xyXG4gICAgICB4ID0gYXRvbU5vZGUucmlnaHQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggcm93IDwgQVRPTVNfSU5fUElMRV9CQVNFIC0gMSApIHtcclxuICAgICAgLy8gbW92ZSB0byBuZXh0IHJvdyBpbiBjdXJyZW50IHRyaWFuZ3VsYXIgcGlsZVxyXG4gICAgICByb3crKztcclxuICAgICAgYXRvbXNJblJvdyA9IDA7XHJcbiAgICAgIHggPSAoIHBpbGUgKyByb3cgKSAqICggYXRvbU5vZGUud2lkdGggLyAyICk7XHJcbiAgICAgIHkgPSAtKCByb3cgKiAwLjg1ICogYXRvbU5vZGUuaGVpZ2h0ICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gc3RhcnQgYSBuZXcgcGlsZSwgb2Zmc2V0IGZyb20gdGhlIHByZXZpb3VzIHBpbGVcclxuICAgICAgcm93ID0gMDtcclxuICAgICAgcGlsZSsrO1xyXG4gICAgICBhdG9tc0luUm93ID0gMDtcclxuICAgICAgeCA9IHBpbGUgKiAoIGF0b21Ob2RlLndpZHRoIC8gMiApO1xyXG4gICAgICB5ID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGNvdW50IGRpc3BsYXlcclxuICBjb3VudFRleHQuc3RyaW5nID0gbnVtYmVyT2ZBdG9tcztcclxuXHJcbiAgLy8gbGF5b3V0XHJcbiAgaWYgKCBwaWxlTm9kZS52aXNpYmxlQm91bmRzLmlzRW1wdHkoKSApIHtcclxuICAgIC8vIHBpbGUgaXMgZW1wdHksIGp1c3QgZGVhbCB3aXRoIGNvdW50XHJcbiAgICBjb3VudFRleHQuY2VudGVyWCA9IHBpbGVDZW50ZXJYO1xyXG4gICAgY291bnRUZXh0LmJvdHRvbSA9IGJlYW1Ub3AgLSBDT1VOVF9ZX1NQQUNJTkc7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgLy8gYWNjb3VudCBmb3IgaW52aXNpYmxlIGF0b21zIGluIHRoZSBwaWxlXHJcbiAgICBwaWxlTm9kZS5jZW50ZXJYID0gcGlsZUNlbnRlclggKyAoIHBpbGVOb2RlLndpZHRoIC0gcGlsZU5vZGUudmlzaWJsZUJvdW5kcy53aWR0aCApIC8gMjtcclxuICAgIHBpbGVOb2RlLmJvdHRvbSA9IGJlYW1Ub3AgKyAxO1xyXG4gICAgY291bnRUZXh0LmNlbnRlclggPSBwaWxlQ2VudGVyWDtcclxuICAgIGNvdW50VGV4dC5ib3R0b20gPSBwaWxlTm9kZS52aXNpYmxlQm91bmRzLnRvcCAtIENPVU5UX1lfU1BBQ0lORztcclxuICB9XHJcbn1cclxuXHJcbmJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zLnJlZ2lzdGVyKCAnQmFsYW5jZVNjYWxlTm9kZScsIEJhbGFuY2VTY2FsZU5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFFbkQsT0FBT0MsUUFBUSxNQUFNLGdEQUFnRDtBQUNyRSxPQUFPQyxTQUFTLE1BQTRCLHVDQUF1QztBQUNuRixPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLElBQUksRUFBdUNDLElBQUksUUFBUSxtQ0FBbUM7QUFDbkcsT0FBT0MsMEJBQTBCLE1BQU0scUNBQXFDO0FBQzVFLE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFDN0MsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFDcEMsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjs7QUFFMUM7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSVgsVUFBVSxDQUFFLEVBQUUsRUFBRSxFQUFHLENBQUM7QUFDN0MsTUFBTVksV0FBVyxHQUFHLEdBQUc7QUFDdkIsTUFBTUMsY0FBYyxHQUFHLENBQUM7QUFDeEIsTUFBTUMscUJBQXFCLEdBQUcsQ0FBQztBQUMvQixNQUFNQyxlQUFlLEdBQUcsQ0FBQztBQUN6QixNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBQztB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