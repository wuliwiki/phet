// Copyright 2014-2023, University of Colorado Boulder

/**
 * Model container for the 'Introduction' screen.
 * This model has a small set of equations, one of which is the current equation that we're operating on.*
 *
 * @author Vasily Shakhov (MLearner)
 */

import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import balancingChemicalEquations from '../../balancingChemicalEquations.js';
import BalancingChemicalEquationsStrings from '../../BalancingChemicalEquationsStrings.js';
import DecompositionEquation from '../../common/model/DecompositionEquation.js';
import DisplacementEquation from '../../common/model/DisplacementEquation.js';
import SynthesisEquation from '../../common/model/SynthesisEquation.js';
export default class IntroductionModel {
  // Range of possible equation coefficients

  // Choice of equations

  // the equation that is selected

  constructor(tandem) {
    this.coefficientsRange = new Range(0, 3);
    this.choices = [{
      equation: SynthesisEquation.create_N2_3H2_2NH3(),
      labelStringProperty: BalancingChemicalEquationsStrings.makeAmmoniaStringProperty
    }, {
      equation: DecompositionEquation.create_2H2O_2H2_O2(),
      labelStringProperty: BalancingChemicalEquationsStrings.separateWaterStringProperty
    }, {
      equation: DisplacementEquation.create_CH4_2O2_CO2_2H2O(),
      labelStringProperty: BalancingChemicalEquationsStrings.combustMethaneStringProperty
    }];
    this.equationProperty = new Property(this.choices[0].equation);
  }
  reset() {
    this.equationProperty.reset();
    this.choices.forEach(choice => choice.equation.reset());
  }
}
balancingChemicalEquations.register('IntroductionModel', IntroductionModel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlJhbmdlIiwiYmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnMiLCJCYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9uc1N0cmluZ3MiLCJEZWNvbXBvc2l0aW9uRXF1YXRpb24iLCJEaXNwbGFjZW1lbnRFcXVhdGlvbiIsIlN5bnRoZXNpc0VxdWF0aW9uIiwiSW50cm9kdWN0aW9uTW9kZWwiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsImNvZWZmaWNpZW50c1JhbmdlIiwiY2hvaWNlcyIsImVxdWF0aW9uIiwiY3JlYXRlX04yXzNIMl8yTkgzIiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsIm1ha2VBbW1vbmlhU3RyaW5nUHJvcGVydHkiLCJjcmVhdGVfMkgyT18ySDJfTzIiLCJzZXBhcmF0ZVdhdGVyU3RyaW5nUHJvcGVydHkiLCJjcmVhdGVfQ0g0XzJPMl9DTzJfMkgyTyIsImNvbWJ1c3RNZXRoYW5lU3RyaW5nUHJvcGVydHkiLCJlcXVhdGlvblByb3BlcnR5IiwicmVzZXQiLCJmb3JFYWNoIiwiY2hvaWNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnRyb2R1Y3Rpb25Nb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBjb250YWluZXIgZm9yIHRoZSAnSW50cm9kdWN0aW9uJyBzY3JlZW4uXHJcbiAqIFRoaXMgbW9kZWwgaGFzIGEgc21hbGwgc2V0IG9mIGVxdWF0aW9ucywgb25lIG9mIHdoaWNoIGlzIHRoZSBjdXJyZW50IGVxdWF0aW9uIHRoYXQgd2UncmUgb3BlcmF0aW5nIG9uLipcclxuICpcclxuICogQGF1dGhvciBWYXNpbHkgU2hha2hvdiAoTUxlYXJuZXIpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVE1vZGVsIGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL1RNb2RlbC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBiYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucyBmcm9tICcuLi8uLi9iYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucy5qcyc7XHJcbmltcG9ydCBCYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9uc1N0cmluZ3MgZnJvbSAnLi4vLi4vQmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnNTdHJpbmdzLmpzJztcclxuaW1wb3J0IERlY29tcG9zaXRpb25FcXVhdGlvbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRGVjb21wb3NpdGlvbkVxdWF0aW9uLmpzJztcclxuaW1wb3J0IERpc3BsYWNlbWVudEVxdWF0aW9uIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9EaXNwbGFjZW1lbnRFcXVhdGlvbi5qcyc7XHJcbmltcG9ydCBFcXVhdGlvbiBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvRXF1YXRpb24uanMnO1xyXG5pbXBvcnQgU3ludGhlc2lzRXF1YXRpb24gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1N5bnRoZXNpc0VxdWF0aW9uLmpzJztcclxuXHJcbmV4cG9ydCB0eXBlIEVxdWF0aW9uQ2hvaWNlID0ge1xyXG4gIGVxdWF0aW9uOiBFcXVhdGlvbjtcclxuICBsYWJlbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50cm9kdWN0aW9uTW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG5cclxuICAvLyBSYW5nZSBvZiBwb3NzaWJsZSBlcXVhdGlvbiBjb2VmZmljaWVudHNcclxuICBwdWJsaWMgcmVhZG9ubHkgY29lZmZpY2llbnRzUmFuZ2U6IFJhbmdlO1xyXG5cclxuICAvLyBDaG9pY2Ugb2YgZXF1YXRpb25zXHJcbiAgcHVibGljIHJlYWRvbmx5IGNob2ljZXM6IEVxdWF0aW9uQ2hvaWNlW107XHJcblxyXG4gIC8vIHRoZSBlcXVhdGlvbiB0aGF0IGlzIHNlbGVjdGVkXHJcbiAgcHVibGljIHJlYWRvbmx5IGVxdWF0aW9uUHJvcGVydHk6IFByb3BlcnR5PEVxdWF0aW9uPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICB0aGlzLmNvZWZmaWNpZW50c1JhbmdlID0gbmV3IFJhbmdlKCAwLCAzICk7XHJcblxyXG4gICAgdGhpcy5jaG9pY2VzID0gW1xyXG4gICAgICB7IGVxdWF0aW9uOiBTeW50aGVzaXNFcXVhdGlvbi5jcmVhdGVfTjJfM0gyXzJOSDMoKSwgbGFiZWxTdHJpbmdQcm9wZXJ0eTogQmFsYW5jaW5nQ2hlbWljYWxFcXVhdGlvbnNTdHJpbmdzLm1ha2VBbW1vbmlhU3RyaW5nUHJvcGVydHkgfSxcclxuICAgICAgeyBlcXVhdGlvbjogRGVjb21wb3NpdGlvbkVxdWF0aW9uLmNyZWF0ZV8ySDJPXzJIMl9PMigpLCBsYWJlbFN0cmluZ1Byb3BlcnR5OiBCYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9uc1N0cmluZ3Muc2VwYXJhdGVXYXRlclN0cmluZ1Byb3BlcnR5IH0sXHJcbiAgICAgIHsgZXF1YXRpb246IERpc3BsYWNlbWVudEVxdWF0aW9uLmNyZWF0ZV9DSDRfMk8yX0NPMl8ySDJPKCksIGxhYmVsU3RyaW5nUHJvcGVydHk6IEJhbGFuY2luZ0NoZW1pY2FsRXF1YXRpb25zU3RyaW5ncy5jb21idXN0TWV0aGFuZVN0cmluZ1Byb3BlcnR5IH1cclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5lcXVhdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB0aGlzLmNob2ljZXNbIDAgXS5lcXVhdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5lcXVhdGlvblByb3BlcnR5LnJlc2V0KCk7XHJcbiAgICB0aGlzLmNob2ljZXMuZm9yRWFjaCggY2hvaWNlID0+IGNob2ljZS5lcXVhdGlvbi5yZXNldCgpICk7XHJcbiAgfVxyXG59XHJcblxyXG5iYWxhbmNpbmdDaGVtaWNhbEVxdWF0aW9ucy5yZWdpc3RlciggJ0ludHJvZHVjdGlvbk1vZGVsJywgSW50cm9kdWN0aW9uTW9kZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0saUNBQWlDO0FBRXRELE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFHL0MsT0FBT0MsMEJBQTBCLE1BQU0scUNBQXFDO0FBQzVFLE9BQU9DLGlDQUFpQyxNQUFNLDRDQUE0QztBQUMxRixPQUFPQyxxQkFBcUIsTUFBTSw2Q0FBNkM7QUFDL0UsT0FBT0Msb0JBQW9CLE1BQU0sNENBQTRDO0FBRTdFLE9BQU9DLGlCQUFpQixNQUFNLHlDQUF5QztBQU92RSxlQUFlLE1BQU1DLGlCQUFpQixDQUFtQjtFQUV2RDs7RUFHQTs7RUFHQTs7RUFHT0MsV0FBV0EsQ0FBRUMsTUFBYyxFQUFHO0lBRW5DLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSVQsS0FBSyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7SUFFMUMsSUFBSSxDQUFDVSxPQUFPLEdBQUcsQ0FDYjtNQUFFQyxRQUFRLEVBQUVOLGlCQUFpQixDQUFDTyxrQkFBa0IsQ0FBQyxDQUFDO01BQUVDLG1CQUFtQixFQUFFWCxpQ0FBaUMsQ0FBQ1k7SUFBMEIsQ0FBQyxFQUN0STtNQUFFSCxRQUFRLEVBQUVSLHFCQUFxQixDQUFDWSxrQkFBa0IsQ0FBQyxDQUFDO01BQUVGLG1CQUFtQixFQUFFWCxpQ0FBaUMsQ0FBQ2M7SUFBNEIsQ0FBQyxFQUM1STtNQUFFTCxRQUFRLEVBQUVQLG9CQUFvQixDQUFDYSx1QkFBdUIsQ0FBQyxDQUFDO01BQUVKLG1CQUFtQixFQUFFWCxpQ0FBaUMsQ0FBQ2dCO0lBQTZCLENBQUMsQ0FDbEo7SUFFRCxJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUlwQixRQUFRLENBQUUsSUFBSSxDQUFDVyxPQUFPLENBQUUsQ0FBQyxDQUFFLENBQUNDLFFBQVMsQ0FBQztFQUNwRTtFQUVPUyxLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDVixPQUFPLENBQUNXLE9BQU8sQ0FBRUMsTUFBTSxJQUFJQSxNQUFNLENBQUNYLFFBQVEsQ0FBQ1MsS0FBSyxDQUFDLENBQUUsQ0FBQztFQUMzRDtBQUNGO0FBRUFuQiwwQkFBMEIsQ0FBQ3NCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRWpCLGlCQUFrQixDQUFDIn0=