// Copyright 2013-2022, University of Colorado Boulder

/**
 * Node that takes a number atom and displays a set of counts for the various
 * subatomic particles.  This is generally used when presenting a 'challenge'
 * for the game.
 *
 * @author John Blanco
 */

import merge from '../../../../phet-core/js/merge.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import buildAnAtom from '../../buildAnAtom.js';
import BuildAnAtomStrings from '../../BuildAnAtomStrings.js';
const electronsColonPatternString = BuildAnAtomStrings.electronsColonPattern;
const neutronsColonPatternString = BuildAnAtomStrings.neutronsColonPattern;
const protonsColonPatternString = BuildAnAtomStrings.protonsColonPattern;

// constants
const MAX_WIDTH = 280;
class ParticleCountsNode extends Node {
  /**
   * @param {NumberAtom} numberAtom
   * @param {Object} [options]
   */
  constructor(numberAtom, options) {
    super(options);
    options = merge({
      font: new PhetFont(24)
    }, options);
    const protonCountTitle = new Text(StringUtils.format(protonsColonPatternString, numberAtom.protonCountProperty.get()), {
      font: options.font,
      maxWidth: MAX_WIDTH
    });
    this.addChild(protonCountTitle);
    const neutronCountTitle = new Text(StringUtils.format(neutronsColonPatternString, numberAtom.neutronCountProperty.get()), {
      font: options.font,
      maxWidth: MAX_WIDTH
    });
    this.addChild(neutronCountTitle);
    const electronCountTitle = new Text(StringUtils.format(electronsColonPatternString, numberAtom.electronCountProperty.get()), {
      font: options.font,
      maxWidth: MAX_WIDTH
    });
    this.addChild(electronCountTitle);

    // Layout - Line labels up on left edge, numbers on right edge.
    const interLineSpacing = protonCountTitle.height * 0.9; // Multiplier empirically determined.
    protonCountTitle.left = 0;
    protonCountTitle.top = 0;
    neutronCountTitle.left = 0;
    neutronCountTitle.top = protonCountTitle.bottom + interLineSpacing;
    electronCountTitle.left = 0;
    electronCountTitle.top = neutronCountTitle.bottom + interLineSpacing;
  }
}
buildAnAtom.register('ParticleCountsNode', ParticleCountsNode);
export default ParticleCountsNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiUGhldEZvbnQiLCJOb2RlIiwiVGV4dCIsImJ1aWxkQW5BdG9tIiwiQnVpbGRBbkF0b21TdHJpbmdzIiwiZWxlY3Ryb25zQ29sb25QYXR0ZXJuU3RyaW5nIiwiZWxlY3Ryb25zQ29sb25QYXR0ZXJuIiwibmV1dHJvbnNDb2xvblBhdHRlcm5TdHJpbmciLCJuZXV0cm9uc0NvbG9uUGF0dGVybiIsInByb3RvbnNDb2xvblBhdHRlcm5TdHJpbmciLCJwcm90b25zQ29sb25QYXR0ZXJuIiwiTUFYX1dJRFRIIiwiUGFydGljbGVDb3VudHNOb2RlIiwiY29uc3RydWN0b3IiLCJudW1iZXJBdG9tIiwib3B0aW9ucyIsImZvbnQiLCJwcm90b25Db3VudFRpdGxlIiwiZm9ybWF0IiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsImdldCIsIm1heFdpZHRoIiwiYWRkQ2hpbGQiLCJuZXV0cm9uQ291bnRUaXRsZSIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiZWxlY3Ryb25Db3VudFRpdGxlIiwiZWxlY3Ryb25Db3VudFByb3BlcnR5IiwiaW50ZXJMaW5lU3BhY2luZyIsImhlaWdodCIsImxlZnQiLCJ0b3AiLCJib3R0b20iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBhcnRpY2xlQ291bnRzTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBOb2RlIHRoYXQgdGFrZXMgYSBudW1iZXIgYXRvbSBhbmQgZGlzcGxheXMgYSBzZXQgb2YgY291bnRzIGZvciB0aGUgdmFyaW91c1xyXG4gKiBzdWJhdG9taWMgcGFydGljbGVzLiAgVGhpcyBpcyBnZW5lcmFsbHkgdXNlZCB3aGVuIHByZXNlbnRpbmcgYSAnY2hhbGxlbmdlJ1xyXG4gKiBmb3IgdGhlIGdhbWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uLy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IEJ1aWxkQW5BdG9tU3RyaW5ncyBmcm9tICcuLi8uLi9CdWlsZEFuQXRvbVN0cmluZ3MuanMnO1xyXG5cclxuY29uc3QgZWxlY3Ryb25zQ29sb25QYXR0ZXJuU3RyaW5nID0gQnVpbGRBbkF0b21TdHJpbmdzLmVsZWN0cm9uc0NvbG9uUGF0dGVybjtcclxuY29uc3QgbmV1dHJvbnNDb2xvblBhdHRlcm5TdHJpbmcgPSBCdWlsZEFuQXRvbVN0cmluZ3MubmV1dHJvbnNDb2xvblBhdHRlcm47XHJcbmNvbnN0IHByb3RvbnNDb2xvblBhdHRlcm5TdHJpbmcgPSBCdWlsZEFuQXRvbVN0cmluZ3MucHJvdG9uc0NvbG9uUGF0dGVybjtcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBNQVhfV0lEVEggPSAyODA7XHJcblxyXG5jbGFzcyBQYXJ0aWNsZUNvdW50c05vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJBdG9tfSBudW1iZXJBdG9tXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBudW1iZXJBdG9tLCBvcHRpb25zICkge1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjQgKSB9LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcHJvdG9uQ291bnRUaXRsZSA9IG5ldyBUZXh0KCBTdHJpbmdVdGlscy5mb3JtYXQoIHByb3RvbnNDb2xvblBhdHRlcm5TdHJpbmcsIG51bWJlckF0b20ucHJvdG9uQ291bnRQcm9wZXJ0eS5nZXQoKSApLCB7XHJcbiAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgbWF4V2lkdGg6IE1BWF9XSURUSFxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggcHJvdG9uQ291bnRUaXRsZSApO1xyXG4gICAgY29uc3QgbmV1dHJvbkNvdW50VGl0bGUgPSBuZXcgVGV4dCggU3RyaW5nVXRpbHMuZm9ybWF0KCBuZXV0cm9uc0NvbG9uUGF0dGVyblN0cmluZywgbnVtYmVyQXRvbS5uZXV0cm9uQ291bnRQcm9wZXJ0eS5nZXQoKSApLCB7XHJcbiAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcclxuICAgICAgbWF4V2lkdGg6IE1BWF9XSURUSFxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV1dHJvbkNvdW50VGl0bGUgKTtcclxuICAgIGNvbnN0IGVsZWN0cm9uQ291bnRUaXRsZSA9IG5ldyBUZXh0KCBTdHJpbmdVdGlscy5mb3JtYXQoIGVsZWN0cm9uc0NvbG9uUGF0dGVyblN0cmluZywgbnVtYmVyQXRvbS5lbGVjdHJvbkNvdW50UHJvcGVydHkuZ2V0KCkgKSwge1xyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnQsXHJcbiAgICAgIG1heFdpZHRoOiBNQVhfV0lEVEhcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGVsZWN0cm9uQ291bnRUaXRsZSApO1xyXG5cclxuICAgIC8vIExheW91dCAtIExpbmUgbGFiZWxzIHVwIG9uIGxlZnQgZWRnZSwgbnVtYmVycyBvbiByaWdodCBlZGdlLlxyXG4gICAgY29uc3QgaW50ZXJMaW5lU3BhY2luZyA9IHByb3RvbkNvdW50VGl0bGUuaGVpZ2h0ICogMC45OyAvLyBNdWx0aXBsaWVyIGVtcGlyaWNhbGx5IGRldGVybWluZWQuXHJcbiAgICBwcm90b25Db3VudFRpdGxlLmxlZnQgPSAwO1xyXG4gICAgcHJvdG9uQ291bnRUaXRsZS50b3AgPSAwO1xyXG4gICAgbmV1dHJvbkNvdW50VGl0bGUubGVmdCA9IDA7XHJcbiAgICBuZXV0cm9uQ291bnRUaXRsZS50b3AgPSBwcm90b25Db3VudFRpdGxlLmJvdHRvbSArIGludGVyTGluZVNwYWNpbmc7XHJcbiAgICBlbGVjdHJvbkNvdW50VGl0bGUubGVmdCA9IDA7XHJcbiAgICBlbGVjdHJvbkNvdW50VGl0bGUudG9wID0gbmV1dHJvbkNvdW50VGl0bGUuYm90dG9tICsgaW50ZXJMaW5lU3BhY2luZztcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQW5BdG9tLnJlZ2lzdGVyKCAnUGFydGljbGVDb3VudHNOb2RlJywgUGFydGljbGVDb3VudHNOb2RlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYXJ0aWNsZUNvdW50c05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSwrQ0FBK0M7QUFDdkUsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxTQUFTQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFFNUQsTUFBTUMsMkJBQTJCLEdBQUdELGtCQUFrQixDQUFDRSxxQkFBcUI7QUFDNUUsTUFBTUMsMEJBQTBCLEdBQUdILGtCQUFrQixDQUFDSSxvQkFBb0I7QUFDMUUsTUFBTUMseUJBQXlCLEdBQUdMLGtCQUFrQixDQUFDTSxtQkFBbUI7O0FBRXhFO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLEdBQUc7QUFFckIsTUFBTUMsa0JBQWtCLFNBQVNYLElBQUksQ0FBQztFQUVwQztBQUNGO0FBQ0E7QUFDQTtFQUNFWSxXQUFXQSxDQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRztJQUVqQyxLQUFLLENBQUVBLE9BQVEsQ0FBQztJQUVoQkEsT0FBTyxHQUFHakIsS0FBSyxDQUFFO01BQUVrQixJQUFJLEVBQUUsSUFBSWhCLFFBQVEsQ0FBRSxFQUFHO0lBQUUsQ0FBQyxFQUFFZSxPQUFRLENBQUM7SUFFeEQsTUFBTUUsZ0JBQWdCLEdBQUcsSUFBSWYsSUFBSSxDQUFFSCxXQUFXLENBQUNtQixNQUFNLENBQUVULHlCQUF5QixFQUFFSyxVQUFVLENBQUNLLG1CQUFtQixDQUFDQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUU7TUFDeEhKLElBQUksRUFBRUQsT0FBTyxDQUFDQyxJQUFJO01BQ2xCSyxRQUFRLEVBQUVWO0lBQ1osQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDVyxRQUFRLENBQUVMLGdCQUFpQixDQUFDO0lBQ2pDLE1BQU1NLGlCQUFpQixHQUFHLElBQUlyQixJQUFJLENBQUVILFdBQVcsQ0FBQ21CLE1BQU0sQ0FBRVgsMEJBQTBCLEVBQUVPLFVBQVUsQ0FBQ1Usb0JBQW9CLENBQUNKLEdBQUcsQ0FBQyxDQUFFLENBQUMsRUFBRTtNQUMzSEosSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBQUk7TUFDbEJLLFFBQVEsRUFBRVY7SUFDWixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNXLFFBQVEsQ0FBRUMsaUJBQWtCLENBQUM7SUFDbEMsTUFBTUUsa0JBQWtCLEdBQUcsSUFBSXZCLElBQUksQ0FBRUgsV0FBVyxDQUFDbUIsTUFBTSxDQUFFYiwyQkFBMkIsRUFBRVMsVUFBVSxDQUFDWSxxQkFBcUIsQ0FBQ04sR0FBRyxDQUFDLENBQUUsQ0FBQyxFQUFFO01BQzlISixJQUFJLEVBQUVELE9BQU8sQ0FBQ0MsSUFBSTtNQUNsQkssUUFBUSxFQUFFVjtJQUNaLENBQUUsQ0FBQztJQUNILElBQUksQ0FBQ1csUUFBUSxDQUFFRyxrQkFBbUIsQ0FBQzs7SUFFbkM7SUFDQSxNQUFNRSxnQkFBZ0IsR0FBR1YsZ0JBQWdCLENBQUNXLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4RFgsZ0JBQWdCLENBQUNZLElBQUksR0FBRyxDQUFDO0lBQ3pCWixnQkFBZ0IsQ0FBQ2EsR0FBRyxHQUFHLENBQUM7SUFDeEJQLGlCQUFpQixDQUFDTSxJQUFJLEdBQUcsQ0FBQztJQUMxQk4saUJBQWlCLENBQUNPLEdBQUcsR0FBR2IsZ0JBQWdCLENBQUNjLE1BQU0sR0FBR0osZ0JBQWdCO0lBQ2xFRixrQkFBa0IsQ0FBQ0ksSUFBSSxHQUFHLENBQUM7SUFDM0JKLGtCQUFrQixDQUFDSyxHQUFHLEdBQUdQLGlCQUFpQixDQUFDUSxNQUFNLEdBQUdKLGdCQUFnQjtFQUN0RTtBQUNGO0FBRUF4QixXQUFXLENBQUM2QixRQUFRLENBQUUsb0JBQW9CLEVBQUVwQixrQkFBbUIsQ0FBQztBQUVoRSxlQUFlQSxrQkFBa0IifQ==