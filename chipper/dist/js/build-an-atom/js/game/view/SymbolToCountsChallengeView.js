// Copyright 2013-2023, University of Colorado Boulder

/**
 * View for game challenges where the user is presented with a chemical symbol
 * including atomic number, mass number, and charge, and needs to determine
 * the number of protons, neutrons, and electrons that comprise the atom.
 *
 * @author John Blanco
 */

import buildAnAtom from '../../buildAnAtom.js';
import ChallengeView from './ChallengeView.js';
import InteractiveParticleCountsNode from './InteractiveParticleCountsNode.js';
import InteractiveSymbolNode from './InteractiveSymbolNode.js';
class SymbolToCountsChallengeView extends ChallengeView {
  /**
   * @param {SymbolToCountsChallenge} symbolToCountsChallenge
   * @param {Bounds2} layoutBounds
   * @param {Tandem} tandem
   */
  constructor(symbolToCountsChallenge, layoutBounds, tandem) {
    super(symbolToCountsChallenge, layoutBounds, tandem);
    this.interactiveParticleCountsNode = new InteractiveParticleCountsNode(tandem);

    // Add interactive particle count.
    this.interactiveAnswerNode.addChild(this.interactiveParticleCountsNode);

    // Symbol
    const interactiveSymbolNode = new InteractiveSymbolNode(symbolToCountsChallenge.answerAtom, tandem.createTandem('interactiveSymbolNode'));
    interactiveSymbolNode.scale(0.75);
    this.challengePresentationNode.addChild(interactiveSymbolNode);

    // Layout
    interactiveSymbolNode.centerX = layoutBounds.width * 0.25;
    interactiveSymbolNode.centerY = layoutBounds.height * 0.54;
    this.interactiveParticleCountsNode.centerX = layoutBounds.width * 0.75;
    this.interactiveParticleCountsNode.centerY = layoutBounds.height * 0.49;

    // @private called by dispose
    this.disposeSymbolToCountsChallengeView = function () {
      interactiveSymbolNode.dispose();
      this.interactiveParticleCountsNode.dispose();
    };
  }

  // @public
  checkAnswer() {
    this.challenge.checkAnswer(this.interactiveParticleCountsNode.numberAtom);
  }

  // @public
  displayCorrectAnswer() {
    this.interactiveParticleCountsNode.numberAtom.protonCountProperty.set(this.challenge.answerAtom.protonCountProperty.get());
    this.interactiveParticleCountsNode.numberAtom.neutronCountProperty.set(this.challenge.answerAtom.neutronCountProperty.get());
    this.interactiveParticleCountsNode.numberAtom.electronCountProperty.set(this.challenge.answerAtom.electronCountProperty.get());
  }

  /**
   * release references
   * @public
   */
  dispose() {
    this.disposeSymbolToCountsChallengeView();
    super.dispose();
  }
}
buildAnAtom.register('SymbolToCountsChallengeView', SymbolToCountsChallengeView);
export default SymbolToCountsChallengeView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFuQXRvbSIsIkNoYWxsZW5nZVZpZXciLCJJbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZSIsIkludGVyYWN0aXZlU3ltYm9sTm9kZSIsIlN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldyIsImNvbnN0cnVjdG9yIiwic3ltYm9sVG9Db3VudHNDaGFsbGVuZ2UiLCJsYXlvdXRCb3VuZHMiLCJ0YW5kZW0iLCJpbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZSIsImludGVyYWN0aXZlQW5zd2VyTm9kZSIsImFkZENoaWxkIiwiaW50ZXJhY3RpdmVTeW1ib2xOb2RlIiwiYW5zd2VyQXRvbSIsImNyZWF0ZVRhbmRlbSIsInNjYWxlIiwiY2hhbGxlbmdlUHJlc2VudGF0aW9uTm9kZSIsImNlbnRlclgiLCJ3aWR0aCIsImNlbnRlclkiLCJoZWlnaHQiLCJkaXNwb3NlU3ltYm9sVG9Db3VudHNDaGFsbGVuZ2VWaWV3IiwiZGlzcG9zZSIsImNoZWNrQW5zd2VyIiwiY2hhbGxlbmdlIiwibnVtYmVyQXRvbSIsImRpc3BsYXlDb3JyZWN0QW5zd2VyIiwicHJvdG9uQ291bnRQcm9wZXJ0eSIsInNldCIsImdldCIsIm5ldXRyb25Db3VudFByb3BlcnR5IiwiZWxlY3Ryb25Db3VudFByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTeW1ib2xUb0NvdW50c0NoYWxsZW5nZVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgZ2FtZSBjaGFsbGVuZ2VzIHdoZXJlIHRoZSB1c2VyIGlzIHByZXNlbnRlZCB3aXRoIGEgY2hlbWljYWwgc3ltYm9sXHJcbiAqIGluY2x1ZGluZyBhdG9taWMgbnVtYmVyLCBtYXNzIG51bWJlciwgYW5kIGNoYXJnZSwgYW5kIG5lZWRzIHRvIGRldGVybWluZVxyXG4gKiB0aGUgbnVtYmVyIG9mIHByb3RvbnMsIG5ldXRyb25zLCBhbmQgZWxlY3Ryb25zIHRoYXQgY29tcHJpc2UgdGhlIGF0b20uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgYnVpbGRBbkF0b20gZnJvbSAnLi4vLi4vYnVpbGRBbkF0b20uanMnO1xyXG5pbXBvcnQgQ2hhbGxlbmdlVmlldyBmcm9tICcuL0NoYWxsZW5nZVZpZXcuanMnO1xyXG5pbXBvcnQgSW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUgZnJvbSAnLi9JbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZS5qcyc7XHJcbmltcG9ydCBJbnRlcmFjdGl2ZVN5bWJvbE5vZGUgZnJvbSAnLi9JbnRlcmFjdGl2ZVN5bWJvbE5vZGUuanMnO1xyXG5cclxuY2xhc3MgU3ltYm9sVG9Db3VudHNDaGFsbGVuZ2VWaWV3IGV4dGVuZHMgQ2hhbGxlbmdlVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7U3ltYm9sVG9Db3VudHNDaGFsbGVuZ2V9IHN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHNcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlLCBsYXlvdXRCb3VuZHMsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggc3ltYm9sVG9Db3VudHNDaGFsbGVuZ2UsIGxheW91dEJvdW5kcywgdGFuZGVtICk7XHJcblxyXG4gICAgdGhpcy5pbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZSA9IG5ldyBJbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZSggdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQWRkIGludGVyYWN0aXZlIHBhcnRpY2xlIGNvdW50LlxyXG4gICAgdGhpcy5pbnRlcmFjdGl2ZUFuc3dlck5vZGUuYWRkQ2hpbGQoIHRoaXMuaW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUgKTtcclxuXHJcbiAgICAvLyBTeW1ib2xcclxuICAgIGNvbnN0IGludGVyYWN0aXZlU3ltYm9sTm9kZSA9IG5ldyBJbnRlcmFjdGl2ZVN5bWJvbE5vZGUoXHJcbiAgICAgIHN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlLmFuc3dlckF0b20sXHJcbiAgICAgIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdpbnRlcmFjdGl2ZVN5bWJvbE5vZGUnIClcclxuICAgICk7XHJcbiAgICBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUuc2NhbGUoIDAuNzUgKTtcclxuICAgIHRoaXMuY2hhbGxlbmdlUHJlc2VudGF0aW9uTm9kZS5hZGRDaGlsZCggaW50ZXJhY3RpdmVTeW1ib2xOb2RlICk7XHJcblxyXG4gICAgLy8gTGF5b3V0XHJcbiAgICBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUuY2VudGVyWCA9IGxheW91dEJvdW5kcy53aWR0aCAqIDAuMjU7XHJcbiAgICBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUuY2VudGVyWSA9IGxheW91dEJvdW5kcy5oZWlnaHQgKiAwLjU0O1xyXG4gICAgdGhpcy5pbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZS5jZW50ZXJYID0gbGF5b3V0Qm91bmRzLndpZHRoICogMC43NTtcclxuICAgIHRoaXMuaW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUuY2VudGVyWSA9IGxheW91dEJvdW5kcy5oZWlnaHQgKiAwLjQ5O1xyXG5cclxuICAgIC8vIEBwcml2YXRlIGNhbGxlZCBieSBkaXNwb3NlXHJcbiAgICB0aGlzLmRpc3Bvc2VTeW1ib2xUb0NvdW50c0NoYWxsZW5nZVZpZXcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaW50ZXJhY3RpdmVTeW1ib2xOb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5pbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZS5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGNoZWNrQW5zd2VyKCkge1xyXG4gICAgdGhpcy5jaGFsbGVuZ2UuY2hlY2tBbnN3ZXIoIHRoaXMuaW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUubnVtYmVyQXRvbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gQHB1YmxpY1xyXG4gIGRpc3BsYXlDb3JyZWN0QW5zd2VyKCkge1xyXG4gICAgdGhpcy5pbnRlcmFjdGl2ZVBhcnRpY2xlQ291bnRzTm9kZS5udW1iZXJBdG9tLnByb3RvbkNvdW50UHJvcGVydHkuc2V0KCB0aGlzLmNoYWxsZW5nZS5hbnN3ZXJBdG9tLnByb3RvbkNvdW50UHJvcGVydHkuZ2V0KCkgKTtcclxuICAgIHRoaXMuaW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUubnVtYmVyQXRvbS5uZXV0cm9uQ291bnRQcm9wZXJ0eS5zZXQoIHRoaXMuY2hhbGxlbmdlLmFuc3dlckF0b20ubmV1dHJvbkNvdW50UHJvcGVydHkuZ2V0KCkgKTtcclxuICAgIHRoaXMuaW50ZXJhY3RpdmVQYXJ0aWNsZUNvdW50c05vZGUubnVtYmVyQXRvbS5lbGVjdHJvbkNvdW50UHJvcGVydHkuc2V0KCB0aGlzLmNoYWxsZW5nZS5hbnN3ZXJBdG9tLmVsZWN0cm9uQ291bnRQcm9wZXJ0eS5nZXQoKSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVsZWFzZSByZWZlcmVuY2VzXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTeW1ib2xUb0NvdW50c0NoYWxsZW5nZVZpZXcoKTtcclxuXHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFuQXRvbS5yZWdpc3RlciggJ1N5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldycsIFN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sVG9Db3VudHNDaGFsbGVuZ2VWaWV3OyJdLCJtYXBwaW5ncyI6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