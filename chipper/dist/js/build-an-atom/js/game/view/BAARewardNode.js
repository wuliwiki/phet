// Copyright 2016-2021, University of Colorado Boulder

/**
 * The reward that is displayed when a game is completed with a perfect score. For testing, the simulation can be run
 * with the 'reward' query parameter to show the reward at the end of every game, regardless of score.
 *
 * @author Aadish Gupta
 */

import dotRandom from '../../../../dot/js/dotRandom.js';
import FaceNode from '../../../../scenery-phet/js/FaceNode.js';
import AtomIdentifier from '../../../../shred/js/AtomIdentifier.js';
import NumberAtom from '../../../../shred/js/model/NumberAtom.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import RewardNode from '../../../../vegas/js/RewardNode.js';
import buildAnAtom from '../../buildAnAtom.js';
import InteractiveSymbolNode from './InteractiveSymbolNode.js';

// constants
const NUMBER_OF_NODES = 75;
const NUMBER_OF_SYMBOL_NODES = 5;
const FACE_DIAMETER = 40;
const MIN_CHILD_NODE_WIDTH = 40;
const MAX_CHILD_NODE_WIDTH = MIN_CHILD_NODE_WIDTH * 2;
class BAARewardNode extends RewardNode {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    const nodes = createNodes(tandem);
    super({
      nodes: nodes
    });

    // @private
    this.disposeBAARewardNode = () => {
      nodes.forEach(node => {
        !node.isDisposed && node.dispose();
      });
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeBAARewardNode();
    super.dispose();
  }
}

// @private
function createRandomStableAtom() {
  const atomicNumber = 1 + dotRandom.nextInt(18); // Limit to Argon, since that's as high as translations go.
  return new NumberAtom({
    protonCount: atomicNumber,
    neutronCount: AtomIdentifier.getNumNeutronsInMostCommonIsotope(atomicNumber),
    electronCount: atomicNumber
  });
}

// @public
function createNodes(tandem) {
  const nodes = [];
  for (let i = 0; i < NUMBER_OF_SYMBOL_NODES; i++) {
    const interactiveSymbolNode = new InteractiveSymbolNode(createRandomStableAtom(), Tandem.OPT_OUT);
    interactiveSymbolNode.scale((MIN_CHILD_NODE_WIDTH + dotRandom.nextDouble() * (MAX_CHILD_NODE_WIDTH - MIN_CHILD_NODE_WIDTH)) / interactiveSymbolNode.width);
    nodes.push(interactiveSymbolNode);
  }
  const faceNode = new FaceNode(FACE_DIAMETER);
  nodes.push(faceNode);
  return RewardNode.createRandomNodes(nodes, NUMBER_OF_NODES);
}
buildAnAtom.register('BAARewardNode', BAARewardNode);
export default BAARewardNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJGYWNlTm9kZSIsIkF0b21JZGVudGlmaWVyIiwiTnVtYmVyQXRvbSIsIlRhbmRlbSIsIlJld2FyZE5vZGUiLCJidWlsZEFuQXRvbSIsIkludGVyYWN0aXZlU3ltYm9sTm9kZSIsIk5VTUJFUl9PRl9OT0RFUyIsIk5VTUJFUl9PRl9TWU1CT0xfTk9ERVMiLCJGQUNFX0RJQU1FVEVSIiwiTUlOX0NISUxEX05PREVfV0lEVEgiLCJNQVhfQ0hJTERfTk9ERV9XSURUSCIsIkJBQVJld2FyZE5vZGUiLCJjb25zdHJ1Y3RvciIsInRhbmRlbSIsIm5vZGVzIiwiY3JlYXRlTm9kZXMiLCJkaXNwb3NlQkFBUmV3YXJkTm9kZSIsImZvckVhY2giLCJub2RlIiwiaXNEaXNwb3NlZCIsImRpc3Bvc2UiLCJjcmVhdGVSYW5kb21TdGFibGVBdG9tIiwiYXRvbWljTnVtYmVyIiwibmV4dEludCIsInByb3RvbkNvdW50IiwibmV1dHJvbkNvdW50IiwiZ2V0TnVtTmV1dHJvbnNJbk1vc3RDb21tb25Jc290b3BlIiwiZWxlY3Ryb25Db3VudCIsImkiLCJpbnRlcmFjdGl2ZVN5bWJvbE5vZGUiLCJPUFRfT1VUIiwic2NhbGUiLCJuZXh0RG91YmxlIiwid2lkdGgiLCJwdXNoIiwiZmFjZU5vZGUiLCJjcmVhdGVSYW5kb21Ob2RlcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQkFBUmV3YXJkTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgcmV3YXJkIHRoYXQgaXMgZGlzcGxheWVkIHdoZW4gYSBnYW1lIGlzIGNvbXBsZXRlZCB3aXRoIGEgcGVyZmVjdCBzY29yZS4gRm9yIHRlc3RpbmcsIHRoZSBzaW11bGF0aW9uIGNhbiBiZSBydW5cclxuICogd2l0aCB0aGUgJ3Jld2FyZCcgcXVlcnkgcGFyYW1ldGVyIHRvIHNob3cgdGhlIHJld2FyZCBhdCB0aGUgZW5kIG9mIGV2ZXJ5IGdhbWUsIHJlZ2FyZGxlc3Mgb2Ygc2NvcmUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQWFkaXNoIEd1cHRhXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IEZhY2VOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9GYWNlTm9kZS5qcyc7XHJcbmltcG9ydCBBdG9tSWRlbnRpZmllciBmcm9tICcuLi8uLi8uLi8uLi9zaHJlZC9qcy9BdG9tSWRlbnRpZmllci5qcyc7XHJcbmltcG9ydCBOdW1iZXJBdG9tIGZyb20gJy4uLy4uLy4uLy4uL3NocmVkL2pzL21vZGVsL051bWJlckF0b20uanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUmV3YXJkTm9kZSBmcm9tICcuLi8uLi8uLi8uLi92ZWdhcy9qcy9SZXdhcmROb2RlLmpzJztcclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uLy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IEludGVyYWN0aXZlU3ltYm9sTm9kZSBmcm9tICcuL0ludGVyYWN0aXZlU3ltYm9sTm9kZS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgTlVNQkVSX09GX05PREVTID0gNzU7XHJcbmNvbnN0IE5VTUJFUl9PRl9TWU1CT0xfTk9ERVMgPSA1O1xyXG5jb25zdCBGQUNFX0RJQU1FVEVSID0gNDA7XHJcbmNvbnN0IE1JTl9DSElMRF9OT0RFX1dJRFRIID0gNDA7XHJcbmNvbnN0IE1BWF9DSElMRF9OT0RFX1dJRFRIID0gTUlOX0NISUxEX05PREVfV0lEVEggKiAyO1xyXG5cclxuY2xhc3MgQkFBUmV3YXJkTm9kZSBleHRlbmRzIFJld2FyZE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhbmRlbSApIHtcclxuICAgIGNvbnN0IG5vZGVzID0gY3JlYXRlTm9kZXMoIHRhbmRlbSApO1xyXG4gICAgc3VwZXIoIHsgbm9kZXM6IG5vZGVzIH0gKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZVxyXG4gICAgdGhpcy5kaXNwb3NlQkFBUmV3YXJkTm9kZSA9ICgpID0+IHtcclxuICAgICAgbm9kZXMuZm9yRWFjaCggbm9kZSA9PiB7XHJcbiAgICAgICAgIW5vZGUuaXNEaXNwb3NlZCAmJiBub2RlLmRpc3Bvc2UoKTtcclxuICAgICAgfSApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlQkFBUmV3YXJkTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQHByaXZhdGVcclxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tU3RhYmxlQXRvbSgpIHtcclxuICBjb25zdCBhdG9taWNOdW1iZXIgPSAxICsgZG90UmFuZG9tLm5leHRJbnQoIDE4ICk7IC8vIExpbWl0IHRvIEFyZ29uLCBzaW5jZSB0aGF0J3MgYXMgaGlnaCBhcyB0cmFuc2xhdGlvbnMgZ28uXHJcbiAgcmV0dXJuIG5ldyBOdW1iZXJBdG9tKCB7XHJcbiAgICBwcm90b25Db3VudDogYXRvbWljTnVtYmVyLFxyXG4gICAgbmV1dHJvbkNvdW50OiBBdG9tSWRlbnRpZmllci5nZXROdW1OZXV0cm9uc0luTW9zdENvbW1vbklzb3RvcGUoIGF0b21pY051bWJlciApLFxyXG4gICAgZWxlY3Ryb25Db3VudDogYXRvbWljTnVtYmVyXHJcbiAgfSApO1xyXG59XHJcblxyXG4vLyBAcHVibGljXHJcbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzKCB0YW5kZW0gKSB7XHJcbiAgY29uc3Qgbm9kZXMgPSBbXTtcclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBOVU1CRVJfT0ZfU1lNQk9MX05PREVTOyBpKysgKSB7XHJcbiAgICBjb25zdCBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUgPSBuZXcgSW50ZXJhY3RpdmVTeW1ib2xOb2RlKCBjcmVhdGVSYW5kb21TdGFibGVBdG9tKCksIFRhbmRlbS5PUFRfT1VUICk7XHJcbiAgICBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUuc2NhbGUoICggTUlOX0NISUxEX05PREVfV0lEVEggK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdFJhbmRvbS5uZXh0RG91YmxlKCkgKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggTUFYX0NISUxEX05PREVfV0lEVEggLSBNSU5fQ0hJTERfTk9ERV9XSURUSCApICkgL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGl2ZVN5bWJvbE5vZGUud2lkdGggKTtcclxuICAgIG5vZGVzLnB1c2goIGludGVyYWN0aXZlU3ltYm9sTm9kZSApO1xyXG4gIH1cclxuICBjb25zdCBmYWNlTm9kZSA9IG5ldyBGYWNlTm9kZSggRkFDRV9ESUFNRVRFUiApO1xyXG4gIG5vZGVzLnB1c2goIGZhY2VOb2RlICk7XHJcbiAgcmV0dXJuIFJld2FyZE5vZGUuY3JlYXRlUmFuZG9tTm9kZXMoIG5vZGVzLCBOVU1CRVJfT0ZfTk9ERVMgKTtcclxufVxyXG5cclxuYnVpbGRBbkF0b20ucmVnaXN0ZXIoICdCQUFSZXdhcmROb2RlJywgQkFBUmV3YXJkTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBCQUFSZXdhcmROb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsUUFBUSxNQUFNLHlDQUF5QztBQUM5RCxPQUFPQyxjQUFjLE1BQU0sd0NBQXdDO0FBQ25FLE9BQU9DLFVB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