// Copyright 2013-2023, University of Colorado Boulder

/**
 * Challenge where the user is presented with a set of counts for protons,
 * neutrons, and electrons, and must determine the overall charge.
 *
 * @author John Blanco
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import { RichText } from '../../../../scenery/js/imports.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import NumberAtom from '../../../../shred/js/model/NumberAtom.js';
import ShredConstants from '../../../../shred/js/ShredConstants.js';
import buildAnAtom from '../../buildAnAtom.js';
import BuildAnAtomStrings from '../../BuildAnAtomStrings.js';
import ChallengeView from './ChallengeView.js';
import NumberEntryNode from './NumberEntryNode.js';
import ParticleCountsNode from './ParticleCountsNode.js';
const whatIsTheTotalChargeString = BuildAnAtomStrings.whatIsTheTotalCharge;
class CountsToChargeChallengeView extends ChallengeView {
  /**
   * @param {CountsToChargeChallenge} countsToChargeChallenge
   * @param {Bounds2} layoutBounds
   * @param {Tandem} tandem
   */
  constructor(countsToChargeChallenge, layoutBounds, tandem) {
    super(countsToChargeChallenge, layoutBounds, tandem);

    // @private
    this.chargeAnswerProperty = new NumberProperty(0, {
      tandem: tandem.createTandem('chargeAnswerProperty'),
      numberType: 'Integer'
    });

    // Particle counts
    const particleCountsNode = new ParticleCountsNode(countsToChargeChallenge.answerAtom);
    this.challengePresentationNode.addChild(particleCountsNode);
    const questionPrompt = new RichText(whatIsTheTotalChargeString, {
      replaceNewlines: true,
      align: 'left',
      font: new PhetFont(24),
      maxWidth: 200,
      tandem: tandem.createTandem('questionPrompt')
    });
    this.interactiveAnswerNode.addChild(questionPrompt);

    // Node for entering the answer
    const numberEntryNode = new NumberEntryNode(this.chargeAnswerProperty, tandem.createTandem('numberEntryNode'), {
      showPlusForPositive: true,
      signAfterValue: false,
      getTextColor: ShredConstants.CHARGE_TEXT_COLOR,
      maxValue: 99,
      minValue: -99
    });
    this.interactiveAnswerNode.addChild(numberEntryNode);

    // Layout
    particleCountsNode.centerX = layoutBounds.width * 0.3;
    particleCountsNode.centerY = layoutBounds.height * 0.5;
    questionPrompt.centerX = layoutBounds.width * 0.65;
    questionPrompt.centerY = layoutBounds.height * 0.5;
    numberEntryNode.left = questionPrompt.right + 10;
    numberEntryNode.centerY = questionPrompt.centerY;

    // @private called by dispose
    this.disposeCountsToChargeChallengeView = function () {
      this.chargeAnswerProperty.dispose();
      questionPrompt.dispose();
      numberEntryNode.dispose();
    };
  }

  // @public
  checkAnswer() {
    const userSubmittedAnswer = new NumberAtom({
      protonCount: this.challenge.answerAtom.protonCountProperty.get(),
      neutronCount: this.challenge.answerAtom.neutronCountProperty.get(),
      electronCount: this.challenge.answerAtom.protonCountProperty.get() - this.chargeAnswerProperty.value
    });
    this.challenge.checkAnswer(userSubmittedAnswer);
  }

  // @public
  displayCorrectAnswer() {
    this.chargeAnswerProperty.value = this.challenge.answerAtom.chargeProperty.get();
  }

  /**
   * release references
   * @public
   */
  dispose() {
    this.disposeCountsToChargeChallengeView();
    super.dispose();
  }
}
buildAnAtom.register('CountsToChargeChallengeView', CountsToChargeChallengeView);
export default CountsToChargeChallengeView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsIlJpY2hUZXh0IiwiUGhldEZvbnQiLCJOdW1iZXJBdG9tIiwiU2hyZWRDb25zdGFudHMiLCJidWlsZEFuQXRvbSIsIkJ1aWxkQW5BdG9tU3RyaW5ncyIsIkNoYWxsZW5nZVZpZXciLCJOdW1iZXJFbnRyeU5vZGUiLCJQYXJ0aWNsZUNvdW50c05vZGUiLCJ3aGF0SXNUaGVUb3RhbENoYXJnZVN0cmluZyIsIndoYXRJc1RoZVRvdGFsQ2hhcmdlIiwiQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3IiwiY29uc3RydWN0b3IiLCJjb3VudHNUb0NoYXJnZUNoYWxsZW5nZSIsImxheW91dEJvdW5kcyIsInRhbmRlbSIsImNoYXJnZUFuc3dlclByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwibnVtYmVyVHlwZSIsInBhcnRpY2xlQ291bnRzTm9kZSIsImFuc3dlckF0b20iLCJjaGFsbGVuZ2VQcmVzZW50YXRpb25Ob2RlIiwiYWRkQ2hpbGQiLCJxdWVzdGlvblByb21wdCIsInJlcGxhY2VOZXdsaW5lcyIsImFsaWduIiwiZm9udCIsIm1heFdpZHRoIiwiaW50ZXJhY3RpdmVBbnN3ZXJOb2RlIiwibnVtYmVyRW50cnlOb2RlIiwic2hvd1BsdXNGb3JQb3NpdGl2ZSIsInNpZ25BZnRlclZhbHVlIiwiZ2V0VGV4dENvbG9yIiwiQ0hBUkdFX1RFWFRfQ09MT1IiLCJtYXhWYWx1ZSIsIm1pblZhbHVlIiwiY2VudGVyWCIsIndpZHRoIiwiY2VudGVyWSIsImhlaWdodCIsImxlZnQiLCJyaWdodCIsImRpc3Bvc2VDb3VudHNUb0NoYXJnZUNoYWxsZW5nZVZpZXciLCJkaXNwb3NlIiwiY2hlY2tBbnN3ZXIiLCJ1c2VyU3VibWl0dGVkQW5zd2VyIiwicHJvdG9uQ291bnQiLCJjaGFsbGVuZ2UiLCJwcm90b25Db3VudFByb3BlcnR5IiwiZ2V0IiwibmV1dHJvbkNvdW50IiwibmV1dHJvbkNvdW50UHJvcGVydHkiLCJlbGVjdHJvbkNvdW50IiwidmFsdWUiLCJkaXNwbGF5Q29ycmVjdEFuc3dlciIsImNoYXJnZVByb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb3VudHNUb0NoYXJnZUNoYWxsZW5nZVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ2hhbGxlbmdlIHdoZXJlIHRoZSB1c2VyIGlzIHByZXNlbnRlZCB3aXRoIGEgc2V0IG9mIGNvdW50cyBmb3IgcHJvdG9ucyxcclxuICogbmV1dHJvbnMsIGFuZCBlbGVjdHJvbnMsIGFuZCBtdXN0IGRldGVybWluZSB0aGUgb3ZlcmFsbCBjaGFyZ2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IFJpY2hUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBOdW1iZXJBdG9tIGZyb20gJy4uLy4uLy4uLy4uL3NocmVkL2pzL21vZGVsL051bWJlckF0b20uanMnO1xyXG5pbXBvcnQgU2hyZWRDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vLi4vc2hyZWQvanMvU2hyZWRDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgYnVpbGRBbkF0b20gZnJvbSAnLi4vLi4vYnVpbGRBbkF0b20uanMnO1xyXG5pbXBvcnQgQnVpbGRBbkF0b21TdHJpbmdzIGZyb20gJy4uLy4uL0J1aWxkQW5BdG9tU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBDaGFsbGVuZ2VWaWV3IGZyb20gJy4vQ2hhbGxlbmdlVmlldy5qcyc7XHJcbmltcG9ydCBOdW1iZXJFbnRyeU5vZGUgZnJvbSAnLi9OdW1iZXJFbnRyeU5vZGUuanMnO1xyXG5pbXBvcnQgUGFydGljbGVDb3VudHNOb2RlIGZyb20gJy4vUGFydGljbGVDb3VudHNOb2RlLmpzJztcclxuXHJcbmNvbnN0IHdoYXRJc1RoZVRvdGFsQ2hhcmdlU3RyaW5nID0gQnVpbGRBbkF0b21TdHJpbmdzLndoYXRJc1RoZVRvdGFsQ2hhcmdlO1xyXG5cclxuY2xhc3MgQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3IGV4dGVuZHMgQ2hhbGxlbmdlVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7Q291bnRzVG9DaGFyZ2VDaGFsbGVuZ2V9IGNvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHNcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlLCBsYXlvdXRCb3VuZHMsIHRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggY291bnRzVG9DaGFyZ2VDaGFsbGVuZ2UsIGxheW91dEJvdW5kcywgdGFuZGVtICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuY2hhcmdlQW5zd2VyUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnY2hhcmdlQW5zd2VyUHJvcGVydHknICksXHJcbiAgICAgIG51bWJlclR5cGU6ICdJbnRlZ2VyJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFBhcnRpY2xlIGNvdW50c1xyXG4gICAgY29uc3QgcGFydGljbGVDb3VudHNOb2RlID0gbmV3IFBhcnRpY2xlQ291bnRzTm9kZSggY291bnRzVG9DaGFyZ2VDaGFsbGVuZ2UuYW5zd2VyQXRvbSApO1xyXG4gICAgdGhpcy5jaGFsbGVuZ2VQcmVzZW50YXRpb25Ob2RlLmFkZENoaWxkKCBwYXJ0aWNsZUNvdW50c05vZGUgKTtcclxuXHJcbiAgICBjb25zdCBxdWVzdGlvblByb21wdCA9IG5ldyBSaWNoVGV4dCggd2hhdElzVGhlVG90YWxDaGFyZ2VTdHJpbmcsIHtcclxuICAgICAgcmVwbGFjZU5ld2xpbmVzOiB0cnVlLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDI0ICksXHJcbiAgICAgIG1heFdpZHRoOiAyMDAsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3F1ZXN0aW9uUHJvbXB0JyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmludGVyYWN0aXZlQW5zd2VyTm9kZS5hZGRDaGlsZCggcXVlc3Rpb25Qcm9tcHQgKTtcclxuXHJcbiAgICAvLyBOb2RlIGZvciBlbnRlcmluZyB0aGUgYW5zd2VyXHJcbiAgICBjb25zdCBudW1iZXJFbnRyeU5vZGUgPSBuZXcgTnVtYmVyRW50cnlOb2RlKFxyXG4gICAgICB0aGlzLmNoYXJnZUFuc3dlclByb3BlcnR5LFxyXG4gICAgICB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbnVtYmVyRW50cnlOb2RlJyApLCB7XHJcbiAgICAgICAgc2hvd1BsdXNGb3JQb3NpdGl2ZTogdHJ1ZSxcclxuICAgICAgICBzaWduQWZ0ZXJWYWx1ZTogZmFsc2UsXHJcbiAgICAgICAgZ2V0VGV4dENvbG9yOiBTaHJlZENvbnN0YW50cy5DSEFSR0VfVEVYVF9DT0xPUixcclxuICAgICAgICBtYXhWYWx1ZTogOTksXHJcbiAgICAgICAgbWluVmFsdWU6IC05OVxyXG4gICAgICB9ICk7XHJcbiAgICB0aGlzLmludGVyYWN0aXZlQW5zd2VyTm9kZS5hZGRDaGlsZCggbnVtYmVyRW50cnlOb2RlICk7XHJcblxyXG4gICAgLy8gTGF5b3V0XHJcbiAgICBwYXJ0aWNsZUNvdW50c05vZGUuY2VudGVyWCA9IGxheW91dEJvdW5kcy53aWR0aCAqIDAuMztcclxuICAgIHBhcnRpY2xlQ291bnRzTm9kZS5jZW50ZXJZID0gbGF5b3V0Qm91bmRzLmhlaWdodCAqIDAuNTtcclxuICAgIHF1ZXN0aW9uUHJvbXB0LmNlbnRlclggPSBsYXlvdXRCb3VuZHMud2lkdGggKiAwLjY1O1xyXG4gICAgcXVlc3Rpb25Qcm9tcHQuY2VudGVyWSA9IGxheW91dEJvdW5kcy5oZWlnaHQgKiAwLjU7XHJcbiAgICBudW1iZXJFbnRyeU5vZGUubGVmdCA9IHF1ZXN0aW9uUHJvbXB0LnJpZ2h0ICsgMTA7XHJcbiAgICBudW1iZXJFbnRyeU5vZGUuY2VudGVyWSA9IHF1ZXN0aW9uUHJvbXB0LmNlbnRlclk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUgY2FsbGVkIGJ5IGRpc3Bvc2VcclxuICAgIHRoaXMuZGlzcG9zZUNvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlVmlldyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmNoYXJnZUFuc3dlclByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgcXVlc3Rpb25Qcm9tcHQuZGlzcG9zZSgpO1xyXG4gICAgICBudW1iZXJFbnRyeU5vZGUuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWNcclxuICBjaGVja0Fuc3dlcigpIHtcclxuICAgIGNvbnN0IHVzZXJTdWJtaXR0ZWRBbnN3ZXIgPSBuZXcgTnVtYmVyQXRvbSgge1xyXG4gICAgICBwcm90b25Db3VudDogdGhpcy5jaGFsbGVuZ2UuYW5zd2VyQXRvbS5wcm90b25Db3VudFByb3BlcnR5LmdldCgpLFxyXG4gICAgICBuZXV0cm9uQ291bnQ6IHRoaXMuY2hhbGxlbmdlLmFuc3dlckF0b20ubmV1dHJvbkNvdW50UHJvcGVydHkuZ2V0KCksXHJcbiAgICAgIGVsZWN0cm9uQ291bnQ6IHRoaXMuY2hhbGxlbmdlLmFuc3dlckF0b20ucHJvdG9uQ291bnRQcm9wZXJ0eS5nZXQoKSAtIHRoaXMuY2hhcmdlQW5zd2VyUHJvcGVydHkudmFsdWVcclxuICAgIH0gKTtcclxuICAgIHRoaXMuY2hhbGxlbmdlLmNoZWNrQW5zd2VyKCB1c2VyU3VibWl0dGVkQW5zd2VyICk7XHJcbiAgfVxyXG5cclxuICAvLyBAcHVibGljXHJcbiAgZGlzcGxheUNvcnJlY3RBbnN3ZXIoKSB7XHJcbiAgICB0aGlzLmNoYXJnZUFuc3dlclByb3BlcnR5LnZhbHVlID0gdGhpcy5jaGFsbGVuZ2UuYW5zd2VyQXRvbS5jaGFyZ2VQcm9wZXJ0eS5nZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlbGVhc2UgcmVmZXJlbmNlc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3KCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFuQXRvbS5yZWdpc3RlciggJ0NvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlVmlldycsIENvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlVmlldyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsU0FBU0MsUUFBUSxRQUFRLG1DQUFtQztBQUM1RCxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLFVBQVUsTUFBTSwwQ0FBMEM7QUFDakUsT0FBT0MsY0FBYyxNQUFNLHdDQUF3QztBQUNuRSxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGtCQUFrQixNQUFNLDZCQUE2QjtBQUM1RCxPQUFPQyxhQUFhLE1BQU0sb0JBQW9CO0FBQzlDLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFDbEQsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBRXhELE1BQU1DLDBCQUEwQixHQUFHSixrQkFBa0IsQ0FBQ0ssb0JBQW9CO0FBRTFFLE1BQU1DLDJC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