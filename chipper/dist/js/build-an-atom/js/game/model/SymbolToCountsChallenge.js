// Copyright 2017-2021, University of Colorado Boulder

/**
 * Type for game challenges where the user is presented with a chemical symbol
 * including atomic number, mass number, and charge, and needs to determine
 * the number of protons, neutrons, and electrons that comprise the atom.
 *
 * @author John Blanco
 */

import buildAnAtom from '../../buildAnAtom.js';
import SymbolToCountsChallengeView from '../view/SymbolToCountsChallengeView.js';
import BAAGameChallenge from './BAAGameChallenge.js';
class SymbolToCountsChallenge extends BAAGameChallenge {
  /**
   * @param {GameModel} buildAnAtomGameModel
   * @param {NumberAtom} answerAtom
   * @param {string} challengeType
   * @param {Tandem} tandem
   */
  constructor(buildAnAtomGameModel, answerAtom, challengeType, tandem) {
    super(buildAnAtomGameModel, answerAtom, challengeType, tandem);
  }

  /**
   * Create the view needed to visual represent this challenge.
   * @param {Bounds2} layoutBounds
   * @param {Tandem} tandem
   * @returns {CountsToChargeChallengeView}
   * @public
   */
  createView(layoutBounds, tandem) {
    return new SymbolToCountsChallengeView(this, layoutBounds, tandem.createTandem('symbolToCountsChallengeView'));
  }
}
buildAnAtom.register('SymbolToCountsChallenge', SymbolToCountsChallenge);
export default SymbolToCountsChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFuQXRvbSIsIlN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldyIsIkJBQUdhbWVDaGFsbGVuZ2UiLCJTeW1ib2xUb0NvdW50c0NoYWxsZW5nZSIsImNvbnN0cnVjdG9yIiwiYnVpbGRBbkF0b21HYW1lTW9kZWwiLCJhbnN3ZXJBdG9tIiwiY2hhbGxlbmdlVHlwZSIsInRhbmRlbSIsImNyZWF0ZVZpZXciLCJsYXlvdXRCb3VuZHMiLCJjcmVhdGVUYW5kZW0iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIGdhbWUgY2hhbGxlbmdlcyB3aGVyZSB0aGUgdXNlciBpcyBwcmVzZW50ZWQgd2l0aCBhIGNoZW1pY2FsIHN5bWJvbFxyXG4gKiBpbmNsdWRpbmcgYXRvbWljIG51bWJlciwgbWFzcyBudW1iZXIsIGFuZCBjaGFyZ2UsIGFuZCBuZWVkcyB0byBkZXRlcm1pbmVcclxuICogdGhlIG51bWJlciBvZiBwcm90b25zLCBuZXV0cm9ucywgYW5kIGVsZWN0cm9ucyB0aGF0IGNvbXByaXNlIHRoZSBhdG9tLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uLy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IFN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldyBmcm9tICcuLi92aWV3L1N5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldy5qcyc7XHJcbmltcG9ydCBCQUFHYW1lQ2hhbGxlbmdlIGZyb20gJy4vQkFBR2FtZUNoYWxsZW5nZS5qcyc7XHJcblxyXG5jbGFzcyBTeW1ib2xUb0NvdW50c0NoYWxsZW5nZSBleHRlbmRzIEJBQUdhbWVDaGFsbGVuZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0dhbWVNb2RlbH0gYnVpbGRBbkF0b21HYW1lTW9kZWxcclxuICAgKiBAcGFyYW0ge051bWJlckF0b219IGFuc3dlckF0b21cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbGxlbmdlVHlwZVxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggYnVpbGRBbkF0b21HYW1lTW9kZWwsIGFuc3dlckF0b20sIGNoYWxsZW5nZVR5cGUsIHRhbmRlbSApIHtcclxuICAgIHN1cGVyKCBidWlsZEFuQXRvbUdhbWVNb2RlbCwgYW5zd2VyQXRvbSwgY2hhbGxlbmdlVHlwZSwgdGFuZGVtICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgdGhlIHZpZXcgbmVlZGVkIHRvIHZpc3VhbCByZXByZXNlbnQgdGhpcyBjaGFsbGVuZ2UuXHJcbiAgICogQHBhcmFtIHtCb3VuZHMyfSBsYXlvdXRCb3VuZHNcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICogQHJldHVybnMge0NvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlVmlld31cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgY3JlYXRlVmlldyggbGF5b3V0Qm91bmRzLCB0YW5kZW0gKSB7XHJcbiAgICByZXR1cm4gbmV3IFN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlVmlldyggdGhpcywgbGF5b3V0Qm91bmRzLCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ltYm9sVG9Db3VudHNDaGFsbGVuZ2VWaWV3JyApICk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFuQXRvbS5yZWdpc3RlciggJ1N5bWJvbFRvQ291bnRzQ2hhbGxlbmdlJywgU3ltYm9sVG9Db3VudHNDaGFsbGVuZ2UgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN5bWJvbFRvQ291bnRzQ2hhbGxlbmdlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQywyQkFBMkIsTUFBTSx3Q0FBd0M7QUFDaEYsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBELE1BQU1DLHVCQUF1QixTQUFTRCxnQkFBZ0IsQ0FBQztFQUVyRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUc7SUFDckUsS0FBSyxDQUFFSCxvQkFBb0IsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLE1BQU8sQ0FBQztFQUNsRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxVQUFVQSxDQUFFQyxZQUFZLEVBQUVGLE1BQU0sRUFBRztJQUNqQyxPQUFPLElBQUlQLDJCQUEyQixDQUFFLElBQUksRUFBRVMsWUFBWSxFQUFFRixNQUFNLENBQUNHLFlBQVksQ0FBRSw2QkFBOEIsQ0FBRSxDQUFDO0VBQ3BIO0FBQ0Y7QUFFQVgsV0FBVyxDQUFDWSxRQUFRLENBQUUseUJBQXlCLEVBQUVULHVCQUF3QixDQUFDO0FBRTFFLGVBQWVBLHVCQUF1QiJ9