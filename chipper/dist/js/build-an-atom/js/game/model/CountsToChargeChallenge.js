// Copyright 2017-2021, University of Colorado Boulder

/**
 * Type for game challenges where the user is presented with a set of particle
 * counts for an atom and must determine the total charge.
 *
 * @author John Blanco
 */

import buildAnAtom from '../../buildAnAtom.js';
import CountsToChargeChallengeView from '../view/CountsToChargeChallengeView.js';
import BAAGameChallenge from './BAAGameChallenge.js';
class CountsToChargeChallenge extends BAAGameChallenge {
  /**
   * @param {GameModel} buildAnAtomGameModel
   * @param {NumberAtom} answerAtom
   * @param {string} challengeType
   * @param {Tandem} tandem
   */
  constructor(buildAnAtomGameModel, answerAtom, challengeType, tandem) {
    super(buildAnAtomGameModel, answerAtom, challengeType, tandem);
  }

  /**
   * Create the view needed to visual represent this challenge.
   * @param {Bounds2} layoutBounds
   * @param {Tandem} tandem
   * @returns {CountsToChargeChallengeView}
   * @public
   */
  createView(layoutBounds, tandem) {
    return new CountsToChargeChallengeView(this, layoutBounds, tandem.createTandem('countsToChargeChallengeView'));
  }
}
buildAnAtom.register('CountsToChargeChallenge', CountsToChargeChallenge);
export default CountsToChargeChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFuQXRvbSIsIkNvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlVmlldyIsIkJBQUdhbWVDaGFsbGVuZ2UiLCJDb3VudHNUb0NoYXJnZUNoYWxsZW5nZSIsImNvbnN0cnVjdG9yIiwiYnVpbGRBbkF0b21HYW1lTW9kZWwiLCJhbnN3ZXJBdG9tIiwiY2hhbGxlbmdlVHlwZSIsInRhbmRlbSIsImNyZWF0ZVZpZXciLCJsYXlvdXRCb3VuZHMiLCJjcmVhdGVUYW5kZW0iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFR5cGUgZm9yIGdhbWUgY2hhbGxlbmdlcyB3aGVyZSB0aGUgdXNlciBpcyBwcmVzZW50ZWQgd2l0aCBhIHNldCBvZiBwYXJ0aWNsZVxyXG4gKiBjb3VudHMgZm9yIGFuIGF0b20gYW5kIG11c3QgZGV0ZXJtaW5lIHRoZSB0b3RhbCBjaGFyZ2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cclxuICovXHJcblxyXG5pbXBvcnQgYnVpbGRBbkF0b20gZnJvbSAnLi4vLi4vYnVpbGRBbkF0b20uanMnO1xyXG5pbXBvcnQgQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3IGZyb20gJy4uL3ZpZXcvQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3LmpzJztcclxuaW1wb3J0IEJBQUdhbWVDaGFsbGVuZ2UgZnJvbSAnLi9CQUFHYW1lQ2hhbGxlbmdlLmpzJztcclxuXHJcbmNsYXNzIENvdW50c1RvQ2hhcmdlQ2hhbGxlbmdlIGV4dGVuZHMgQkFBR2FtZUNoYWxsZW5nZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7R2FtZU1vZGVsfSBidWlsZEFuQXRvbUdhbWVNb2RlbFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyQXRvbX0gYW5zd2VyQXRvbVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFsbGVuZ2VUeXBlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBidWlsZEFuQXRvbUdhbWVNb2RlbCwgYW5zd2VyQXRvbSwgY2hhbGxlbmdlVHlwZSwgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoIGJ1aWxkQW5BdG9tR2FtZU1vZGVsLCBhbnN3ZXJBdG9tLCBjaGFsbGVuZ2VUeXBlLCB0YW5kZW0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB0aGUgdmlldyBuZWVkZWQgdG8gdmlzdWFsIHJlcHJlc2VudCB0aGlzIGNoYWxsZW5nZS5cclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IGxheW91dEJvdW5kc1xyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcmV0dXJucyB7Q291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3fVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjcmVhdGVWaWV3KCBsYXlvdXRCb3VuZHMsIHRhbmRlbSApIHtcclxuICAgIHJldHVybiBuZXcgQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3KCB0aGlzLCBsYXlvdXRCb3VuZHMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdjb3VudHNUb0NoYXJnZUNoYWxsZW5nZVZpZXcnICkgKTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQW5BdG9tLnJlZ2lzdGVyKCAnQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2UnLCBDb3VudHNUb0NoYXJnZUNoYWxsZW5nZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ291bnRzVG9DaGFyZ2VDaGFsbGVuZ2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQywyQkFBMkIsTUFBTSx3Q0FBd0M7QUFDaEYsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBELE1BQU1DLHVCQUF1QixTQUFTRCxnQkFBZ0IsQ0FBQztFQUVyRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUc7SUFDckUsS0FBSyxDQUFFSCxvQkFBb0IsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLE1BQU8sQ0FBQztFQUNsRTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxVQUFVQSxDQUFFQyxZQUFZLEVBQUVGLE1BQU0sRUFBRztJQUNqQyxPQUFPLElBQUlQLDJCQUEyQixDQUFFLElBQUksRUFBRVMsWUFBWSxFQUFFRixNQUFNLENBQUNHLFlBQVksQ0FBRSw2QkFBOEIsQ0FBRSxDQUFDO0VBQ3BIO0FBQ0Y7QUFFQVgsV0FBVyxDQUFDWSxRQUFRLENBQUUseUJBQXlCLEVBQUVULHVCQUF3QixDQUFDO0FBRTFFLGVBQWVBLHVCQUF1QiJ9