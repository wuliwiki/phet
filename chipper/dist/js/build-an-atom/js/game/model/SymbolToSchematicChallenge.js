// Copyright 2013-2021, University of Colorado Boulder

/**
 * Type for game challenges where the user is presented with a chemical symbol
 * including atomic number, mass number, and charge, and needs to construct
 * the equivalent atom from buckets of protons, neutrons, and electrons.
 *
 * @author John Blanco
 */

import buildAnAtom from '../../buildAnAtom.js';
import BuildAnAtomModel from '../../common/model/BuildAnAtomModel.js';
import SymbolToSchematicChallengeView from '../view/SymbolToSchematicChallengeView.js';
import BAAGameChallenge from './BAAGameChallenge.js';
class SymbolToSchematicChallenge extends BAAGameChallenge {
  /**
   * @param {GameMode} buildAnAtomGameModel
   * @param {NumberAtom} answerAtom
   * @param {string} challengeType
   * @param {Tandem} tandem
   */
  constructor(buildAnAtomGameModel, answerAtom, challengeType, tandem) {
    super(buildAnAtomGameModel, answerAtom, challengeType, tandem);

    // This challenge is a bit unique in that it has a model of an atom with
    // which the user can interact. We want to keep this model out of the state
    this.buildAnAtomModel = new BuildAnAtomModel(tandem.createTandem('buildAnAtomModel'), {
      phetioState: false
    });
    this.buildAnAtomModel.showElementNameProperty.set(false);
    this.buildAnAtomModel.showNeutralOrIonProperty.set(false);
    this.buildAnAtomModel.showStableOrUnstableProperty.set(false);
  }

  /**
   * release references
   * @public
   */
  dispose() {
    // Normally we must dispose objects in the reverse order they are created.  However, in this case, disposing
    // the model before disposing the view causes failures when the view tries to remove its listeners from the model.
    // Hence in this case, we must dispose the view first (in the parent call), then dispose the model next.
    super.dispose();
    this.buildAnAtomModel.dispose(); // We can dispose this after because it doesn't use anything the supertype depends on
  }

  /**
   * Create the view needed to visual represent this challenge.
   * @param {Bounds2} layoutBounds
   * @param {Tandem} tandem
   * @returns {CountsToChargeChallengeView}
   * @public
   */
  createView(layoutBounds, tandem) {
    return new SymbolToSchematicChallengeView(this, layoutBounds, tandem.createTandem('symbolToSchematicChallengeView'));
  }

  // @public - step the atom model when the challenge is stepped
  step(dt) {
    this.buildAnAtomModel.step(dt);
  }
}
buildAnAtom.register('SymbolToSchematicChallenge', SymbolToSchematicChallenge);
export default SymbolToSchematicChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFuQXRvbSIsIkJ1aWxkQW5BdG9tTW9kZWwiLCJTeW1ib2xUb1NjaGVtYXRpY0NoYWxsZW5nZVZpZXciLCJCQUFHYW1lQ2hhbGxlbmdlIiwiU3ltYm9sVG9TY2hlbWF0aWNDaGFsbGVuZ2UiLCJjb25zdHJ1Y3RvciIsImJ1aWxkQW5BdG9tR2FtZU1vZGVsIiwiYW5zd2VyQXRvbSIsImNoYWxsZW5nZVR5cGUiLCJ0YW5kZW0iLCJidWlsZEFuQXRvbU1vZGVsIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvU3RhdGUiLCJzaG93RWxlbWVudE5hbWVQcm9wZXJ0eSIsInNldCIsInNob3dOZXV0cmFsT3JJb25Qcm9wZXJ0eSIsInNob3dTdGFibGVPclVuc3RhYmxlUHJvcGVydHkiLCJkaXNwb3NlIiwiY3JlYXRlVmlldyIsImxheW91dEJvdW5kcyIsInN0ZXAiLCJkdCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3ltYm9sVG9TY2hlbWF0aWNDaGFsbGVuZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHlwZSBmb3IgZ2FtZSBjaGFsbGVuZ2VzIHdoZXJlIHRoZSB1c2VyIGlzIHByZXNlbnRlZCB3aXRoIGEgY2hlbWljYWwgc3ltYm9sXHJcbiAqIGluY2x1ZGluZyBhdG9taWMgbnVtYmVyLCBtYXNzIG51bWJlciwgYW5kIGNoYXJnZSwgYW5kIG5lZWRzIHRvIGNvbnN0cnVjdFxyXG4gKiB0aGUgZXF1aXZhbGVudCBhdG9tIGZyb20gYnVja2V0cyBvZiBwcm90b25zLCBuZXV0cm9ucywgYW5kIGVsZWN0cm9ucy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBidWlsZEFuQXRvbSBmcm9tICcuLi8uLi9idWlsZEFuQXRvbS5qcyc7XHJcbmltcG9ydCBCdWlsZEFuQXRvbU1vZGVsIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9CdWlsZEFuQXRvbU1vZGVsLmpzJztcclxuaW1wb3J0IFN5bWJvbFRvU2NoZW1hdGljQ2hhbGxlbmdlVmlldyBmcm9tICcuLi92aWV3L1N5bWJvbFRvU2NoZW1hdGljQ2hhbGxlbmdlVmlldy5qcyc7XHJcbmltcG9ydCBCQUFHYW1lQ2hhbGxlbmdlIGZyb20gJy4vQkFBR2FtZUNoYWxsZW5nZS5qcyc7XHJcblxyXG5jbGFzcyBTeW1ib2xUb1NjaGVtYXRpY0NoYWxsZW5nZSBleHRlbmRzIEJBQUdhbWVDaGFsbGVuZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0dhbWVNb2RlfSBidWlsZEFuQXRvbUdhbWVNb2RlbFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyQXRvbX0gYW5zd2VyQXRvbVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFsbGVuZ2VUeXBlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBidWlsZEFuQXRvbUdhbWVNb2RlbCwgYW5zd2VyQXRvbSwgY2hhbGxlbmdlVHlwZSwgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoIGJ1aWxkQW5BdG9tR2FtZU1vZGVsLCBhbnN3ZXJBdG9tLCBjaGFsbGVuZ2VUeXBlLCB0YW5kZW0gKTtcclxuXHJcbiAgICAvLyBUaGlzIGNoYWxsZW5nZSBpcyBhIGJpdCB1bmlxdWUgaW4gdGhhdCBpdCBoYXMgYSBtb2RlbCBvZiBhbiBhdG9tIHdpdGhcclxuICAgIC8vIHdoaWNoIHRoZSB1c2VyIGNhbiBpbnRlcmFjdC4gV2Ugd2FudCB0byBrZWVwIHRoaXMgbW9kZWwgb3V0IG9mIHRoZSBzdGF0ZVxyXG4gICAgdGhpcy5idWlsZEFuQXRvbU1vZGVsID0gbmV3IEJ1aWxkQW5BdG9tTW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdidWlsZEFuQXRvbU1vZGVsJyApLCB7IHBoZXRpb1N0YXRlOiBmYWxzZSB9ICk7XHJcbiAgICB0aGlzLmJ1aWxkQW5BdG9tTW9kZWwuc2hvd0VsZW1lbnROYW1lUHJvcGVydHkuc2V0KCBmYWxzZSApO1xyXG4gICAgdGhpcy5idWlsZEFuQXRvbU1vZGVsLnNob3dOZXV0cmFsT3JJb25Qcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgICB0aGlzLmJ1aWxkQW5BdG9tTW9kZWwuc2hvd1N0YWJsZU9yVW5zdGFibGVQcm9wZXJ0eS5zZXQoIGZhbHNlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZWxlYXNlIHJlZmVyZW5jZXNcclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgICAvLyBOb3JtYWxseSB3ZSBtdXN0IGRpc3Bvc2Ugb2JqZWN0cyBpbiB0aGUgcmV2ZXJzZSBvcmRlciB0aGV5IGFyZSBjcmVhdGVkLiAgSG93ZXZlciwgaW4gdGhpcyBjYXNlLCBkaXNwb3NpbmdcclxuICAgIC8vIHRoZSBtb2RlbCBiZWZvcmUgZGlzcG9zaW5nIHRoZSB2aWV3IGNhdXNlcyBmYWlsdXJlcyB3aGVuIHRoZSB2aWV3IHRyaWVzIHRvIHJlbW92ZSBpdHMgbGlzdGVuZXJzIGZyb20gdGhlIG1vZGVsLlxyXG4gICAgLy8gSGVuY2UgaW4gdGhpcyBjYXNlLCB3ZSBtdXN0IGRpc3Bvc2UgdGhlIHZpZXcgZmlyc3QgKGluIHRoZSBwYXJlbnQgY2FsbCksIHRoZW4gZGlzcG9zZSB0aGUgbW9kZWwgbmV4dC5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuYnVpbGRBbkF0b21Nb2RlbC5kaXNwb3NlKCk7IC8vIFdlIGNhbiBkaXNwb3NlIHRoaXMgYWZ0ZXIgYmVjYXVzZSBpdCBkb2Vzbid0IHVzZSBhbnl0aGluZyB0aGUgc3VwZXJ0eXBlIGRlcGVuZHMgb25cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB0aGUgdmlldyBuZWVkZWQgdG8gdmlzdWFsIHJlcHJlc2VudCB0aGlzIGNoYWxsZW5nZS5cclxuICAgKiBAcGFyYW0ge0JvdW5kczJ9IGxheW91dEJvdW5kc1xyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcmV0dXJucyB7Q291bnRzVG9DaGFyZ2VDaGFsbGVuZ2VWaWV3fVxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjcmVhdGVWaWV3KCBsYXlvdXRCb3VuZHMsIHRhbmRlbSApIHtcclxuICAgIHJldHVybiBuZXcgU3ltYm9sVG9TY2hlbWF0aWNDaGFsbGVuZ2VWaWV3KCB0aGlzLCBsYXlvdXRCb3VuZHMsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdzeW1ib2xUb1NjaGVtYXRpY0NoYWxsZW5nZVZpZXcnICkgKTtcclxuICB9XHJcblxyXG4gIC8vIEBwdWJsaWMgLSBzdGVwIHRoZSBhdG9tIG1vZGVsIHdoZW4gdGhlIGNoYWxsZW5nZSBpcyBzdGVwcGVkXHJcbiAgc3RlcCggZHQgKSB7XHJcbiAgICB0aGlzLmJ1aWxkQW5BdG9tTW9kZWwuc3RlcCggZHQgKTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQW5BdG9tLnJlZ2lzdGVyKCAnU3ltYm9sVG9TY2hlbWF0aWNDaGFsbGVuZ2UnLCBTeW1ib2xUb1NjaGVtYXRpY0NoYWxsZW5nZSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sVG9TY2hlbWF0aWNDaGFsbGVuZ2U7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLGdCQUFnQixNQUFNLHdDQUF3QztBQUNyRSxPQUFPQyw4QkFBOEIsTUFBTSwyQ0FBMkM7QUFDdEYsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBRXBELE1BQU1DLDBCQUEwQixTQUFTRCxnQkFBZ0IsQ0FBQztFQUV4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUUsV0FBV0EsQ0FBRUMsb0JBQW9CLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUc7SUFDckUsS0FBSyxDQUFFSCxvQkFBb0IsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLE1BQU8sQ0FBQzs7SUFFaEU7SUFDQTtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSVQsZ0JBQWdCLENBQUVRLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLGtCQUFtQixDQUFDLEVBQUU7TUFBRUMsV0FBVyxFQUFFO0lBQU0sQ0FBRSxDQUFDO0lBQ2pILElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNHLHVCQUF1QixDQUFDQyxHQUFHLENBQUUsS0FBTSxDQUFDO0lBQzFELElBQUksQ0FBQ0osZ0JBQWdCLENBQUNLLHdCQUF3QixDQUFDRCxHQUFHLENBQUUsS0FBTSxDQUFDO0lBQzNELElBQUksQ0FBQ0osZ0JBQWdCLENBQUNNLDRCQUE0QixDQUFDRixHQUFHLENBQUUsS0FBTSxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VHLE9BQU9BLENBQUEsRUFBRztJQUVSO0lBQ0E7SUFDQTtJQUNBLEtBQUssQ0FBQ0EsT0FBTyxDQUFDLENBQUM7SUFDZixJQUFJLENBQUNQLGdCQUFnQixDQUFDTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsVUFBVUEsQ0FBRUMsWUFBWSxFQUFFVixNQUFNLEVBQUc7SUFDakMsT0FBTyxJQUFJUCw4QkFBOEIsQ0FBRSxJQUFJLEVBQUVpQixZQUFZLEVBQUVWLE1BQU0sQ0FBQ0UsWUFBWSxDQUFFLGdDQUFpQyxDQUFFLENBQUM7RUFDMUg7O0VBRUE7RUFDQVMsSUFBSUEsQ0FBRUMsRUFBRSxFQUFHO0lBQ1QsSUFBSSxDQUFDWCxnQkFBZ0IsQ0FBQ1UsSUFBSSxDQUFFQyxFQUFHLENBQUM7RUFDbEM7QUFDRjtBQUVBckIsV0FBVyxDQUFDc0IsUUFBUSxDQUFFLDRCQUE0QixFQUFFbEIsMEJBQTJCLENBQUM7QUFFaEYsZUFBZUEsMEJBQTBCIn0=