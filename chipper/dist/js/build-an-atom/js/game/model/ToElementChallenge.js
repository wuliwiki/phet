// Copyright 2013-2021, University of Colorado Boulder

/**
 * Base type for challenges where the user is presented with some sort of
 * information about an atom and must find the atom on a periodic table,
 * and must also determine whether it is an ion or a neutral atom.
 *
 * @author John Blanco
 */

import buildAnAtom from '../../buildAnAtom.js';
import BAAChallengeState from './BAAChallengeState.js';
import BAAGameChallenge from './BAAGameChallenge.js';
class ToElementChallenge extends BAAGameChallenge {
  /**
   * @param {GameModel} buildAnAtomGameModel
   * @param {NumberAtom} answerAtom
   * @param {string} challengeType
   * @param {Tandem} tandem
   */
  constructor(buildAnAtomGameModel, answerAtom, challengeType, tandem) {
    super(buildAnAtomGameModel, answerAtom, challengeType, tandem);
  }

  /**
   * Override the method for checking the correct answer, since this challenge class has the additional step of user
   * deciding whether atom is an ion.
   * @param {NumberAtom} submittedAtom
   * @param {string} submittedNeutralOrIon
   * @public
   */
  checkAnswer(submittedAtom, submittedNeutralOrIon) {
    assert && assert(this.challengeStateProperty.get() === BAAChallengeState.PRESENTING_CHALLENGE, `Unexpected challenge state: ${this.challengeStateProperty.get()}`);
    const isCorrect = submittedAtom.protonCountProperty.get() === this.answerAtom.protonCountProperty.get() && submittedAtom.neutronCountProperty.get() === this.answerAtom.neutronCountProperty.get() && (submittedNeutralOrIon === 'neutral' && this.answerAtom.chargeProperty.get() === 0 || submittedNeutralOrIon === 'ion' && this.answerAtom.chargeProperty.get() !== 0);
    this.handleEvaluatedAnswer(submittedAtom, isCorrect, {
      correctCharge: this.answerAtom.chargeProperty.get() === 0 ? 'neutral' : 'ion',
      submittedCharge: submittedNeutralOrIon
    });
  }
}
buildAnAtom.register('ToElementChallenge', ToElementChallenge);
export default ToElementChallenge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEFuQXRvbSIsIkJBQUNoYWxsZW5nZVN0YXRlIiwiQkFBR2FtZUNoYWxsZW5nZSIsIlRvRWxlbWVudENoYWxsZW5nZSIsImNvbnN0cnVjdG9yIiwiYnVpbGRBbkF0b21HYW1lTW9kZWwiLCJhbnN3ZXJBdG9tIiwiY2hhbGxlbmdlVHlwZSIsInRhbmRlbSIsImNoZWNrQW5zd2VyIiwic3VibWl0dGVkQXRvbSIsInN1Ym1pdHRlZE5ldXRyYWxPcklvbiIsImFzc2VydCIsImNoYWxsZW5nZVN0YXRlUHJvcGVydHkiLCJnZXQiLCJQUkVTRU5USU5HX0NIQUxMRU5HRSIsImlzQ29ycmVjdCIsInByb3RvbkNvdW50UHJvcGVydHkiLCJuZXV0cm9uQ291bnRQcm9wZXJ0eSIsImNoYXJnZVByb3BlcnR5IiwiaGFuZGxlRXZhbHVhdGVkQW5zd2VyIiwiY29ycmVjdENoYXJnZSIsInN1Ym1pdHRlZENoYXJnZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVG9FbGVtZW50Q2hhbGxlbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJhc2UgdHlwZSBmb3IgY2hhbGxlbmdlcyB3aGVyZSB0aGUgdXNlciBpcyBwcmVzZW50ZWQgd2l0aCBzb21lIHNvcnQgb2ZcclxuICogaW5mb3JtYXRpb24gYWJvdXQgYW4gYXRvbSBhbmQgbXVzdCBmaW5kIHRoZSBhdG9tIG9uIGEgcGVyaW9kaWMgdGFibGUsXHJcbiAqIGFuZCBtdXN0IGFsc28gZGV0ZXJtaW5lIHdoZXRoZXIgaXQgaXMgYW4gaW9uIG9yIGEgbmV1dHJhbCBhdG9tLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uLy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IEJBQUNoYWxsZW5nZVN0YXRlIGZyb20gJy4vQkFBQ2hhbGxlbmdlU3RhdGUuanMnO1xyXG5pbXBvcnQgQkFBR2FtZUNoYWxsZW5nZSBmcm9tICcuL0JBQUdhbWVDaGFsbGVuZ2UuanMnO1xyXG5cclxuY2xhc3MgVG9FbGVtZW50Q2hhbGxlbmdlIGV4dGVuZHMgQkFBR2FtZUNoYWxsZW5nZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7R2FtZU1vZGVsfSBidWlsZEFuQXRvbUdhbWVNb2RlbFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyQXRvbX0gYW5zd2VyQXRvbVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFsbGVuZ2VUeXBlXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBidWlsZEFuQXRvbUdhbWVNb2RlbCwgYW5zd2VyQXRvbSwgY2hhbGxlbmdlVHlwZSwgdGFuZGVtICkge1xyXG4gICAgc3VwZXIoIGJ1aWxkQW5BdG9tR2FtZU1vZGVsLCBhbnN3ZXJBdG9tLCBjaGFsbGVuZ2VUeXBlLCB0YW5kZW0gKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE92ZXJyaWRlIHRoZSBtZXRob2QgZm9yIGNoZWNraW5nIHRoZSBjb3JyZWN0IGFuc3dlciwgc2luY2UgdGhpcyBjaGFsbGVuZ2UgY2xhc3MgaGFzIHRoZSBhZGRpdGlvbmFsIHN0ZXAgb2YgdXNlclxyXG4gICAqIGRlY2lkaW5nIHdoZXRoZXIgYXRvbSBpcyBhbiBpb24uXHJcbiAgICogQHBhcmFtIHtOdW1iZXJBdG9tfSBzdWJtaXR0ZWRBdG9tXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1Ym1pdHRlZE5ldXRyYWxPcklvblxyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBjaGVja0Fuc3dlciggc3VibWl0dGVkQXRvbSwgc3VibWl0dGVkTmV1dHJhbE9ySW9uICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydChcclxuICAgICAgdGhpcy5jaGFsbGVuZ2VTdGF0ZVByb3BlcnR5LmdldCgpID09PSBCQUFDaGFsbGVuZ2VTdGF0ZS5QUkVTRU5USU5HX0NIQUxMRU5HRSxcclxuICAgICAgYFVuZXhwZWN0ZWQgY2hhbGxlbmdlIHN0YXRlOiAke3RoaXMuY2hhbGxlbmdlU3RhdGVQcm9wZXJ0eS5nZXQoKX1gXHJcbiAgICApO1xyXG4gICAgY29uc3QgaXNDb3JyZWN0ID0gc3VibWl0dGVkQXRvbS5wcm90b25Db3VudFByb3BlcnR5LmdldCgpID09PSB0aGlzLmFuc3dlckF0b20ucHJvdG9uQ291bnRQcm9wZXJ0eS5nZXQoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkQXRvbS5uZXV0cm9uQ291bnRQcm9wZXJ0eS5nZXQoKSA9PT0gdGhpcy5hbnN3ZXJBdG9tLm5ldXRyb25Db3VudFByb3BlcnR5LmdldCgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAoICggc3VibWl0dGVkTmV1dHJhbE9ySW9uID09PSAnbmV1dHJhbCcgJiYgdGhpcy5hbnN3ZXJBdG9tLmNoYXJnZVByb3BlcnR5LmdldCgpID09PSAwICkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCBzdWJtaXR0ZWROZXV0cmFsT3JJb24gPT09ICdpb24nICYmIHRoaXMuYW5zd2VyQXRvbS5jaGFyZ2VQcm9wZXJ0eS5nZXQoKSAhPT0gMCApICk7XHJcbiAgICB0aGlzLmhhbmRsZUV2YWx1YXRlZEFuc3dlciggc3VibWl0dGVkQXRvbSwgaXNDb3JyZWN0LCB7XHJcbiAgICAgIGNvcnJlY3RDaGFyZ2U6IHRoaXMuYW5zd2VyQXRvbS5jaGFyZ2VQcm9wZXJ0eS5nZXQoKSA9PT0gMCA/ICduZXV0cmFsJyA6ICdpb24nLFxyXG4gICAgICBzdWJtaXR0ZWRDaGFyZ2U6IHN1Ym1pdHRlZE5ldXRyYWxPcklvblxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuYnVpbGRBbkF0b20ucmVnaXN0ZXIoICdUb0VsZW1lbnRDaGFsbGVuZ2UnLCBUb0VsZW1lbnRDaGFsbGVuZ2UgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvRWxlbWVudENoYWxsZW5nZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBQ3RELE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwRCxNQUFNQyxrQkFBa0IsU0FBU0QsZ0JBQWdCLENBQUM7RUFFaEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VFLFdBQVdBLENBQUVDLG9CQUFvQixFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsTUFBTSxFQUFHO0lBQ3JFLEtBQUssQ0FBRUgsb0JBQW9CLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxNQUFPLENBQUM7RUFDbEU7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsYUFBYSxFQUFFQyxxQkFBcUIsRUFBRztJQUNsREMsTUFBTSxJQUFJQSxNQUFNLENBQ2QsSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsS0FBS2IsaUJBQWlCLENBQUNjLG9CQUFvQixFQUMzRSwrQkFBOEIsSUFBSSxDQUFDRixzQkFBc0IsQ0FBQ0MsR0FBRyxDQUFDLENBQUUsRUFDbkUsQ0FBQztJQUNELE1BQU1FLFNBQVMsR0FBR04sYUFBYSxDQUFDTyxtQkFBbUIsQ0FBQ0gsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUNSLFVBQVUsQ0FBQ1csbUJBQW1CLENBQUNILEdBQUcsQ0FBQyxDQUFDLElBQ3JGSixhQUFhLENBQUNRLG9CQUFvQixDQUFDSixHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQ1IsVUFBVSxDQUFDWSxvQkFBb0IsQ0FBQ0osR0FBRyxDQUFDLENBQUMsS0FDbkZILHFCQUFxQixLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUNMLFVBQVUsQ0FBQ2EsY0FBYyxDQUFDTCxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFDakZILHFCQUFxQixLQUFLLEtBQUssSUFBSSxJQUFJLENBQUNMLFVBQVUsQ0FBQ2EsY0FBYyxDQUFDTCxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUcsQ0FBRTtJQUN2RyxJQUFJLENBQUNNLHFCQUFxQixDQUFFVixhQUFhLEVBQUVNLFNBQVMsRUFBRTtNQUNwREssYUFBYSxFQUFFLElBQUksQ0FBQ2YsVUFBVSxDQUFDYSxjQUFjLENBQUNMLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsR0FBRyxLQUFLO01BQzdFUSxlQUFlLEVBQUVYO0lBQ25CLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQVgsV0FBVyxDQUFDdUIsUUFBUSxDQUFFLG9CQUFvQixFQUFFcEIsa0JBQW1CLENBQUM7QUFFaEUsZUFBZUEsa0JBQWtCIn0=