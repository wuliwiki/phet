// Copyright 2017-2022, University of Colorado Boulder

/**
 * The 'Build an Atom' screen in the 'Build an Atom' simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */

import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import elementIcon_png from '../../images/elementIcon_png.js';
import elementIconSmall_png from '../../images/elementIconSmall_png.js';
import buildAnAtom from '../buildAnAtom.js';
import BuildAnAtomStrings from '../BuildAnAtomStrings.js';
import BuildAnAtomModel from '../common/model/BuildAnAtomModel.js';
import SymbolScreenView from './view/SymbolScreenView.js';
class SymbolScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    super(() => new BuildAnAtomModel(tandem.createTandem('model')), model => new SymbolScreenView(model, tandem.createTandem('view')), {
      name: BuildAnAtomStrings.symbolStringProperty,
      backgroundColorProperty: new Property('rgb( 242, 255, 204 )'),
      /* Light yellow-green */
      homeScreenIcon: new ScreenIcon(new Image(elementIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(elementIconSmall_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    });
  }
}
buildAnAtom.register('SymbolScreen', SymbolScreen);
export default SymbolScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImVsZW1lbnRJY29uX3BuZyIsImVsZW1lbnRJY29uU21hbGxfcG5nIiwiYnVpbGRBbkF0b20iLCJCdWlsZEFuQXRvbVN0cmluZ3MiLCJCdWlsZEFuQXRvbU1vZGVsIiwiU3ltYm9sU2NyZWVuVmlldyIsIlN5bWJvbFNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJuYW1lIiwic3ltYm9sU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibmF2aWdhdGlvbkJhckljb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN5bWJvbFNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0J1aWxkIGFuIEF0b20nIHNjcmVlbiBpbiB0aGUgJ0J1aWxkIGFuIEF0b20nIHNpbXVsYXRpb24uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XHJcbmltcG9ydCBTY3JlZW5JY29uIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbkljb24uanMnO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBlbGVtZW50SWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2VsZW1lbnRJY29uX3BuZy5qcyc7XHJcbmltcG9ydCBlbGVtZW50SWNvblNtYWxsX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvZWxlbWVudEljb25TbWFsbF9wbmcuanMnO1xyXG5pbXBvcnQgYnVpbGRBbkF0b20gZnJvbSAnLi4vYnVpbGRBbkF0b20uanMnO1xyXG5pbXBvcnQgQnVpbGRBbkF0b21TdHJpbmdzIGZyb20gJy4uL0J1aWxkQW5BdG9tU3RyaW5ncy5qcyc7XHJcbmltcG9ydCBCdWlsZEFuQXRvbU1vZGVsIGZyb20gJy4uL2NvbW1vbi9tb2RlbC9CdWlsZEFuQXRvbU1vZGVsLmpzJztcclxuaW1wb3J0IFN5bWJvbFNjcmVlblZpZXcgZnJvbSAnLi92aWV3L1N5bWJvbFNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgU3ltYm9sU2NyZWVuIGV4dGVuZHMgU2NyZWVuIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgKCkgPT4gbmV3IEJ1aWxkQW5BdG9tTW9kZWwoIHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtb2RlbCcgKSApLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgU3ltYm9sU2NyZWVuVmlldyggbW9kZWwsIHRhbmRlbS5jcmVhdGVUYW5kZW0oICd2aWV3JyApICksXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBCdWlsZEFuQXRvbVN0cmluZ3Muc3ltYm9sU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3JnYiggMjQyLCAyNTUsIDIwNCApJyApLCAvKiBMaWdodCB5ZWxsb3ctZ3JlZW4gKi9cclxuICAgICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZWxlbWVudEljb25fcG5nICksIHtcclxuICAgICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBuYXZpZ2F0aW9uQmFySWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZWxlbWVudEljb25TbWFsbF9wbmcgKSwge1xyXG4gICAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcclxuICAgICAgICAgIG1heEljb25IZWlnaHRQcm9wb3J0aW9uOiAxXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFuQXRvbS5yZWdpc3RlciggJ1N5bWJvbFNjcmVlbicsIFN5bWJvbFNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBTeW1ib2xTY3JlZW47Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFFBQVEsTUFBTSw4QkFBOEI7QUFDbkQsT0FBT0MsTUFBTSxNQUFNLDZCQUE2QjtBQUNoRCxPQUFPQyxVQUFVLE1BQU0saUNBQWlDO0FBQ3hELFNBQVNDLEtBQUssUUFBUSxnQ0FBZ0M7QUFDdEQsT0FBT0MsZUFBZSxNQUFNLGlDQUFpQztBQUM3RCxPQUFPQyxvQkFBb0IsTUFBTSxzQ0FBc0M7QUFDdkUsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQUMzQyxPQUFPQyxrQkFBa0IsTUFBTSwwQkFBMEI7QUFDekQsT0FBT0MsZ0JBQWdCLE1BQU0scUNBQXFDO0FBQ2xFLE9BQU9DLGdCQUFnQixNQUFNLDRCQUE0QjtBQUV6RCxNQUFNQyxZQUFZLFNBQVNULE1BQU0sQ0FBQztFQUVoQztBQUNGO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBQ3BCLEtBQUssQ0FDSCxNQUFNLElBQUlKLGdCQUFnQixDQUFFSSxNQUFNLENBQUNDLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUM1REMsS0FBSyxJQUFJLElBQUlMLGdCQUFnQixDQUFFSyxLQUFLLEVBQUVGLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLE1BQU8sQ0FBRSxDQUFDLEVBQ3JFO01BQ0VFLElBQUksRUFBRVIsa0JBQWtCLENBQUNTLG9CQUFvQjtNQUM3Q0MsdUJBQXVCLEVBQUUsSUFBSWpCLFFBQVEsQ0FBRSxzQkFBdUIsQ0FBQztNQUFFO01BQ2pFa0IsY0FBYyxFQUFFLElBQUloQixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFQyxlQUFnQixDQUFDLEVBQUU7UUFDNURlLHNCQUFzQixFQUFFLENBQUM7UUFDekJDLHVCQUF1QixFQUFFO01BQzNCLENBQUUsQ0FBQztNQUNIQyxpQkFBaUIsRUFBRSxJQUFJbkIsVUFBVSxDQUFFLElBQUlDLEtBQUssQ0FBRUUsb0JBQXFCLENBQUMsRUFBRTtRQUNwRWMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hSLE1BQU0sRUFBRUE7SUFDVixDQUNGLENBQUM7RUFDSDtBQUNGO0FBRUFOLFdBQVcsQ0FBQ2dCLFFBQVEsQ0FBRSxjQUFjLEVBQUVaLFlBQWEsQ0FBQztBQUNwRCxlQUFlQSxZQUFZIn0=