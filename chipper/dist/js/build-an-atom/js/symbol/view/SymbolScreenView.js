// Copyright 2013-2022, University of Colorado Boulder

/**
 * Main view for the "Symbol" screen of the Build an Atom simulation.
 *
 * @author John Blanco
 */

import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import { Text } from '../../../../scenery/js/imports.js';
import ShredConstants from '../../../../shred/js/ShredConstants.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import buildAnAtom from '../../buildAnAtom.js';
import BuildAnAtomStrings from '../../BuildAnAtomStrings.js';
import BAAScreenView from '../../common/view/BAAScreenView.js';
import SymbolNode from './SymbolNode.js';
const symbolString = BuildAnAtomStrings.symbol;
class SymbolScreenView extends BAAScreenView {
  /**
   * @param {BuildAnAtomModel} model
   * @param {Tandem} tandem
   */
  constructor(model, tandem) {
    super(model, tandem);
    this.symbolAccordionBoxExpandedProperty = new BooleanProperty(true, {
      tandem: tandem.createTandem('symbolAccordionBoxExpandedProperty')
    });

    // Add the symbol node within an accordion box.
    const symbolNode = new SymbolNode(model.particleAtom, tandem.createTandem('symbolNode'), {
      scale: 0.43 // scale empirically determined
    });

    const symbolAccordionBox = new AccordionBox(symbolNode, {
      cornerRadius: 3,
      titleNode: new Text(symbolString, {
        font: ShredConstants.ACCORDION_BOX_TITLE_FONT,
        maxWidth: ShredConstants.ACCORDION_BOX_TITLE_MAX_WIDTH,
        tandem: tandem.createTandem('symbolAccordionBoxTitleText')
      }),
      fill: ShredConstants.DISPLAY_PANEL_BACKGROUND_COLOR,
      minWidth: this.periodicTableAccordionBox.width,
      contentAlign: 'center',
      titleAlignX: 'left',
      buttonAlign: 'right',
      expandedProperty: this.symbolAccordionBoxExpandedProperty,
      expandCollapseButtonOptions: {
        touchAreaXDilation: 12,
        touchAreaYDilation: 12
      },
      // phet-io
      tandem: tandem.createTandem('symbolAccordionBox'),
      // pdom
      labelContent: symbolString
    });
    this.controlPanelLayer.addChild(symbolAccordionBox);

    // do the layout
    symbolAccordionBox.top = this.periodicTableAccordionBox.top + this.periodicTableAccordionBox.height + 10;
    symbolAccordionBox.left = this.periodicTableAccordionBox.left;
  }

  /**
   * @public
   */
  reset() {
    super.reset();
    this.symbolAccordionBoxExpandedProperty.reset();
  }
}
buildAnAtom.register('SymbolScreenView', SymbolScreenView);
export default SymbolScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJUZXh0IiwiU2hyZWRDb25zdGFudHMiLCJBY2NvcmRpb25Cb3giLCJidWlsZEFuQXRvbSIsIkJ1aWxkQW5BdG9tU3RyaW5ncyIsIkJBQVNjcmVlblZpZXciLCJTeW1ib2xOb2RlIiwic3ltYm9sU3RyaW5nIiwic3ltYm9sIiwiU3ltYm9sU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwibW9kZWwiLCJ0YW5kZW0iLCJzeW1ib2xBY2NvcmRpb25Cb3hFeHBhbmRlZFByb3BlcnR5IiwiY3JlYXRlVGFuZGVtIiwic3ltYm9sTm9kZSIsInBhcnRpY2xlQXRvbSIsInNjYWxlIiwic3ltYm9sQWNjb3JkaW9uQm94IiwiY29ybmVyUmFkaXVzIiwidGl0bGVOb2RlIiwiZm9udCIsIkFDQ09SRElPTl9CT1hfVElUTEVfRk9OVCIsIm1heFdpZHRoIiwiQUNDT1JESU9OX0JPWF9USVRMRV9NQVhfV0lEVEgiLCJmaWxsIiwiRElTUExBWV9QQU5FTF9CQUNLR1JPVU5EX0NPTE9SIiwibWluV2lkdGgiLCJwZXJpb2RpY1RhYmxlQWNjb3JkaW9uQm94Iiwid2lkdGgiLCJjb250ZW50QWxpZ24iLCJ0aXRsZUFsaWduWCIsImJ1dHRvbkFsaWduIiwiZXhwYW5kZWRQcm9wZXJ0eSIsImV4cGFuZENvbGxhcHNlQnV0dG9uT3B0aW9ucyIsInRvdWNoQXJlYVhEaWxhdGlvbiIsInRvdWNoQXJlYVlEaWxhdGlvbiIsImxhYmVsQ29udGVudCIsImNvbnRyb2xQYW5lbExheWVyIiwiYWRkQ2hpbGQiLCJ0b3AiLCJoZWlnaHQiLCJsZWZ0IiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlN5bWJvbFNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiB2aWV3IGZvciB0aGUgXCJTeW1ib2xcIiBzY3JlZW4gb2YgdGhlIEJ1aWxkIGFuIEF0b20gc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFNocmVkQ29uc3RhbnRzIGZyb20gJy4uLy4uLy4uLy4uL3NocmVkL2pzL1NocmVkQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEFjY29yZGlvbkJveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uLy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IEJ1aWxkQW5BdG9tU3RyaW5ncyBmcm9tICcuLi8uLi9CdWlsZEFuQXRvbVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQkFBU2NyZWVuVmlldyBmcm9tICcuLi8uLi9jb21tb24vdmlldy9CQUFTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFN5bWJvbE5vZGUgZnJvbSAnLi9TeW1ib2xOb2RlLmpzJztcclxuXHJcbmNvbnN0IHN5bWJvbFN0cmluZyA9IEJ1aWxkQW5BdG9tU3RyaW5ncy5zeW1ib2w7XHJcblxyXG5jbGFzcyBTeW1ib2xTY3JlZW5WaWV3IGV4dGVuZHMgQkFBU2NyZWVuVmlldyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QnVpbGRBbkF0b21Nb2RlbH0gbW9kZWxcclxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG1vZGVsLCB0YW5kZW0gKSB7XHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSApO1xyXG5cclxuICAgIHRoaXMuc3ltYm9sQWNjb3JkaW9uQm94RXhwYW5kZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ltYm9sQWNjb3JkaW9uQm94RXhwYW5kZWRQcm9wZXJ0eScgKVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgc3ltYm9sIG5vZGUgd2l0aGluIGFuIGFjY29yZGlvbiBib3guXHJcbiAgICBjb25zdCBzeW1ib2xOb2RlID0gbmV3IFN5bWJvbE5vZGUoIG1vZGVsLnBhcnRpY2xlQXRvbSwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3N5bWJvbE5vZGUnICksIHtcclxuICAgICAgc2NhbGU6IDAuNDMgLy8gc2NhbGUgZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxyXG4gICAgfSApO1xyXG4gICAgY29uc3Qgc3ltYm9sQWNjb3JkaW9uQm94ID0gbmV3IEFjY29yZGlvbkJveCggc3ltYm9sTm9kZSwge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IDMsXHJcbiAgICAgIHRpdGxlTm9kZTogbmV3IFRleHQoIHN5bWJvbFN0cmluZywge1xyXG4gICAgICAgIGZvbnQ6IFNocmVkQ29uc3RhbnRzLkFDQ09SRElPTl9CT1hfVElUTEVfRk9OVCxcclxuICAgICAgICBtYXhXaWR0aDogU2hyZWRDb25zdGFudHMuQUNDT1JESU9OX0JPWF9USVRMRV9NQVhfV0lEVEgsXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ltYm9sQWNjb3JkaW9uQm94VGl0bGVUZXh0JyApXHJcbiAgICAgIH0gKSxcclxuICAgICAgZmlsbDogU2hyZWRDb25zdGFudHMuRElTUExBWV9QQU5FTF9CQUNLR1JPVU5EX0NPTE9SLFxyXG4gICAgICBtaW5XaWR0aDogdGhpcy5wZXJpb2RpY1RhYmxlQWNjb3JkaW9uQm94LndpZHRoLFxyXG4gICAgICBjb250ZW50QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICB0aXRsZUFsaWduWDogJ2xlZnQnLFxyXG4gICAgICBidXR0b25BbGlnbjogJ3JpZ2h0JyxcclxuICAgICAgZXhwYW5kZWRQcm9wZXJ0eTogdGhpcy5zeW1ib2xBY2NvcmRpb25Cb3hFeHBhbmRlZFByb3BlcnR5LFxyXG4gICAgICBleHBhbmRDb2xsYXBzZUJ1dHRvbk9wdGlvbnM6IHtcclxuICAgICAgICB0b3VjaEFyZWFYRGlsYXRpb246IDEyLFxyXG4gICAgICAgIHRvdWNoQXJlYVlEaWxhdGlvbjogMTJcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIHBoZXQtaW9cclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc3ltYm9sQWNjb3JkaW9uQm94JyApLFxyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICBsYWJlbENvbnRlbnQ6IHN5bWJvbFN0cmluZ1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5jb250cm9sUGFuZWxMYXllci5hZGRDaGlsZCggc3ltYm9sQWNjb3JkaW9uQm94ICk7XHJcblxyXG4gICAgLy8gZG8gdGhlIGxheW91dFxyXG4gICAgc3ltYm9sQWNjb3JkaW9uQm94LnRvcCA9IHRoaXMucGVyaW9kaWNUYWJsZUFjY29yZGlvbkJveC50b3AgKyB0aGlzLnBlcmlvZGljVGFibGVBY2NvcmRpb25Cb3guaGVpZ2h0ICsgMTA7XHJcbiAgICBzeW1ib2xBY2NvcmRpb25Cb3gubGVmdCA9IHRoaXMucGVyaW9kaWNUYWJsZUFjY29yZGlvbkJveC5sZWZ0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMuc3ltYm9sQWNjb3JkaW9uQm94RXhwYW5kZWRQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxuYnVpbGRBbkF0b20ucmVnaXN0ZXIoICdTeW1ib2xTY3JlZW5WaWV3JywgU3ltYm9sU2NyZWVuVmlldyApO1xyXG5leHBvcnQgZGVmYXVsdCBTeW1ib2xTY3JlZW5WaWV3OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7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