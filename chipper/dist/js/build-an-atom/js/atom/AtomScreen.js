// Copyright 2017-2022, University of Colorado Boulder

/**
 * The 'Build an Atom' screen in the 'Build an Atom' simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */

import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import atomIcon_png from '../../images/atomIcon_png.js';
import atomIconSmall_png from '../../images/atomIconSmall_png.js';
import buildAnAtom from '../buildAnAtom.js';
import BuildAnAtomStrings from '../BuildAnAtomStrings.js';
import BuildAnAtomModel from '../common/model/BuildAnAtomModel.js';
import AtomScreenView from './view/AtomScreenView.js';
class AtomScreen extends Screen {
  /**
   * @param {Tandem} tandem
   */
  constructor(tandem) {
    super(() => new BuildAnAtomModel(tandem.createTandem('model')), model => new AtomScreenView(model, tandem.createTandem('view')), {
      name: BuildAnAtomStrings.atomStringProperty,
      homeScreenIcon: new ScreenIcon(new Image(atomIcon_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      navigationBarIcon: new ScreenIcon(new Image(atomIconSmall_png), {
        maxIconWidthProportion: 1,
        maxIconHeightProportion: 1
      }),
      tandem: tandem
    });
  }
}
buildAnAtom.register('AtomScreen', AtomScreen);
export default AtomScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY3JlZW4iLCJTY3JlZW5JY29uIiwiSW1hZ2UiLCJhdG9tSWNvbl9wbmciLCJhdG9tSWNvblNtYWxsX3BuZyIsImJ1aWxkQW5BdG9tIiwiQnVpbGRBbkF0b21TdHJpbmdzIiwiQnVpbGRBbkF0b21Nb2RlbCIsIkF0b21TY3JlZW5WaWV3IiwiQXRvbVNjcmVlbiIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwibW9kZWwiLCJuYW1lIiwiYXRvbVN0cmluZ1Byb3BlcnR5IiwiaG9tZVNjcmVlbkljb24iLCJtYXhJY29uV2lkdGhQcm9wb3J0aW9uIiwibWF4SWNvbkhlaWdodFByb3BvcnRpb24iLCJuYXZpZ2F0aW9uQmFySWNvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQXRvbVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgJ0J1aWxkIGFuIEF0b20nIHNjcmVlbiBpbiB0aGUgJ0J1aWxkIGFuIEF0b20nIHNpbXVsYXRpb24uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgYXRvbUljb25fcG5nIGZyb20gJy4uLy4uL2ltYWdlcy9hdG9tSWNvbl9wbmcuanMnO1xyXG5pbXBvcnQgYXRvbUljb25TbWFsbF9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2F0b21JY29uU21hbGxfcG5nLmpzJztcclxuaW1wb3J0IGJ1aWxkQW5BdG9tIGZyb20gJy4uL2J1aWxkQW5BdG9tLmpzJztcclxuaW1wb3J0IEJ1aWxkQW5BdG9tU3RyaW5ncyBmcm9tICcuLi9CdWlsZEFuQXRvbVN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQnVpbGRBbkF0b21Nb2RlbCBmcm9tICcuLi9jb21tb24vbW9kZWwvQnVpbGRBbkF0b21Nb2RlbC5qcyc7XHJcbmltcG9ydCBBdG9tU2NyZWVuVmlldyBmcm9tICcuL3ZpZXcvQXRvbVNjcmVlblZpZXcuanMnO1xyXG5cclxuY2xhc3MgQXRvbVNjcmVlbiBleHRlbmRzIFNjcmVlbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xyXG4gICAgc3VwZXIoXHJcbiAgICAgICgpID0+IG5ldyBCdWlsZEFuQXRvbU1vZGVsKCB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbW9kZWwnICkgKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEF0b21TY3JlZW5WaWV3KCBtb2RlbCwgdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ZpZXcnICkgKSxcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IEJ1aWxkQW5BdG9tU3RyaW5ncy5hdG9tU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgaG9tZVNjcmVlbkljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIGF0b21JY29uX3BuZyApLCB7XHJcbiAgICAgICAgICBtYXhJY29uV2lkdGhQcm9wb3J0aW9uOiAxLFxyXG4gICAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmF2aWdhdGlvbkJhckljb246IG5ldyBTY3JlZW5JY29uKCBuZXcgSW1hZ2UoIGF0b21JY29uU21hbGxfcG5nICksIHtcclxuICAgICAgICAgIG1heEljb25XaWR0aFByb3BvcnRpb246IDEsXHJcbiAgICAgICAgICBtYXhJY29uSGVpZ2h0UHJvcG9ydGlvbjogMVxyXG4gICAgICAgIH0gKSxcclxuICAgICAgICB0YW5kZW06IHRhbmRlbVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuYnVpbGRBbkF0b20ucmVnaXN0ZXIoICdBdG9tU2NyZWVuJywgQXRvbVNjcmVlbiApO1xyXG5leHBvcnQgZGVmYXVsdCBBdG9tU2NyZWVuOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxNQUFNLE1BQU0sNkJBQTZCO0FBQ2hELE9BQU9DLFVBQVUsTUFBTSxpQ0FBaUM7QUFDeEQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxZQUFZLE1BQU0sOEJBQThCO0FBQ3ZELE9BQU9DLGlCQUFpQixNQUFNLG1DQUFtQztBQUNqRSxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBQzNDLE9BQU9DLGtCQUFrQixNQUFNLDBCQUEwQjtBQUN6RCxPQUFPQyxnQkFBZ0IsTUFBTSxxQ0FBcUM7QUFDbEUsT0FBT0MsY0FBYyxNQUFNLDBCQUEwQjtBQUVyRCxNQUFNQyxVQUFVLFNBQVNULE1BQU0sQ0FBQztFQUU5QjtBQUNGO0FBQ0E7RUFDRVUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFHO0lBQ3BCLEtBQUssQ0FDSCxNQUFNLElBQUlKLGdCQUFnQixDQUFFSSxNQUFNLENBQUNDLFlBQVksQ0FBRSxPQUFRLENBQUUsQ0FBQyxFQUM1REMsS0FBSyxJQUFJLElBQUlMLGNBQWMsQ0FBRUssS0FBSyxFQUFFRixNQUFNLENBQUNDLFlBQVksQ0FBRSxNQUFPLENBQUUsQ0FBQyxFQUNuRTtNQUNFRSxJQUFJLEVBQUVSLGtCQUFrQixDQUFDUyxrQkFBa0I7TUFDM0NDLGNBQWMsRUFBRSxJQUFJZixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFQyxZQUFhLENBQUMsRUFBRTtRQUN6RGMsc0JBQXNCLEVBQUUsQ0FBQztRQUN6QkMsdUJBQXVCLEVBQUU7TUFDM0IsQ0FBRSxDQUFDO01BQ0hDLGlCQUFpQixFQUFFLElBQUlsQixVQUFVLENBQUUsSUFBSUMsS0FBSyxDQUFFRSxpQkFBa0IsQ0FBQyxFQUFFO1FBQ2pFYSxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCQyx1QkFBdUIsRUFBRTtNQUMzQixDQUFFLENBQUM7TUFDSFAsTUFBTSxFQUFFQTtJQUNWLENBQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFFQU4sV0FBVyxDQUFDZSxRQUFRLENBQUUsWUFBWSxFQUFFWCxVQUFXLENBQUM7QUFDaEQsZUFBZUEsVUFBVSJ9