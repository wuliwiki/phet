// Copyright 2020-2022, University of Colorado Boulder

/**
 * Controls for visual options for this sim.
 *
 * @author John Blanco
 * @author Siddhartha Chinthapally (Actual Concepts)
 */

import PreferencesDialog from '../../../../joist/js/preferences/PreferencesDialog.js';
import { Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import buildAnAtom from '../../buildAnAtom.js';
import BuildAnAtomStrings from '../../BuildAnAtomStrings.js';
class VisualPreferencesNode extends VBox {
  /**
   * @param {BooleanProperty} highContrastParticlesProperty
   * @param {Tandem} tandem
   */
  constructor(highContrastParticlesProperty, tandem) {
    // Add support for turning on high-contrast particles.
    const highContrastParticlesCheckbox = new Checkbox(highContrastParticlesProperty, new Text(BuildAnAtomStrings.highContrastParticles, {
      font: PreferencesDialog.CONTENT_FONT
    }), {
      tandem: tandem.createTandem('highContrastParticlesCheckbox')
    });

    // VBox is used to make it easy to add additional options
    super({
      children: [highContrastParticlesCheckbox],
      spacing: PreferencesDialog.CONTENT_SPACING,
      align: 'left'
    });

    // @private
    this.disposeVisualPreferencesNode = () => {
      highContrastParticlesCheckbox.dispose();
    };
  }

  /**
   * @public
   * @override
   */
  dispose() {
    this.disposeVisualPreferencesNode();
    super.dispose();
  }
}
buildAnAtom.register('VisualPreferencesNode', VisualPreferencesNode);
export default VisualPreferencesNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmVmZXJlbmNlc0RpYWxvZyIsIlRleHQiLCJWQm94IiwiQ2hlY2tib3giLCJidWlsZEFuQXRvbSIsIkJ1aWxkQW5BdG9tU3RyaW5ncyIsIlZpc3VhbFByZWZlcmVuY2VzTm9kZSIsImNvbnN0cnVjdG9yIiwiaGlnaENvbnRyYXN0UGFydGljbGVzUHJvcGVydHkiLCJ0YW5kZW0iLCJoaWdoQ29udHJhc3RQYXJ0aWNsZXNDaGVja2JveCIsImhpZ2hDb250cmFzdFBhcnRpY2xlcyIsImZvbnQiLCJDT05URU5UX0ZPTlQiLCJjcmVhdGVUYW5kZW0iLCJjaGlsZHJlbiIsInNwYWNpbmciLCJDT05URU5UX1NQQUNJTkciLCJhbGlnbiIsImRpc3Bvc2VWaXN1YWxQcmVmZXJlbmNlc05vZGUiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJWaXN1YWxQcmVmZXJlbmNlc05vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29udHJvbHMgZm9yIHZpc3VhbCBvcHRpb25zIGZvciB0aGlzIHNpbS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKiBAYXV0aG9yIFNpZGRoYXJ0aGEgQ2hpbnRoYXBhbGx5IChBY3R1YWwgQ29uY2VwdHMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nIGZyb20gJy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1ByZWZlcmVuY2VzRGlhbG9nLmpzJztcclxuaW1wb3J0IHsgVGV4dCwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQ2hlY2tib3guanMnO1xyXG5pbXBvcnQgYnVpbGRBbkF0b20gZnJvbSAnLi4vLi4vYnVpbGRBbkF0b20uanMnO1xyXG5pbXBvcnQgQnVpbGRBbkF0b21TdHJpbmdzIGZyb20gJy4uLy4uL0J1aWxkQW5BdG9tU3RyaW5ncy5qcyc7XHJcblxyXG5jbGFzcyBWaXN1YWxQcmVmZXJlbmNlc05vZGUgZXh0ZW5kcyBWQm94IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtCb29sZWFuUHJvcGVydHl9IGhpZ2hDb250cmFzdFBhcnRpY2xlc1Byb3BlcnR5XHJcbiAgICogQHBhcmFtIHtUYW5kZW19IHRhbmRlbVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCBoaWdoQ29udHJhc3RQYXJ0aWNsZXNQcm9wZXJ0eSwgdGFuZGVtICkge1xyXG5cclxuICAgIC8vIEFkZCBzdXBwb3J0IGZvciB0dXJuaW5nIG9uIGhpZ2gtY29udHJhc3QgcGFydGljbGVzLlxyXG4gICAgY29uc3QgaGlnaENvbnRyYXN0UGFydGljbGVzQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3goXHJcbiAgICAgIGhpZ2hDb250cmFzdFBhcnRpY2xlc1Byb3BlcnR5LFxyXG4gICAgICBuZXcgVGV4dCggQnVpbGRBbkF0b21TdHJpbmdzLmhpZ2hDb250cmFzdFBhcnRpY2xlcywgeyBmb250OiBQcmVmZXJlbmNlc0RpYWxvZy5DT05URU5UX0ZPTlQgfSApLCB7XHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnaGlnaENvbnRyYXN0UGFydGljbGVzQ2hlY2tib3gnIClcclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIFZCb3ggaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgdG8gYWRkIGFkZGl0aW9uYWwgb3B0aW9uc1xyXG4gICAgc3VwZXIoIHtcclxuICAgICAgY2hpbGRyZW46IFsgaGlnaENvbnRyYXN0UGFydGljbGVzQ2hlY2tib3ggXSxcclxuICAgICAgc3BhY2luZzogUHJlZmVyZW5jZXNEaWFsb2cuQ09OVEVOVF9TUEFDSU5HLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGVcclxuICAgIHRoaXMuZGlzcG9zZVZpc3VhbFByZWZlcmVuY2VzTm9kZSA9ICgpID0+IHtcclxuICAgICAgaGlnaENvbnRyYXN0UGFydGljbGVzQ2hlY2tib3guZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwdWJsaWNcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5kaXNwb3NlVmlzdWFsUHJlZmVyZW5jZXNOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5idWlsZEFuQXRvbS5yZWdpc3RlciggJ1Zpc3VhbFByZWZlcmVuY2VzTm9kZScsIFZpc3VhbFByZWZlcmVuY2VzTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBWaXN1YWxQcmVmZXJlbmNlc05vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsaUJBQWlCLE1BQU0sdURBQXVEO0FBQ3JGLFNBQVNDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUM5RCxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0Msa0JBQWtCLE1BQU0sNkJBQTZCO0FBRTVELE1BQU1DLHFCQUFxQixTQUFTSixJQUFJLENBQUM7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7RUFDRUssV0FBV0EsQ0FBRUMsNkJBQTZCLEVBQUVDLE1BQU0sRUFBRztJQUVuRDtJQUNBLE1BQU1DLDZCQUE2QixHQUFHLElBQUlQLFFBQVEsQ0FDaERLLDZCQUE2QixFQUM3QixJQUFJUCxJQUFJLENBQUVJLGtCQUFrQixDQUFDTSxxQkFBcUIsRUFBRTtNQUFFQyxJQUFJLEVBQUVaLGlCQUFpQixDQUFDYTtJQUFhLENBQUUsQ0FBQyxFQUFFO01BQzlGSixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0ssWUFBWSxDQUFFLCtCQUFnQztJQUMvRCxDQUFFLENBQUM7O0lBRUw7SUFDQSxLQUFLLENBQUU7TUFDTEMsUUFBUSxFQUFFLENBQUVMLDZCQUE2QixDQUFFO01BQzNDTSxPQUFPLEVBQUVoQixpQkFBaUIsQ0FBQ2lCLGVBQWU7TUFDMUNDLEtBQUssRUFBRTtJQUNULENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUksQ0FBQ0MsNEJBQTRCLEdBQUcsTUFBTTtNQUN4Q1QsNkJBQTZCLENBQUNVLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFQSxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNELDRCQUE0QixDQUFDLENBQUM7SUFDbkMsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFoQixXQUFXLENBQUNpQixRQUFRLENBQUUsdUJBQXVCLEVBQUVmLHFCQUFzQixDQUFDO0FBQ3RFLGVBQWVBLHFCQUFxQiJ9