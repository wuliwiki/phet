// Copyright 2013-2023, University of Colorado Boulder

/**
 * Type that represents a change meter that displays the charge of the
 * provided atom.
 */

import Dimension2 from '../../../../dot/js/Dimension2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import { Shape } from '../../../../kite/js/imports.js';
import merge from '../../../../phet-core/js/merge.js';
import ArrowNode from '../../../../scenery-phet/js/ArrowNode.js';
import PhetColorScheme from '../../../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../../../scenery-phet/js/PhetFont.js';
import { LinearGradient, Node, Path, Rectangle, Text } from '../../../../scenery/js/imports.js';
import buildAnAtom from '../../buildAnAtom.js';

// constants
const WIDTH = 70; // In screen coords, which are roughly pixels.
const _MAX_CHARGE = 10;
const CHARGE_SYMBOL_WIDTH = 7; // In screen coords, which are roughly pixels.
const SYMBOL_LINE_WIDTH = 2; // In screen coords, which are roughly pixels.

class ChargeMeter extends Node {
  /**
   * @param {NumberAtom} numberAtom
   * @param {Tandem} tandem
   * @param {Object} [options]
   */
  constructor(numberAtom, tandem, options) {
    options = merge({
      showNumericalReadout: true,
      tandem: tandem
    }, options);
    super();

    // Add the background.
    const backgroundHeight = options.showNumericalReadout ? WIDTH * 0.9 : WIDTH * 0.55; // Multipliers arbitrary to get desired aspect ratios.
    const background = new Rectangle(0, 0, WIDTH, backgroundHeight, 7, 7, {
      fill: 'rgb( 210, 210, 210 )',
      stroke: 'gray',
      lineWidth: 1.0,
      tandem: tandem.createTandem('background')
    });
    this.addChild(background);

    // Add the meter window.
    const meterWindowShape = new Shape();
    const meterWindowWidth = background.width * 0.8;
    const meterWindowHeight = meterWindowWidth * 0.5; // Empirically chosen, change if needed.
    meterWindowShape.moveTo(0, meterWindowHeight);
    meterWindowShape.quadraticCurveTo(0, 0, meterWindowWidth / 2, 0);
    meterWindowShape.quadraticCurveTo(meterWindowWidth, 0, meterWindowWidth, meterWindowHeight);
    meterWindowShape.close();
    const meterWindow = new Path(meterWindowShape, {
      stroke: 'gray',
      lineWidth: 2,
      fill: new LinearGradient(0, 0, meterWindowWidth, 0).addColorStop(0, 'rgb( 0, 0, 255 )').addColorStop(0.5, 'white').addColorStop(1, 'rgb( 255, 0, 0 )'),
      centerX: background.centerX,
      top: 3,
      // Adjust as needed to work with background graphics.
      tandem: tandem.createTandem('meterWindow')
    });
    this.addChild(meterWindow);

    // Add the plus symbol, which will be drawn (not done as a character).
    const shadowOffset = 0.5; // In pixels.
    const plusShape = new Shape().moveTo(-CHARGE_SYMBOL_WIDTH / 2, 0).lineTo(CHARGE_SYMBOL_WIDTH / 2, 0).moveTo(0, -CHARGE_SYMBOL_WIDTH / 2).lineTo(0, CHARGE_SYMBOL_WIDTH / 2);
    const plusSymbol = new Node({
      tandem: tandem.createTandem('plusSymbol')
    });
    plusSymbol.addChild(new Path(plusShape, {
      lineWidth: SYMBOL_LINE_WIDTH,
      stroke: 'black',
      centerX: shadowOffset,
      centerY: shadowOffset,
      tandem: tandem.createTandem('plusSymbolShadow')
    }));
    plusSymbol.addChild(new Path(plusShape, {
      lineWidth: SYMBOL_LINE_WIDTH,
      stroke: 'rgb(255, 0, 0 )',
      tandem: tandem.createTandem('plusSymbolMainShape')
    }));
    plusSymbol.center = new Vector2(meterWindow.width * 0.7, meterWindow.height * 0.5);
    meterWindow.addChild(plusSymbol);

    // Add the minus symbol, which will be drawn (not done as a character).
    const minusShape = new Shape().moveTo(-CHARGE_SYMBOL_WIDTH / 2, 0).lineTo(CHARGE_SYMBOL_WIDTH / 2, 0);
    const minusSymbol = new Node({
      tandem: tandem.createTandem('minusSymbol')
    });
    minusSymbol.addChild(new Path(minusShape, {
      lineWidth: SYMBOL_LINE_WIDTH,
      stroke: 'black',
      centerX: shadowOffset,
      centerY: shadowOffset,
      tandem: tandem.createTandem('minusSymbolShadow')
    }));
    minusSymbol.addChild(new Path(minusShape, {
      lineWidth: SYMBOL_LINE_WIDTH,
      stroke: 'rgb(0, 0, 255 )',
      tandem: tandem.createTandem('minusSymbolMainShape')
    }));
    minusSymbol.center = new Vector2(meterWindow.width * 0.3, meterWindow.height * 0.5);
    meterWindow.addChild(minusSymbol);

    // Add the layer that contains the meter line.
    const meterNeedleLayer = new Node({
      x: meterWindow.centerX,
      y: meterWindow.bottom - 3,
      tandem: tandem.createTandem('meterNeedleWindow')
    });
    meterNeedleLayer.setScaleMagnitude(1, 0.9); // match previous scaling behavior
    const meterNeedle = new ArrowNode(0, 0,
    // tip at origin, so we can rotate around it
    0, 3 - meterWindowHeight, {
      headHeight: 7,
      headWidth: 5,
      tailWidth: 1,
      tandem: tandem.createTandem('meterNeedle')
    });
    meterNeedleLayer.addChild(meterNeedle);
    this.addChild(meterNeedleLayer);
    let numericalReadout;
    let readoutText;

    // Add the numerical display, if present.
    const readoutSize = new Dimension2(WIDTH * 0.6, (background.height - meterWindow.height) * 0.6);
    if (options.showNumericalReadout) {
      numericalReadout = new Rectangle(0, 0, readoutSize.width, readoutSize.height, 3, 3, {
        fill: 'white',
        stroke: 'black',
        lineWidth: 1,
        top: meterWindow.bottom + 3,
        centerX: background.centerX,
        tandem: tandem.createTandem('numericalReadout')
      });
      this.addChild(numericalReadout);

      // Created with placeholder empty-string, which will be changed.
      readoutText = new Text('', {
        font: new PhetFont({
          size: 24,
          weight: 'bold'
        }),
        tandem: tandem.createTandem('readoutText')
      });
      numericalReadout.addChild(readoutText);
    }

    // Add the listeners that will update the meter and numerical display when the charge changes.
    numberAtom.chargeProperty.link(charge => {
      meterNeedle.rotation = charge / _MAX_CHARGE * Math.PI * 0.4;
      if (numericalReadout !== undefined) {
        let sign = '';
        let textColor;
        if (charge > 0) {
          sign = '+';
          textColor = PhetColorScheme.RED_COLORBLIND;
        } else if (charge < 0) {
          textColor = 'blue';
        } else {
          textColor = 'black';
        }
        readoutText.fill = textColor;
        const newText = sign + charge;
        if (newText !== readoutText.string) {
          readoutText.string = newText;

          // reposition as necessary.
          readoutText.resetTransform();
          readoutText.scale(Math.min(Math.min(readoutSize.width * 0.8 / readoutText.width, readoutSize.height * 0.8 / readoutText.height), 1));
          readoutText.center = new Vector2(readoutSize.width / 2, readoutSize.height / 2);
        }
      }
    });
    this.mutate(options);
  }
}
buildAnAtom.register('ChargeMeter', ChargeMeter);
export default ChargeMeter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiVmVjdG9yMiIsIlNoYXBlIiwibWVyZ2UiLCJBcnJvd05vZGUiLCJQaGV0Q29sb3JTY2hlbWUiLCJQaGV0Rm9udCIsIkxpbmVhckdyYWRpZW50IiwiTm9kZSIsIlBhdGgiLCJSZWN0YW5nbGUiLCJUZXh0IiwiYnVpbGRBbkF0b20iLCJXSURUSCIsIl9NQVhfQ0hBUkdFIiwiQ0hBUkdFX1NZTUJPTF9XSURUSCIsIlNZTUJPTF9MSU5FX1dJRFRIIiwiQ2hhcmdlTWV0ZXIiLCJjb25zdHJ1Y3RvciIsIm51bWJlckF0b20iLCJ0YW5kZW0iLCJvcHRpb25zIiwic2hvd051bWVyaWNhbFJlYWRvdXQiLCJiYWNrZ3JvdW5kSGVpZ2h0IiwiYmFja2dyb3VuZCIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJjcmVhdGVUYW5kZW0iLCJhZGRDaGlsZCIsIm1ldGVyV2luZG93U2hhcGUiLCJtZXRlcldpbmRvd1dpZHRoIiwid2lkdGgiLCJtZXRlcldpbmRvd0hlaWdodCIsIm1vdmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJjbG9zZSIsIm1ldGVyV2luZG93IiwiYWRkQ29sb3JTdG9wIiwiY2VudGVyWCIsInRvcCIsInNoYWRvd09mZnNldCIsInBsdXNTaGFwZSIsImxpbmVUbyIsInBsdXNTeW1ib2wiLCJjZW50ZXJZIiwiY2VudGVyIiwiaGVpZ2h0IiwibWludXNTaGFwZSIsIm1pbnVzU3ltYm9sIiwibWV0ZXJOZWVkbGVMYXllciIsIngiLCJ5IiwiYm90dG9tIiwic2V0U2NhbGVNYWduaXR1ZGUiLCJtZXRlck5lZWRsZSIsImhlYWRIZWlnaHQiLCJoZWFkV2lkdGgiLCJ0YWlsV2lkdGgiLCJudW1lcmljYWxSZWFkb3V0IiwicmVhZG91dFRleHQiLCJyZWFkb3V0U2l6ZSIsImZvbnQiLCJzaXplIiwid2VpZ2h0IiwiY2hhcmdlUHJvcGVydHkiLCJsaW5rIiwiY2hhcmdlIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJ1bmRlZmluZWQiLCJzaWduIiwidGV4dENvbG9yIiwiUkVEX0NPTE9SQkxJTkQiLCJuZXdUZXh0Iiwic3RyaW5nIiwicmVzZXRUcmFuc2Zvcm0iLCJzY2FsZSIsIm1pbiIsIm11dGF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ2hhcmdlTWV0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTMtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVHlwZSB0aGF0IHJlcHJlc2VudHMgYSBjaGFuZ2UgbWV0ZXIgdGhhdCBkaXNwbGF5cyB0aGUgY2hhcmdlIG9mIHRoZVxyXG4gKiBwcm92aWRlZCBhdG9tLlxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgQXJyb3dOb2RlIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9BcnJvd05vZGUuanMnO1xyXG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Q29sb3JTY2hlbWUuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQsIE5vZGUsIFBhdGgsIFJlY3RhbmdsZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBidWlsZEFuQXRvbSBmcm9tICcuLi8uLi9idWlsZEFuQXRvbS5qcyc7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgV0lEVEggPSA3MDsgLy8gSW4gc2NyZWVuIGNvb3Jkcywgd2hpY2ggYXJlIHJvdWdobHkgcGl4ZWxzLlxyXG5jb25zdCBfTUFYX0NIQVJHRSA9IDEwO1xyXG5jb25zdCBDSEFSR0VfU1lNQk9MX1dJRFRIID0gNzsgLy8gSW4gc2NyZWVuIGNvb3Jkcywgd2hpY2ggYXJlIHJvdWdobHkgcGl4ZWxzLlxyXG5jb25zdCBTWU1CT0xfTElORV9XSURUSCA9IDI7IC8vIEluIHNjcmVlbiBjb29yZHMsIHdoaWNoIGFyZSByb3VnaGx5IHBpeGVscy5cclxuXHJcbmNsYXNzIENoYXJnZU1ldGVyIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyQXRvbX0gbnVtYmVyQXRvbVxyXG4gICAqIEBwYXJhbSB7VGFuZGVtfSB0YW5kZW1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG51bWJlckF0b20sIHRhbmRlbSwgb3B0aW9ucyApIHtcclxuXHJcbiAgICBvcHRpb25zID0gbWVyZ2UoIHsgc2hvd051bWVyaWNhbFJlYWRvdXQ6IHRydWUsIHRhbmRlbTogdGFuZGVtIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgYmFja2dyb3VuZC5cclxuICAgIGNvbnN0IGJhY2tncm91bmRIZWlnaHQgPSBvcHRpb25zLnNob3dOdW1lcmljYWxSZWFkb3V0ID8gV0lEVEggKiAwLjkgOiBXSURUSCAqIDAuNTU7IC8vIE11bHRpcGxpZXJzIGFyYml0cmFyeSB0byBnZXQgZGVzaXJlZCBhc3BlY3QgcmF0aW9zLlxyXG4gICAgY29uc3QgYmFja2dyb3VuZCA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIFdJRFRILCBiYWNrZ3JvdW5kSGVpZ2h0LCA3LCA3LCB7XHJcbiAgICAgIGZpbGw6ICdyZ2IoIDIxMCwgMjEwLCAyMTAgKScsXHJcbiAgICAgIHN0cm9rZTogJ2dyYXknLFxyXG4gICAgICBsaW5lV2lkdGg6IDEuMCxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYmFja2dyb3VuZCcgKVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggYmFja2dyb3VuZCApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgbWV0ZXIgd2luZG93LlxyXG4gICAgY29uc3QgbWV0ZXJXaW5kb3dTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gICAgY29uc3QgbWV0ZXJXaW5kb3dXaWR0aCA9IGJhY2tncm91bmQud2lkdGggKiAwLjg7XHJcbiAgICBjb25zdCBtZXRlcldpbmRvd0hlaWdodCA9IG1ldGVyV2luZG93V2lkdGggKiAwLjU7IC8vIEVtcGlyaWNhbGx5IGNob3NlbiwgY2hhbmdlIGlmIG5lZWRlZC5cclxuICAgIG1ldGVyV2luZG93U2hhcGUubW92ZVRvKCAwLCBtZXRlcldpbmRvd0hlaWdodCApO1xyXG4gICAgbWV0ZXJXaW5kb3dTaGFwZS5xdWFkcmF0aWNDdXJ2ZVRvKCAwLCAwLCBtZXRlcldpbmRvd1dpZHRoIC8gMiwgMCApO1xyXG4gICAgbWV0ZXJXaW5kb3dTaGFwZS5xdWFkcmF0aWNDdXJ2ZVRvKCBtZXRlcldpbmRvd1dpZHRoLCAwLCBtZXRlcldpbmRvd1dpZHRoLCBtZXRlcldpbmRvd0hlaWdodCApO1xyXG4gICAgbWV0ZXJXaW5kb3dTaGFwZS5jbG9zZSgpO1xyXG4gICAgY29uc3QgbWV0ZXJXaW5kb3cgPSBuZXcgUGF0aCggbWV0ZXJXaW5kb3dTaGFwZSwge1xyXG4gICAgICBzdHJva2U6ICdncmF5JyxcclxuICAgICAgbGluZVdpZHRoOiAyLFxyXG4gICAgICBmaWxsOiBuZXcgTGluZWFyR3JhZGllbnQoIDAsIDAsIG1ldGVyV2luZG93V2lkdGgsIDAgKVxyXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDAsICdyZ2IoIDAsIDAsIDI1NSApJyApXHJcbiAgICAgICAgLmFkZENvbG9yU3RvcCggMC41LCAnd2hpdGUnIClcclxuICAgICAgICAuYWRkQ29sb3JTdG9wKCAxLCAncmdiKCAyNTUsIDAsIDAgKScgKSxcclxuICAgICAgY2VudGVyWDogYmFja2dyb3VuZC5jZW50ZXJYLFxyXG4gICAgICB0b3A6IDMsIC8vIEFkanVzdCBhcyBuZWVkZWQgdG8gd29yayB3aXRoIGJhY2tncm91bmQgZ3JhcGhpY3MuXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21ldGVyV2luZG93JyApXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCBtZXRlcldpbmRvdyApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgcGx1cyBzeW1ib2wsIHdoaWNoIHdpbGwgYmUgZHJhd24gKG5vdCBkb25lIGFzIGEgY2hhcmFjdGVyKS5cclxuICAgIGNvbnN0IHNoYWRvd09mZnNldCA9IDAuNTsgLy8gSW4gcGl4ZWxzLlxyXG4gICAgY29uc3QgcGx1c1NoYXBlID0gbmV3IFNoYXBlKCkubW92ZVRvKCAtQ0hBUkdFX1NZTUJPTF9XSURUSCAvIDIsIDAgKS5saW5lVG8oIENIQVJHRV9TWU1CT0xfV0lEVEggLyAyLCAwICkubW92ZVRvKCAwLCAtQ0hBUkdFX1NZTUJPTF9XSURUSCAvIDIgKS5saW5lVG8oIDAsIENIQVJHRV9TWU1CT0xfV0lEVEggLyAyICk7XHJcbiAgICBjb25zdCBwbHVzU3ltYm9sID0gbmV3IE5vZGUoIHsgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncGx1c1N5bWJvbCcgKSB9ICk7XHJcbiAgICBwbHVzU3ltYm9sLmFkZENoaWxkKCBuZXcgUGF0aCggcGx1c1NoYXBlLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogU1lNQk9MX0xJTkVfV0lEVEgsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgY2VudGVyWDogc2hhZG93T2Zmc2V0LFxyXG4gICAgICBjZW50ZXJZOiBzaGFkb3dPZmZzZXQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3BsdXNTeW1ib2xTaGFkb3cnIClcclxuICAgIH0gKSApO1xyXG4gICAgcGx1c1N5bWJvbC5hZGRDaGlsZCggbmV3IFBhdGgoIHBsdXNTaGFwZSwge1xyXG4gICAgICBsaW5lV2lkdGg6IFNZTUJPTF9MSU5FX1dJRFRILFxyXG4gICAgICBzdHJva2U6ICdyZ2IoMjU1LCAwLCAwICknLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdwbHVzU3ltYm9sTWFpblNoYXBlJyApXHJcbiAgICB9ICkgKTtcclxuICAgIHBsdXNTeW1ib2wuY2VudGVyID0gbmV3IFZlY3RvcjIoIG1ldGVyV2luZG93LndpZHRoICogMC43LCBtZXRlcldpbmRvdy5oZWlnaHQgKiAwLjUgKTtcclxuICAgIG1ldGVyV2luZG93LmFkZENoaWxkKCBwbHVzU3ltYm9sICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBtaW51cyBzeW1ib2wsIHdoaWNoIHdpbGwgYmUgZHJhd24gKG5vdCBkb25lIGFzIGEgY2hhcmFjdGVyKS5cclxuICAgIGNvbnN0IG1pbnVzU2hhcGUgPSBuZXcgU2hhcGUoKS5tb3ZlVG8oIC1DSEFSR0VfU1lNQk9MX1dJRFRIIC8gMiwgMCApLmxpbmVUbyggQ0hBUkdFX1NZTUJPTF9XSURUSCAvIDIsIDAgKTtcclxuICAgIGNvbnN0IG1pbnVzU3ltYm9sID0gbmV3IE5vZGUoIHsgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbWludXNTeW1ib2wnICkgfSApO1xyXG4gICAgbWludXNTeW1ib2wuYWRkQ2hpbGQoIG5ldyBQYXRoKCBtaW51c1NoYXBlLCB7XHJcbiAgICAgIGxpbmVXaWR0aDogU1lNQk9MX0xJTkVfV0lEVEgsXHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgY2VudGVyWDogc2hhZG93T2Zmc2V0LFxyXG4gICAgICBjZW50ZXJZOiBzaGFkb3dPZmZzZXQsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21pbnVzU3ltYm9sU2hhZG93JyApXHJcbiAgICB9ICkgKTtcclxuICAgIG1pbnVzU3ltYm9sLmFkZENoaWxkKCBuZXcgUGF0aCggbWludXNTaGFwZSwge1xyXG4gICAgICBsaW5lV2lkdGg6IFNZTUJPTF9MSU5FX1dJRFRILFxyXG4gICAgICBzdHJva2U6ICdyZ2IoMCwgMCwgMjU1ICknLFxyXG4gICAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdtaW51c1N5bWJvbE1haW5TaGFwZScgKVxyXG4gICAgfSApICk7XHJcbiAgICBtaW51c1N5bWJvbC5jZW50ZXIgPSBuZXcgVmVjdG9yMiggbWV0ZXJXaW5kb3cud2lkdGggKiAwLjMsIG1ldGVyV2luZG93LmhlaWdodCAqIDAuNSApO1xyXG4gICAgbWV0ZXJXaW5kb3cuYWRkQ2hpbGQoIG1pbnVzU3ltYm9sICk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBsYXllciB0aGF0IGNvbnRhaW5zIHRoZSBtZXRlciBsaW5lLlxyXG4gICAgY29uc3QgbWV0ZXJOZWVkbGVMYXllciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIHg6IG1ldGVyV2luZG93LmNlbnRlclgsXHJcbiAgICAgIHk6IG1ldGVyV2luZG93LmJvdHRvbSAtIDMsXHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ21ldGVyTmVlZGxlV2luZG93JyApXHJcbiAgICB9ICk7XHJcbiAgICBtZXRlck5lZWRsZUxheWVyLnNldFNjYWxlTWFnbml0dWRlKCAxLCAwLjkgKTsgLy8gbWF0Y2ggcHJldmlvdXMgc2NhbGluZyBiZWhhdmlvclxyXG4gICAgY29uc3QgbWV0ZXJOZWVkbGUgPSBuZXcgQXJyb3dOb2RlKFxyXG4gICAgICAwLCAwLCAvLyB0aXAgYXQgb3JpZ2luLCBzbyB3ZSBjYW4gcm90YXRlIGFyb3VuZCBpdFxyXG4gICAgICAwLCAzIC0gbWV0ZXJXaW5kb3dIZWlnaHQsIHtcclxuICAgICAgICBoZWFkSGVpZ2h0OiA3LFxyXG4gICAgICAgIGhlYWRXaWR0aDogNSxcclxuICAgICAgICB0YWlsV2lkdGg6IDEsXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnbWV0ZXJOZWVkbGUnIClcclxuICAgICAgfSApO1xyXG4gICAgbWV0ZXJOZWVkbGVMYXllci5hZGRDaGlsZCggbWV0ZXJOZWVkbGUgKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIG1ldGVyTmVlZGxlTGF5ZXIgKTtcclxuXHJcbiAgICBsZXQgbnVtZXJpY2FsUmVhZG91dDtcclxuICAgIGxldCByZWFkb3V0VGV4dDtcclxuXHJcbiAgICAvLyBBZGQgdGhlIG51bWVyaWNhbCBkaXNwbGF5LCBpZiBwcmVzZW50LlxyXG4gICAgY29uc3QgcmVhZG91dFNpemUgPSBuZXcgRGltZW5zaW9uMiggV0lEVEggKiAwLjYsICggYmFja2dyb3VuZC5oZWlnaHQgLSBtZXRlcldpbmRvdy5oZWlnaHQgKSAqIDAuNiApO1xyXG4gICAgaWYgKCBvcHRpb25zLnNob3dOdW1lcmljYWxSZWFkb3V0ICkge1xyXG4gICAgICBudW1lcmljYWxSZWFkb3V0ID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgcmVhZG91dFNpemUud2lkdGgsIHJlYWRvdXRTaXplLmhlaWdodCwgMywgMywge1xyXG4gICAgICAgIGZpbGw6ICd3aGl0ZScsXHJcbiAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgICB0b3A6IG1ldGVyV2luZG93LmJvdHRvbSArIDMsXHJcbiAgICAgICAgY2VudGVyWDogYmFja2dyb3VuZC5jZW50ZXJYLFxyXG4gICAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ251bWVyaWNhbFJlYWRvdXQnIClcclxuICAgICAgfSApO1xyXG4gICAgICB0aGlzLmFkZENoaWxkKCBudW1lcmljYWxSZWFkb3V0ICk7XHJcblxyXG4gICAgICAvLyBDcmVhdGVkIHdpdGggcGxhY2Vob2xkZXIgZW1wdHktc3RyaW5nLCB3aGljaCB3aWxsIGJlIGNoYW5nZWQuXHJcbiAgICAgIHJlYWRvdXRUZXh0ID0gbmV3IFRleHQoICcnLCB7XHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDI0LCB3ZWlnaHQ6ICdib2xkJyB9ICksXHJcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAncmVhZG91dFRleHQnIClcclxuICAgICAgfSApO1xyXG4gICAgICBudW1lcmljYWxSZWFkb3V0LmFkZENoaWxkKCByZWFkb3V0VGV4dCApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCB0aGUgbGlzdGVuZXJzIHRoYXQgd2lsbCB1cGRhdGUgdGhlIG1ldGVyIGFuZCBudW1lcmljYWwgZGlzcGxheSB3aGVuIHRoZSBjaGFyZ2UgY2hhbmdlcy5cclxuICAgIG51bWJlckF0b20uY2hhcmdlUHJvcGVydHkubGluayggY2hhcmdlID0+IHtcclxuICAgICAgbWV0ZXJOZWVkbGUucm90YXRpb24gPSAoIGNoYXJnZSAvIF9NQVhfQ0hBUkdFICkgKiBNYXRoLlBJICogMC40O1xyXG5cclxuICAgICAgaWYgKCBudW1lcmljYWxSZWFkb3V0ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgbGV0IHNpZ24gPSAnJztcclxuICAgICAgICBsZXQgdGV4dENvbG9yO1xyXG4gICAgICAgIGlmICggY2hhcmdlID4gMCApIHtcclxuICAgICAgICAgIHNpZ24gPSAnKyc7XHJcbiAgICAgICAgICB0ZXh0Q29sb3IgPSBQaGV0Q29sb3JTY2hlbWUuUkVEX0NPTE9SQkxJTkQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCBjaGFyZ2UgPCAwICkge1xyXG4gICAgICAgICAgdGV4dENvbG9yID0gJ2JsdWUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRleHRDb2xvciA9ICdibGFjayc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlYWRvdXRUZXh0LmZpbGwgPSB0ZXh0Q29sb3I7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1RleHQgPSBzaWduICsgY2hhcmdlO1xyXG4gICAgICAgIGlmICggbmV3VGV4dCAhPT0gcmVhZG91dFRleHQuc3RyaW5nICkge1xyXG4gICAgICAgICAgcmVhZG91dFRleHQuc3RyaW5nID0gbmV3VGV4dDtcclxuXHJcbiAgICAgICAgICAvLyByZXBvc2l0aW9uIGFzIG5lY2Vzc2FyeS5cclxuICAgICAgICAgIHJlYWRvdXRUZXh0LnJlc2V0VHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICByZWFkb3V0VGV4dC5zY2FsZSggTWF0aC5taW4oIE1hdGgubWluKCByZWFkb3V0U2l6ZS53aWR0aCAqIDAuOCAvIHJlYWRvdXRUZXh0LndpZHRoLCByZWFkb3V0U2l6ZS5oZWlnaHQgKiAwLjggLyByZWFkb3V0VGV4dC5oZWlnaHQgKSwgMSApICk7XHJcbiAgICAgICAgICByZWFkb3V0VGV4dC5jZW50ZXIgPSBuZXcgVmVjdG9yMiggcmVhZG91dFNpemUud2lkdGggLyAyLCByZWFkb3V0U2l6ZS5oZWlnaHQgLyAyICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmJ1aWxkQW5BdG9tLnJlZ2lzdGVyKCAnQ2hhcmdlTWV0ZXInLCBDaGFyZ2VNZXRlciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhcmdlTWV0ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sa0NBQWtDO0FBQ3pELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsS0FBSyxRQUFRLGdDQUFnQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELE9BQU9DLFNBQVMsTUFBTSwwQ0FBMEM7QUFDaEUsT0FBT0MsZUFBZSxNQUFNLGdEQUFnRDtBQUM1RSxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELFNBQVNDLGNBQWMsRUFBRUMs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