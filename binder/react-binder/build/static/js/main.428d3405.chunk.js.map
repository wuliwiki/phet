{"version":3,"sources":["pages/panel.js","pages/componentsBySim.js","pages/simsByComponent.js","pages/index/index.js","serviceWorker.js","index.js"],"names":["Panel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","elements","newProps","setState","elementsToRender","push","react_default","a","createElement","forEach","element","className","createPanel","React","Component","ComponentsBySim","sims","_this2","simList","_loop","key","sim","simName","onClick","loadComponentsForSim","name","simsPanel","panel_Panel","components","createSimList","SimsByComponent","componentList","component","componentName","loadSimsForComponent","_this3","createComponentList","IndexPage","selectedButtonId","selectedPage","fetch","process","then","response","json","data","simsByComponent","keys","map","simsByComponent_SimsByComponent","componentsBySim","componentsBySim_ComponentsBySim","firstButtonToSelect","selectPage","buttonId","NavButton","concat","selectClass","id","label","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","index_IndexPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.428d3405.chunk.js","sourcesContent":["// Copyright 2019, University of Colorado Boulder\n\n/**\n * Displays a title and list of elements\n *\n * @author Chris Klusendorf\n **/\n\n// imports\nimport React from 'react';\nimport './common.css';\n\nexport default class Panel extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      // eslint-disable-next-line react/prop-types\n      title: props.title,\n      // eslint-disable-next-line react/prop-types\n      elements: props.elements\n    };\n  }\n\n  componentWillReceiveProps( newProps ) {\n    if ( newProps.title !== this.state.title ) {\n      this.setState( {\n        title: newProps.title,\n        elements: newProps.elements\n      } );\n    }\n  }\n\n  createPanel() {\n    const elements = this.state.elements;\n    const elementsToRender = [];\n\n    elementsToRender.push( <h3>{this.state.title}</h3> );\n    elements.forEach( element => {\n      elementsToRender.push( <p>{element}</p> );\n    } );\n\n    return elementsToRender;\n  }\n\n  render() {\n    return (\n      <div className='panel'>\n        {this.createPanel()}\n      </div>\n    );\n  }\n}","// Copyright 2019, University of Colorado Boulder\n\n/**\n * Displays a list of sims, each of which can be expanded to list the common components that the sim uses.\n *\n * @author Chris Klusendorf\n **/\n\n// imports\nimport React from 'react';\nimport './common.css';\nimport Panel from \"./panel\";\n\nexport default class ComponentsBySim extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      // eslint-disable-next-line react/prop-types\n      sims: props.sims\n    };\n  }\n\n  createSimList() {\n    const sims = this.state.sims;\n    const simList = [];\n\n    for ( const key in sims ) {\n      const sim = sims[ key ];\n      const simName = <button className='link-button' onClick={() => this.loadComponentsForSim( sim.name )}>\n        {sim.name}\n      </button>;\n\n      simList.push( simName );\n    }\n\n    return simList;\n  }\n\n  loadComponentsForSim( simName ) {\n    const sims = this.state.sims;\n\n    for ( const key in sims ) {\n      const sim = sims[ key ];\n      if ( sim.name === simName ) {\n        this.setState( {\n          simsPanel: <Panel title={simName} elements={sim.components}/>\n        } );\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div className='list'>\n          {this.createSimList()}\n        </div>\n        {this.state.simsPanel}\n      </div>\n    );\n  }\n}","// Copyright 2019, University of Colorado Boulder\n\n/**\n * Displays a list of common components, each of which can be expanded to list the sims that the component uses.\n *\n * @author Chris Klusendorf\n **/\n\n// imports\nimport React from 'react';\nimport Panel from './panel';\nimport './common.css';\n\nexport default class SimsByComponent extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      // eslint-disable-next-line react/prop-types\n      components: props.components,\n      simsPanel: null\n    };\n  }\n\n  createComponentList() {\n    const components = this.state.components;\n    const componentList = [];\n\n    components.forEach( component => {\n      const componentName = <button className='link-button' onClick={() => this.loadSimsForComponent( component.name )}>\n        {component.name}\n      </button>;\n\n      componentList.push( componentName );\n    } );\n\n    return componentList;\n  }\n\n  loadSimsForComponent( componentName ) {\n    const components = this.state.components;\n\n    components.forEach( component => {\n      if ( component.name === componentName ) {\n        this.setState( {\n          simsPanel: <Panel title={componentName} elements={component.sims}/>\n        } );\n      }\n    } );\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <div className='list'>\n          {this.createComponentList()}\n        </div>\n        {this.state.simsPanel}\n      </div>\n    );\n  }\n}","// Copyright 2019, University of Colorado Boulder\n\n/**\n * PhET Binder Index Page\n *\n * @author Chris Klusendorf\n **/\n\n// imports\nimport React from 'react';\nimport './index.css';\nimport ComponentsBySim from '../componentsBySim';\nimport SimsByComponent from '../simsByComponent';\n\nexport default class IndexPage extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      selectedButtonId: null,\n      selectedPage: null\n    };\n\n    fetch( process.env.PUBLIC_URL + '/binderjson.json' )\n      .then( response => response.json() )\n      .then( data => {\n        const components = data.components;\n        const sims = data.sims;\n\n        // organize the data for the \"sims by component\" view\n        const simsByComponent = Object.keys( components ).map( component => {\n          return { name: component, sims: Object.keys( components[ component ] ) };\n        } );\n\n        this.setState( {\n          simsByComponent: <SimsByComponent components={simsByComponent}/>,\n          componentsBySim: <ComponentsBySim sims={sims} />\n        } );\n\n        const firstButtonToSelect = this.state.selectedButtonId || 'simsByComponent';\n        this.selectPage( firstButtonToSelect );\n      } );\n  }\n\n  selectClass( buttonId ) {\n    return this.state.selectedButtonId === buttonId ? 'selected' : '';\n  }\n\n  selectPage( buttonId ) {\n    this.setState( {\n      selectedButtonId: buttonId,\n      selectedPage: this.state[ buttonId ]\n    } );\n  }\n\n  render() {\n\n    const NavButton = props => {\n      return <button className={`nav-button ${this.selectClass( props.id )}`}\n                     onClick={() => this.selectPage( props.id )}>\n        {props.label}\n      </button>\n    };\n\n    return (\n      <div id='index-page'>\n\n        <div id='side-nav'>\n\n          <div className='title-container'>\n            <img src={process.env.PUBLIC_URL + '/img/phet.png'} className='title-image' alt='PhET'/>\n            <h1 className='title-text'>Binder</h1>\n          </div>\n\n          <div className='nav-buttons'>\n            <NavButton id='simsByComponent' label='SIMS BY COMPONENT'/>\n            <NavButton id='componentsBySim' label='COMPONENTS BY SIM'/>\n          </div>\n\n        </div>\n\n        <div id='selected-page'>\n          {this.state.selectedPage}\n        </div>\n\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IndexPage from './pages/index/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<IndexPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}